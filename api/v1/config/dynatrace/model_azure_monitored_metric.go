/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AzureMonitoredMetric A metric of supporting service to be monitored.
type AzureMonitoredMetric struct {
	// The name of the metric of the supporting service.
	Name *string `json:"name,omitempty"`
	// A list of metric's dimensions names. It must include all the recommended dimensions.
	Dimensions *[]string `json:"dimensions,omitempty"`
}

// NewAzureMonitoredMetric instantiates a new AzureMonitoredMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureMonitoredMetric() *AzureMonitoredMetric {
	this := AzureMonitoredMetric{}
	return &this
}

// NewAzureMonitoredMetricWithDefaults instantiates a new AzureMonitoredMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureMonitoredMetricWithDefaults() *AzureMonitoredMetric {
	this := AzureMonitoredMetric{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AzureMonitoredMetric) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMonitoredMetric) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AzureMonitoredMetric) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AzureMonitoredMetric) SetName(v string) {
	o.Name = &v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *AzureMonitoredMetric) GetDimensions() []string {
	if o == nil || o.Dimensions == nil {
		var ret []string
		return ret
	}
	return *o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureMonitoredMetric) GetDimensionsOk() (*[]string, bool) {
	if o == nil || o.Dimensions == nil {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *AzureMonitoredMetric) HasDimensions() bool {
	if o != nil && o.Dimensions != nil {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given []string and assigns it to the Dimensions field.
func (o *AzureMonitoredMetric) SetDimensions(v []string) {
	o.Dimensions = &v
}

func (o AzureMonitoredMetric) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Dimensions != nil {
		toSerialize["dimensions"] = o.Dimensions
	}
	return json.Marshal(toSerialize)
}

type NullableAzureMonitoredMetric struct {
	value *AzureMonitoredMetric
	isSet bool
}

func (v NullableAzureMonitoredMetric) Get() *AzureMonitoredMetric {
	return v.value
}

func (v *NullableAzureMonitoredMetric) Set(val *AzureMonitoredMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureMonitoredMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureMonitoredMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureMonitoredMetric(val *AzureMonitoredMetric) *NullableAzureMonitoredMetric {
	return &NullableAzureMonitoredMetric{value: val, isSet: true}
}

func (v NullableAzureMonitoredMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureMonitoredMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


