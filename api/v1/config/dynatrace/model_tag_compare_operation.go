/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TagCompareOperation The condition of the `TAG` type.   The condition checks if the process group of the potential service is tagged with a specific tag.
type TagCompareOperation struct {
	CompareOperation
	// If `true` ignores the tag values and only validates that the tag key is matching. Defaults to `false`.
	CompareKeyOnly *bool `json:"compareKeyOnly,omitempty"`
	// The value to compare to.   If several values are specified, the OR logic applies.
	Tags *[]TagInfo `json:"tags,omitempty"`
}

// NewTagCompareOperation instantiates a new TagCompareOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagCompareOperation() *TagCompareOperation {
	this := TagCompareOperation{}
	return &this
}

// NewTagCompareOperationWithDefaults instantiates a new TagCompareOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagCompareOperationWithDefaults() *TagCompareOperation {
	this := TagCompareOperation{}
	return &this
}

// GetCompareKeyOnly returns the CompareKeyOnly field value if set, zero value otherwise.
func (o *TagCompareOperation) GetCompareKeyOnly() bool {
	if o == nil || o.CompareKeyOnly == nil {
		var ret bool
		return ret
	}
	return *o.CompareKeyOnly
}

// GetCompareKeyOnlyOk returns a tuple with the CompareKeyOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagCompareOperation) GetCompareKeyOnlyOk() (*bool, bool) {
	if o == nil || o.CompareKeyOnly == nil {
		return nil, false
	}
	return o.CompareKeyOnly, true
}

// HasCompareKeyOnly returns a boolean if a field has been set.
func (o *TagCompareOperation) HasCompareKeyOnly() bool {
	if o != nil && o.CompareKeyOnly != nil {
		return true
	}

	return false
}

// SetCompareKeyOnly gets a reference to the given bool and assigns it to the CompareKeyOnly field.
func (o *TagCompareOperation) SetCompareKeyOnly(v bool) {
	o.CompareKeyOnly = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TagCompareOperation) GetTags() []TagInfo {
	if o == nil || o.Tags == nil {
		var ret []TagInfo
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagCompareOperation) GetTagsOk() (*[]TagInfo, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TagCompareOperation) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagInfo and assigns it to the Tags field.
func (o *TagCompareOperation) SetTags(v []TagInfo) {
	o.Tags = &v
}

func (o TagCompareOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedCompareOperation, errCompareOperation := json.Marshal(o.CompareOperation)
	if errCompareOperation != nil {
		return []byte{}, errCompareOperation
	}
	errCompareOperation = json.Unmarshal([]byte(serializedCompareOperation), &toSerialize)
	if errCompareOperation != nil {
		return []byte{}, errCompareOperation
	}
	if o.CompareKeyOnly != nil {
		toSerialize["compareKeyOnly"] = o.CompareKeyOnly
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableTagCompareOperation struct {
	value *TagCompareOperation
	isSet bool
}

func (v NullableTagCompareOperation) Get() *TagCompareOperation {
	return v.value
}

func (v *NullableTagCompareOperation) Set(val *TagCompareOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableTagCompareOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableTagCompareOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagCompareOperation(val *TagCompareOperation) *NullableTagCompareOperation {
	return &NullableTagCompareOperation{value: val, isSet: true}
}

func (v NullableTagCompareOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagCompareOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


