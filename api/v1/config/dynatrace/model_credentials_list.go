/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CredentialsList A list of credentials sets for Synthetic monitors.
type CredentialsList struct {
	// A list of credentials sets for Synthetic monitors.
	Credentials []CredentialsResponseElement `json:"credentials"`
}

// NewCredentialsList instantiates a new CredentialsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialsList(credentials []CredentialsResponseElement, ) *CredentialsList {
	this := CredentialsList{}
	this.Credentials = credentials
	return &this
}

// NewCredentialsListWithDefaults instantiates a new CredentialsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialsListWithDefaults() *CredentialsList {
	this := CredentialsList{}
	return &this
}

// GetCredentials returns the Credentials field value
func (o *CredentialsList) GetCredentials() []CredentialsResponseElement {
	if o == nil  {
		var ret []CredentialsResponseElement
		return ret
	}

	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value
// and a boolean to check if the value has been set.
func (o *CredentialsList) GetCredentialsOk() (*[]CredentialsResponseElement, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Credentials, true
}

// SetCredentials sets field value
func (o *CredentialsList) SetCredentials(v []CredentialsResponseElement) {
	o.Credentials = v
}

func (o CredentialsList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["credentials"] = o.Credentials
	}
	return json.Marshal(toSerialize)
}

type NullableCredentialsList struct {
	value *CredentialsList
	isSet bool
}

func (v NullableCredentialsList) Get() *CredentialsList {
	return v.value
}

func (v *NullableCredentialsList) Set(val *CredentialsList) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialsList) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialsList(val *CredentialsList) *NullableCredentialsList {
	return &NullableCredentialsList{value: val, isSet: true}
}

func (v NullableCredentialsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


