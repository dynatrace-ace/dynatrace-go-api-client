/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UserPasswordCredentialsAllOf struct for UserPasswordCredentialsAllOf
type UserPasswordCredentialsAllOf struct {
	// The username of the credentials set.
	User *string `json:"user,omitempty"`
	// The password of the credential.
	Password *string `json:"password,omitempty"`
}

// NewUserPasswordCredentialsAllOf instantiates a new UserPasswordCredentialsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPasswordCredentialsAllOf() *UserPasswordCredentialsAllOf {
	this := UserPasswordCredentialsAllOf{}
	return &this
}

// NewUserPasswordCredentialsAllOfWithDefaults instantiates a new UserPasswordCredentialsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPasswordCredentialsAllOfWithDefaults() *UserPasswordCredentialsAllOf {
	this := UserPasswordCredentialsAllOf{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *UserPasswordCredentialsAllOf) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPasswordCredentialsAllOf) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *UserPasswordCredentialsAllOf) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *UserPasswordCredentialsAllOf) SetUser(v string) {
	o.User = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserPasswordCredentialsAllOf) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPasswordCredentialsAllOf) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserPasswordCredentialsAllOf) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserPasswordCredentialsAllOf) SetPassword(v string) {
	o.Password = &v
}

func (o UserPasswordCredentialsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableUserPasswordCredentialsAllOf struct {
	value *UserPasswordCredentialsAllOf
	isSet bool
}

func (v NullableUserPasswordCredentialsAllOf) Get() *UserPasswordCredentialsAllOf {
	return v.value
}

func (v *NullableUserPasswordCredentialsAllOf) Set(val *UserPasswordCredentialsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPasswordCredentialsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPasswordCredentialsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPasswordCredentialsAllOf(val *UserPasswordCredentialsAllOf) *NullableUserPasswordCredentialsAllOf {
	return &NullableUserPasswordCredentialsAllOf{value: val, isSet: true}
}

func (v NullableUserPasswordCredentialsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPasswordCredentialsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


