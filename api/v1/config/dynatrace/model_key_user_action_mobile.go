/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// KeyUserActionMobile A list of key actions in an application.
type KeyUserActionMobile struct {
	// The name of the key use action.
	Name *string `json:"name,omitempty"`
}

// NewKeyUserActionMobile instantiates a new KeyUserActionMobile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyUserActionMobile() *KeyUserActionMobile {
	this := KeyUserActionMobile{}
	return &this
}

// NewKeyUserActionMobileWithDefaults instantiates a new KeyUserActionMobile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyUserActionMobileWithDefaults() *KeyUserActionMobile {
	this := KeyUserActionMobile{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *KeyUserActionMobile) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUserActionMobile) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *KeyUserActionMobile) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *KeyUserActionMobile) SetName(v string) {
	o.Name = &v
}

func (o KeyUserActionMobile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableKeyUserActionMobile struct {
	value *KeyUserActionMobile
	isSet bool
}

func (v NullableKeyUserActionMobile) Get() *KeyUserActionMobile {
	return v.value
}

func (v *NullableKeyUserActionMobile) Set(val *KeyUserActionMobile) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyUserActionMobile) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyUserActionMobile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyUserActionMobile(val *KeyUserActionMobile) *NullableKeyUserActionMobile {
	return &NullableKeyUserActionMobile{value: val, isSet: true}
}

func (v NullableKeyUserActionMobile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyUserActionMobile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


