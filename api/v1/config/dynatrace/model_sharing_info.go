/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SharingInfo Sharing configuration of a dashboard.
type SharingInfo struct {
	// If `true`, the dashboard is shared via link and authenticated users with the link can view.
	LinkShared *bool `json:"linkShared,omitempty"`
	// If `true`, the dashboard is published to anyone on this environment.
	Published *bool `json:"published,omitempty"`
}

// NewSharingInfo instantiates a new SharingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharingInfo() *SharingInfo {
	this := SharingInfo{}
	return &this
}

// NewSharingInfoWithDefaults instantiates a new SharingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharingInfoWithDefaults() *SharingInfo {
	this := SharingInfo{}
	return &this
}

// GetLinkShared returns the LinkShared field value if set, zero value otherwise.
func (o *SharingInfo) GetLinkShared() bool {
	if o == nil || o.LinkShared == nil {
		var ret bool
		return ret
	}
	return *o.LinkShared
}

// GetLinkSharedOk returns a tuple with the LinkShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingInfo) GetLinkSharedOk() (*bool, bool) {
	if o == nil || o.LinkShared == nil {
		return nil, false
	}
	return o.LinkShared, true
}

// HasLinkShared returns a boolean if a field has been set.
func (o *SharingInfo) HasLinkShared() bool {
	if o != nil && o.LinkShared != nil {
		return true
	}

	return false
}

// SetLinkShared gets a reference to the given bool and assigns it to the LinkShared field.
func (o *SharingInfo) SetLinkShared(v bool) {
	o.LinkShared = &v
}

// GetPublished returns the Published field value if set, zero value otherwise.
func (o *SharingInfo) GetPublished() bool {
	if o == nil || o.Published == nil {
		var ret bool
		return ret
	}
	return *o.Published
}

// GetPublishedOk returns a tuple with the Published field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharingInfo) GetPublishedOk() (*bool, bool) {
	if o == nil || o.Published == nil {
		return nil, false
	}
	return o.Published, true
}

// HasPublished returns a boolean if a field has been set.
func (o *SharingInfo) HasPublished() bool {
	if o != nil && o.Published != nil {
		return true
	}

	return false
}

// SetPublished gets a reference to the given bool and assigns it to the Published field.
func (o *SharingInfo) SetPublished(v bool) {
	o.Published = &v
}

func (o SharingInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LinkShared != nil {
		toSerialize["linkShared"] = o.LinkShared
	}
	if o.Published != nil {
		toSerialize["published"] = o.Published
	}
	return json.Marshal(toSerialize)
}

type NullableSharingInfo struct {
	value *SharingInfo
	isSet bool
}

func (v NullableSharingInfo) Get() *SharingInfo {
	return v.value
}

func (v *NullableSharingInfo) Set(val *SharingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSharingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSharingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharingInfo(val *SharingInfo) *NullableSharingInfo {
	return &NullableSharingInfo{value: val, isSet: true}
}

func (v NullableSharingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


