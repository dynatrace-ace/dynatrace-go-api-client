/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// RemoteQueue Define a local definition of a remote queue owned by another queue manager. The local definition can be made visible in one or more clusters.
type RemoteQueue struct {
	// The name of the local definition of the remote queue.
	LocalQueue string `json:"localQueue"`
	// The name of the remote queue.
	RemoteQueue string `json:"remoteQueue"`
	// The name of the remote queue manager.
	RemoteQueueManager string `json:"remoteQueueManager"`
	// The local definition of the remote queue is visible in these [clusters](https://www.ibm.com/support/knowledgecenter/en/SSFKSJ_7.5.0/com.ibm.mq.pro.doc/q002750_.htm). The queue manager must be part of these clusters.
	ClusterVisibility []string `json:"clusterVisibility"`
}

// NewRemoteQueue instantiates a new RemoteQueue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteQueue(localQueue string, remoteQueue string, remoteQueueManager string, clusterVisibility []string, ) *RemoteQueue {
	this := RemoteQueue{}
	this.LocalQueue = localQueue
	this.RemoteQueue = remoteQueue
	this.RemoteQueueManager = remoteQueueManager
	this.ClusterVisibility = clusterVisibility
	return &this
}

// NewRemoteQueueWithDefaults instantiates a new RemoteQueue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteQueueWithDefaults() *RemoteQueue {
	this := RemoteQueue{}
	return &this
}

// GetLocalQueue returns the LocalQueue field value
func (o *RemoteQueue) GetLocalQueue() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.LocalQueue
}

// GetLocalQueueOk returns a tuple with the LocalQueue field value
// and a boolean to check if the value has been set.
func (o *RemoteQueue) GetLocalQueueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LocalQueue, true
}

// SetLocalQueue sets field value
func (o *RemoteQueue) SetLocalQueue(v string) {
	o.LocalQueue = v
}

// GetRemoteQueue returns the RemoteQueue field value
func (o *RemoteQueue) GetRemoteQueue() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.RemoteQueue
}

// GetRemoteQueueOk returns a tuple with the RemoteQueue field value
// and a boolean to check if the value has been set.
func (o *RemoteQueue) GetRemoteQueueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RemoteQueue, true
}

// SetRemoteQueue sets field value
func (o *RemoteQueue) SetRemoteQueue(v string) {
	o.RemoteQueue = v
}

// GetRemoteQueueManager returns the RemoteQueueManager field value
func (o *RemoteQueue) GetRemoteQueueManager() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.RemoteQueueManager
}

// GetRemoteQueueManagerOk returns a tuple with the RemoteQueueManager field value
// and a boolean to check if the value has been set.
func (o *RemoteQueue) GetRemoteQueueManagerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RemoteQueueManager, true
}

// SetRemoteQueueManager sets field value
func (o *RemoteQueue) SetRemoteQueueManager(v string) {
	o.RemoteQueueManager = v
}

// GetClusterVisibility returns the ClusterVisibility field value
func (o *RemoteQueue) GetClusterVisibility() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.ClusterVisibility
}

// GetClusterVisibilityOk returns a tuple with the ClusterVisibility field value
// and a boolean to check if the value has been set.
func (o *RemoteQueue) GetClusterVisibilityOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ClusterVisibility, true
}

// SetClusterVisibility sets field value
func (o *RemoteQueue) SetClusterVisibility(v []string) {
	o.ClusterVisibility = v
}

func (o RemoteQueue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["localQueue"] = o.LocalQueue
	}
	if true {
		toSerialize["remoteQueue"] = o.RemoteQueue
	}
	if true {
		toSerialize["remoteQueueManager"] = o.RemoteQueueManager
	}
	if true {
		toSerialize["clusterVisibility"] = o.ClusterVisibility
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteQueue struct {
	value *RemoteQueue
	isSet bool
}

func (v NullableRemoteQueue) Get() *RemoteQueue {
	return v.value
}

func (v *NullableRemoteQueue) Set(val *RemoteQueue) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteQueue) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteQueue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteQueue(val *RemoteQueue) *NullableRemoteQueue {
	return &NullableRemoteQueue{value: val, isSet: true}
}

func (v NullableRemoteQueue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteQueue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


