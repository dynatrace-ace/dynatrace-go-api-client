/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// NotificationConfig Configuration of a notification. The actual set of fields depends on the `type` of the notification. See the [Notifications API - JSON models](https://www.dynatrace.com/support/help/shortlink/api-config-notifications-models) help topic for example models of every notification type.
type NotificationConfig struct {
	// The ID of the notification configuration.
	Id *string `json:"id,omitempty"`
	// The name of the notification configuration.
	Name string `json:"name"`
	// The ID of the associated alerting profile.
	AlertingProfile string `json:"alertingProfile"`
	// The configuration is enabled (`true`) or disabled (`false`).
	Active bool `json:"active"`
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `EMAIL` -> EmailNotificationConfig  * `PAGER_DUTY` -> PagerDutyNotificationConfig  * `WEBHOOK` -> WebHookNotificationConfig  * `SLACK` -> SlackNotificationConfig  * `HIPCHAT` -> HipChatNotificationConfig  * `VICTOROPS` -> VictorOpsNotificationConfig  * `SERVICE_NOW` -> ServiceNowNotificationConfig  * `XMATTERS` -> XMattersNotificationConfig  * `ANSIBLETOWER` -> AnsibleTowerNotificationConfig  * `OPS_GENIE` -> OpsGenieNotificationConfig  * `JIRA` -> JiraNotificationConfig  * `TRELLO` -> TrelloNotificationConfig  
	Type string `json:"type"`
	// The URL of the target Ansible Tower job template.
	JobTemplateURL *string `json:"jobTemplateURL,omitempty"`
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates.
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate,omitempty"`
	// The username required for authentication.
	Username *string `json:"username,omitempty"`
	// The password required for authentication.
	Password *string `json:"password,omitempty"`
	// The ID of the target Ansible Tower job template.
	JobTemplateID *int32 `json:"jobTemplateID,omitempty"`
	// The custom message of the notification.    This message will be displayed in the extra variables **Message** field of your job template.   You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	CustomMessage *string `json:"customMessage,omitempty"`
	// The subject of the email notifications.
	Subject *string `json:"subject,omitempty"`
	// The template of the email notification.   You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Body *string `json:"body,omitempty"`
	// The list of the email recipients.
	Receivers []string `json:"receivers"`
	// The list of the email CC-recipients.
	CcReceivers []string `json:"ccReceivers"`
	// The list of the email BCC-recipients.
	BccReceivers []string `json:"bccReceivers"`
	// The project key of the Jira issue to be created by this notification.
	ProjectKey *string `json:"projectKey,omitempty"`
	// The type of the Jira issue to be created by this notification.
	IssueType *string `json:"issueType,omitempty"`
	// The summary of the Jira issue to be created by this notification.   You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Summary *string `json:"summary,omitempty"`
	// The description of the notification.
	Description *string `json:"description,omitempty"`
	// The API key of the target account.
	ApiKey *string `json:"apiKey,omitempty"`
	// The region domain of the OpsGenie.
	Domain *string `json:"domain,omitempty"`
	// The name of the PagerDuty account.
	Account *string `json:"account,omitempty"`
	// The API key to access PagerDuty.
	ServiceApiKey *string `json:"serviceApiKey,omitempty"`
	// The name of the service.
	ServiceName *string `json:"serviceName,omitempty"`
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.    This field is mutually exclusive with the **url** field. You can only use one of them.
	InstanceName *string `json:"instanceName,omitempty"`
	// The URL of the notification endpoint
	Url *string `json:"url,omitempty"`
	// The content of the message
	Message *string `json:"message,omitempty"`
	// Send incidents into ServiceNow ITSM (`true`).
	SendIncidents *bool `json:"sendIncidents,omitempty"`
	// Send events into ServiceNow ITOM (`true`).
	SendEvents *bool `json:"sendEvents,omitempty"`
	// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to.
	Channel *string `json:"channel,omitempty"`
	// The content of the message.   You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Title *string `json:"title,omitempty"`
	// The application key for the Trello account.
	ApplicationKey *string `json:"applicationKey,omitempty"`
	// The application token for the Trello account.
	AuthorizationToken *string `json:"authorizationToken,omitempty"`
	// The Trello board to which the card should be assigned.
	BoardId *string `json:"boardId,omitempty"`
	// The Trello list to which the card should be assigned.
	ListId *string `json:"listId,omitempty"`
	// The Trello list to which the card of the resolved problem should be assigned.
	ResolvedListId *string `json:"resolvedListId,omitempty"`
	// The text of the generated Trello card.   You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Text *string `json:"text,omitempty"`
	// The routing key, defining the group to be notified.
	RoutingKey *string `json:"routingKey,omitempty"`
	// The content of the notification message.   You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Payload *string `json:"payload,omitempty"`
	// A list of the additional HTTP headers.
	Headers *[]HttpHeader `json:"headers,omitempty"`
	// Call webhook if new events merge into existing problems.
	NotifyEventMergesEnabled *bool `json:"notifyEventMergesEnabled,omitempty"`
}

// NewNotificationConfig instantiates a new NotificationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationConfig(name string, alertingProfile string, active bool, type_ string, receivers []string, ccReceivers []string, bccReceivers []string, ) *NotificationConfig {
	this := NotificationConfig{}
	this.Name = name
	this.AlertingProfile = alertingProfile
	this.Active = active
	this.Type = type_
	this.Receivers = receivers
	this.CcReceivers = ccReceivers
	this.BccReceivers = bccReceivers
	return &this
}

// NewNotificationConfigWithDefaults instantiates a new NotificationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationConfigWithDefaults() *NotificationConfig {
	this := NotificationConfig{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotificationConfig) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotificationConfig) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NotificationConfig) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *NotificationConfig) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NotificationConfig) SetName(v string) {
	o.Name = v
}

// GetAlertingProfile returns the AlertingProfile field value
func (o *NotificationConfig) GetAlertingProfile() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.AlertingProfile
}

// GetAlertingProfileOk returns a tuple with the AlertingProfile field value
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetAlertingProfileOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AlertingProfile, true
}

// SetAlertingProfile sets field value
func (o *NotificationConfig) SetAlertingProfile(v string) {
	o.AlertingProfile = v
}

// GetActive returns the Active field value
func (o *NotificationConfig) GetActive() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *NotificationConfig) SetActive(v bool) {
	o.Active = v
}

// GetType returns the Type field value
func (o *NotificationConfig) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *NotificationConfig) SetType(v string) {
	o.Type = v
}

// GetJobTemplateURL returns the JobTemplateURL field value if set, zero value otherwise.
func (o *NotificationConfig) GetJobTemplateURL() string {
	if o == nil || o.JobTemplateURL == nil {
		var ret string
		return ret
	}
	return *o.JobTemplateURL
}

// GetJobTemplateURLOk returns a tuple with the JobTemplateURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetJobTemplateURLOk() (*string, bool) {
	if o == nil || o.JobTemplateURL == nil {
		return nil, false
	}
	return o.JobTemplateURL, true
}

// HasJobTemplateURL returns a boolean if a field has been set.
func (o *NotificationConfig) HasJobTemplateURL() bool {
	if o != nil && o.JobTemplateURL != nil {
		return true
	}

	return false
}

// SetJobTemplateURL gets a reference to the given string and assigns it to the JobTemplateURL field.
func (o *NotificationConfig) SetJobTemplateURL(v string) {
	o.JobTemplateURL = &v
}

// GetAcceptAnyCertificate returns the AcceptAnyCertificate field value if set, zero value otherwise.
func (o *NotificationConfig) GetAcceptAnyCertificate() bool {
	if o == nil || o.AcceptAnyCertificate == nil {
		var ret bool
		return ret
	}
	return *o.AcceptAnyCertificate
}

// GetAcceptAnyCertificateOk returns a tuple with the AcceptAnyCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetAcceptAnyCertificateOk() (*bool, bool) {
	if o == nil || o.AcceptAnyCertificate == nil {
		return nil, false
	}
	return o.AcceptAnyCertificate, true
}

// HasAcceptAnyCertificate returns a boolean if a field has been set.
func (o *NotificationConfig) HasAcceptAnyCertificate() bool {
	if o != nil && o.AcceptAnyCertificate != nil {
		return true
	}

	return false
}

// SetAcceptAnyCertificate gets a reference to the given bool and assigns it to the AcceptAnyCertificate field.
func (o *NotificationConfig) SetAcceptAnyCertificate(v bool) {
	o.AcceptAnyCertificate = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *NotificationConfig) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *NotificationConfig) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *NotificationConfig) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *NotificationConfig) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *NotificationConfig) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *NotificationConfig) SetPassword(v string) {
	o.Password = &v
}

// GetJobTemplateID returns the JobTemplateID field value if set, zero value otherwise.
func (o *NotificationConfig) GetJobTemplateID() int32 {
	if o == nil || o.JobTemplateID == nil {
		var ret int32
		return ret
	}
	return *o.JobTemplateID
}

// GetJobTemplateIDOk returns a tuple with the JobTemplateID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetJobTemplateIDOk() (*int32, bool) {
	if o == nil || o.JobTemplateID == nil {
		return nil, false
	}
	return o.JobTemplateID, true
}

// HasJobTemplateID returns a boolean if a field has been set.
func (o *NotificationConfig) HasJobTemplateID() bool {
	if o != nil && o.JobTemplateID != nil {
		return true
	}

	return false
}

// SetJobTemplateID gets a reference to the given int32 and assigns it to the JobTemplateID field.
func (o *NotificationConfig) SetJobTemplateID(v int32) {
	o.JobTemplateID = &v
}

// GetCustomMessage returns the CustomMessage field value if set, zero value otherwise.
func (o *NotificationConfig) GetCustomMessage() string {
	if o == nil || o.CustomMessage == nil {
		var ret string
		return ret
	}
	return *o.CustomMessage
}

// GetCustomMessageOk returns a tuple with the CustomMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetCustomMessageOk() (*string, bool) {
	if o == nil || o.CustomMessage == nil {
		return nil, false
	}
	return o.CustomMessage, true
}

// HasCustomMessage returns a boolean if a field has been set.
func (o *NotificationConfig) HasCustomMessage() bool {
	if o != nil && o.CustomMessage != nil {
		return true
	}

	return false
}

// SetCustomMessage gets a reference to the given string and assigns it to the CustomMessage field.
func (o *NotificationConfig) SetCustomMessage(v string) {
	o.CustomMessage = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *NotificationConfig) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *NotificationConfig) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *NotificationConfig) SetSubject(v string) {
	o.Subject = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *NotificationConfig) GetBody() string {
	if o == nil || o.Body == nil {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetBodyOk() (*string, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *NotificationConfig) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *NotificationConfig) SetBody(v string) {
	o.Body = &v
}

// GetReceivers returns the Receivers field value
func (o *NotificationConfig) GetReceivers() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Receivers
}

// GetReceiversOk returns a tuple with the Receivers field value
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetReceiversOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Receivers, true
}

// SetReceivers sets field value
func (o *NotificationConfig) SetReceivers(v []string) {
	o.Receivers = v
}

// GetCcReceivers returns the CcReceivers field value
func (o *NotificationConfig) GetCcReceivers() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.CcReceivers
}

// GetCcReceiversOk returns a tuple with the CcReceivers field value
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetCcReceiversOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CcReceivers, true
}

// SetCcReceivers sets field value
func (o *NotificationConfig) SetCcReceivers(v []string) {
	o.CcReceivers = v
}

// GetBccReceivers returns the BccReceivers field value
func (o *NotificationConfig) GetBccReceivers() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.BccReceivers
}

// GetBccReceiversOk returns a tuple with the BccReceivers field value
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetBccReceiversOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BccReceivers, true
}

// SetBccReceivers sets field value
func (o *NotificationConfig) SetBccReceivers(v []string) {
	o.BccReceivers = v
}

// GetProjectKey returns the ProjectKey field value if set, zero value otherwise.
func (o *NotificationConfig) GetProjectKey() string {
	if o == nil || o.ProjectKey == nil {
		var ret string
		return ret
	}
	return *o.ProjectKey
}

// GetProjectKeyOk returns a tuple with the ProjectKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetProjectKeyOk() (*string, bool) {
	if o == nil || o.ProjectKey == nil {
		return nil, false
	}
	return o.ProjectKey, true
}

// HasProjectKey returns a boolean if a field has been set.
func (o *NotificationConfig) HasProjectKey() bool {
	if o != nil && o.ProjectKey != nil {
		return true
	}

	return false
}

// SetProjectKey gets a reference to the given string and assigns it to the ProjectKey field.
func (o *NotificationConfig) SetProjectKey(v string) {
	o.ProjectKey = &v
}

// GetIssueType returns the IssueType field value if set, zero value otherwise.
func (o *NotificationConfig) GetIssueType() string {
	if o == nil || o.IssueType == nil {
		var ret string
		return ret
	}
	return *o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetIssueTypeOk() (*string, bool) {
	if o == nil || o.IssueType == nil {
		return nil, false
	}
	return o.IssueType, true
}

// HasIssueType returns a boolean if a field has been set.
func (o *NotificationConfig) HasIssueType() bool {
	if o != nil && o.IssueType != nil {
		return true
	}

	return false
}

// SetIssueType gets a reference to the given string and assigns it to the IssueType field.
func (o *NotificationConfig) SetIssueType(v string) {
	o.IssueType = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *NotificationConfig) GetSummary() string {
	if o == nil || o.Summary == nil {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetSummaryOk() (*string, bool) {
	if o == nil || o.Summary == nil {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *NotificationConfig) HasSummary() bool {
	if o != nil && o.Summary != nil {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *NotificationConfig) SetSummary(v string) {
	o.Summary = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NotificationConfig) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NotificationConfig) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NotificationConfig) SetDescription(v string) {
	o.Description = &v
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *NotificationConfig) GetApiKey() string {
	if o == nil || o.ApiKey == nil {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetApiKeyOk() (*string, bool) {
	if o == nil || o.ApiKey == nil {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *NotificationConfig) HasApiKey() bool {
	if o != nil && o.ApiKey != nil {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *NotificationConfig) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *NotificationConfig) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *NotificationConfig) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *NotificationConfig) SetDomain(v string) {
	o.Domain = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *NotificationConfig) GetAccount() string {
	if o == nil || o.Account == nil {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetAccountOk() (*string, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *NotificationConfig) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *NotificationConfig) SetAccount(v string) {
	o.Account = &v
}

// GetServiceApiKey returns the ServiceApiKey field value if set, zero value otherwise.
func (o *NotificationConfig) GetServiceApiKey() string {
	if o == nil || o.ServiceApiKey == nil {
		var ret string
		return ret
	}
	return *o.ServiceApiKey
}

// GetServiceApiKeyOk returns a tuple with the ServiceApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetServiceApiKeyOk() (*string, bool) {
	if o == nil || o.ServiceApiKey == nil {
		return nil, false
	}
	return o.ServiceApiKey, true
}

// HasServiceApiKey returns a boolean if a field has been set.
func (o *NotificationConfig) HasServiceApiKey() bool {
	if o != nil && o.ServiceApiKey != nil {
		return true
	}

	return false
}

// SetServiceApiKey gets a reference to the given string and assigns it to the ServiceApiKey field.
func (o *NotificationConfig) SetServiceApiKey(v string) {
	o.ServiceApiKey = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *NotificationConfig) GetServiceName() string {
	if o == nil || o.ServiceName == nil {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetServiceNameOk() (*string, bool) {
	if o == nil || o.ServiceName == nil {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *NotificationConfig) HasServiceName() bool {
	if o != nil && o.ServiceName != nil {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *NotificationConfig) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise.
func (o *NotificationConfig) GetInstanceName() string {
	if o == nil || o.InstanceName == nil {
		var ret string
		return ret
	}
	return *o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetInstanceNameOk() (*string, bool) {
	if o == nil || o.InstanceName == nil {
		return nil, false
	}
	return o.InstanceName, true
}

// HasInstanceName returns a boolean if a field has been set.
func (o *NotificationConfig) HasInstanceName() bool {
	if o != nil && o.InstanceName != nil {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given string and assigns it to the InstanceName field.
func (o *NotificationConfig) SetInstanceName(v string) {
	o.InstanceName = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *NotificationConfig) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *NotificationConfig) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *NotificationConfig) SetUrl(v string) {
	o.Url = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *NotificationConfig) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *NotificationConfig) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *NotificationConfig) SetMessage(v string) {
	o.Message = &v
}

// GetSendIncidents returns the SendIncidents field value if set, zero value otherwise.
func (o *NotificationConfig) GetSendIncidents() bool {
	if o == nil || o.SendIncidents == nil {
		var ret bool
		return ret
	}
	return *o.SendIncidents
}

// GetSendIncidentsOk returns a tuple with the SendIncidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetSendIncidentsOk() (*bool, bool) {
	if o == nil || o.SendIncidents == nil {
		return nil, false
	}
	return o.SendIncidents, true
}

// HasSendIncidents returns a boolean if a field has been set.
func (o *NotificationConfig) HasSendIncidents() bool {
	if o != nil && o.SendIncidents != nil {
		return true
	}

	return false
}

// SetSendIncidents gets a reference to the given bool and assigns it to the SendIncidents field.
func (o *NotificationConfig) SetSendIncidents(v bool) {
	o.SendIncidents = &v
}

// GetSendEvents returns the SendEvents field value if set, zero value otherwise.
func (o *NotificationConfig) GetSendEvents() bool {
	if o == nil || o.SendEvents == nil {
		var ret bool
		return ret
	}
	return *o.SendEvents
}

// GetSendEventsOk returns a tuple with the SendEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetSendEventsOk() (*bool, bool) {
	if o == nil || o.SendEvents == nil {
		return nil, false
	}
	return o.SendEvents, true
}

// HasSendEvents returns a boolean if a field has been set.
func (o *NotificationConfig) HasSendEvents() bool {
	if o != nil && o.SendEvents != nil {
		return true
	}

	return false
}

// SetSendEvents gets a reference to the given bool and assigns it to the SendEvents field.
func (o *NotificationConfig) SetSendEvents(v bool) {
	o.SendEvents = &v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *NotificationConfig) GetChannel() string {
	if o == nil || o.Channel == nil {
		var ret string
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetChannelOk() (*string, bool) {
	if o == nil || o.Channel == nil {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *NotificationConfig) HasChannel() bool {
	if o != nil && o.Channel != nil {
		return true
	}

	return false
}

// SetChannel gets a reference to the given string and assigns it to the Channel field.
func (o *NotificationConfig) SetChannel(v string) {
	o.Channel = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *NotificationConfig) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *NotificationConfig) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *NotificationConfig) SetTitle(v string) {
	o.Title = &v
}

// GetApplicationKey returns the ApplicationKey field value if set, zero value otherwise.
func (o *NotificationConfig) GetApplicationKey() string {
	if o == nil || o.ApplicationKey == nil {
		var ret string
		return ret
	}
	return *o.ApplicationKey
}

// GetApplicationKeyOk returns a tuple with the ApplicationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetApplicationKeyOk() (*string, bool) {
	if o == nil || o.ApplicationKey == nil {
		return nil, false
	}
	return o.ApplicationKey, true
}

// HasApplicationKey returns a boolean if a field has been set.
func (o *NotificationConfig) HasApplicationKey() bool {
	if o != nil && o.ApplicationKey != nil {
		return true
	}

	return false
}

// SetApplicationKey gets a reference to the given string and assigns it to the ApplicationKey field.
func (o *NotificationConfig) SetApplicationKey(v string) {
	o.ApplicationKey = &v
}

// GetAuthorizationToken returns the AuthorizationToken field value if set, zero value otherwise.
func (o *NotificationConfig) GetAuthorizationToken() string {
	if o == nil || o.AuthorizationToken == nil {
		var ret string
		return ret
	}
	return *o.AuthorizationToken
}

// GetAuthorizationTokenOk returns a tuple with the AuthorizationToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetAuthorizationTokenOk() (*string, bool) {
	if o == nil || o.AuthorizationToken == nil {
		return nil, false
	}
	return o.AuthorizationToken, true
}

// HasAuthorizationToken returns a boolean if a field has been set.
func (o *NotificationConfig) HasAuthorizationToken() bool {
	if o != nil && o.AuthorizationToken != nil {
		return true
	}

	return false
}

// SetAuthorizationToken gets a reference to the given string and assigns it to the AuthorizationToken field.
func (o *NotificationConfig) SetAuthorizationToken(v string) {
	o.AuthorizationToken = &v
}

// GetBoardId returns the BoardId field value if set, zero value otherwise.
func (o *NotificationConfig) GetBoardId() string {
	if o == nil || o.BoardId == nil {
		var ret string
		return ret
	}
	return *o.BoardId
}

// GetBoardIdOk returns a tuple with the BoardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetBoardIdOk() (*string, bool) {
	if o == nil || o.BoardId == nil {
		return nil, false
	}
	return o.BoardId, true
}

// HasBoardId returns a boolean if a field has been set.
func (o *NotificationConfig) HasBoardId() bool {
	if o != nil && o.BoardId != nil {
		return true
	}

	return false
}

// SetBoardId gets a reference to the given string and assigns it to the BoardId field.
func (o *NotificationConfig) SetBoardId(v string) {
	o.BoardId = &v
}

// GetListId returns the ListId field value if set, zero value otherwise.
func (o *NotificationConfig) GetListId() string {
	if o == nil || o.ListId == nil {
		var ret string
		return ret
	}
	return *o.ListId
}

// GetListIdOk returns a tuple with the ListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetListIdOk() (*string, bool) {
	if o == nil || o.ListId == nil {
		return nil, false
	}
	return o.ListId, true
}

// HasListId returns a boolean if a field has been set.
func (o *NotificationConfig) HasListId() bool {
	if o != nil && o.ListId != nil {
		return true
	}

	return false
}

// SetListId gets a reference to the given string and assigns it to the ListId field.
func (o *NotificationConfig) SetListId(v string) {
	o.ListId = &v
}

// GetResolvedListId returns the ResolvedListId field value if set, zero value otherwise.
func (o *NotificationConfig) GetResolvedListId() string {
	if o == nil || o.ResolvedListId == nil {
		var ret string
		return ret
	}
	return *o.ResolvedListId
}

// GetResolvedListIdOk returns a tuple with the ResolvedListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetResolvedListIdOk() (*string, bool) {
	if o == nil || o.ResolvedListId == nil {
		return nil, false
	}
	return o.ResolvedListId, true
}

// HasResolvedListId returns a boolean if a field has been set.
func (o *NotificationConfig) HasResolvedListId() bool {
	if o != nil && o.ResolvedListId != nil {
		return true
	}

	return false
}

// SetResolvedListId gets a reference to the given string and assigns it to the ResolvedListId field.
func (o *NotificationConfig) SetResolvedListId(v string) {
	o.ResolvedListId = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *NotificationConfig) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *NotificationConfig) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *NotificationConfig) SetText(v string) {
	o.Text = &v
}

// GetRoutingKey returns the RoutingKey field value if set, zero value otherwise.
func (o *NotificationConfig) GetRoutingKey() string {
	if o == nil || o.RoutingKey == nil {
		var ret string
		return ret
	}
	return *o.RoutingKey
}

// GetRoutingKeyOk returns a tuple with the RoutingKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetRoutingKeyOk() (*string, bool) {
	if o == nil || o.RoutingKey == nil {
		return nil, false
	}
	return o.RoutingKey, true
}

// HasRoutingKey returns a boolean if a field has been set.
func (o *NotificationConfig) HasRoutingKey() bool {
	if o != nil && o.RoutingKey != nil {
		return true
	}

	return false
}

// SetRoutingKey gets a reference to the given string and assigns it to the RoutingKey field.
func (o *NotificationConfig) SetRoutingKey(v string) {
	o.RoutingKey = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *NotificationConfig) GetPayload() string {
	if o == nil || o.Payload == nil {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetPayloadOk() (*string, bool) {
	if o == nil || o.Payload == nil {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *NotificationConfig) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *NotificationConfig) SetPayload(v string) {
	o.Payload = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *NotificationConfig) GetHeaders() []HttpHeader {
	if o == nil || o.Headers == nil {
		var ret []HttpHeader
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetHeadersOk() (*[]HttpHeader, bool) {
	if o == nil || o.Headers == nil {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *NotificationConfig) HasHeaders() bool {
	if o != nil && o.Headers != nil {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []HttpHeader and assigns it to the Headers field.
func (o *NotificationConfig) SetHeaders(v []HttpHeader) {
	o.Headers = &v
}

// GetNotifyEventMergesEnabled returns the NotifyEventMergesEnabled field value if set, zero value otherwise.
func (o *NotificationConfig) GetNotifyEventMergesEnabled() bool {
	if o == nil || o.NotifyEventMergesEnabled == nil {
		var ret bool
		return ret
	}
	return *o.NotifyEventMergesEnabled
}

// GetNotifyEventMergesEnabledOk returns a tuple with the NotifyEventMergesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationConfig) GetNotifyEventMergesEnabledOk() (*bool, bool) {
	if o == nil || o.NotifyEventMergesEnabled == nil {
		return nil, false
	}
	return o.NotifyEventMergesEnabled, true
}

// HasNotifyEventMergesEnabled returns a boolean if a field has been set.
func (o *NotificationConfig) HasNotifyEventMergesEnabled() bool {
	if o != nil && o.NotifyEventMergesEnabled != nil {
		return true
	}

	return false
}

// SetNotifyEventMergesEnabled gets a reference to the given bool and assigns it to the NotifyEventMergesEnabled field.
func (o *NotificationConfig) SetNotifyEventMergesEnabled(v bool) {
	o.NotifyEventMergesEnabled = &v
}

func (o NotificationConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["alertingProfile"] = o.AlertingProfile
	}
	if true {
		toSerialize["active"] = o.Active
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.JobTemplateURL != nil {
		toSerialize["jobTemplateURL"] = o.JobTemplateURL
	}
	if o.AcceptAnyCertificate != nil {
		toSerialize["acceptAnyCertificate"] = o.AcceptAnyCertificate
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.JobTemplateID != nil {
		toSerialize["jobTemplateID"] = o.JobTemplateID
	}
	if o.CustomMessage != nil {
		toSerialize["customMessage"] = o.CustomMessage
	}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if true {
		toSerialize["receivers"] = o.Receivers
	}
	if true {
		toSerialize["ccReceivers"] = o.CcReceivers
	}
	if true {
		toSerialize["bccReceivers"] = o.BccReceivers
	}
	if o.ProjectKey != nil {
		toSerialize["projectKey"] = o.ProjectKey
	}
	if o.IssueType != nil {
		toSerialize["issueType"] = o.IssueType
	}
	if o.Summary != nil {
		toSerialize["summary"] = o.Summary
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.ApiKey != nil {
		toSerialize["apiKey"] = o.ApiKey
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.ServiceApiKey != nil {
		toSerialize["serviceApiKey"] = o.ServiceApiKey
	}
	if o.ServiceName != nil {
		toSerialize["serviceName"] = o.ServiceName
	}
	if o.InstanceName != nil {
		toSerialize["instanceName"] = o.InstanceName
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.SendIncidents != nil {
		toSerialize["sendIncidents"] = o.SendIncidents
	}
	if o.SendEvents != nil {
		toSerialize["sendEvents"] = o.SendEvents
	}
	if o.Channel != nil {
		toSerialize["channel"] = o.Channel
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.ApplicationKey != nil {
		toSerialize["applicationKey"] = o.ApplicationKey
	}
	if o.AuthorizationToken != nil {
		toSerialize["authorizationToken"] = o.AuthorizationToken
	}
	if o.BoardId != nil {
		toSerialize["boardId"] = o.BoardId
	}
	if o.ListId != nil {
		toSerialize["listId"] = o.ListId
	}
	if o.ResolvedListId != nil {
		toSerialize["resolvedListId"] = o.ResolvedListId
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.RoutingKey != nil {
		toSerialize["routingKey"] = o.RoutingKey
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if o.NotifyEventMergesEnabled != nil {
		toSerialize["notifyEventMergesEnabled"] = o.NotifyEventMergesEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationConfig struct {
	value *NotificationConfig
	isSet bool
}

func (v NullableNotificationConfig) Get() *NotificationConfig {
	return v.value
}

func (v *NullableNotificationConfig) Set(val *NotificationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationConfig(val *NotificationConfig) *NullableNotificationConfig {
	return &NullableNotificationConfig{value: val, isSet: true}
}

func (v NullableNotificationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


