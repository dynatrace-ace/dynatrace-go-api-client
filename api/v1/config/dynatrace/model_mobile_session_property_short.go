/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MobileSessionPropertyShort A short representation of mobile session property.
type MobileSessionPropertyShort struct {
	// The key of the session property.
	Key string `json:"key"`
	// The display name of the session property.
	DisplayName *string `json:"displayName,omitempty"`
}

// NewMobileSessionPropertyShort instantiates a new MobileSessionPropertyShort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMobileSessionPropertyShort(key string, ) *MobileSessionPropertyShort {
	this := MobileSessionPropertyShort{}
	this.Key = key
	return &this
}

// NewMobileSessionPropertyShortWithDefaults instantiates a new MobileSessionPropertyShort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMobileSessionPropertyShortWithDefaults() *MobileSessionPropertyShort {
	this := MobileSessionPropertyShort{}
	return &this
}

// GetKey returns the Key field value
func (o *MobileSessionPropertyShort) GetKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *MobileSessionPropertyShort) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *MobileSessionPropertyShort) SetKey(v string) {
	o.Key = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *MobileSessionPropertyShort) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MobileSessionPropertyShort) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MobileSessionPropertyShort) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MobileSessionPropertyShort) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o MobileSessionPropertyShort) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	return json.Marshal(toSerialize)
}

type NullableMobileSessionPropertyShort struct {
	value *MobileSessionPropertyShort
	isSet bool
}

func (v NullableMobileSessionPropertyShort) Get() *MobileSessionPropertyShort {
	return v.value
}

func (v *NullableMobileSessionPropertyShort) Set(val *MobileSessionPropertyShort) {
	v.value = val
	v.isSet = true
}

func (v NullableMobileSessionPropertyShort) IsSet() bool {
	return v.isSet
}

func (v *NullableMobileSessionPropertyShort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMobileSessionPropertyShort(val *MobileSessionPropertyShort) *NullableMobileSessionPropertyShort {
	return &NullableMobileSessionPropertyShort{value: val, isSet: true}
}

func (v NullableMobileSessionPropertyShort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMobileSessionPropertyShort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


