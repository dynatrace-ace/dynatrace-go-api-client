/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UrlPath The contribution from the URL, where the web request has been detected, into service ID calculation.    You have two mutually exclusive options:  * Override the detected value with a specified static value. Specify the new value in the **valueOverride** field.  * Dynamically transform the detected value. Specify the transformation parameters in the **transformations** field.
type UrlPath struct {
	// Transformations to be applied to the detected value.
	Transformations *[]TransformationBase `json:"transformations,omitempty"`
	// The value to be used instead of the detected value.
	ValueOverride *string `json:"valueOverride,omitempty"`
}

// NewUrlPath instantiates a new UrlPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrlPath() *UrlPath {
	this := UrlPath{}
	return &this
}

// NewUrlPathWithDefaults instantiates a new UrlPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrlPathWithDefaults() *UrlPath {
	this := UrlPath{}
	return &this
}

// GetTransformations returns the Transformations field value if set, zero value otherwise.
func (o *UrlPath) GetTransformations() []TransformationBase {
	if o == nil || o.Transformations == nil {
		var ret []TransformationBase
		return ret
	}
	return *o.Transformations
}

// GetTransformationsOk returns a tuple with the Transformations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlPath) GetTransformationsOk() (*[]TransformationBase, bool) {
	if o == nil || o.Transformations == nil {
		return nil, false
	}
	return o.Transformations, true
}

// HasTransformations returns a boolean if a field has been set.
func (o *UrlPath) HasTransformations() bool {
	if o != nil && o.Transformations != nil {
		return true
	}

	return false
}

// SetTransformations gets a reference to the given []TransformationBase and assigns it to the Transformations field.
func (o *UrlPath) SetTransformations(v []TransformationBase) {
	o.Transformations = &v
}

// GetValueOverride returns the ValueOverride field value if set, zero value otherwise.
func (o *UrlPath) GetValueOverride() string {
	if o == nil || o.ValueOverride == nil {
		var ret string
		return ret
	}
	return *o.ValueOverride
}

// GetValueOverrideOk returns a tuple with the ValueOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlPath) GetValueOverrideOk() (*string, bool) {
	if o == nil || o.ValueOverride == nil {
		return nil, false
	}
	return o.ValueOverride, true
}

// HasValueOverride returns a boolean if a field has been set.
func (o *UrlPath) HasValueOverride() bool {
	if o != nil && o.ValueOverride != nil {
		return true
	}

	return false
}

// SetValueOverride gets a reference to the given string and assigns it to the ValueOverride field.
func (o *UrlPath) SetValueOverride(v string) {
	o.ValueOverride = &v
}

func (o UrlPath) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Transformations != nil {
		toSerialize["transformations"] = o.Transformations
	}
	if o.ValueOverride != nil {
		toSerialize["valueOverride"] = o.ValueOverride
	}
	return json.Marshal(toSerialize)
}

type NullableUrlPath struct {
	value *UrlPath
	isSet bool
}

func (v NullableUrlPath) Get() *UrlPath {
	return v.value
}

func (v *NullableUrlPath) Set(val *UrlPath) {
	v.value = val
	v.isSet = true
}

func (v NullableUrlPath) IsSet() bool {
	return v.isSet
}

func (v *NullableUrlPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrlPath(val *UrlPath) *NullableUrlPath {
	return &NullableUrlPath{value: val, isSet: true}
}

func (v NullableUrlPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrlPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


