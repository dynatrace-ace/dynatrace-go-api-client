/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// VictorOpsNotificationConfig Configuration of the VictorOps notification.
type VictorOpsNotificationConfig struct {
	NotificationConfig
	// The API key for the target VictorOps account.
	ApiKey *string `json:"apiKey,omitempty"`
	// The routing key, defining the group to be notified.
	RoutingKey string `json:"routingKey"`
	// The content of the message.   You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  
	Message string `json:"message"`
}

// NewVictorOpsNotificationConfig instantiates a new VictorOpsNotificationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVictorOpsNotificationConfig(routingKey string, message string, ) *VictorOpsNotificationConfig {
	this := VictorOpsNotificationConfig{}
	this.RoutingKey = routingKey
	this.Message = message
	return &this
}

// NewVictorOpsNotificationConfigWithDefaults instantiates a new VictorOpsNotificationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVictorOpsNotificationConfigWithDefaults() *VictorOpsNotificationConfig {
	this := VictorOpsNotificationConfig{}
	return &this
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *VictorOpsNotificationConfig) GetApiKey() string {
	if o == nil || o.ApiKey == nil {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VictorOpsNotificationConfig) GetApiKeyOk() (*string, bool) {
	if o == nil || o.ApiKey == nil {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *VictorOpsNotificationConfig) HasApiKey() bool {
	if o != nil && o.ApiKey != nil {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *VictorOpsNotificationConfig) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetRoutingKey returns the RoutingKey field value
func (o *VictorOpsNotificationConfig) GetRoutingKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.RoutingKey
}

// GetRoutingKeyOk returns a tuple with the RoutingKey field value
// and a boolean to check if the value has been set.
func (o *VictorOpsNotificationConfig) GetRoutingKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RoutingKey, true
}

// SetRoutingKey sets field value
func (o *VictorOpsNotificationConfig) SetRoutingKey(v string) {
	o.RoutingKey = v
}

// GetMessage returns the Message field value
func (o *VictorOpsNotificationConfig) GetMessage() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *VictorOpsNotificationConfig) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *VictorOpsNotificationConfig) SetMessage(v string) {
	o.Message = v
}

func (o VictorOpsNotificationConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedNotificationConfig, errNotificationConfig := json.Marshal(o.NotificationConfig)
	if errNotificationConfig != nil {
		return []byte{}, errNotificationConfig
	}
	errNotificationConfig = json.Unmarshal([]byte(serializedNotificationConfig), &toSerialize)
	if errNotificationConfig != nil {
		return []byte{}, errNotificationConfig
	}
	if o.ApiKey != nil {
		toSerialize["apiKey"] = o.ApiKey
	}
	if true {
		toSerialize["routingKey"] = o.RoutingKey
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableVictorOpsNotificationConfig struct {
	value *VictorOpsNotificationConfig
	isSet bool
}

func (v NullableVictorOpsNotificationConfig) Get() *VictorOpsNotificationConfig {
	return v.value
}

func (v *NullableVictorOpsNotificationConfig) Set(val *VictorOpsNotificationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableVictorOpsNotificationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableVictorOpsNotificationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVictorOpsNotificationConfig(val *VictorOpsNotificationConfig) *NullableVictorOpsNotificationConfig {
	return &NullableVictorOpsNotificationConfig{value: val, isSet: true}
}

func (v NullableVictorOpsNotificationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVictorOpsNotificationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


