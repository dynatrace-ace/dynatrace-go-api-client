/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CertificateCredentialsAllOf struct for CertificateCredentialsAllOf
type CertificateCredentialsAllOf struct {
	// The certificate in the string format.
	Certificate *string `json:"certificate,omitempty"`
	// The password of the credential.
	Password *string `json:"password,omitempty"`
	// The certificate format.
	CertificateFormat *string `json:"certificateFormat,omitempty"`
}

// NewCertificateCredentialsAllOf instantiates a new CertificateCredentialsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateCredentialsAllOf() *CertificateCredentialsAllOf {
	this := CertificateCredentialsAllOf{}
	return &this
}

// NewCertificateCredentialsAllOfWithDefaults instantiates a new CertificateCredentialsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateCredentialsAllOfWithDefaults() *CertificateCredentialsAllOf {
	this := CertificateCredentialsAllOf{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *CertificateCredentialsAllOf) GetCertificate() string {
	if o == nil || o.Certificate == nil {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCredentialsAllOf) GetCertificateOk() (*string, bool) {
	if o == nil || o.Certificate == nil {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *CertificateCredentialsAllOf) HasCertificate() bool {
	if o != nil && o.Certificate != nil {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *CertificateCredentialsAllOf) SetCertificate(v string) {
	o.Certificate = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *CertificateCredentialsAllOf) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCredentialsAllOf) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *CertificateCredentialsAllOf) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *CertificateCredentialsAllOf) SetPassword(v string) {
	o.Password = &v
}

// GetCertificateFormat returns the CertificateFormat field value if set, zero value otherwise.
func (o *CertificateCredentialsAllOf) GetCertificateFormat() string {
	if o == nil || o.CertificateFormat == nil {
		var ret string
		return ret
	}
	return *o.CertificateFormat
}

// GetCertificateFormatOk returns a tuple with the CertificateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateCredentialsAllOf) GetCertificateFormatOk() (*string, bool) {
	if o == nil || o.CertificateFormat == nil {
		return nil, false
	}
	return o.CertificateFormat, true
}

// HasCertificateFormat returns a boolean if a field has been set.
func (o *CertificateCredentialsAllOf) HasCertificateFormat() bool {
	if o != nil && o.CertificateFormat != nil {
		return true
	}

	return false
}

// SetCertificateFormat gets a reference to the given string and assigns it to the CertificateFormat field.
func (o *CertificateCredentialsAllOf) SetCertificateFormat(v string) {
	o.CertificateFormat = &v
}

func (o CertificateCredentialsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Certificate != nil {
		toSerialize["certificate"] = o.Certificate
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.CertificateFormat != nil {
		toSerialize["certificateFormat"] = o.CertificateFormat
	}
	return json.Marshal(toSerialize)
}

type NullableCertificateCredentialsAllOf struct {
	value *CertificateCredentialsAllOf
	isSet bool
}

func (v NullableCertificateCredentialsAllOf) Get() *CertificateCredentialsAllOf {
	return v.value
}

func (v *NullableCertificateCredentialsAllOf) Set(val *CertificateCredentialsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateCredentialsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateCredentialsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateCredentialsAllOf(val *CertificateCredentialsAllOf) *NullableCertificateCredentialsAllOf {
	return &NullableCertificateCredentialsAllOf{value: val, isSet: true}
}

func (v NullableCertificateCredentialsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateCredentialsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


