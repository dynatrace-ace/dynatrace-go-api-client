/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// JavaScriptFrameworkSupport Support of various JavaScript frameworks.
type JavaScriptFrameworkSupport struct {
	// AngularJS and Angular support enabled/disabled.
	Angular bool `json:"angular"`
	// Dojo support enabled/disabled.
	Dojo bool `json:"dojo"`
	// ExtJS, Sencha Touch support enabled/disabled.
	ExtJS bool `json:"extJS"`
	// ICEfaces support enabled/disabled.
	Icefaces bool `json:"icefaces"`
	// jQuery, Backbone.js support enabled/disabled.
	JQuery bool `json:"jQuery"`
	// MooTools support enabled/disabled.
	MooTools bool `json:"mooTools"`
	// Prototype support enabled/disabled.
	Prototype bool `json:"prototype"`
	// ActiveXObject detection support enabled/disabled.
	ActiveXObject bool `json:"activeXObject"`
}

// NewJavaScriptFrameworkSupport instantiates a new JavaScriptFrameworkSupport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJavaScriptFrameworkSupport(angular bool, dojo bool, extJS bool, icefaces bool, jQuery bool, mooTools bool, prototype bool, activeXObject bool, ) *JavaScriptFrameworkSupport {
	this := JavaScriptFrameworkSupport{}
	this.Angular = angular
	this.Dojo = dojo
	this.ExtJS = extJS
	this.Icefaces = icefaces
	this.JQuery = jQuery
	this.MooTools = mooTools
	this.Prototype = prototype
	this.ActiveXObject = activeXObject
	return &this
}

// NewJavaScriptFrameworkSupportWithDefaults instantiates a new JavaScriptFrameworkSupport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJavaScriptFrameworkSupportWithDefaults() *JavaScriptFrameworkSupport {
	this := JavaScriptFrameworkSupport{}
	return &this
}

// GetAngular returns the Angular field value
func (o *JavaScriptFrameworkSupport) GetAngular() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Angular
}

// GetAngularOk returns a tuple with the Angular field value
// and a boolean to check if the value has been set.
func (o *JavaScriptFrameworkSupport) GetAngularOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Angular, true
}

// SetAngular sets field value
func (o *JavaScriptFrameworkSupport) SetAngular(v bool) {
	o.Angular = v
}

// GetDojo returns the Dojo field value
func (o *JavaScriptFrameworkSupport) GetDojo() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Dojo
}

// GetDojoOk returns a tuple with the Dojo field value
// and a boolean to check if the value has been set.
func (o *JavaScriptFrameworkSupport) GetDojoOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Dojo, true
}

// SetDojo sets field value
func (o *JavaScriptFrameworkSupport) SetDojo(v bool) {
	o.Dojo = v
}

// GetExtJS returns the ExtJS field value
func (o *JavaScriptFrameworkSupport) GetExtJS() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.ExtJS
}

// GetExtJSOk returns a tuple with the ExtJS field value
// and a boolean to check if the value has been set.
func (o *JavaScriptFrameworkSupport) GetExtJSOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExtJS, true
}

// SetExtJS sets field value
func (o *JavaScriptFrameworkSupport) SetExtJS(v bool) {
	o.ExtJS = v
}

// GetIcefaces returns the Icefaces field value
func (o *JavaScriptFrameworkSupport) GetIcefaces() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Icefaces
}

// GetIcefacesOk returns a tuple with the Icefaces field value
// and a boolean to check if the value has been set.
func (o *JavaScriptFrameworkSupport) GetIcefacesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Icefaces, true
}

// SetIcefaces sets field value
func (o *JavaScriptFrameworkSupport) SetIcefaces(v bool) {
	o.Icefaces = v
}

// GetJQuery returns the JQuery field value
func (o *JavaScriptFrameworkSupport) GetJQuery() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.JQuery
}

// GetJQueryOk returns a tuple with the JQuery field value
// and a boolean to check if the value has been set.
func (o *JavaScriptFrameworkSupport) GetJQueryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JQuery, true
}

// SetJQuery sets field value
func (o *JavaScriptFrameworkSupport) SetJQuery(v bool) {
	o.JQuery = v
}

// GetMooTools returns the MooTools field value
func (o *JavaScriptFrameworkSupport) GetMooTools() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.MooTools
}

// GetMooToolsOk returns a tuple with the MooTools field value
// and a boolean to check if the value has been set.
func (o *JavaScriptFrameworkSupport) GetMooToolsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MooTools, true
}

// SetMooTools sets field value
func (o *JavaScriptFrameworkSupport) SetMooTools(v bool) {
	o.MooTools = v
}

// GetPrototype returns the Prototype field value
func (o *JavaScriptFrameworkSupport) GetPrototype() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Prototype
}

// GetPrototypeOk returns a tuple with the Prototype field value
// and a boolean to check if the value has been set.
func (o *JavaScriptFrameworkSupport) GetPrototypeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Prototype, true
}

// SetPrototype sets field value
func (o *JavaScriptFrameworkSupport) SetPrototype(v bool) {
	o.Prototype = v
}

// GetActiveXObject returns the ActiveXObject field value
func (o *JavaScriptFrameworkSupport) GetActiveXObject() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.ActiveXObject
}

// GetActiveXObjectOk returns a tuple with the ActiveXObject field value
// and a boolean to check if the value has been set.
func (o *JavaScriptFrameworkSupport) GetActiveXObjectOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ActiveXObject, true
}

// SetActiveXObject sets field value
func (o *JavaScriptFrameworkSupport) SetActiveXObject(v bool) {
	o.ActiveXObject = v
}

func (o JavaScriptFrameworkSupport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["angular"] = o.Angular
	}
	if true {
		toSerialize["dojo"] = o.Dojo
	}
	if true {
		toSerialize["extJS"] = o.ExtJS
	}
	if true {
		toSerialize["icefaces"] = o.Icefaces
	}
	if true {
		toSerialize["jQuery"] = o.JQuery
	}
	if true {
		toSerialize["mooTools"] = o.MooTools
	}
	if true {
		toSerialize["prototype"] = o.Prototype
	}
	if true {
		toSerialize["activeXObject"] = o.ActiveXObject
	}
	return json.Marshal(toSerialize)
}

type NullableJavaScriptFrameworkSupport struct {
	value *JavaScriptFrameworkSupport
	isSet bool
}

func (v NullableJavaScriptFrameworkSupport) Get() *JavaScriptFrameworkSupport {
	return v.value
}

func (v *NullableJavaScriptFrameworkSupport) Set(val *JavaScriptFrameworkSupport) {
	v.value = val
	v.isSet = true
}

func (v NullableJavaScriptFrameworkSupport) IsSet() bool {
	return v.isSet
}

func (v *NullableJavaScriptFrameworkSupport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJavaScriptFrameworkSupport(val *JavaScriptFrameworkSupport) *NullableJavaScriptFrameworkSupport {
	return &NullableJavaScriptFrameworkSupport{value: val, isSet: true}
}

func (v NullableJavaScriptFrameworkSupport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJavaScriptFrameworkSupport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


