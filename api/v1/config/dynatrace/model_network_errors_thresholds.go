/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// NetworkErrorsThresholds Custom thresholds for network errors. If not set, automatic mode is used.    **All** of these conditions must be met to trigger an alert.
type NetworkErrorsThresholds struct {
	// Receive/transmit error packet percentage is higher than *X*% in 3 out of 5 samples.
	ErrorsPercentage int32 `json:"errorsPercentage"`
	// Total receive/transmit packets rate is higher than *X* packets per second in 3 out of 5 samples.
	TotalPacketsRate int32 `json:"totalPacketsRate"`
}

// NewNetworkErrorsThresholds instantiates a new NetworkErrorsThresholds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkErrorsThresholds(errorsPercentage int32, totalPacketsRate int32, ) *NetworkErrorsThresholds {
	this := NetworkErrorsThresholds{}
	this.ErrorsPercentage = errorsPercentage
	this.TotalPacketsRate = totalPacketsRate
	return &this
}

// NewNetworkErrorsThresholdsWithDefaults instantiates a new NetworkErrorsThresholds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkErrorsThresholdsWithDefaults() *NetworkErrorsThresholds {
	this := NetworkErrorsThresholds{}
	return &this
}

// GetErrorsPercentage returns the ErrorsPercentage field value
func (o *NetworkErrorsThresholds) GetErrorsPercentage() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.ErrorsPercentage
}

// GetErrorsPercentageOk returns a tuple with the ErrorsPercentage field value
// and a boolean to check if the value has been set.
func (o *NetworkErrorsThresholds) GetErrorsPercentageOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ErrorsPercentage, true
}

// SetErrorsPercentage sets field value
func (o *NetworkErrorsThresholds) SetErrorsPercentage(v int32) {
	o.ErrorsPercentage = v
}

// GetTotalPacketsRate returns the TotalPacketsRate field value
func (o *NetworkErrorsThresholds) GetTotalPacketsRate() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.TotalPacketsRate
}

// GetTotalPacketsRateOk returns a tuple with the TotalPacketsRate field value
// and a boolean to check if the value has been set.
func (o *NetworkErrorsThresholds) GetTotalPacketsRateOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TotalPacketsRate, true
}

// SetTotalPacketsRate sets field value
func (o *NetworkErrorsThresholds) SetTotalPacketsRate(v int32) {
	o.TotalPacketsRate = v
}

func (o NetworkErrorsThresholds) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["errorsPercentage"] = o.ErrorsPercentage
	}
	if true {
		toSerialize["totalPacketsRate"] = o.TotalPacketsRate
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkErrorsThresholds struct {
	value *NetworkErrorsThresholds
	isSet bool
}

func (v NullableNetworkErrorsThresholds) Get() *NetworkErrorsThresholds {
	return v.value
}

func (v *NullableNetworkErrorsThresholds) Set(val *NetworkErrorsThresholds) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkErrorsThresholds) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkErrorsThresholds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkErrorsThresholds(val *NetworkErrorsThresholds) *NullableNetworkErrorsThresholds {
	return &NullableNetworkErrorsThresholds{value: val, isSet: true}
}

func (v NullableNetworkErrorsThresholds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkErrorsThresholds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


