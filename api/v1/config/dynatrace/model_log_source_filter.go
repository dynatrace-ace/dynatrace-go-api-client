/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// LogSourceFilter Configuration of the log filter for a custom log metric.   If several criteria are specified, the AND logic applies.
type LogSourceFilter struct {
	// A list of filtering criteria for log path.   If several criteria are specified, the OR logic applies.
	PathDefinitions *[]PathDefinition `json:"pathDefinitions,omitempty"`
	// A list of Dynatrace entities, where the log can originate from. Specify Dynatrace entity IDs here.    Allowed types of entities are `PROCESS_GROUP` and `PROCESS_GROUP_INSTANCE`. You can't mix entity types.   If several entities are specified, the OR logic applies.   This field is mutually exclusive with the **osTypes** field.
	SourceEntities *[]string `json:"sourceEntities,omitempty"`
	// A list of hosts, where the log can originate from. Specify Dynatrace entity IDs here.   If several hosts are specified, the OR logic applies.
	HostFilters *[]string `json:"hostFilters,omitempty"`
	// A list of operating system types, where the log can originate from.   If set, **only OS logs** are included in the result.   If several OS are specified, the OR logic applies.   This field is mutually exclusive with the **sourceEntities** field.
	OsTypes *[]string `json:"osTypes,omitempty"`
}

// NewLogSourceFilter instantiates a new LogSourceFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogSourceFilter() *LogSourceFilter {
	this := LogSourceFilter{}
	return &this
}

// NewLogSourceFilterWithDefaults instantiates a new LogSourceFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogSourceFilterWithDefaults() *LogSourceFilter {
	this := LogSourceFilter{}
	return &this
}

// GetPathDefinitions returns the PathDefinitions field value if set, zero value otherwise.
func (o *LogSourceFilter) GetPathDefinitions() []PathDefinition {
	if o == nil || o.PathDefinitions == nil {
		var ret []PathDefinition
		return ret
	}
	return *o.PathDefinitions
}

// GetPathDefinitionsOk returns a tuple with the PathDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSourceFilter) GetPathDefinitionsOk() (*[]PathDefinition, bool) {
	if o == nil || o.PathDefinitions == nil {
		return nil, false
	}
	return o.PathDefinitions, true
}

// HasPathDefinitions returns a boolean if a field has been set.
func (o *LogSourceFilter) HasPathDefinitions() bool {
	if o != nil && o.PathDefinitions != nil {
		return true
	}

	return false
}

// SetPathDefinitions gets a reference to the given []PathDefinition and assigns it to the PathDefinitions field.
func (o *LogSourceFilter) SetPathDefinitions(v []PathDefinition) {
	o.PathDefinitions = &v
}

// GetSourceEntities returns the SourceEntities field value if set, zero value otherwise.
func (o *LogSourceFilter) GetSourceEntities() []string {
	if o == nil || o.SourceEntities == nil {
		var ret []string
		return ret
	}
	return *o.SourceEntities
}

// GetSourceEntitiesOk returns a tuple with the SourceEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSourceFilter) GetSourceEntitiesOk() (*[]string, bool) {
	if o == nil || o.SourceEntities == nil {
		return nil, false
	}
	return o.SourceEntities, true
}

// HasSourceEntities returns a boolean if a field has been set.
func (o *LogSourceFilter) HasSourceEntities() bool {
	if o != nil && o.SourceEntities != nil {
		return true
	}

	return false
}

// SetSourceEntities gets a reference to the given []string and assigns it to the SourceEntities field.
func (o *LogSourceFilter) SetSourceEntities(v []string) {
	o.SourceEntities = &v
}

// GetHostFilters returns the HostFilters field value if set, zero value otherwise.
func (o *LogSourceFilter) GetHostFilters() []string {
	if o == nil || o.HostFilters == nil {
		var ret []string
		return ret
	}
	return *o.HostFilters
}

// GetHostFiltersOk returns a tuple with the HostFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSourceFilter) GetHostFiltersOk() (*[]string, bool) {
	if o == nil || o.HostFilters == nil {
		return nil, false
	}
	return o.HostFilters, true
}

// HasHostFilters returns a boolean if a field has been set.
func (o *LogSourceFilter) HasHostFilters() bool {
	if o != nil && o.HostFilters != nil {
		return true
	}

	return false
}

// SetHostFilters gets a reference to the given []string and assigns it to the HostFilters field.
func (o *LogSourceFilter) SetHostFilters(v []string) {
	o.HostFilters = &v
}

// GetOsTypes returns the OsTypes field value if set, zero value otherwise.
func (o *LogSourceFilter) GetOsTypes() []string {
	if o == nil || o.OsTypes == nil {
		var ret []string
		return ret
	}
	return *o.OsTypes
}

// GetOsTypesOk returns a tuple with the OsTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSourceFilter) GetOsTypesOk() (*[]string, bool) {
	if o == nil || o.OsTypes == nil {
		return nil, false
	}
	return o.OsTypes, true
}

// HasOsTypes returns a boolean if a field has been set.
func (o *LogSourceFilter) HasOsTypes() bool {
	if o != nil && o.OsTypes != nil {
		return true
	}

	return false
}

// SetOsTypes gets a reference to the given []string and assigns it to the OsTypes field.
func (o *LogSourceFilter) SetOsTypes(v []string) {
	o.OsTypes = &v
}

func (o LogSourceFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PathDefinitions != nil {
		toSerialize["pathDefinitions"] = o.PathDefinitions
	}
	if o.SourceEntities != nil {
		toSerialize["sourceEntities"] = o.SourceEntities
	}
	if o.HostFilters != nil {
		toSerialize["hostFilters"] = o.HostFilters
	}
	if o.OsTypes != nil {
		toSerialize["osTypes"] = o.OsTypes
	}
	return json.Marshal(toSerialize)
}

type NullableLogSourceFilter struct {
	value *LogSourceFilter
	isSet bool
}

func (v NullableLogSourceFilter) Get() *LogSourceFilter {
	return v.value
}

func (v *NullableLogSourceFilter) Set(val *LogSourceFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableLogSourceFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableLogSourceFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogSourceFilter(val *LogSourceFilter) *NullableLogSourceFilter {
	return &NullableLogSourceFilter{value: val, isSet: true}
}

func (v NullableLogSourceFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogSourceFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


