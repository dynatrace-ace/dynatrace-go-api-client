/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TagFilterAlertingScope A scope filter for tags on entities.
type TagFilterAlertingScope struct {
	MetricEventAlertingScope
	TagFilter TagFilter `json:"tagFilter"`
}

// NewTagFilterAlertingScope instantiates a new TagFilterAlertingScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagFilterAlertingScope(tagFilter TagFilter, ) *TagFilterAlertingScope {
	this := TagFilterAlertingScope{}
	this.TagFilter = tagFilter
	return &this
}

// NewTagFilterAlertingScopeWithDefaults instantiates a new TagFilterAlertingScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagFilterAlertingScopeWithDefaults() *TagFilterAlertingScope {
	this := TagFilterAlertingScope{}
	return &this
}

// GetTagFilter returns the TagFilter field value
func (o *TagFilterAlertingScope) GetTagFilter() TagFilter {
	if o == nil  {
		var ret TagFilter
		return ret
	}

	return o.TagFilter
}

// GetTagFilterOk returns a tuple with the TagFilter field value
// and a boolean to check if the value has been set.
func (o *TagFilterAlertingScope) GetTagFilterOk() (*TagFilter, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TagFilter, true
}

// SetTagFilter sets field value
func (o *TagFilterAlertingScope) SetTagFilter(v TagFilter) {
	o.TagFilter = v
}

func (o TagFilterAlertingScope) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMetricEventAlertingScope, errMetricEventAlertingScope := json.Marshal(o.MetricEventAlertingScope)
	if errMetricEventAlertingScope != nil {
		return []byte{}, errMetricEventAlertingScope
	}
	errMetricEventAlertingScope = json.Unmarshal([]byte(serializedMetricEventAlertingScope), &toSerialize)
	if errMetricEventAlertingScope != nil {
		return []byte{}, errMetricEventAlertingScope
	}
	if true {
		toSerialize["tagFilter"] = o.TagFilter
	}
	return json.Marshal(toSerialize)
}

type NullableTagFilterAlertingScope struct {
	value *TagFilterAlertingScope
	isSet bool
}

func (v NullableTagFilterAlertingScope) Get() *TagFilterAlertingScope {
	return v.value
}

func (v *NullableTagFilterAlertingScope) Set(val *TagFilterAlertingScope) {
	v.value = val
	v.isSet = true
}

func (v NullableTagFilterAlertingScope) IsSet() bool {
	return v.isSet
}

func (v *NullableTagFilterAlertingScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagFilterAlertingScope(val *TagFilterAlertingScope) *NullableTagFilterAlertingScope {
	return &NullableTagFilterAlertingScope{value: val, isSet: true}
}

func (v NullableTagFilterAlertingScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagFilterAlertingScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


