/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// IpInRangeCompareOperation The condition of the `IP_IN_RANGE` type.   The condition checks whether the IP address belongs to a specified range.
type IpInRangeCompareOperation struct {
	CompareOperation
	// Inverts the operation of the condition. Set to `true` to turn **IP is in range** into **IP is not in range**.    If not set, then `false` is used.
	Negate *bool `json:"negate,omitempty"`
	// The lower boundary of the IP range.
	Lower string `json:"lower"`
	// The upper boundary of the IP range.
	Upper string `json:"upper"`
}

// NewIpInRangeCompareOperation instantiates a new IpInRangeCompareOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpInRangeCompareOperation(lower string, upper string, ) *IpInRangeCompareOperation {
	this := IpInRangeCompareOperation{}
	this.Lower = lower
	this.Upper = upper
	return &this
}

// NewIpInRangeCompareOperationWithDefaults instantiates a new IpInRangeCompareOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpInRangeCompareOperationWithDefaults() *IpInRangeCompareOperation {
	this := IpInRangeCompareOperation{}
	return &this
}

// GetNegate returns the Negate field value if set, zero value otherwise.
func (o *IpInRangeCompareOperation) GetNegate() bool {
	if o == nil || o.Negate == nil {
		var ret bool
		return ret
	}
	return *o.Negate
}

// GetNegateOk returns a tuple with the Negate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpInRangeCompareOperation) GetNegateOk() (*bool, bool) {
	if o == nil || o.Negate == nil {
		return nil, false
	}
	return o.Negate, true
}

// HasNegate returns a boolean if a field has been set.
func (o *IpInRangeCompareOperation) HasNegate() bool {
	if o != nil && o.Negate != nil {
		return true
	}

	return false
}

// SetNegate gets a reference to the given bool and assigns it to the Negate field.
func (o *IpInRangeCompareOperation) SetNegate(v bool) {
	o.Negate = &v
}

// GetLower returns the Lower field value
func (o *IpInRangeCompareOperation) GetLower() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Lower
}

// GetLowerOk returns a tuple with the Lower field value
// and a boolean to check if the value has been set.
func (o *IpInRangeCompareOperation) GetLowerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Lower, true
}

// SetLower sets field value
func (o *IpInRangeCompareOperation) SetLower(v string) {
	o.Lower = v
}

// GetUpper returns the Upper field value
func (o *IpInRangeCompareOperation) GetUpper() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Upper
}

// GetUpperOk returns a tuple with the Upper field value
// and a boolean to check if the value has been set.
func (o *IpInRangeCompareOperation) GetUpperOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Upper, true
}

// SetUpper sets field value
func (o *IpInRangeCompareOperation) SetUpper(v string) {
	o.Upper = v
}

func (o IpInRangeCompareOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedCompareOperation, errCompareOperation := json.Marshal(o.CompareOperation)
	if errCompareOperation != nil {
		return []byte{}, errCompareOperation
	}
	errCompareOperation = json.Unmarshal([]byte(serializedCompareOperation), &toSerialize)
	if errCompareOperation != nil {
		return []byte{}, errCompareOperation
	}
	if o.Negate != nil {
		toSerialize["negate"] = o.Negate
	}
	if true {
		toSerialize["lower"] = o.Lower
	}
	if true {
		toSerialize["upper"] = o.Upper
	}
	return json.Marshal(toSerialize)
}

type NullableIpInRangeCompareOperation struct {
	value *IpInRangeCompareOperation
	isSet bool
}

func (v NullableIpInRangeCompareOperation) Get() *IpInRangeCompareOperation {
	return v.value
}

func (v *NullableIpInRangeCompareOperation) Set(val *IpInRangeCompareOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableIpInRangeCompareOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableIpInRangeCompareOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpInRangeCompareOperation(val *IpInRangeCompareOperation) *NullableIpInRangeCompareOperation {
	return &NullableIpInRangeCompareOperation{value: val, isSet: true}
}

func (v NullableIpInRangeCompareOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpInRangeCompareOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


