/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// DataSource struct for DataSource
type DataSource struct {
	// The data source is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	// The source of the attribute to capture. Works in conjunction with **parameterName** or **methods** and **technology**.
	Source string `json:"source"`
	ValueProcessing *ValueProcessing `json:"valueProcessing,omitempty"`
	// The technology of the method to capture if the **source** value is `METHOD_PARAM`. \\n\\n Not applicable in other cases.
	Technology *string `json:"technology,omitempty"`
	// The technology of the session attribute to capture if the **source** value is `SESSION_ATTRIBUTE`. \\n\\n Not applicable in other cases.
	SessionAttributeTechnology *string `json:"sessionAttributeTechnology,omitempty"`
	// The method specification if the **source** value is `METHOD_PARAM`.    Not applicable in other cases.
	Methods *[]CapturedMethod `json:"methods,omitempty"`
	// The name of the web request parameter to capture.   Required if the **source** is one of the following: `POST_PARAMETER`, `GET_PARAMETER`, `REQUEST_HEADER`, `RESPONSE_HEADER`, `CUSTOM_ATTRIBUTE`.   Not applicable in other cases.
	ParameterName *string `json:"parameterName,omitempty"`
	Scope *ScopeConditions `json:"scope,omitempty"`
	// Specifies the location where the values are captured and stored.   Required if the **source** is one of the following: `GET_PARAMETER`, `URI`, `REQUEST_HEADER`, `RESPONSE_HEADER`.    Not applicable in other cases.    If the **source** value is `REQUEST_HEADER` or `RESPONSE_HEADER`, the `CAPTURE_AND_STORE_ON_BOTH` location is not allowed.
	CapturingAndStorageLocation *string `json:"capturingAndStorageLocation,omitempty"`
	// The IBM integration bus node type for which the value is captured.   This or `iibMethodNodeCondition` is required if the **source** is: `IIB_NODE`.   Not applicable in other cases.
	IibNodeType *string `json:"iibNodeType,omitempty"`
	IibMethodNodeCondition *ValueCondition `json:"iibMethodNodeCondition,omitempty"`
	CicsSDKMethodNodeCondition *ValueCondition `json:"cicsSDKMethodNodeCondition,omitempty"`
	IibLabelMethodNodeCondition *ValueCondition `json:"iibLabelMethodNodeCondition,omitempty"`
	// The key of the span attribute to capture.   Required if the **source** is: `SPAN_ATTRIBUTE`.   Not applicable in other cases.
	SpanAttributeKey *string `json:"spanAttributeKey,omitempty"`
}

// NewDataSource instantiates a new DataSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataSource(enabled bool, source string, ) *DataSource {
	this := DataSource{}
	this.Enabled = enabled
	this.Source = source
	return &this
}

// NewDataSourceWithDefaults instantiates a new DataSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataSourceWithDefaults() *DataSource {
	this := DataSource{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *DataSource) GetEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DataSource) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DataSource) SetEnabled(v bool) {
	o.Enabled = v
}

// GetSource returns the Source field value
func (o *DataSource) GetSource() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *DataSource) GetSourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *DataSource) SetSource(v string) {
	o.Source = v
}

// GetValueProcessing returns the ValueProcessing field value if set, zero value otherwise.
func (o *DataSource) GetValueProcessing() ValueProcessing {
	if o == nil || o.ValueProcessing == nil {
		var ret ValueProcessing
		return ret
	}
	return *o.ValueProcessing
}

// GetValueProcessingOk returns a tuple with the ValueProcessing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetValueProcessingOk() (*ValueProcessing, bool) {
	if o == nil || o.ValueProcessing == nil {
		return nil, false
	}
	return o.ValueProcessing, true
}

// HasValueProcessing returns a boolean if a field has been set.
func (o *DataSource) HasValueProcessing() bool {
	if o != nil && o.ValueProcessing != nil {
		return true
	}

	return false
}

// SetValueProcessing gets a reference to the given ValueProcessing and assigns it to the ValueProcessing field.
func (o *DataSource) SetValueProcessing(v ValueProcessing) {
	o.ValueProcessing = &v
}

// GetTechnology returns the Technology field value if set, zero value otherwise.
func (o *DataSource) GetTechnology() string {
	if o == nil || o.Technology == nil {
		var ret string
		return ret
	}
	return *o.Technology
}

// GetTechnologyOk returns a tuple with the Technology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetTechnologyOk() (*string, bool) {
	if o == nil || o.Technology == nil {
		return nil, false
	}
	return o.Technology, true
}

// HasTechnology returns a boolean if a field has been set.
func (o *DataSource) HasTechnology() bool {
	if o != nil && o.Technology != nil {
		return true
	}

	return false
}

// SetTechnology gets a reference to the given string and assigns it to the Technology field.
func (o *DataSource) SetTechnology(v string) {
	o.Technology = &v
}

// GetSessionAttributeTechnology returns the SessionAttributeTechnology field value if set, zero value otherwise.
func (o *DataSource) GetSessionAttributeTechnology() string {
	if o == nil || o.SessionAttributeTechnology == nil {
		var ret string
		return ret
	}
	return *o.SessionAttributeTechnology
}

// GetSessionAttributeTechnologyOk returns a tuple with the SessionAttributeTechnology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetSessionAttributeTechnologyOk() (*string, bool) {
	if o == nil || o.SessionAttributeTechnology == nil {
		return nil, false
	}
	return o.SessionAttributeTechnology, true
}

// HasSessionAttributeTechnology returns a boolean if a field has been set.
func (o *DataSource) HasSessionAttributeTechnology() bool {
	if o != nil && o.SessionAttributeTechnology != nil {
		return true
	}

	return false
}

// SetSessionAttributeTechnology gets a reference to the given string and assigns it to the SessionAttributeTechnology field.
func (o *DataSource) SetSessionAttributeTechnology(v string) {
	o.SessionAttributeTechnology = &v
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *DataSource) GetMethods() []CapturedMethod {
	if o == nil || o.Methods == nil {
		var ret []CapturedMethod
		return ret
	}
	return *o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetMethodsOk() (*[]CapturedMethod, bool) {
	if o == nil || o.Methods == nil {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *DataSource) HasMethods() bool {
	if o != nil && o.Methods != nil {
		return true
	}

	return false
}

// SetMethods gets a reference to the given []CapturedMethod and assigns it to the Methods field.
func (o *DataSource) SetMethods(v []CapturedMethod) {
	o.Methods = &v
}

// GetParameterName returns the ParameterName field value if set, zero value otherwise.
func (o *DataSource) GetParameterName() string {
	if o == nil || o.ParameterName == nil {
		var ret string
		return ret
	}
	return *o.ParameterName
}

// GetParameterNameOk returns a tuple with the ParameterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetParameterNameOk() (*string, bool) {
	if o == nil || o.ParameterName == nil {
		return nil, false
	}
	return o.ParameterName, true
}

// HasParameterName returns a boolean if a field has been set.
func (o *DataSource) HasParameterName() bool {
	if o != nil && o.ParameterName != nil {
		return true
	}

	return false
}

// SetParameterName gets a reference to the given string and assigns it to the ParameterName field.
func (o *DataSource) SetParameterName(v string) {
	o.ParameterName = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *DataSource) GetScope() ScopeConditions {
	if o == nil || o.Scope == nil {
		var ret ScopeConditions
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetScopeOk() (*ScopeConditions, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *DataSource) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given ScopeConditions and assigns it to the Scope field.
func (o *DataSource) SetScope(v ScopeConditions) {
	o.Scope = &v
}

// GetCapturingAndStorageLocation returns the CapturingAndStorageLocation field value if set, zero value otherwise.
func (o *DataSource) GetCapturingAndStorageLocation() string {
	if o == nil || o.CapturingAndStorageLocation == nil {
		var ret string
		return ret
	}
	return *o.CapturingAndStorageLocation
}

// GetCapturingAndStorageLocationOk returns a tuple with the CapturingAndStorageLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetCapturingAndStorageLocationOk() (*string, bool) {
	if o == nil || o.CapturingAndStorageLocation == nil {
		return nil, false
	}
	return o.CapturingAndStorageLocation, true
}

// HasCapturingAndStorageLocation returns a boolean if a field has been set.
func (o *DataSource) HasCapturingAndStorageLocation() bool {
	if o != nil && o.CapturingAndStorageLocation != nil {
		return true
	}

	return false
}

// SetCapturingAndStorageLocation gets a reference to the given string and assigns it to the CapturingAndStorageLocation field.
func (o *DataSource) SetCapturingAndStorageLocation(v string) {
	o.CapturingAndStorageLocation = &v
}

// GetIibNodeType returns the IibNodeType field value if set, zero value otherwise.
func (o *DataSource) GetIibNodeType() string {
	if o == nil || o.IibNodeType == nil {
		var ret string
		return ret
	}
	return *o.IibNodeType
}

// GetIibNodeTypeOk returns a tuple with the IibNodeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetIibNodeTypeOk() (*string, bool) {
	if o == nil || o.IibNodeType == nil {
		return nil, false
	}
	return o.IibNodeType, true
}

// HasIibNodeType returns a boolean if a field has been set.
func (o *DataSource) HasIibNodeType() bool {
	if o != nil && o.IibNodeType != nil {
		return true
	}

	return false
}

// SetIibNodeType gets a reference to the given string and assigns it to the IibNodeType field.
func (o *DataSource) SetIibNodeType(v string) {
	o.IibNodeType = &v
}

// GetIibMethodNodeCondition returns the IibMethodNodeCondition field value if set, zero value otherwise.
func (o *DataSource) GetIibMethodNodeCondition() ValueCondition {
	if o == nil || o.IibMethodNodeCondition == nil {
		var ret ValueCondition
		return ret
	}
	return *o.IibMethodNodeCondition
}

// GetIibMethodNodeConditionOk returns a tuple with the IibMethodNodeCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetIibMethodNodeConditionOk() (*ValueCondition, bool) {
	if o == nil || o.IibMethodNodeCondition == nil {
		return nil, false
	}
	return o.IibMethodNodeCondition, true
}

// HasIibMethodNodeCondition returns a boolean if a field has been set.
func (o *DataSource) HasIibMethodNodeCondition() bool {
	if o != nil && o.IibMethodNodeCondition != nil {
		return true
	}

	return false
}

// SetIibMethodNodeCondition gets a reference to the given ValueCondition and assigns it to the IibMethodNodeCondition field.
func (o *DataSource) SetIibMethodNodeCondition(v ValueCondition) {
	o.IibMethodNodeCondition = &v
}

// GetCicsSDKMethodNodeCondition returns the CicsSDKMethodNodeCondition field value if set, zero value otherwise.
func (o *DataSource) GetCicsSDKMethodNodeCondition() ValueCondition {
	if o == nil || o.CicsSDKMethodNodeCondition == nil {
		var ret ValueCondition
		return ret
	}
	return *o.CicsSDKMethodNodeCondition
}

// GetCicsSDKMethodNodeConditionOk returns a tuple with the CicsSDKMethodNodeCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetCicsSDKMethodNodeConditionOk() (*ValueCondition, bool) {
	if o == nil || o.CicsSDKMethodNodeCondition == nil {
		return nil, false
	}
	return o.CicsSDKMethodNodeCondition, true
}

// HasCicsSDKMethodNodeCondition returns a boolean if a field has been set.
func (o *DataSource) HasCicsSDKMethodNodeCondition() bool {
	if o != nil && o.CicsSDKMethodNodeCondition != nil {
		return true
	}

	return false
}

// SetCicsSDKMethodNodeCondition gets a reference to the given ValueCondition and assigns it to the CicsSDKMethodNodeCondition field.
func (o *DataSource) SetCicsSDKMethodNodeCondition(v ValueCondition) {
	o.CicsSDKMethodNodeCondition = &v
}

// GetIibLabelMethodNodeCondition returns the IibLabelMethodNodeCondition field value if set, zero value otherwise.
func (o *DataSource) GetIibLabelMethodNodeCondition() ValueCondition {
	if o == nil || o.IibLabelMethodNodeCondition == nil {
		var ret ValueCondition
		return ret
	}
	return *o.IibLabelMethodNodeCondition
}

// GetIibLabelMethodNodeConditionOk returns a tuple with the IibLabelMethodNodeCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetIibLabelMethodNodeConditionOk() (*ValueCondition, bool) {
	if o == nil || o.IibLabelMethodNodeCondition == nil {
		return nil, false
	}
	return o.IibLabelMethodNodeCondition, true
}

// HasIibLabelMethodNodeCondition returns a boolean if a field has been set.
func (o *DataSource) HasIibLabelMethodNodeCondition() bool {
	if o != nil && o.IibLabelMethodNodeCondition != nil {
		return true
	}

	return false
}

// SetIibLabelMethodNodeCondition gets a reference to the given ValueCondition and assigns it to the IibLabelMethodNodeCondition field.
func (o *DataSource) SetIibLabelMethodNodeCondition(v ValueCondition) {
	o.IibLabelMethodNodeCondition = &v
}

// GetSpanAttributeKey returns the SpanAttributeKey field value if set, zero value otherwise.
func (o *DataSource) GetSpanAttributeKey() string {
	if o == nil || o.SpanAttributeKey == nil {
		var ret string
		return ret
	}
	return *o.SpanAttributeKey
}

// GetSpanAttributeKeyOk returns a tuple with the SpanAttributeKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataSource) GetSpanAttributeKeyOk() (*string, bool) {
	if o == nil || o.SpanAttributeKey == nil {
		return nil, false
	}
	return o.SpanAttributeKey, true
}

// HasSpanAttributeKey returns a boolean if a field has been set.
func (o *DataSource) HasSpanAttributeKey() bool {
	if o != nil && o.SpanAttributeKey != nil {
		return true
	}

	return false
}

// SetSpanAttributeKey gets a reference to the given string and assigns it to the SpanAttributeKey field.
func (o *DataSource) SetSpanAttributeKey(v string) {
	o.SpanAttributeKey = &v
}

func (o DataSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["source"] = o.Source
	}
	if o.ValueProcessing != nil {
		toSerialize["valueProcessing"] = o.ValueProcessing
	}
	if o.Technology != nil {
		toSerialize["technology"] = o.Technology
	}
	if o.SessionAttributeTechnology != nil {
		toSerialize["sessionAttributeTechnology"] = o.SessionAttributeTechnology
	}
	if o.Methods != nil {
		toSerialize["methods"] = o.Methods
	}
	if o.ParameterName != nil {
		toSerialize["parameterName"] = o.ParameterName
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.CapturingAndStorageLocation != nil {
		toSerialize["capturingAndStorageLocation"] = o.CapturingAndStorageLocation
	}
	if o.IibNodeType != nil {
		toSerialize["iibNodeType"] = o.IibNodeType
	}
	if o.IibMethodNodeCondition != nil {
		toSerialize["iibMethodNodeCondition"] = o.IibMethodNodeCondition
	}
	if o.CicsSDKMethodNodeCondition != nil {
		toSerialize["cicsSDKMethodNodeCondition"] = o.CicsSDKMethodNodeCondition
	}
	if o.IibLabelMethodNodeCondition != nil {
		toSerialize["iibLabelMethodNodeCondition"] = o.IibLabelMethodNodeCondition
	}
	if o.SpanAttributeKey != nil {
		toSerialize["spanAttributeKey"] = o.SpanAttributeKey
	}
	return json.Marshal(toSerialize)
}

type NullableDataSource struct {
	value *DataSource
	isSet bool
}

func (v NullableDataSource) Get() *DataSource {
	return v.value
}

func (v *NullableDataSource) Set(val *DataSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDataSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDataSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataSource(val *DataSource) *NullableDataSource {
	return &NullableDataSource{value: val, isSet: true}
}

func (v NullableDataSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


