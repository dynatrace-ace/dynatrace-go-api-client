/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ComparisonBasic Defines how the matching is actually performed: what and how are we comparing.   The actual set of fields and possible values of the **operator** field depend on the **type** of the comparison. \\n\\nFind the list of actual models in the description of the **type** field and check the description of the model you need.
type ComparisonBasic struct {
	// Operator of the comparison. You can reverse it by setting **negate** to `true`.   Possible values depend on the **type** of the comparison. Find the list of actuala models in the description of the **type** field and check the description of the model you need.
	Operator string `json:"operator"`
	// The value to compare to.
	Value *interface{} `json:"value,omitempty"`
	// Reverses the comparison **operator**. For example it turns the **begins with** into **does not begin with**.
	Negate bool `json:"negate"`
	// The comparison is case-sensitive (`true`) or insensitive (`false`).
	CaseSensitive *bool `json:"caseSensitive,omitempty"`
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `STRING` -> StringComparison  * `INDEXED_NAME` -> IndexedNameComparison  * `INDEXED_STRING` -> IndexedStringComparison  * `INTEGER` -> IntegerComparison  * `SERVICE_TYPE` -> ServiceTypeComparison  * `PAAS_TYPE` -> PaasTypeComparison  * `CLOUD_TYPE` -> CloudTypeComparison  * `AZURE_SKU` -> AzureSkuComparision  * `AZURE_COMPUTE_MODE` -> AzureComputeModeComparison  * `ENTITY_ID` -> EntityIdComparison  * `SIMPLE_TECH` -> SimpleTechComparison  * `SIMPLE_HOST_TECH` -> SimpleHostTechComparison  * `SERVICE_TOPOLOGY` -> ServiceTopologyComparison  * `DATABASE_TOPOLOGY` -> DatabaseTopologyComparison  * `OS_TYPE` -> OsTypeComparison  * `HYPERVISOR_TYPE` -> HypervisorTypeComparision  * `IP_ADDRESS` -> IpAddressComparison  * `OS_ARCHITECTURE` -> OsArchitectureComparison  * `BITNESS` -> BitnessComparision  * `APPLICATION_TYPE` -> ApplicationTypeComparison  * `MOBILE_PLATFORM` -> MobilePlatformComparison  * `CUSTOM_APPLICATION_TYPE` -> CustomApplicationTypeComparison  * `DCRUM_DECODER_TYPE` -> DcrumDecoderComparison  * `SYNTHETIC_ENGINE_TYPE` -> SyntheticEngineTypeComparison  * `TAG` -> TagComparison  * `INDEXED_TAG` -> IndexedTagComparison
	Type string `json:"type"`
}

// NewComparisonBasic instantiates a new ComparisonBasic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComparisonBasic(operator string, negate bool, type_ string) *ComparisonBasic {
	this := ComparisonBasic{}
	this.Operator = operator
	this.Negate = negate
	this.Type = type_
	return &this
}

// NewComparisonBasicWithDefaults instantiates a new ComparisonBasic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComparisonBasicWithDefaults() *ComparisonBasic {
	this := ComparisonBasic{}
	return &this
}

// GetOperator returns the Operator field value
func (o *ComparisonBasic) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *ComparisonBasic) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *ComparisonBasic) SetOperator(v string) {
	o.Operator = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ComparisonBasic) GetValue() interface{} {
	if o == nil || o.Value == nil {
		var ret interface{}
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComparisonBasic) GetValueOk() (*interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ComparisonBasic) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *ComparisonBasic) SetValue(v interface{}) {
	o.Value = &v
}

// GetNegate returns the Negate field value
func (o *ComparisonBasic) GetNegate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Negate
}

// GetNegateOk returns a tuple with the Negate field value
// and a boolean to check if the value has been set.
func (o *ComparisonBasic) GetNegateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Negate, true
}

// SetNegate sets field value
func (o *ComparisonBasic) SetNegate(v bool) {
	o.Negate = v
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *ComparisonBasic) GetCaseSensitive() bool {
	if o == nil || o.CaseSensitive == nil {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComparisonBasic) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || o.CaseSensitive == nil {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *ComparisonBasic) HasCaseSensitive() bool {
	if o != nil && o.CaseSensitive != nil {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *ComparisonBasic) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

// GetType returns the Type field value
func (o *ComparisonBasic) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ComparisonBasic) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ComparisonBasic) SetType(v string) {
	o.Type = v
}

func (o ComparisonBasic) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["operator"] = o.Operator
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["negate"] = o.Negate
	}
	if o.CaseSensitive != nil {
		toSerialize["caseSensitive"] = o.CaseSensitive
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableComparisonBasic struct {
	value *ComparisonBasic
	isSet bool
}

func (v NullableComparisonBasic) Get() *ComparisonBasic {
	return v.value
}

func (v *NullableComparisonBasic) Set(val *ComparisonBasic) {
	v.value = val
	v.isSet = true
}

func (v NullableComparisonBasic) IsSet() bool {
	return v.isSet
}

func (v *NullableComparisonBasic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComparisonBasic(val *ComparisonBasic) *NullableComparisonBasic {
	return &NullableComparisonBasic{value: val, isSet: true}
}

func (v NullableComparisonBasic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComparisonBasic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
