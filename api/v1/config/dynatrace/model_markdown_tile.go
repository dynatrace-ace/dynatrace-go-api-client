/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MarkdownTile Configuration of the Markdown tile.
type MarkdownTile struct {
	Tile
	// The markdown-formatted content of the tile.
	Markdown string `json:"markdown"`
}

// NewMarkdownTile instantiates a new MarkdownTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarkdownTile(markdown string, ) *MarkdownTile {
	this := MarkdownTile{}
	this.Markdown = markdown
	return &this
}

// NewMarkdownTileWithDefaults instantiates a new MarkdownTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarkdownTileWithDefaults() *MarkdownTile {
	this := MarkdownTile{}
	return &this
}

// GetMarkdown returns the Markdown field value
func (o *MarkdownTile) GetMarkdown() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Markdown
}

// GetMarkdownOk returns a tuple with the Markdown field value
// and a boolean to check if the value has been set.
func (o *MarkdownTile) GetMarkdownOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Markdown, true
}

// SetMarkdown sets field value
func (o *MarkdownTile) SetMarkdown(v string) {
	o.Markdown = v
}

func (o MarkdownTile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTile, errTile := json.Marshal(o.Tile)
	if errTile != nil {
		return []byte{}, errTile
	}
	errTile = json.Unmarshal([]byte(serializedTile), &toSerialize)
	if errTile != nil {
		return []byte{}, errTile
	}
	if true {
		toSerialize["markdown"] = o.Markdown
	}
	return json.Marshal(toSerialize)
}

type NullableMarkdownTile struct {
	value *MarkdownTile
	isSet bool
}

func (v NullableMarkdownTile) Get() *MarkdownTile {
	return v.value
}

func (v *NullableMarkdownTile) Set(val *MarkdownTile) {
	v.value = val
	v.isSet = true
}

func (v NullableMarkdownTile) IsSet() bool {
	return v.isSet
}

func (v *NullableMarkdownTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarkdownTile(val *MarkdownTile) *NullableMarkdownTile {
	return &NullableMarkdownTile{value: val, isSet: true}
}

func (v NullableMarkdownTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarkdownTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


