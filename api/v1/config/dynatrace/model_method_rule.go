/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MethodRule struct for MethodRule
type MethodRule struct {
	// The ID of the method rule.
	Id *string `json:"id,omitempty"`
	// The method to instrument.
	MethodName string `json:"methodName"`
	// Fully qualified types of argument the method expects.
	ArgumentTypes *[]string `json:"argumentTypes,omitempty"`
	// Fully qualified type the method returns.
	ReturnType string `json:"returnType"`
}

// NewMethodRule instantiates a new MethodRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMethodRule(methodName string, returnType string, ) *MethodRule {
	this := MethodRule{}
	this.MethodName = methodName
	this.ReturnType = returnType
	return &this
}

// NewMethodRuleWithDefaults instantiates a new MethodRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMethodRuleWithDefaults() *MethodRule {
	this := MethodRule{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MethodRule) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodRule) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MethodRule) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MethodRule) SetId(v string) {
	o.Id = &v
}

// GetMethodName returns the MethodName field value
func (o *MethodRule) GetMethodName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.MethodName
}

// GetMethodNameOk returns a tuple with the MethodName field value
// and a boolean to check if the value has been set.
func (o *MethodRule) GetMethodNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MethodName, true
}

// SetMethodName sets field value
func (o *MethodRule) SetMethodName(v string) {
	o.MethodName = v
}

// GetArgumentTypes returns the ArgumentTypes field value if set, zero value otherwise.
func (o *MethodRule) GetArgumentTypes() []string {
	if o == nil || o.ArgumentTypes == nil {
		var ret []string
		return ret
	}
	return *o.ArgumentTypes
}

// GetArgumentTypesOk returns a tuple with the ArgumentTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MethodRule) GetArgumentTypesOk() (*[]string, bool) {
	if o == nil || o.ArgumentTypes == nil {
		return nil, false
	}
	return o.ArgumentTypes, true
}

// HasArgumentTypes returns a boolean if a field has been set.
func (o *MethodRule) HasArgumentTypes() bool {
	if o != nil && o.ArgumentTypes != nil {
		return true
	}

	return false
}

// SetArgumentTypes gets a reference to the given []string and assigns it to the ArgumentTypes field.
func (o *MethodRule) SetArgumentTypes(v []string) {
	o.ArgumentTypes = &v
}

// GetReturnType returns the ReturnType field value
func (o *MethodRule) GetReturnType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ReturnType
}

// GetReturnTypeOk returns a tuple with the ReturnType field value
// and a boolean to check if the value has been set.
func (o *MethodRule) GetReturnTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ReturnType, true
}

// SetReturnType sets field value
func (o *MethodRule) SetReturnType(v string) {
	o.ReturnType = v
}

func (o MethodRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["methodName"] = o.MethodName
	}
	if o.ArgumentTypes != nil {
		toSerialize["argumentTypes"] = o.ArgumentTypes
	}
	if true {
		toSerialize["returnType"] = o.ReturnType
	}
	return json.Marshal(toSerialize)
}

type NullableMethodRule struct {
	value *MethodRule
	isSet bool
}

func (v NullableMethodRule) Get() *MethodRule {
	return v.value
}

func (v *NullableMethodRule) Set(val *MethodRule) {
	v.value = val
	v.isSet = true
}

func (v NullableMethodRule) IsSet() bool {
	return v.isSet
}

func (v *NullableMethodRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMethodRule(val *MethodRule) *NullableMethodRule {
	return &NullableMethodRule{value: val, isSet: true}
}

func (v NullableMethodRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMethodRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


