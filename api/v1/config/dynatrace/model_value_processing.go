/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ValueProcessing Process values as specified.
type ValueProcessing struct {
	ValueCondition *ValueCondition `json:"valueCondition,omitempty"`
	// Extract value from captured data per regex.
	ValueExtractorRegex *string `json:"valueExtractorRegex,omitempty"`
	// Split (preprocessed) string values at this separator.
	SplitAt *string `json:"splitAt,omitempty"`
	// Prune Whitespaces. Defaults to false.
	Trim bool `json:"trim"`
	ExtractSubstring *ExtractSubstring `json:"extractSubstring,omitempty"`
}

// NewValueProcessing instantiates a new ValueProcessing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueProcessing(trim bool, ) *ValueProcessing {
	this := ValueProcessing{}
	this.Trim = trim
	return &this
}

// NewValueProcessingWithDefaults instantiates a new ValueProcessing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueProcessingWithDefaults() *ValueProcessing {
	this := ValueProcessing{}
	return &this
}

// GetValueCondition returns the ValueCondition field value if set, zero value otherwise.
func (o *ValueProcessing) GetValueCondition() ValueCondition {
	if o == nil || o.ValueCondition == nil {
		var ret ValueCondition
		return ret
	}
	return *o.ValueCondition
}

// GetValueConditionOk returns a tuple with the ValueCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueProcessing) GetValueConditionOk() (*ValueCondition, bool) {
	if o == nil || o.ValueCondition == nil {
		return nil, false
	}
	return o.ValueCondition, true
}

// HasValueCondition returns a boolean if a field has been set.
func (o *ValueProcessing) HasValueCondition() bool {
	if o != nil && o.ValueCondition != nil {
		return true
	}

	return false
}

// SetValueCondition gets a reference to the given ValueCondition and assigns it to the ValueCondition field.
func (o *ValueProcessing) SetValueCondition(v ValueCondition) {
	o.ValueCondition = &v
}

// GetValueExtractorRegex returns the ValueExtractorRegex field value if set, zero value otherwise.
func (o *ValueProcessing) GetValueExtractorRegex() string {
	if o == nil || o.ValueExtractorRegex == nil {
		var ret string
		return ret
	}
	return *o.ValueExtractorRegex
}

// GetValueExtractorRegexOk returns a tuple with the ValueExtractorRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueProcessing) GetValueExtractorRegexOk() (*string, bool) {
	if o == nil || o.ValueExtractorRegex == nil {
		return nil, false
	}
	return o.ValueExtractorRegex, true
}

// HasValueExtractorRegex returns a boolean if a field has been set.
func (o *ValueProcessing) HasValueExtractorRegex() bool {
	if o != nil && o.ValueExtractorRegex != nil {
		return true
	}

	return false
}

// SetValueExtractorRegex gets a reference to the given string and assigns it to the ValueExtractorRegex field.
func (o *ValueProcessing) SetValueExtractorRegex(v string) {
	o.ValueExtractorRegex = &v
}

// GetSplitAt returns the SplitAt field value if set, zero value otherwise.
func (o *ValueProcessing) GetSplitAt() string {
	if o == nil || o.SplitAt == nil {
		var ret string
		return ret
	}
	return *o.SplitAt
}

// GetSplitAtOk returns a tuple with the SplitAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueProcessing) GetSplitAtOk() (*string, bool) {
	if o == nil || o.SplitAt == nil {
		return nil, false
	}
	return o.SplitAt, true
}

// HasSplitAt returns a boolean if a field has been set.
func (o *ValueProcessing) HasSplitAt() bool {
	if o != nil && o.SplitAt != nil {
		return true
	}

	return false
}

// SetSplitAt gets a reference to the given string and assigns it to the SplitAt field.
func (o *ValueProcessing) SetSplitAt(v string) {
	o.SplitAt = &v
}

// GetTrim returns the Trim field value
func (o *ValueProcessing) GetTrim() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Trim
}

// GetTrimOk returns a tuple with the Trim field value
// and a boolean to check if the value has been set.
func (o *ValueProcessing) GetTrimOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Trim, true
}

// SetTrim sets field value
func (o *ValueProcessing) SetTrim(v bool) {
	o.Trim = v
}

// GetExtractSubstring returns the ExtractSubstring field value if set, zero value otherwise.
func (o *ValueProcessing) GetExtractSubstring() ExtractSubstring {
	if o == nil || o.ExtractSubstring == nil {
		var ret ExtractSubstring
		return ret
	}
	return *o.ExtractSubstring
}

// GetExtractSubstringOk returns a tuple with the ExtractSubstring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValueProcessing) GetExtractSubstringOk() (*ExtractSubstring, bool) {
	if o == nil || o.ExtractSubstring == nil {
		return nil, false
	}
	return o.ExtractSubstring, true
}

// HasExtractSubstring returns a boolean if a field has been set.
func (o *ValueProcessing) HasExtractSubstring() bool {
	if o != nil && o.ExtractSubstring != nil {
		return true
	}

	return false
}

// SetExtractSubstring gets a reference to the given ExtractSubstring and assigns it to the ExtractSubstring field.
func (o *ValueProcessing) SetExtractSubstring(v ExtractSubstring) {
	o.ExtractSubstring = &v
}

func (o ValueProcessing) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ValueCondition != nil {
		toSerialize["valueCondition"] = o.ValueCondition
	}
	if o.ValueExtractorRegex != nil {
		toSerialize["valueExtractorRegex"] = o.ValueExtractorRegex
	}
	if o.SplitAt != nil {
		toSerialize["splitAt"] = o.SplitAt
	}
	if true {
		toSerialize["trim"] = o.Trim
	}
	if o.ExtractSubstring != nil {
		toSerialize["extractSubstring"] = o.ExtractSubstring
	}
	return json.Marshal(toSerialize)
}

type NullableValueProcessing struct {
	value *ValueProcessing
	isSet bool
}

func (v NullableValueProcessing) Get() *ValueProcessing {
	return v.value
}

func (v *NullableValueProcessing) Set(val *ValueProcessing) {
	v.value = val
	v.isSet = true
}

func (v NullableValueProcessing) IsSet() bool {
	return v.isSet
}

func (v *NullableValueProcessing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueProcessing(val *ValueProcessing) *NullableValueProcessing {
	return &NullableValueProcessing{value: val, isSet: true}
}

func (v NullableValueProcessing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueProcessing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


