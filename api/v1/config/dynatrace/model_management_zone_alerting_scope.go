/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ManagementZoneAlertingScope A scope filter for a management zone identifier.
type ManagementZoneAlertingScope struct {
	MetricEventAlertingScope
	// The management zone id to match on.
	MzId *string `json:"mzId,omitempty"`
}

// NewManagementZoneAlertingScope instantiates a new ManagementZoneAlertingScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementZoneAlertingScope() *ManagementZoneAlertingScope {
	this := ManagementZoneAlertingScope{}
	return &this
}

// NewManagementZoneAlertingScopeWithDefaults instantiates a new ManagementZoneAlertingScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementZoneAlertingScopeWithDefaults() *ManagementZoneAlertingScope {
	this := ManagementZoneAlertingScope{}
	return &this
}

// GetMzId returns the MzId field value if set, zero value otherwise.
func (o *ManagementZoneAlertingScope) GetMzId() string {
	if o == nil || o.MzId == nil {
		var ret string
		return ret
	}
	return *o.MzId
}

// GetMzIdOk returns a tuple with the MzId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementZoneAlertingScope) GetMzIdOk() (*string, bool) {
	if o == nil || o.MzId == nil {
		return nil, false
	}
	return o.MzId, true
}

// HasMzId returns a boolean if a field has been set.
func (o *ManagementZoneAlertingScope) HasMzId() bool {
	if o != nil && o.MzId != nil {
		return true
	}

	return false
}

// SetMzId gets a reference to the given string and assigns it to the MzId field.
func (o *ManagementZoneAlertingScope) SetMzId(v string) {
	o.MzId = &v
}

func (o ManagementZoneAlertingScope) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMetricEventAlertingScope, errMetricEventAlertingScope := json.Marshal(o.MetricEventAlertingScope)
	if errMetricEventAlertingScope != nil {
		return []byte{}, errMetricEventAlertingScope
	}
	errMetricEventAlertingScope = json.Unmarshal([]byte(serializedMetricEventAlertingScope), &toSerialize)
	if errMetricEventAlertingScope != nil {
		return []byte{}, errMetricEventAlertingScope
	}
	if o.MzId != nil {
		toSerialize["mzId"] = o.MzId
	}
	return json.Marshal(toSerialize)
}

type NullableManagementZoneAlertingScope struct {
	value *ManagementZoneAlertingScope
	isSet bool
}

func (v NullableManagementZoneAlertingScope) Get() *ManagementZoneAlertingScope {
	return v.value
}

func (v *NullableManagementZoneAlertingScope) Set(val *ManagementZoneAlertingScope) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementZoneAlertingScope) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementZoneAlertingScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementZoneAlertingScope(val *ManagementZoneAlertingScope) *NullableManagementZoneAlertingScope {
	return &NullableManagementZoneAlertingScope{value: val, isSet: true}
}

func (v NullableManagementZoneAlertingScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementZoneAlertingScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


