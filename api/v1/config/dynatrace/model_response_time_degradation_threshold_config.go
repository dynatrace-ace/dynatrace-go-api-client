/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ResponseTimeDegradationThresholdConfig Fixed thresholds for response time degradation detection.    Required if **detectionMode** is `DETECT_USING_FIXED_THRESHOLDS`. Not applicable otherwise.
type ResponseTimeDegradationThresholdConfig struct {
	// Response time during any 5-minute period to trigger an alert, in milliseconds.
	ResponseTimeThresholdMilliseconds int32 `json:"responseTimeThresholdMilliseconds"`
	// Response time of the 10% slowest during any 5-minute period to trigger an alert, in milliseconds.
	SlowestResponseTimeThresholdMilliseconds int32 `json:"slowestResponseTimeThresholdMilliseconds"`
	// Minimal service load to detect response time degradation.    Response time degradation of services with smaller load won't trigger alerts.
	LoadThreshold string `json:"loadThreshold"`
	// Sensitivity of the threshold.   With `low` sensitivity, high statistical confidence is used. Brief violations (for example, due to a surge in load) won't trigger alerts.   With `high` sensitivity, no statistical confidence is used. Each violation triggers an alert.
	Sensitivity string `json:"sensitivity"`
}

// NewResponseTimeDegradationThresholdConfig instantiates a new ResponseTimeDegradationThresholdConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseTimeDegradationThresholdConfig(responseTimeThresholdMilliseconds int32, slowestResponseTimeThresholdMilliseconds int32, loadThreshold string, sensitivity string, ) *ResponseTimeDegradationThresholdConfig {
	this := ResponseTimeDegradationThresholdConfig{}
	this.ResponseTimeThresholdMilliseconds = responseTimeThresholdMilliseconds
	this.SlowestResponseTimeThresholdMilliseconds = slowestResponseTimeThresholdMilliseconds
	this.LoadThreshold = loadThreshold
	this.Sensitivity = sensitivity
	return &this
}

// NewResponseTimeDegradationThresholdConfigWithDefaults instantiates a new ResponseTimeDegradationThresholdConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseTimeDegradationThresholdConfigWithDefaults() *ResponseTimeDegradationThresholdConfig {
	this := ResponseTimeDegradationThresholdConfig{}
	return &this
}

// GetResponseTimeThresholdMilliseconds returns the ResponseTimeThresholdMilliseconds field value
func (o *ResponseTimeDegradationThresholdConfig) GetResponseTimeThresholdMilliseconds() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.ResponseTimeThresholdMilliseconds
}

// GetResponseTimeThresholdMillisecondsOk returns a tuple with the ResponseTimeThresholdMilliseconds field value
// and a boolean to check if the value has been set.
func (o *ResponseTimeDegradationThresholdConfig) GetResponseTimeThresholdMillisecondsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResponseTimeThresholdMilliseconds, true
}

// SetResponseTimeThresholdMilliseconds sets field value
func (o *ResponseTimeDegradationThresholdConfig) SetResponseTimeThresholdMilliseconds(v int32) {
	o.ResponseTimeThresholdMilliseconds = v
}

// GetSlowestResponseTimeThresholdMilliseconds returns the SlowestResponseTimeThresholdMilliseconds field value
func (o *ResponseTimeDegradationThresholdConfig) GetSlowestResponseTimeThresholdMilliseconds() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SlowestResponseTimeThresholdMilliseconds
}

// GetSlowestResponseTimeThresholdMillisecondsOk returns a tuple with the SlowestResponseTimeThresholdMilliseconds field value
// and a boolean to check if the value has been set.
func (o *ResponseTimeDegradationThresholdConfig) GetSlowestResponseTimeThresholdMillisecondsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SlowestResponseTimeThresholdMilliseconds, true
}

// SetSlowestResponseTimeThresholdMilliseconds sets field value
func (o *ResponseTimeDegradationThresholdConfig) SetSlowestResponseTimeThresholdMilliseconds(v int32) {
	o.SlowestResponseTimeThresholdMilliseconds = v
}

// GetLoadThreshold returns the LoadThreshold field value
func (o *ResponseTimeDegradationThresholdConfig) GetLoadThreshold() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.LoadThreshold
}

// GetLoadThresholdOk returns a tuple with the LoadThreshold field value
// and a boolean to check if the value has been set.
func (o *ResponseTimeDegradationThresholdConfig) GetLoadThresholdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LoadThreshold, true
}

// SetLoadThreshold sets field value
func (o *ResponseTimeDegradationThresholdConfig) SetLoadThreshold(v string) {
	o.LoadThreshold = v
}

// GetSensitivity returns the Sensitivity field value
func (o *ResponseTimeDegradationThresholdConfig) GetSensitivity() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Sensitivity
}

// GetSensitivityOk returns a tuple with the Sensitivity field value
// and a boolean to check if the value has been set.
func (o *ResponseTimeDegradationThresholdConfig) GetSensitivityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Sensitivity, true
}

// SetSensitivity sets field value
func (o *ResponseTimeDegradationThresholdConfig) SetSensitivity(v string) {
	o.Sensitivity = v
}

func (o ResponseTimeDegradationThresholdConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["responseTimeThresholdMilliseconds"] = o.ResponseTimeThresholdMilliseconds
	}
	if true {
		toSerialize["slowestResponseTimeThresholdMilliseconds"] = o.SlowestResponseTimeThresholdMilliseconds
	}
	if true {
		toSerialize["loadThreshold"] = o.LoadThreshold
	}
	if true {
		toSerialize["sensitivity"] = o.Sensitivity
	}
	return json.Marshal(toSerialize)
}

type NullableResponseTimeDegradationThresholdConfig struct {
	value *ResponseTimeDegradationThresholdConfig
	isSet bool
}

func (v NullableResponseTimeDegradationThresholdConfig) Get() *ResponseTimeDegradationThresholdConfig {
	return v.value
}

func (v *NullableResponseTimeDegradationThresholdConfig) Set(val *ResponseTimeDegradationThresholdConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseTimeDegradationThresholdConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseTimeDegradationThresholdConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseTimeDegradationThresholdConfig(val *ResponseTimeDegradationThresholdConfig) *NullableResponseTimeDegradationThresholdConfig {
	return &NullableResponseTimeDegradationThresholdConfig{value: val, isSet: true}
}

func (v NullableResponseTimeDegradationThresholdConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseTimeDegradationThresholdConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


