/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// RemoteEnvironmentConfigListDto struct for RemoteEnvironmentConfigListDto
type RemoteEnvironmentConfigListDto struct {
	Values *[]RemoteEnvironmentConfigStub `json:"values,omitempty"`
}

// NewRemoteEnvironmentConfigListDto instantiates a new RemoteEnvironmentConfigListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteEnvironmentConfigListDto() *RemoteEnvironmentConfigListDto {
	this := RemoteEnvironmentConfigListDto{}
	return &this
}

// NewRemoteEnvironmentConfigListDtoWithDefaults instantiates a new RemoteEnvironmentConfigListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteEnvironmentConfigListDtoWithDefaults() *RemoteEnvironmentConfigListDto {
	this := RemoteEnvironmentConfigListDto{}
	return &this
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *RemoteEnvironmentConfigListDto) GetValues() []RemoteEnvironmentConfigStub {
	if o == nil || o.Values == nil {
		var ret []RemoteEnvironmentConfigStub
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteEnvironmentConfigListDto) GetValuesOk() (*[]RemoteEnvironmentConfigStub, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *RemoteEnvironmentConfigListDto) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []RemoteEnvironmentConfigStub and assigns it to the Values field.
func (o *RemoteEnvironmentConfigListDto) SetValues(v []RemoteEnvironmentConfigStub) {
	o.Values = &v
}

func (o RemoteEnvironmentConfigListDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteEnvironmentConfigListDto struct {
	value *RemoteEnvironmentConfigListDto
	isSet bool
}

func (v NullableRemoteEnvironmentConfigListDto) Get() *RemoteEnvironmentConfigListDto {
	return v.value
}

func (v *NullableRemoteEnvironmentConfigListDto) Set(val *RemoteEnvironmentConfigListDto) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteEnvironmentConfigListDto) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteEnvironmentConfigListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteEnvironmentConfigListDto(val *RemoteEnvironmentConfigListDto) *NullableRemoteEnvironmentConfigListDto {
	return &NullableRemoteEnvironmentConfigListDto{value: val, isSet: true}
}

func (v NullableRemoteEnvironmentConfigListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteEnvironmentConfigListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


