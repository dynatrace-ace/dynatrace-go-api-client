/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ApplicationDataPrivacy Data privacy settings of the application.
type ApplicationDataPrivacy struct {
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
	// Dynatrace entity ID of the web application.
	Identifier *string `json:"identifier,omitempty"`
	// Set to `true` to disable data capture and cookies until JavaScriptAPI dtrum.enable() is called.
	DataCaptureOptInEnabled bool `json:"dataCaptureOptInEnabled"`
	// Set to `true` to set persistent cookie in order to recognize returning devices.
	PersistentCookieForUserTracking bool `json:"persistentCookieForUserTracking"`
	// How to handle browsers' \"Do Not Track\": `IGNORE_DO_NOT_TRACK`, or `CAPTURE_ANONYMIZED`, or `DO_NOT_CAPTURE`.
	DoNotTrackBehaviour string `json:"doNotTrackBehaviour"`
}

// NewApplicationDataPrivacy instantiates a new ApplicationDataPrivacy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationDataPrivacy(dataCaptureOptInEnabled bool, persistentCookieForUserTracking bool, doNotTrackBehaviour string, ) *ApplicationDataPrivacy {
	this := ApplicationDataPrivacy{}
	this.DataCaptureOptInEnabled = dataCaptureOptInEnabled
	this.PersistentCookieForUserTracking = persistentCookieForUserTracking
	this.DoNotTrackBehaviour = doNotTrackBehaviour
	return &this
}

// NewApplicationDataPrivacyWithDefaults instantiates a new ApplicationDataPrivacy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationDataPrivacyWithDefaults() *ApplicationDataPrivacy {
	this := ApplicationDataPrivacy{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ApplicationDataPrivacy) GetMetadata() ConfigurationMetadata {
	if o == nil || o.Metadata == nil {
		var ret ConfigurationMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDataPrivacy) GetMetadataOk() (*ConfigurationMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ApplicationDataPrivacy) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConfigurationMetadata and assigns it to the Metadata field.
func (o *ApplicationDataPrivacy) SetMetadata(v ConfigurationMetadata) {
	o.Metadata = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ApplicationDataPrivacy) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDataPrivacy) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ApplicationDataPrivacy) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *ApplicationDataPrivacy) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetDataCaptureOptInEnabled returns the DataCaptureOptInEnabled field value
func (o *ApplicationDataPrivacy) GetDataCaptureOptInEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.DataCaptureOptInEnabled
}

// GetDataCaptureOptInEnabledOk returns a tuple with the DataCaptureOptInEnabled field value
// and a boolean to check if the value has been set.
func (o *ApplicationDataPrivacy) GetDataCaptureOptInEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DataCaptureOptInEnabled, true
}

// SetDataCaptureOptInEnabled sets field value
func (o *ApplicationDataPrivacy) SetDataCaptureOptInEnabled(v bool) {
	o.DataCaptureOptInEnabled = v
}

// GetPersistentCookieForUserTracking returns the PersistentCookieForUserTracking field value
func (o *ApplicationDataPrivacy) GetPersistentCookieForUserTracking() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.PersistentCookieForUserTracking
}

// GetPersistentCookieForUserTrackingOk returns a tuple with the PersistentCookieForUserTracking field value
// and a boolean to check if the value has been set.
func (o *ApplicationDataPrivacy) GetPersistentCookieForUserTrackingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PersistentCookieForUserTracking, true
}

// SetPersistentCookieForUserTracking sets field value
func (o *ApplicationDataPrivacy) SetPersistentCookieForUserTracking(v bool) {
	o.PersistentCookieForUserTracking = v
}

// GetDoNotTrackBehaviour returns the DoNotTrackBehaviour field value
func (o *ApplicationDataPrivacy) GetDoNotTrackBehaviour() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DoNotTrackBehaviour
}

// GetDoNotTrackBehaviourOk returns a tuple with the DoNotTrackBehaviour field value
// and a boolean to check if the value has been set.
func (o *ApplicationDataPrivacy) GetDoNotTrackBehaviourOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DoNotTrackBehaviour, true
}

// SetDoNotTrackBehaviour sets field value
func (o *ApplicationDataPrivacy) SetDoNotTrackBehaviour(v string) {
	o.DoNotTrackBehaviour = v
}

func (o ApplicationDataPrivacy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	if true {
		toSerialize["dataCaptureOptInEnabled"] = o.DataCaptureOptInEnabled
	}
	if true {
		toSerialize["persistentCookieForUserTracking"] = o.PersistentCookieForUserTracking
	}
	if true {
		toSerialize["doNotTrackBehaviour"] = o.DoNotTrackBehaviour
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationDataPrivacy struct {
	value *ApplicationDataPrivacy
	isSet bool
}

func (v NullableApplicationDataPrivacy) Get() *ApplicationDataPrivacy {
	return v.value
}

func (v *NullableApplicationDataPrivacy) Set(val *ApplicationDataPrivacy) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationDataPrivacy) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationDataPrivacy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationDataPrivacy(val *ApplicationDataPrivacy) *NullableApplicationDataPrivacy {
	return &NullableApplicationDataPrivacy{value: val, isSet: true}
}

func (v NullableApplicationDataPrivacy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationDataPrivacy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


