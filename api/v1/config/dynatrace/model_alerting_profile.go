/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AlertingProfile Configuration of an alerting profile.
type AlertingProfile struct {
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
	// The ID of the alerting profile.
	Id *string `json:"id,omitempty"`
	// The name of the alerting profile, displayed in the UI.
	DisplayName string `json:"displayName"`
	// A list of severity rules.    The rules are evaluated from top to bottom. The first matching rule applies and further evaluation stops.   If you specify both severity rule and event filter, the AND logic applies.
	Rules *[]AlertingProfileSeverityRule `json:"rules,omitempty"`
	// The ID of the management zone to which the alerting profile applies.
	MzId *string `json:"mzId,omitempty"`
	// The list of event filters.   For all filters that are *negated* inside of these event filters, that is all \"Predefined\" as well as \"Custom\" (Title and/or Description) ones the AND logic applies. For all *non-negated* ones the OR logic applies. Between these two groups, negated and non-negated, the AND logic applies.   If you specify both severity rule and event filter, the AND logic applies.
	EventTypeFilters *[]AlertingEventTypeFilter `json:"eventTypeFilters,omitempty"`
}

// NewAlertingProfile instantiates a new AlertingProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertingProfile(displayName string, ) *AlertingProfile {
	this := AlertingProfile{}
	this.DisplayName = displayName
	return &this
}

// NewAlertingProfileWithDefaults instantiates a new AlertingProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertingProfileWithDefaults() *AlertingProfile {
	this := AlertingProfile{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *AlertingProfile) GetMetadata() ConfigurationMetadata {
	if o == nil || o.Metadata == nil {
		var ret ConfigurationMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertingProfile) GetMetadataOk() (*ConfigurationMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AlertingProfile) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConfigurationMetadata and assigns it to the Metadata field.
func (o *AlertingProfile) SetMetadata(v ConfigurationMetadata) {
	o.Metadata = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AlertingProfile) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertingProfile) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AlertingProfile) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AlertingProfile) SetId(v string) {
	o.Id = &v
}

// GetDisplayName returns the DisplayName field value
func (o *AlertingProfile) GetDisplayName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *AlertingProfile) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *AlertingProfile) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *AlertingProfile) GetRules() []AlertingProfileSeverityRule {
	if o == nil || o.Rules == nil {
		var ret []AlertingProfileSeverityRule
		return ret
	}
	return *o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertingProfile) GetRulesOk() (*[]AlertingProfileSeverityRule, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *AlertingProfile) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []AlertingProfileSeverityRule and assigns it to the Rules field.
func (o *AlertingProfile) SetRules(v []AlertingProfileSeverityRule) {
	o.Rules = &v
}

// GetMzId returns the MzId field value if set, zero value otherwise.
func (o *AlertingProfile) GetMzId() string {
	if o == nil || o.MzId == nil {
		var ret string
		return ret
	}
	return *o.MzId
}

// GetMzIdOk returns a tuple with the MzId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertingProfile) GetMzIdOk() (*string, bool) {
	if o == nil || o.MzId == nil {
		return nil, false
	}
	return o.MzId, true
}

// HasMzId returns a boolean if a field has been set.
func (o *AlertingProfile) HasMzId() bool {
	if o != nil && o.MzId != nil {
		return true
	}

	return false
}

// SetMzId gets a reference to the given string and assigns it to the MzId field.
func (o *AlertingProfile) SetMzId(v string) {
	o.MzId = &v
}

// GetEventTypeFilters returns the EventTypeFilters field value if set, zero value otherwise.
func (o *AlertingProfile) GetEventTypeFilters() []AlertingEventTypeFilter {
	if o == nil || o.EventTypeFilters == nil {
		var ret []AlertingEventTypeFilter
		return ret
	}
	return *o.EventTypeFilters
}

// GetEventTypeFiltersOk returns a tuple with the EventTypeFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertingProfile) GetEventTypeFiltersOk() (*[]AlertingEventTypeFilter, bool) {
	if o == nil || o.EventTypeFilters == nil {
		return nil, false
	}
	return o.EventTypeFilters, true
}

// HasEventTypeFilters returns a boolean if a field has been set.
func (o *AlertingProfile) HasEventTypeFilters() bool {
	if o != nil && o.EventTypeFilters != nil {
		return true
	}

	return false
}

// SetEventTypeFilters gets a reference to the given []AlertingEventTypeFilter and assigns it to the EventTypeFilters field.
func (o *AlertingProfile) SetEventTypeFilters(v []AlertingEventTypeFilter) {
	o.EventTypeFilters = &v
}

func (o AlertingProfile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	if o.MzId != nil {
		toSerialize["mzId"] = o.MzId
	}
	if o.EventTypeFilters != nil {
		toSerialize["eventTypeFilters"] = o.EventTypeFilters
	}
	return json.Marshal(toSerialize)
}

type NullableAlertingProfile struct {
	value *AlertingProfile
	isSet bool
}

func (v NullableAlertingProfile) Get() *AlertingProfile {
	return v.value
}

func (v *NullableAlertingProfile) Set(val *AlertingProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertingProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertingProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertingProfile(val *AlertingProfile) *NullableAlertingProfile {
	return &NullableAlertingProfile{value: val, isSet: true}
}

func (v NullableAlertingProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertingProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


