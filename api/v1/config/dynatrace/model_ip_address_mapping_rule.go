/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// IpAddressMappingRule Configuration of the IP address mapping to the geographic location.
type IpAddressMappingRule struct {
	IpAddressMappingLocation IpAddressMappingLocation `json:"ipAddressMappingLocation"`
	IpAddressRange IpAddressRange `json:"ipAddressRange"`
}

// NewIpAddressMappingRule instantiates a new IpAddressMappingRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpAddressMappingRule(ipAddressMappingLocation IpAddressMappingLocation, ipAddressRange IpAddressRange, ) *IpAddressMappingRule {
	this := IpAddressMappingRule{}
	this.IpAddressMappingLocation = ipAddressMappingLocation
	this.IpAddressRange = ipAddressRange
	return &this
}

// NewIpAddressMappingRuleWithDefaults instantiates a new IpAddressMappingRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpAddressMappingRuleWithDefaults() *IpAddressMappingRule {
	this := IpAddressMappingRule{}
	return &this
}

// GetIpAddressMappingLocation returns the IpAddressMappingLocation field value
func (o *IpAddressMappingRule) GetIpAddressMappingLocation() IpAddressMappingLocation {
	if o == nil  {
		var ret IpAddressMappingLocation
		return ret
	}

	return o.IpAddressMappingLocation
}

// GetIpAddressMappingLocationOk returns a tuple with the IpAddressMappingLocation field value
// and a boolean to check if the value has been set.
func (o *IpAddressMappingRule) GetIpAddressMappingLocationOk() (*IpAddressMappingLocation, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IpAddressMappingLocation, true
}

// SetIpAddressMappingLocation sets field value
func (o *IpAddressMappingRule) SetIpAddressMappingLocation(v IpAddressMappingLocation) {
	o.IpAddressMappingLocation = v
}

// GetIpAddressRange returns the IpAddressRange field value
func (o *IpAddressMappingRule) GetIpAddressRange() IpAddressRange {
	if o == nil  {
		var ret IpAddressRange
		return ret
	}

	return o.IpAddressRange
}

// GetIpAddressRangeOk returns a tuple with the IpAddressRange field value
// and a boolean to check if the value has been set.
func (o *IpAddressMappingRule) GetIpAddressRangeOk() (*IpAddressRange, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IpAddressRange, true
}

// SetIpAddressRange sets field value
func (o *IpAddressMappingRule) SetIpAddressRange(v IpAddressRange) {
	o.IpAddressRange = v
}

func (o IpAddressMappingRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ipAddressMappingLocation"] = o.IpAddressMappingLocation
	}
	if true {
		toSerialize["ipAddressRange"] = o.IpAddressRange
	}
	return json.Marshal(toSerialize)
}

type NullableIpAddressMappingRule struct {
	value *IpAddressMappingRule
	isSet bool
}

func (v NullableIpAddressMappingRule) Get() *IpAddressMappingRule {
	return v.value
}

func (v *NullableIpAddressMappingRule) Set(val *IpAddressMappingRule) {
	v.value = val
	v.isSet = true
}

func (v NullableIpAddressMappingRule) IsSet() bool {
	return v.isSet
}

func (v *NullableIpAddressMappingRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpAddressMappingRule(val *IpAddressMappingRule) *NullableIpAddressMappingRule {
	return &NullableIpAddressMappingRule{value: val, isSet: true}
}

func (v NullableIpAddressMappingRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpAddressMappingRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


