/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ApplicationFilter The condition of an application detection rule.
type ApplicationFilter struct {
	// The value to look for.
	Pattern string `json:"pattern"`
	// The operator of the matching.
	ApplicationMatchType string `json:"applicationMatchType"`
	// Where to look for the the **pattern** value.
	ApplicationMatchTarget string `json:"applicationMatchTarget"`
}

// NewApplicationFilter instantiates a new ApplicationFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationFilter(pattern string, applicationMatchType string, applicationMatchTarget string, ) *ApplicationFilter {
	this := ApplicationFilter{}
	this.Pattern = pattern
	this.ApplicationMatchType = applicationMatchType
	this.ApplicationMatchTarget = applicationMatchTarget
	return &this
}

// NewApplicationFilterWithDefaults instantiates a new ApplicationFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationFilterWithDefaults() *ApplicationFilter {
	this := ApplicationFilter{}
	return &this
}

// GetPattern returns the Pattern field value
func (o *ApplicationFilter) GetPattern() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value
// and a boolean to check if the value has been set.
func (o *ApplicationFilter) GetPatternOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Pattern, true
}

// SetPattern sets field value
func (o *ApplicationFilter) SetPattern(v string) {
	o.Pattern = v
}

// GetApplicationMatchType returns the ApplicationMatchType field value
func (o *ApplicationFilter) GetApplicationMatchType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ApplicationMatchType
}

// GetApplicationMatchTypeOk returns a tuple with the ApplicationMatchType field value
// and a boolean to check if the value has been set.
func (o *ApplicationFilter) GetApplicationMatchTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApplicationMatchType, true
}

// SetApplicationMatchType sets field value
func (o *ApplicationFilter) SetApplicationMatchType(v string) {
	o.ApplicationMatchType = v
}

// GetApplicationMatchTarget returns the ApplicationMatchTarget field value
func (o *ApplicationFilter) GetApplicationMatchTarget() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ApplicationMatchTarget
}

// GetApplicationMatchTargetOk returns a tuple with the ApplicationMatchTarget field value
// and a boolean to check if the value has been set.
func (o *ApplicationFilter) GetApplicationMatchTargetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApplicationMatchTarget, true
}

// SetApplicationMatchTarget sets field value
func (o *ApplicationFilter) SetApplicationMatchTarget(v string) {
	o.ApplicationMatchTarget = v
}

func (o ApplicationFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pattern"] = o.Pattern
	}
	if true {
		toSerialize["applicationMatchType"] = o.ApplicationMatchType
	}
	if true {
		toSerialize["applicationMatchTarget"] = o.ApplicationMatchTarget
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationFilter struct {
	value *ApplicationFilter
	isSet bool
}

func (v NullableApplicationFilter) Get() *ApplicationFilter {
	return v.value
}

func (v *NullableApplicationFilter) Set(val *ApplicationFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationFilter(val *ApplicationFilter) *NullableApplicationFilter {
	return &NullableApplicationFilter{value: val, isSet: true}
}

func (v NullableApplicationFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


