/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MetricEventStringDimensions A filter for the metrics string dimensions.
type MetricEventStringDimensions struct {
	MetricEventDimensions
	TextFilter MetricEventTextFilterMetricEventDimensionsFilterOperatorDto `json:"textFilter"`
}

// NewMetricEventStringDimensions instantiates a new MetricEventStringDimensions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricEventStringDimensions(textFilter MetricEventTextFilterMetricEventDimensionsFilterOperatorDto, ) *MetricEventStringDimensions {
	this := MetricEventStringDimensions{}
	this.TextFilter = textFilter
	return &this
}

// NewMetricEventStringDimensionsWithDefaults instantiates a new MetricEventStringDimensions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricEventStringDimensionsWithDefaults() *MetricEventStringDimensions {
	this := MetricEventStringDimensions{}
	return &this
}

// GetTextFilter returns the TextFilter field value
func (o *MetricEventStringDimensions) GetTextFilter() MetricEventTextFilterMetricEventDimensionsFilterOperatorDto {
	if o == nil  {
		var ret MetricEventTextFilterMetricEventDimensionsFilterOperatorDto
		return ret
	}

	return o.TextFilter
}

// GetTextFilterOk returns a tuple with the TextFilter field value
// and a boolean to check if the value has been set.
func (o *MetricEventStringDimensions) GetTextFilterOk() (*MetricEventTextFilterMetricEventDimensionsFilterOperatorDto, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TextFilter, true
}

// SetTextFilter sets field value
func (o *MetricEventStringDimensions) SetTextFilter(v MetricEventTextFilterMetricEventDimensionsFilterOperatorDto) {
	o.TextFilter = v
}

func (o MetricEventStringDimensions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMetricEventDimensions, errMetricEventDimensions := json.Marshal(o.MetricEventDimensions)
	if errMetricEventDimensions != nil {
		return []byte{}, errMetricEventDimensions
	}
	errMetricEventDimensions = json.Unmarshal([]byte(serializedMetricEventDimensions), &toSerialize)
	if errMetricEventDimensions != nil {
		return []byte{}, errMetricEventDimensions
	}
	if true {
		toSerialize["textFilter"] = o.TextFilter
	}
	return json.Marshal(toSerialize)
}

type NullableMetricEventStringDimensions struct {
	value *MetricEventStringDimensions
	isSet bool
}

func (v NullableMetricEventStringDimensions) Get() *MetricEventStringDimensions {
	return v.value
}

func (v *NullableMetricEventStringDimensions) Set(val *MetricEventStringDimensions) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricEventStringDimensions) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricEventStringDimensions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricEventStringDimensions(val *MetricEventStringDimensions) *NullableMetricEventStringDimensions {
	return &NullableMetricEventStringDimensions{value: val, isSet: true}
}

func (v NullableMetricEventStringDimensions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricEventStringDimensions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


