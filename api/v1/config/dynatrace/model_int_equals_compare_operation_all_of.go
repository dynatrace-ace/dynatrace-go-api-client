/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// IntEqualsCompareOperationAllOf struct for IntEqualsCompareOperationAllOf
type IntEqualsCompareOperationAllOf struct {
	// Inverts the operation of the condition. Set to `true` to turn **equals** into **does not equal**.    If not set, then `false` is used.
	Negate *bool `json:"negate,omitempty"`
	// The value to compare to.   If several values are specified, the OR logic applies.
	Values *[]int32 `json:"values,omitempty"`
}

// NewIntEqualsCompareOperationAllOf instantiates a new IntEqualsCompareOperationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntEqualsCompareOperationAllOf() *IntEqualsCompareOperationAllOf {
	this := IntEqualsCompareOperationAllOf{}
	return &this
}

// NewIntEqualsCompareOperationAllOfWithDefaults instantiates a new IntEqualsCompareOperationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntEqualsCompareOperationAllOfWithDefaults() *IntEqualsCompareOperationAllOf {
	this := IntEqualsCompareOperationAllOf{}
	return &this
}

// GetNegate returns the Negate field value if set, zero value otherwise.
func (o *IntEqualsCompareOperationAllOf) GetNegate() bool {
	if o == nil || o.Negate == nil {
		var ret bool
		return ret
	}
	return *o.Negate
}

// GetNegateOk returns a tuple with the Negate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntEqualsCompareOperationAllOf) GetNegateOk() (*bool, bool) {
	if o == nil || o.Negate == nil {
		return nil, false
	}
	return o.Negate, true
}

// HasNegate returns a boolean if a field has been set.
func (o *IntEqualsCompareOperationAllOf) HasNegate() bool {
	if o != nil && o.Negate != nil {
		return true
	}

	return false
}

// SetNegate gets a reference to the given bool and assigns it to the Negate field.
func (o *IntEqualsCompareOperationAllOf) SetNegate(v bool) {
	o.Negate = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *IntEqualsCompareOperationAllOf) GetValues() []int32 {
	if o == nil || o.Values == nil {
		var ret []int32
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntEqualsCompareOperationAllOf) GetValuesOk() (*[]int32, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *IntEqualsCompareOperationAllOf) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []int32 and assigns it to the Values field.
func (o *IntEqualsCompareOperationAllOf) SetValues(v []int32) {
	o.Values = &v
}

func (o IntEqualsCompareOperationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Negate != nil {
		toSerialize["negate"] = o.Negate
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableIntEqualsCompareOperationAllOf struct {
	value *IntEqualsCompareOperationAllOf
	isSet bool
}

func (v NullableIntEqualsCompareOperationAllOf) Get() *IntEqualsCompareOperationAllOf {
	return v.value
}

func (v *NullableIntEqualsCompareOperationAllOf) Set(val *IntEqualsCompareOperationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIntEqualsCompareOperationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIntEqualsCompareOperationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntEqualsCompareOperationAllOf(val *IntEqualsCompareOperationAllOf) *NullableIntEqualsCompareOperationAllOf {
	return &NullableIntEqualsCompareOperationAllOf{value: val, isSet: true}
}

func (v NullableIntEqualsCompareOperationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntEqualsCompareOperationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


