/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ComparisonInfo Type-specific comparison for attributes. The actual set of fields depends on the `type` of the comparison.
type ComparisonInfo struct {
	// Operator of the comparision. You can reverse it by setting **negate** to `true`.
	Comparison map[string]interface{} `json:"comparison"`
	// The value to compare to.
	Value *map[string]interface{} `json:"value,omitempty"`
	// Reverse the comparison **operator**. For example, it turns **equals** into **does not equal**.
	Negate bool `json:"negate"`
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `STRING` -> StringComparisonInfo  * `NUMBER` -> NumberComparisonInfo  * `BOOLEAN` -> BooleanComparisonInfo  * `HTTP_METHOD` -> HttpMethodComparisonInfo  * `STRING_REQUEST_ATTRIBUTE` -> StringRequestAttributeComparisonInfo  * `NUMBER_REQUEST_ATTRIBUTE` -> NumberRequestAttributeComparisonInfo  * `ZOS_CALL_TYPE` -> ZosComparisonInfo  * `IIB_INPUT_NODE_TYPE` -> IIBInputNodeTypeComparisonInfo  * `ESB_INPUT_NODE_TYPE` -> ESBInputNodeTypeComparisonInfo  * `FAILED_STATE` -> FailedStateComparisonInfo  * `FLAW_STATE` -> FlawStateComparisonInfo  * `FAILURE_REASON` -> FailureReasonComparisonInfo  * `HTTP_STATUS_CLASS` -> HttpStatusClassComparisonInfo  * `TAG` -> TagComparisonInfo  * `FAST_STRING` -> FastStringComparisonInfo  * `SERVICE_TYPE` -> ServiceTypeComparisonInfo  
	Type string `json:"type"`
}

// NewComparisonInfo instantiates a new ComparisonInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComparisonInfo(comparison map[string]interface{}, negate bool, type_ string, ) *ComparisonInfo {
	this := ComparisonInfo{}
	this.Comparison = comparison
	this.Negate = negate
	this.Type = type_
	return &this
}

// NewComparisonInfoWithDefaults instantiates a new ComparisonInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComparisonInfoWithDefaults() *ComparisonInfo {
	this := ComparisonInfo{}
	return &this
}

// GetComparison returns the Comparison field value
func (o *ComparisonInfo) GetComparison() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.Comparison
}

// GetComparisonOk returns a tuple with the Comparison field value
// and a boolean to check if the value has been set.
func (o *ComparisonInfo) GetComparisonOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Comparison, true
}

// SetComparison sets field value
func (o *ComparisonInfo) SetComparison(v map[string]interface{}) {
	o.Comparison = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ComparisonInfo) GetValue() map[string]interface{} {
	if o == nil || o.Value == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComparisonInfo) GetValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ComparisonInfo) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *ComparisonInfo) SetValue(v map[string]interface{}) {
	o.Value = &v
}

// GetNegate returns the Negate field value
func (o *ComparisonInfo) GetNegate() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Negate
}

// GetNegateOk returns a tuple with the Negate field value
// and a boolean to check if the value has been set.
func (o *ComparisonInfo) GetNegateOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Negate, true
}

// SetNegate sets field value
func (o *ComparisonInfo) SetNegate(v bool) {
	o.Negate = v
}

// GetType returns the Type field value
func (o *ComparisonInfo) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ComparisonInfo) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ComparisonInfo) SetType(v string) {
	o.Type = v
}

func (o ComparisonInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["comparison"] = o.Comparison
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["negate"] = o.Negate
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableComparisonInfo struct {
	value *ComparisonInfo
	isSet bool
}

func (v NullableComparisonInfo) Get() *ComparisonInfo {
	return v.value
}

func (v *NullableComparisonInfo) Set(val *ComparisonInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableComparisonInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableComparisonInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComparisonInfo(val *ComparisonInfo) *NullableComparisonInfo {
	return &NullableComparisonInfo{value: val, isSet: true}
}

func (v NullableComparisonInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComparisonInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


