/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// PluginState The state of the plugin.
type PluginState struct {
	// The ID of the plugin.
	PluginId *string `json:"pluginId,omitempty"`
	// The version of the plugin (for example `1.0.0`).
	Version *string `json:"version,omitempty"`
	// The ID of the endpoint where the state is detected - Active Gate only.
	EndpointId *string `json:"endpointId,omitempty"`
	// The state of the plugin.
	State *string `json:"state,omitempty"`
	// A short description of the state.
	StateDescription *string `json:"stateDescription,omitempty"`
	// The timestamp when the state was detected, in UTC milliseconds.
	Timestamp *int64 `json:"timestamp,omitempty"`
	// The ID of the host on which the plugin runs.
	HostId *string `json:"hostId,omitempty"`
	// The ID of the entity on which the plugin is active.
	ProcessId *string `json:"processId,omitempty"`
}

// NewPluginState instantiates a new PluginState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginState() *PluginState {
	this := PluginState{}
	return &this
}

// NewPluginStateWithDefaults instantiates a new PluginState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginStateWithDefaults() *PluginState {
	this := PluginState{}
	return &this
}

// GetPluginId returns the PluginId field value if set, zero value otherwise.
func (o *PluginState) GetPluginId() string {
	if o == nil || o.PluginId == nil {
		var ret string
		return ret
	}
	return *o.PluginId
}

// GetPluginIdOk returns a tuple with the PluginId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginState) GetPluginIdOk() (*string, bool) {
	if o == nil || o.PluginId == nil {
		return nil, false
	}
	return o.PluginId, true
}

// HasPluginId returns a boolean if a field has been set.
func (o *PluginState) HasPluginId() bool {
	if o != nil && o.PluginId != nil {
		return true
	}

	return false
}

// SetPluginId gets a reference to the given string and assigns it to the PluginId field.
func (o *PluginState) SetPluginId(v string) {
	o.PluginId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PluginState) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginState) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PluginState) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *PluginState) SetVersion(v string) {
	o.Version = &v
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *PluginState) GetEndpointId() string {
	if o == nil || o.EndpointId == nil {
		var ret string
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginState) GetEndpointIdOk() (*string, bool) {
	if o == nil || o.EndpointId == nil {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *PluginState) HasEndpointId() bool {
	if o != nil && o.EndpointId != nil {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given string and assigns it to the EndpointId field.
func (o *PluginState) SetEndpointId(v string) {
	o.EndpointId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PluginState) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginState) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PluginState) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *PluginState) SetState(v string) {
	o.State = &v
}

// GetStateDescription returns the StateDescription field value if set, zero value otherwise.
func (o *PluginState) GetStateDescription() string {
	if o == nil || o.StateDescription == nil {
		var ret string
		return ret
	}
	return *o.StateDescription
}

// GetStateDescriptionOk returns a tuple with the StateDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginState) GetStateDescriptionOk() (*string, bool) {
	if o == nil || o.StateDescription == nil {
		return nil, false
	}
	return o.StateDescription, true
}

// HasStateDescription returns a boolean if a field has been set.
func (o *PluginState) HasStateDescription() bool {
	if o != nil && o.StateDescription != nil {
		return true
	}

	return false
}

// SetStateDescription gets a reference to the given string and assigns it to the StateDescription field.
func (o *PluginState) SetStateDescription(v string) {
	o.StateDescription = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *PluginState) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginState) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *PluginState) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *PluginState) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetHostId returns the HostId field value if set, zero value otherwise.
func (o *PluginState) GetHostId() string {
	if o == nil || o.HostId == nil {
		var ret string
		return ret
	}
	return *o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginState) GetHostIdOk() (*string, bool) {
	if o == nil || o.HostId == nil {
		return nil, false
	}
	return o.HostId, true
}

// HasHostId returns a boolean if a field has been set.
func (o *PluginState) HasHostId() bool {
	if o != nil && o.HostId != nil {
		return true
	}

	return false
}

// SetHostId gets a reference to the given string and assigns it to the HostId field.
func (o *PluginState) SetHostId(v string) {
	o.HostId = &v
}

// GetProcessId returns the ProcessId field value if set, zero value otherwise.
func (o *PluginState) GetProcessId() string {
	if o == nil || o.ProcessId == nil {
		var ret string
		return ret
	}
	return *o.ProcessId
}

// GetProcessIdOk returns a tuple with the ProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginState) GetProcessIdOk() (*string, bool) {
	if o == nil || o.ProcessId == nil {
		return nil, false
	}
	return o.ProcessId, true
}

// HasProcessId returns a boolean if a field has been set.
func (o *PluginState) HasProcessId() bool {
	if o != nil && o.ProcessId != nil {
		return true
	}

	return false
}

// SetProcessId gets a reference to the given string and assigns it to the ProcessId field.
func (o *PluginState) SetProcessId(v string) {
	o.ProcessId = &v
}

func (o PluginState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PluginId != nil {
		toSerialize["pluginId"] = o.PluginId
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.EndpointId != nil {
		toSerialize["endpointId"] = o.EndpointId
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.StateDescription != nil {
		toSerialize["stateDescription"] = o.StateDescription
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.HostId != nil {
		toSerialize["hostId"] = o.HostId
	}
	if o.ProcessId != nil {
		toSerialize["processId"] = o.ProcessId
	}
	return json.Marshal(toSerialize)
}

type NullablePluginState struct {
	value *PluginState
	isSet bool
}

func (v NullablePluginState) Get() *PluginState {
	return v.value
}

func (v *NullablePluginState) Set(val *PluginState) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginState) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginState(val *PluginState) *NullablePluginState {
	return &NullablePluginState{value: val, isSet: true}
}

func (v NullablePluginState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


