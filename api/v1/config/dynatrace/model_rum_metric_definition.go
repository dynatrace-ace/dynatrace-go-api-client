/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// RumMetricDefinition Definition of the RUM metric.
type RumMetricDefinition struct {
	// The type of the RUM metric.
	Metric string `json:"metric"`
	// The key of the user action property.    Only applicable for `DoubleProperty` and `LongProperty` metrics.
	PropertyKey *string `json:"propertyKey,omitempty"`
}

// NewRumMetricDefinition instantiates a new RumMetricDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRumMetricDefinition(metric string, ) *RumMetricDefinition {
	this := RumMetricDefinition{}
	this.Metric = metric
	return &this
}

// NewRumMetricDefinitionWithDefaults instantiates a new RumMetricDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRumMetricDefinitionWithDefaults() *RumMetricDefinition {
	this := RumMetricDefinition{}
	return &this
}

// GetMetric returns the Metric field value
func (o *RumMetricDefinition) GetMetric() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *RumMetricDefinition) GetMetricOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *RumMetricDefinition) SetMetric(v string) {
	o.Metric = v
}

// GetPropertyKey returns the PropertyKey field value if set, zero value otherwise.
func (o *RumMetricDefinition) GetPropertyKey() string {
	if o == nil || o.PropertyKey == nil {
		var ret string
		return ret
	}
	return *o.PropertyKey
}

// GetPropertyKeyOk returns a tuple with the PropertyKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumMetricDefinition) GetPropertyKeyOk() (*string, bool) {
	if o == nil || o.PropertyKey == nil {
		return nil, false
	}
	return o.PropertyKey, true
}

// HasPropertyKey returns a boolean if a field has been set.
func (o *RumMetricDefinition) HasPropertyKey() bool {
	if o != nil && o.PropertyKey != nil {
		return true
	}

	return false
}

// SetPropertyKey gets a reference to the given string and assigns it to the PropertyKey field.
func (o *RumMetricDefinition) SetPropertyKey(v string) {
	o.PropertyKey = &v
}

func (o RumMetricDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["metric"] = o.Metric
	}
	if o.PropertyKey != nil {
		toSerialize["propertyKey"] = o.PropertyKey
	}
	return json.Marshal(toSerialize)
}

type NullableRumMetricDefinition struct {
	value *RumMetricDefinition
	isSet bool
}

func (v NullableRumMetricDefinition) Get() *RumMetricDefinition {
	return v.value
}

func (v *NullableRumMetricDefinition) Set(val *RumMetricDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableRumMetricDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableRumMetricDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRumMetricDefinition(val *RumMetricDefinition) *NullableRumMetricDefinition {
	return &NullableRumMetricDefinition{value: val, isSet: true}
}

func (v NullableRumMetricDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRumMetricDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


