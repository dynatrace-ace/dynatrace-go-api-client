/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// BetweenTransformation The transformation of the `BETWEEN` type.The transformation keeps value between the specified delimiters and removes everything outside them.
type BetweenTransformation struct {
	TransformationBase
	// The starting delimiter. The transformation removes everything before it. The delimiter itself is not kept. 
	After string `json:"after"`
	// The ending delimiter. The transformation removes everything after it. The delimiter itself is not kept.
	Before string `json:"before"`
}

// NewBetweenTransformation instantiates a new BetweenTransformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBetweenTransformation(after string, before string, ) *BetweenTransformation {
	this := BetweenTransformation{}
	this.After = after
	this.Before = before
	return &this
}

// NewBetweenTransformationWithDefaults instantiates a new BetweenTransformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBetweenTransformationWithDefaults() *BetweenTransformation {
	this := BetweenTransformation{}
	return &this
}

// GetAfter returns the After field value
func (o *BetweenTransformation) GetAfter() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.After
}

// GetAfterOk returns a tuple with the After field value
// and a boolean to check if the value has been set.
func (o *BetweenTransformation) GetAfterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.After, true
}

// SetAfter sets field value
func (o *BetweenTransformation) SetAfter(v string) {
	o.After = v
}

// GetBefore returns the Before field value
func (o *BetweenTransformation) GetBefore() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Before
}

// GetBeforeOk returns a tuple with the Before field value
// and a boolean to check if the value has been set.
func (o *BetweenTransformation) GetBeforeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Before, true
}

// SetBefore sets field value
func (o *BetweenTransformation) SetBefore(v string) {
	o.Before = v
}

func (o BetweenTransformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTransformationBase, errTransformationBase := json.Marshal(o.TransformationBase)
	if errTransformationBase != nil {
		return []byte{}, errTransformationBase
	}
	errTransformationBase = json.Unmarshal([]byte(serializedTransformationBase), &toSerialize)
	if errTransformationBase != nil {
		return []byte{}, errTransformationBase
	}
	if true {
		toSerialize["after"] = o.After
	}
	if true {
		toSerialize["before"] = o.Before
	}
	return json.Marshal(toSerialize)
}

type NullableBetweenTransformation struct {
	value *BetweenTransformation
	isSet bool
}

func (v NullableBetweenTransformation) Get() *BetweenTransformation {
	return v.value
}

func (v *NullableBetweenTransformation) Set(val *BetweenTransformation) {
	v.value = val
	v.isSet = true
}

func (v NullableBetweenTransformation) IsSet() bool {
	return v.isSet
}

func (v *NullableBetweenTransformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBetweenTransformation(val *BetweenTransformation) *NullableBetweenTransformation {
	return &NullableBetweenTransformation{value: val, isSet: true}
}

func (v NullableBetweenTransformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBetweenTransformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


