/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ManagementZoneRule The rule of the management zone usage. It defines how the management zone applies.   Each rule is evaluated independently of all other rules.
type ManagementZoneRule struct {
	// The type of Dynatrace entities the management zone can be applied to.
	Type string `json:"type"`
	// The rule is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	// How to apply the management zone to underlying entities:   * `SERVICE_TO_HOST_LIKE`: Apply to underlying hosts of matching services.  * `SERVICE_TO_PROCESS_GROUP_LIKE`: Apply to underlying process groups of matching services.  * `PROCESS_GROUP_TO_HOST`: Apply to underlying hosts of matching process groups.  * `PROCESS_GROUP_TO_SERVICE`: Apply to all services provided by matching process groups.  * `HOST_TO_PROCESS_GROUP_INSTANCE`: Apply to processes running on matching hosts.  * `CUSTOM_DEVICE_GROUP_TO_CUSTOM_DEVICE`: Apply to custom devices in matching custom device groups.  * `AZURE_TO_PG`: Apply to process groups connected to matching Azure entities.  * `AZURE_TO_SERVICE`: Apply to services provided by matching Azure entities.
	PropagationTypes *[]string `json:"propagationTypes,omitempty"`
	// A list of matching rules for the management zone.   The management zone applies only if **all** conditions are fulfilled.
	Conditions []EntityRuleEngineCondition `json:"conditions"`
}

// NewManagementZoneRule instantiates a new ManagementZoneRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementZoneRule(type_ string, enabled bool, conditions []EntityRuleEngineCondition, ) *ManagementZoneRule {
	this := ManagementZoneRule{}
	this.Type = type_
	this.Enabled = enabled
	this.Conditions = conditions
	return &this
}

// NewManagementZoneRuleWithDefaults instantiates a new ManagementZoneRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementZoneRuleWithDefaults() *ManagementZoneRule {
	this := ManagementZoneRule{}
	return &this
}

// GetType returns the Type field value
func (o *ManagementZoneRule) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ManagementZoneRule) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ManagementZoneRule) SetType(v string) {
	o.Type = v
}

// GetEnabled returns the Enabled field value
func (o *ManagementZoneRule) GetEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ManagementZoneRule) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ManagementZoneRule) SetEnabled(v bool) {
	o.Enabled = v
}

// GetPropagationTypes returns the PropagationTypes field value if set, zero value otherwise.
func (o *ManagementZoneRule) GetPropagationTypes() []string {
	if o == nil || o.PropagationTypes == nil {
		var ret []string
		return ret
	}
	return *o.PropagationTypes
}

// GetPropagationTypesOk returns a tuple with the PropagationTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementZoneRule) GetPropagationTypesOk() (*[]string, bool) {
	if o == nil || o.PropagationTypes == nil {
		return nil, false
	}
	return o.PropagationTypes, true
}

// HasPropagationTypes returns a boolean if a field has been set.
func (o *ManagementZoneRule) HasPropagationTypes() bool {
	if o != nil && o.PropagationTypes != nil {
		return true
	}

	return false
}

// SetPropagationTypes gets a reference to the given []string and assigns it to the PropagationTypes field.
func (o *ManagementZoneRule) SetPropagationTypes(v []string) {
	o.PropagationTypes = &v
}

// GetConditions returns the Conditions field value
func (o *ManagementZoneRule) GetConditions() []EntityRuleEngineCondition {
	if o == nil  {
		var ret []EntityRuleEngineCondition
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *ManagementZoneRule) GetConditionsOk() (*[]EntityRuleEngineCondition, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Conditions, true
}

// SetConditions sets field value
func (o *ManagementZoneRule) SetConditions(v []EntityRuleEngineCondition) {
	o.Conditions = v
}

func (o ManagementZoneRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if o.PropagationTypes != nil {
		toSerialize["propagationTypes"] = o.PropagationTypes
	}
	if true {
		toSerialize["conditions"] = o.Conditions
	}
	return json.Marshal(toSerialize)
}

type NullableManagementZoneRule struct {
	value *ManagementZoneRule
	isSet bool
}

func (v NullableManagementZoneRule) Get() *ManagementZoneRule {
	return v.value
}

func (v *NullableManagementZoneRule) Set(val *ManagementZoneRule) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementZoneRule) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementZoneRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementZoneRule(val *ManagementZoneRule) *NullableManagementZoneRule {
	return &NullableManagementZoneRule{value: val, isSet: true}
}

func (v NullableManagementZoneRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementZoneRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


