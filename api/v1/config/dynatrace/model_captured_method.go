/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CapturedMethod struct for CapturedMethod
type CapturedMethod struct {
	Method MethodReference `json:"method"`
	// What to capture from the method.
	Capture string `json:"capture"`
	// The index of the argument to capture. Set `0` to capture the return value, `1` or higher to capture a mehtod argument.    Required if the **capture** is set to `ARGUMENT`.   Not applicable in other cases.
	ArgumentIndex *int32 `json:"argumentIndex,omitempty"`
	// The getter chain to apply to the captured object. It is required in one of the following cases:   The **capture** is set to `THIS`.    The **capture** is set to `ARGUMENT`, and the argument is not a primitive, a primitive wrapper class, a string, or an array.    Not applicable in other cases.
	DeepObjectAccess *string `json:"deepObjectAccess,omitempty"`
}

// NewCapturedMethod instantiates a new CapturedMethod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapturedMethod(method MethodReference, capture string, ) *CapturedMethod {
	this := CapturedMethod{}
	this.Method = method
	this.Capture = capture
	return &this
}

// NewCapturedMethodWithDefaults instantiates a new CapturedMethod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapturedMethodWithDefaults() *CapturedMethod {
	this := CapturedMethod{}
	return &this
}

// GetMethod returns the Method field value
func (o *CapturedMethod) GetMethod() MethodReference {
	if o == nil  {
		var ret MethodReference
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *CapturedMethod) GetMethodOk() (*MethodReference, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *CapturedMethod) SetMethod(v MethodReference) {
	o.Method = v
}

// GetCapture returns the Capture field value
func (o *CapturedMethod) GetCapture() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Capture
}

// GetCaptureOk returns a tuple with the Capture field value
// and a boolean to check if the value has been set.
func (o *CapturedMethod) GetCaptureOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Capture, true
}

// SetCapture sets field value
func (o *CapturedMethod) SetCapture(v string) {
	o.Capture = v
}

// GetArgumentIndex returns the ArgumentIndex field value if set, zero value otherwise.
func (o *CapturedMethod) GetArgumentIndex() int32 {
	if o == nil || o.ArgumentIndex == nil {
		var ret int32
		return ret
	}
	return *o.ArgumentIndex
}

// GetArgumentIndexOk returns a tuple with the ArgumentIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapturedMethod) GetArgumentIndexOk() (*int32, bool) {
	if o == nil || o.ArgumentIndex == nil {
		return nil, false
	}
	return o.ArgumentIndex, true
}

// HasArgumentIndex returns a boolean if a field has been set.
func (o *CapturedMethod) HasArgumentIndex() bool {
	if o != nil && o.ArgumentIndex != nil {
		return true
	}

	return false
}

// SetArgumentIndex gets a reference to the given int32 and assigns it to the ArgumentIndex field.
func (o *CapturedMethod) SetArgumentIndex(v int32) {
	o.ArgumentIndex = &v
}

// GetDeepObjectAccess returns the DeepObjectAccess field value if set, zero value otherwise.
func (o *CapturedMethod) GetDeepObjectAccess() string {
	if o == nil || o.DeepObjectAccess == nil {
		var ret string
		return ret
	}
	return *o.DeepObjectAccess
}

// GetDeepObjectAccessOk returns a tuple with the DeepObjectAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapturedMethod) GetDeepObjectAccessOk() (*string, bool) {
	if o == nil || o.DeepObjectAccess == nil {
		return nil, false
	}
	return o.DeepObjectAccess, true
}

// HasDeepObjectAccess returns a boolean if a field has been set.
func (o *CapturedMethod) HasDeepObjectAccess() bool {
	if o != nil && o.DeepObjectAccess != nil {
		return true
	}

	return false
}

// SetDeepObjectAccess gets a reference to the given string and assigns it to the DeepObjectAccess field.
func (o *CapturedMethod) SetDeepObjectAccess(v string) {
	o.DeepObjectAccess = &v
}

func (o CapturedMethod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["method"] = o.Method
	}
	if true {
		toSerialize["capture"] = o.Capture
	}
	if o.ArgumentIndex != nil {
		toSerialize["argumentIndex"] = o.ArgumentIndex
	}
	if o.DeepObjectAccess != nil {
		toSerialize["deepObjectAccess"] = o.DeepObjectAccess
	}
	return json.Marshal(toSerialize)
}

type NullableCapturedMethod struct {
	value *CapturedMethod
	isSet bool
}

func (v NullableCapturedMethod) Get() *CapturedMethod {
	return v.value
}

func (v *NullableCapturedMethod) Set(val *CapturedMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableCapturedMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableCapturedMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapturedMethod(val *CapturedMethod) *NullableCapturedMethod {
	return &NullableCapturedMethod{value: val, isSet: true}
}

func (v NullableCapturedMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapturedMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


