/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UserActionNamingPlaceholderProcessingStep The processing step settings.
type UserActionNamingPlaceholderProcessingStep struct {
	// An action to be taken by the processing:   * `SUBSTRING`: Extracts the string between **patternBefore** and **patternAfter**.  * `REPLACEMENT`: Replaces the string between **patternBefore** and **patternAfter** with the specified **replacement**. * `REPLACE_WITH_PATTERN`: Replaces the **patternToReplace** with the specified **replacement**.  * `EXTRACT_BY_REGULAR_EXPRESSION`: Extracts the part of the string that matches the **regularExpression**.  * `REPLACE_WITH_REGULAR_EXPRESSION`: Replaces all occurrences that match **regularExpression** with the specified **replacement**.  * `REPLACE_IDS`: Replaces all IDs and UUIDs with the specified **replacement**.
	Type string `json:"type"`
	// The pattern before the required value. It will be removed.
	PatternBefore *string `json:"patternBefore,omitempty"`
	// The required occurrence of **patternBefore**.
	PatternBeforeSearchType *string `json:"patternBeforeSearchType,omitempty"`
	// The pattern after the required value. It will be removed.
	PatternAfter *string `json:"patternAfter,omitempty"`
	// The required occurrence of **patternAfter**.
	PatternAfterSearchType *string `json:"patternAfterSearchType,omitempty"`
	// Replacement for the original value.
	Replacement *string `json:"replacement,omitempty"`
	// The pattern to be replaced.    Only applicable if the **type** is `REPLACE_WITH_PATTERN`.
	PatternToReplace *string `json:"patternToReplace,omitempty"`
	// A regular expression for the string to be extracted or replaced.    Only applicable if the **type** is `EXTRACT_BY_REGULAR_EXPRESSION` or `REPLACE_WITH_REGULAR_EXPRESSION`.
	RegularExpression *string `json:"regularExpression,omitempty"`
	// If set to true: Returns the input if **patternBefore** or **patternAfter** cannot be found and the **type** is `SUBSTRING`.    Returns the input if **regularExpression** doesn't match and **type** is `EXTRACT_BY_REGULAR_EXPRESSION`.    Otherwise null is returned.
	FallbackToInput *bool `json:"fallbackToInput,omitempty"`
}

// NewUserActionNamingPlaceholderProcessingStep instantiates a new UserActionNamingPlaceholderProcessingStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserActionNamingPlaceholderProcessingStep(type_ string, ) *UserActionNamingPlaceholderProcessingStep {
	this := UserActionNamingPlaceholderProcessingStep{}
	this.Type = type_
	return &this
}

// NewUserActionNamingPlaceholderProcessingStepWithDefaults instantiates a new UserActionNamingPlaceholderProcessingStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserActionNamingPlaceholderProcessingStepWithDefaults() *UserActionNamingPlaceholderProcessingStep {
	this := UserActionNamingPlaceholderProcessingStep{}
	return &this
}

// GetType returns the Type field value
func (o *UserActionNamingPlaceholderProcessingStep) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholderProcessingStep) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserActionNamingPlaceholderProcessingStep) SetType(v string) {
	o.Type = v
}

// GetPatternBefore returns the PatternBefore field value if set, zero value otherwise.
func (o *UserActionNamingPlaceholderProcessingStep) GetPatternBefore() string {
	if o == nil || o.PatternBefore == nil {
		var ret string
		return ret
	}
	return *o.PatternBefore
}

// GetPatternBeforeOk returns a tuple with the PatternBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholderProcessingStep) GetPatternBeforeOk() (*string, bool) {
	if o == nil || o.PatternBefore == nil {
		return nil, false
	}
	return o.PatternBefore, true
}

// HasPatternBefore returns a boolean if a field has been set.
func (o *UserActionNamingPlaceholderProcessingStep) HasPatternBefore() bool {
	if o != nil && o.PatternBefore != nil {
		return true
	}

	return false
}

// SetPatternBefore gets a reference to the given string and assigns it to the PatternBefore field.
func (o *UserActionNamingPlaceholderProcessingStep) SetPatternBefore(v string) {
	o.PatternBefore = &v
}

// GetPatternBeforeSearchType returns the PatternBeforeSearchType field value if set, zero value otherwise.
func (o *UserActionNamingPlaceholderProcessingStep) GetPatternBeforeSearchType() string {
	if o == nil || o.PatternBeforeSearchType == nil {
		var ret string
		return ret
	}
	return *o.PatternBeforeSearchType
}

// GetPatternBeforeSearchTypeOk returns a tuple with the PatternBeforeSearchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholderProcessingStep) GetPatternBeforeSearchTypeOk() (*string, bool) {
	if o == nil || o.PatternBeforeSearchType == nil {
		return nil, false
	}
	return o.PatternBeforeSearchType, true
}

// HasPatternBeforeSearchType returns a boolean if a field has been set.
func (o *UserActionNamingPlaceholderProcessingStep) HasPatternBeforeSearchType() bool {
	if o != nil && o.PatternBeforeSearchType != nil {
		return true
	}

	return false
}

// SetPatternBeforeSearchType gets a reference to the given string and assigns it to the PatternBeforeSearchType field.
func (o *UserActionNamingPlaceholderProcessingStep) SetPatternBeforeSearchType(v string) {
	o.PatternBeforeSearchType = &v
}

// GetPatternAfter returns the PatternAfter field value if set, zero value otherwise.
func (o *UserActionNamingPlaceholderProcessingStep) GetPatternAfter() string {
	if o == nil || o.PatternAfter == nil {
		var ret string
		return ret
	}
	return *o.PatternAfter
}

// GetPatternAfterOk returns a tuple with the PatternAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholderProcessingStep) GetPatternAfterOk() (*string, bool) {
	if o == nil || o.PatternAfter == nil {
		return nil, false
	}
	return o.PatternAfter, true
}

// HasPatternAfter returns a boolean if a field has been set.
func (o *UserActionNamingPlaceholderProcessingStep) HasPatternAfter() bool {
	if o != nil && o.PatternAfter != nil {
		return true
	}

	return false
}

// SetPatternAfter gets a reference to the given string and assigns it to the PatternAfter field.
func (o *UserActionNamingPlaceholderProcessingStep) SetPatternAfter(v string) {
	o.PatternAfter = &v
}

// GetPatternAfterSearchType returns the PatternAfterSearchType field value if set, zero value otherwise.
func (o *UserActionNamingPlaceholderProcessingStep) GetPatternAfterSearchType() string {
	if o == nil || o.PatternAfterSearchType == nil {
		var ret string
		return ret
	}
	return *o.PatternAfterSearchType
}

// GetPatternAfterSearchTypeOk returns a tuple with the PatternAfterSearchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholderProcessingStep) GetPatternAfterSearchTypeOk() (*string, bool) {
	if o == nil || o.PatternAfterSearchType == nil {
		return nil, false
	}
	return o.PatternAfterSearchType, true
}

// HasPatternAfterSearchType returns a boolean if a field has been set.
func (o *UserActionNamingPlaceholderProcessingStep) HasPatternAfterSearchType() bool {
	if o != nil && o.PatternAfterSearchType != nil {
		return true
	}

	return false
}

// SetPatternAfterSearchType gets a reference to the given string and assigns it to the PatternAfterSearchType field.
func (o *UserActionNamingPlaceholderProcessingStep) SetPatternAfterSearchType(v string) {
	o.PatternAfterSearchType = &v
}

// GetReplacement returns the Replacement field value if set, zero value otherwise.
func (o *UserActionNamingPlaceholderProcessingStep) GetReplacement() string {
	if o == nil || o.Replacement == nil {
		var ret string
		return ret
	}
	return *o.Replacement
}

// GetReplacementOk returns a tuple with the Replacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholderProcessingStep) GetReplacementOk() (*string, bool) {
	if o == nil || o.Replacement == nil {
		return nil, false
	}
	return o.Replacement, true
}

// HasReplacement returns a boolean if a field has been set.
func (o *UserActionNamingPlaceholderProcessingStep) HasReplacement() bool {
	if o != nil && o.Replacement != nil {
		return true
	}

	return false
}

// SetReplacement gets a reference to the given string and assigns it to the Replacement field.
func (o *UserActionNamingPlaceholderProcessingStep) SetReplacement(v string) {
	o.Replacement = &v
}

// GetPatternToReplace returns the PatternToReplace field value if set, zero value otherwise.
func (o *UserActionNamingPlaceholderProcessingStep) GetPatternToReplace() string {
	if o == nil || o.PatternToReplace == nil {
		var ret string
		return ret
	}
	return *o.PatternToReplace
}

// GetPatternToReplaceOk returns a tuple with the PatternToReplace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholderProcessingStep) GetPatternToReplaceOk() (*string, bool) {
	if o == nil || o.PatternToReplace == nil {
		return nil, false
	}
	return o.PatternToReplace, true
}

// HasPatternToReplace returns a boolean if a field has been set.
func (o *UserActionNamingPlaceholderProcessingStep) HasPatternToReplace() bool {
	if o != nil && o.PatternToReplace != nil {
		return true
	}

	return false
}

// SetPatternToReplace gets a reference to the given string and assigns it to the PatternToReplace field.
func (o *UserActionNamingPlaceholderProcessingStep) SetPatternToReplace(v string) {
	o.PatternToReplace = &v
}

// GetRegularExpression returns the RegularExpression field value if set, zero value otherwise.
func (o *UserActionNamingPlaceholderProcessingStep) GetRegularExpression() string {
	if o == nil || o.RegularExpression == nil {
		var ret string
		return ret
	}
	return *o.RegularExpression
}

// GetRegularExpressionOk returns a tuple with the RegularExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholderProcessingStep) GetRegularExpressionOk() (*string, bool) {
	if o == nil || o.RegularExpression == nil {
		return nil, false
	}
	return o.RegularExpression, true
}

// HasRegularExpression returns a boolean if a field has been set.
func (o *UserActionNamingPlaceholderProcessingStep) HasRegularExpression() bool {
	if o != nil && o.RegularExpression != nil {
		return true
	}

	return false
}

// SetRegularExpression gets a reference to the given string and assigns it to the RegularExpression field.
func (o *UserActionNamingPlaceholderProcessingStep) SetRegularExpression(v string) {
	o.RegularExpression = &v
}

// GetFallbackToInput returns the FallbackToInput field value if set, zero value otherwise.
func (o *UserActionNamingPlaceholderProcessingStep) GetFallbackToInput() bool {
	if o == nil || o.FallbackToInput == nil {
		var ret bool
		return ret
	}
	return *o.FallbackToInput
}

// GetFallbackToInputOk returns a tuple with the FallbackToInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingPlaceholderProcessingStep) GetFallbackToInputOk() (*bool, bool) {
	if o == nil || o.FallbackToInput == nil {
		return nil, false
	}
	return o.FallbackToInput, true
}

// HasFallbackToInput returns a boolean if a field has been set.
func (o *UserActionNamingPlaceholderProcessingStep) HasFallbackToInput() bool {
	if o != nil && o.FallbackToInput != nil {
		return true
	}

	return false
}

// SetFallbackToInput gets a reference to the given bool and assigns it to the FallbackToInput field.
func (o *UserActionNamingPlaceholderProcessingStep) SetFallbackToInput(v bool) {
	o.FallbackToInput = &v
}

func (o UserActionNamingPlaceholderProcessingStep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.PatternBefore != nil {
		toSerialize["patternBefore"] = o.PatternBefore
	}
	if o.PatternBeforeSearchType != nil {
		toSerialize["patternBeforeSearchType"] = o.PatternBeforeSearchType
	}
	if o.PatternAfter != nil {
		toSerialize["patternAfter"] = o.PatternAfter
	}
	if o.PatternAfterSearchType != nil {
		toSerialize["patternAfterSearchType"] = o.PatternAfterSearchType
	}
	if o.Replacement != nil {
		toSerialize["replacement"] = o.Replacement
	}
	if o.PatternToReplace != nil {
		toSerialize["patternToReplace"] = o.PatternToReplace
	}
	if o.RegularExpression != nil {
		toSerialize["regularExpression"] = o.RegularExpression
	}
	if o.FallbackToInput != nil {
		toSerialize["fallbackToInput"] = o.FallbackToInput
	}
	return json.Marshal(toSerialize)
}

type NullableUserActionNamingPlaceholderProcessingStep struct {
	value *UserActionNamingPlaceholderProcessingStep
	isSet bool
}

func (v NullableUserActionNamingPlaceholderProcessingStep) Get() *UserActionNamingPlaceholderProcessingStep {
	return v.value
}

func (v *NullableUserActionNamingPlaceholderProcessingStep) Set(val *UserActionNamingPlaceholderProcessingStep) {
	v.value = val
	v.isSet = true
}

func (v NullableUserActionNamingPlaceholderProcessingStep) IsSet() bool {
	return v.isSet
}

func (v *NullableUserActionNamingPlaceholderProcessingStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserActionNamingPlaceholderProcessingStep(val *UserActionNamingPlaceholderProcessingStep) *NullableUserActionNamingPlaceholderProcessingStep {
	return &NullableUserActionNamingPlaceholderProcessingStep{value: val, isSet: true}
}

func (v NullableUserActionNamingPlaceholderProcessingStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserActionNamingPlaceholderProcessingStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


