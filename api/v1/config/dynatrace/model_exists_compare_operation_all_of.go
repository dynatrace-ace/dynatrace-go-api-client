/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ExistsCompareOperationAllOf struct for ExistsCompareOperationAllOf
type ExistsCompareOperationAllOf struct {
	// Inverts the operation of the condition. Set to `true` to turn **exists** into **does not exist**.    If not set, then `false` is used.
	Negate *bool `json:"negate,omitempty"`
}

// NewExistsCompareOperationAllOf instantiates a new ExistsCompareOperationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExistsCompareOperationAllOf() *ExistsCompareOperationAllOf {
	this := ExistsCompareOperationAllOf{}
	return &this
}

// NewExistsCompareOperationAllOfWithDefaults instantiates a new ExistsCompareOperationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExistsCompareOperationAllOfWithDefaults() *ExistsCompareOperationAllOf {
	this := ExistsCompareOperationAllOf{}
	return &this
}

// GetNegate returns the Negate field value if set, zero value otherwise.
func (o *ExistsCompareOperationAllOf) GetNegate() bool {
	if o == nil || o.Negate == nil {
		var ret bool
		return ret
	}
	return *o.Negate
}

// GetNegateOk returns a tuple with the Negate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExistsCompareOperationAllOf) GetNegateOk() (*bool, bool) {
	if o == nil || o.Negate == nil {
		return nil, false
	}
	return o.Negate, true
}

// HasNegate returns a boolean if a field has been set.
func (o *ExistsCompareOperationAllOf) HasNegate() bool {
	if o != nil && o.Negate != nil {
		return true
	}

	return false
}

// SetNegate gets a reference to the given bool and assigns it to the Negate field.
func (o *ExistsCompareOperationAllOf) SetNegate(v bool) {
	o.Negate = &v
}

func (o ExistsCompareOperationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Negate != nil {
		toSerialize["negate"] = o.Negate
	}
	return json.Marshal(toSerialize)
}

type NullableExistsCompareOperationAllOf struct {
	value *ExistsCompareOperationAllOf
	isSet bool
}

func (v NullableExistsCompareOperationAllOf) Get() *ExistsCompareOperationAllOf {
	return v.value
}

func (v *NullableExistsCompareOperationAllOf) Set(val *ExistsCompareOperationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableExistsCompareOperationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableExistsCompareOperationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExistsCompareOperationAllOf(val *ExistsCompareOperationAllOf) *NullableExistsCompareOperationAllOf {
	return &NullableExistsCompareOperationAllOf{value: val, isSet: true}
}

func (v NullableExistsCompareOperationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExistsCompareOperationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


