/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ReplaceBetweenTransformationAllOf struct for ReplaceBetweenTransformationAllOf
type ReplaceBetweenTransformationAllOf struct {
	// The starting delimiter. The transformation removes everything before it. The delimiter itself is not kept.
	After *string `json:"after,omitempty"`
	// The ending delimiter. The transformation removes everything after it. The delimiter itself is not kept.
	Before *string `json:"before,omitempty"`
	// The value to be used instead of the detected value.
	Replacement *string `json:"replacement,omitempty"`
}

// NewReplaceBetweenTransformationAllOf instantiates a new ReplaceBetweenTransformationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceBetweenTransformationAllOf() *ReplaceBetweenTransformationAllOf {
	this := ReplaceBetweenTransformationAllOf{}
	return &this
}

// NewReplaceBetweenTransformationAllOfWithDefaults instantiates a new ReplaceBetweenTransformationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceBetweenTransformationAllOfWithDefaults() *ReplaceBetweenTransformationAllOf {
	this := ReplaceBetweenTransformationAllOf{}
	return &this
}

// GetAfter returns the After field value if set, zero value otherwise.
func (o *ReplaceBetweenTransformationAllOf) GetAfter() string {
	if o == nil || o.After == nil {
		var ret string
		return ret
	}
	return *o.After
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceBetweenTransformationAllOf) GetAfterOk() (*string, bool) {
	if o == nil || o.After == nil {
		return nil, false
	}
	return o.After, true
}

// HasAfter returns a boolean if a field has been set.
func (o *ReplaceBetweenTransformationAllOf) HasAfter() bool {
	if o != nil && o.After != nil {
		return true
	}

	return false
}

// SetAfter gets a reference to the given string and assigns it to the After field.
func (o *ReplaceBetweenTransformationAllOf) SetAfter(v string) {
	o.After = &v
}

// GetBefore returns the Before field value if set, zero value otherwise.
func (o *ReplaceBetweenTransformationAllOf) GetBefore() string {
	if o == nil || o.Before == nil {
		var ret string
		return ret
	}
	return *o.Before
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceBetweenTransformationAllOf) GetBeforeOk() (*string, bool) {
	if o == nil || o.Before == nil {
		return nil, false
	}
	return o.Before, true
}

// HasBefore returns a boolean if a field has been set.
func (o *ReplaceBetweenTransformationAllOf) HasBefore() bool {
	if o != nil && o.Before != nil {
		return true
	}

	return false
}

// SetBefore gets a reference to the given string and assigns it to the Before field.
func (o *ReplaceBetweenTransformationAllOf) SetBefore(v string) {
	o.Before = &v
}

// GetReplacement returns the Replacement field value if set, zero value otherwise.
func (o *ReplaceBetweenTransformationAllOf) GetReplacement() string {
	if o == nil || o.Replacement == nil {
		var ret string
		return ret
	}
	return *o.Replacement
}

// GetReplacementOk returns a tuple with the Replacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplaceBetweenTransformationAllOf) GetReplacementOk() (*string, bool) {
	if o == nil || o.Replacement == nil {
		return nil, false
	}
	return o.Replacement, true
}

// HasReplacement returns a boolean if a field has been set.
func (o *ReplaceBetweenTransformationAllOf) HasReplacement() bool {
	if o != nil && o.Replacement != nil {
		return true
	}

	return false
}

// SetReplacement gets a reference to the given string and assigns it to the Replacement field.
func (o *ReplaceBetweenTransformationAllOf) SetReplacement(v string) {
	o.Replacement = &v
}

func (o ReplaceBetweenTransformationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.After != nil {
		toSerialize["after"] = o.After
	}
	if o.Before != nil {
		toSerialize["before"] = o.Before
	}
	if o.Replacement != nil {
		toSerialize["replacement"] = o.Replacement
	}
	return json.Marshal(toSerialize)
}

type NullableReplaceBetweenTransformationAllOf struct {
	value *ReplaceBetweenTransformationAllOf
	isSet bool
}

func (v NullableReplaceBetweenTransformationAllOf) Get() *ReplaceBetweenTransformationAllOf {
	return v.value
}

func (v *NullableReplaceBetweenTransformationAllOf) Set(val *ReplaceBetweenTransformationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceBetweenTransformationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceBetweenTransformationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceBetweenTransformationAllOf(val *ReplaceBetweenTransformationAllOf) *NullableReplaceBetweenTransformationAllOf {
	return &NullableReplaceBetweenTransformationAllOf{value: val, isSet: true}
}

func (v NullableReplaceBetweenTransformationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceBetweenTransformationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


