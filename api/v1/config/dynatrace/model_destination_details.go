/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// DestinationDetails Configuration of a destination-based conversion goal.
type DestinationDetails struct {
	// The path to be reached to hit the conversion goal.
	UrlOrPath string `json:"urlOrPath"`
	// The operator of the match.
	MatchType *string `json:"matchType,omitempty"`
	// The match is case-sensitive (`true`) or (`false`).
	CaseSensitive *bool `json:"caseSensitive,omitempty"`
}

// NewDestinationDetails instantiates a new DestinationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDestinationDetails(urlOrPath string, ) *DestinationDetails {
	this := DestinationDetails{}
	this.UrlOrPath = urlOrPath
	return &this
}

// NewDestinationDetailsWithDefaults instantiates a new DestinationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDestinationDetailsWithDefaults() *DestinationDetails {
	this := DestinationDetails{}
	return &this
}

// GetUrlOrPath returns the UrlOrPath field value
func (o *DestinationDetails) GetUrlOrPath() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.UrlOrPath
}

// GetUrlOrPathOk returns a tuple with the UrlOrPath field value
// and a boolean to check if the value has been set.
func (o *DestinationDetails) GetUrlOrPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UrlOrPath, true
}

// SetUrlOrPath sets field value
func (o *DestinationDetails) SetUrlOrPath(v string) {
	o.UrlOrPath = v
}

// GetMatchType returns the MatchType field value if set, zero value otherwise.
func (o *DestinationDetails) GetMatchType() string {
	if o == nil || o.MatchType == nil {
		var ret string
		return ret
	}
	return *o.MatchType
}

// GetMatchTypeOk returns a tuple with the MatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationDetails) GetMatchTypeOk() (*string, bool) {
	if o == nil || o.MatchType == nil {
		return nil, false
	}
	return o.MatchType, true
}

// HasMatchType returns a boolean if a field has been set.
func (o *DestinationDetails) HasMatchType() bool {
	if o != nil && o.MatchType != nil {
		return true
	}

	return false
}

// SetMatchType gets a reference to the given string and assigns it to the MatchType field.
func (o *DestinationDetails) SetMatchType(v string) {
	o.MatchType = &v
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *DestinationDetails) GetCaseSensitive() bool {
	if o == nil || o.CaseSensitive == nil {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DestinationDetails) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || o.CaseSensitive == nil {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *DestinationDetails) HasCaseSensitive() bool {
	if o != nil && o.CaseSensitive != nil {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *DestinationDetails) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

func (o DestinationDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["urlOrPath"] = o.UrlOrPath
	}
	if o.MatchType != nil {
		toSerialize["matchType"] = o.MatchType
	}
	if o.CaseSensitive != nil {
		toSerialize["caseSensitive"] = o.CaseSensitive
	}
	return json.Marshal(toSerialize)
}

type NullableDestinationDetails struct {
	value *DestinationDetails
	isSet bool
}

func (v NullableDestinationDetails) Get() *DestinationDetails {
	return v.value
}

func (v *NullableDestinationDetails) Set(val *DestinationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableDestinationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableDestinationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDestinationDetails(val *DestinationDetails) *NullableDestinationDetails {
	return &NullableDestinationDetails{value: val, isSet: true}
}

func (v NullableDestinationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDestinationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


