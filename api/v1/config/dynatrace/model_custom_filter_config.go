/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CustomFilterConfig Configuration of the custom filter of a tile.
type CustomFilterConfig struct {
	// The type of the filter.    It shows to which entity the filter belongs.    Custom charts have the `MIXED` type.
	Type string `json:"type"`
	// The name of the tile, set by user
	CustomName string `json:"customName"`
	// The default name of the tile
	DefaultName string                  `json:"defaultName"`
	ChartConfig CustomFilterChartConfig `json:"chartConfig"`
	// A list of filters, applied to specific entity types.
	FiltersPerEntityType interface{} `json:"filtersPerEntityType"`
}

// NewCustomFilterConfig instantiates a new CustomFilterConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomFilterConfig(type_ string, customName string, defaultName string, chartConfig CustomFilterChartConfig, filtersPerEntityType interface{}) *CustomFilterConfig {
	this := CustomFilterConfig{}
	this.Type = type_
	this.CustomName = customName
	this.DefaultName = defaultName
	this.ChartConfig = chartConfig
	this.FiltersPerEntityType = filtersPerEntityType
	return &this
}

// NewCustomFilterConfigWithDefaults instantiates a new CustomFilterConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFilterConfigWithDefaults() *CustomFilterConfig {
	this := CustomFilterConfig{}
	return &this
}

// GetType returns the Type field value
func (o *CustomFilterConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CustomFilterConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CustomFilterConfig) SetType(v string) {
	o.Type = v
}

// GetCustomName returns the CustomName field value
func (o *CustomFilterConfig) GetCustomName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomName
}

// GetCustomNameOk returns a tuple with the CustomName field value
// and a boolean to check if the value has been set.
func (o *CustomFilterConfig) GetCustomNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomName, true
}

// SetCustomName sets field value
func (o *CustomFilterConfig) SetCustomName(v string) {
	o.CustomName = v
}

// GetDefaultName returns the DefaultName field value
func (o *CustomFilterConfig) GetDefaultName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultName
}

// GetDefaultNameOk returns a tuple with the DefaultName field value
// and a boolean to check if the value has been set.
func (o *CustomFilterConfig) GetDefaultNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultName, true
}

// SetDefaultName sets field value
func (o *CustomFilterConfig) SetDefaultName(v string) {
	o.DefaultName = v
}

// GetChartConfig returns the ChartConfig field value
func (o *CustomFilterConfig) GetChartConfig() CustomFilterChartConfig {
	if o == nil {
		var ret CustomFilterChartConfig
		return ret
	}

	return o.ChartConfig
}

// GetChartConfigOk returns a tuple with the ChartConfig field value
// and a boolean to check if the value has been set.
func (o *CustomFilterConfig) GetChartConfigOk() (*CustomFilterChartConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChartConfig, true
}

// SetChartConfig sets field value
func (o *CustomFilterConfig) SetChartConfig(v CustomFilterChartConfig) {
	o.ChartConfig = v
}

// GetFiltersPerEntityType returns the FiltersPerEntityType field value
func (o *CustomFilterConfig) GetFiltersPerEntityType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.FiltersPerEntityType
}

// GetFiltersPerEntityTypeOk returns a tuple with the FiltersPerEntityType field value
// and a boolean to check if the value has been set.
func (o *CustomFilterConfig) GetFiltersPerEntityTypeOk() (*interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FiltersPerEntityType, true
}

// SetFiltersPerEntityType sets field value
func (o *CustomFilterConfig) SetFiltersPerEntityType(v interface{}) {
	o.FiltersPerEntityType = v
}

func (o CustomFilterConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["customName"] = o.CustomName
	}
	if true {
		toSerialize["defaultName"] = o.DefaultName
	}
	if true {
		toSerialize["chartConfig"] = o.ChartConfig
	}
	if true {
		toSerialize["filtersPerEntityType"] = o.FiltersPerEntityType
	}
	return json.Marshal(toSerialize)
}

type NullableCustomFilterConfig struct {
	value *CustomFilterConfig
	isSet bool
}

func (v NullableCustomFilterConfig) Get() *CustomFilterConfig {
	return v.value
}

func (v *NullableCustomFilterConfig) Set(val *CustomFilterConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFilterConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFilterConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFilterConfig(val *CustomFilterConfig) *NullableCustomFilterConfig {
	return &NullableCustomFilterConfig{value: val, isSet: true}
}

func (v NullableCustomFilterConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFilterConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
