/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AwsCredentialsConfig Configuration of an AWS credentials.
type AwsCredentialsConfig struct {
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
	// The unique ID of the credentials.
	Id *string `json:"id,omitempty"`
	// The status of the connection to the AWS environment.    * `CONNECTED`: There was a connection within last 10 minutes.  * `DISCONNECTED`: A problem occurred with establishing connection using these credentials. Check whether the data is correct.  * `UNINITIALIZED`: The successful connection has never been established for these credentials.
	ConnectionStatus *string `json:"connectionStatus,omitempty"`
	// The name of the credentials.
	Label string `json:"label"`
	// The type of the AWS partition.
	PartitionType string `json:"partitionType"`
	AuthenticationData AwsAuthenticationData `json:"authenticationData"`
	// Monitor only resources which have specified AWS tags (`true`) or all resources (`false`).
	TaggedOnly bool `json:"taggedOnly"`
	// A list of AWS tags to be monitored.   You can specify up to 10 tags.   Only applicable when the **taggedOnly** parameter is set to `true`.
	TagsToMonitor []AwsConfigTag `json:"tagsToMonitor"`
	// A list of supporting services to be monitored.
	SupportingServicesToMonitor *[]AwsSupportingServiceConfig `json:"supportingServicesToMonitor,omitempty"`
}

// NewAwsCredentialsConfig instantiates a new AwsCredentialsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsCredentialsConfig(label string, partitionType string, authenticationData AwsAuthenticationData, taggedOnly bool, tagsToMonitor []AwsConfigTag, ) *AwsCredentialsConfig {
	this := AwsCredentialsConfig{}
	this.Label = label
	this.PartitionType = partitionType
	this.AuthenticationData = authenticationData
	this.TaggedOnly = taggedOnly
	this.TagsToMonitor = tagsToMonitor
	return &this
}

// NewAwsCredentialsConfigWithDefaults instantiates a new AwsCredentialsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsCredentialsConfigWithDefaults() *AwsCredentialsConfig {
	this := AwsCredentialsConfig{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *AwsCredentialsConfig) GetMetadata() ConfigurationMetadata {
	if o == nil || o.Metadata == nil {
		var ret ConfigurationMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsCredentialsConfig) GetMetadataOk() (*ConfigurationMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AwsCredentialsConfig) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConfigurationMetadata and assigns it to the Metadata field.
func (o *AwsCredentialsConfig) SetMetadata(v ConfigurationMetadata) {
	o.Metadata = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AwsCredentialsConfig) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsCredentialsConfig) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AwsCredentialsConfig) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AwsCredentialsConfig) SetId(v string) {
	o.Id = &v
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *AwsCredentialsConfig) GetConnectionStatus() string {
	if o == nil || o.ConnectionStatus == nil {
		var ret string
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsCredentialsConfig) GetConnectionStatusOk() (*string, bool) {
	if o == nil || o.ConnectionStatus == nil {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *AwsCredentialsConfig) HasConnectionStatus() bool {
	if o != nil && o.ConnectionStatus != nil {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given string and assigns it to the ConnectionStatus field.
func (o *AwsCredentialsConfig) SetConnectionStatus(v string) {
	o.ConnectionStatus = &v
}

// GetLabel returns the Label field value
func (o *AwsCredentialsConfig) GetLabel() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *AwsCredentialsConfig) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *AwsCredentialsConfig) SetLabel(v string) {
	o.Label = v
}

// GetPartitionType returns the PartitionType field value
func (o *AwsCredentialsConfig) GetPartitionType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.PartitionType
}

// GetPartitionTypeOk returns a tuple with the PartitionType field value
// and a boolean to check if the value has been set.
func (o *AwsCredentialsConfig) GetPartitionTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PartitionType, true
}

// SetPartitionType sets field value
func (o *AwsCredentialsConfig) SetPartitionType(v string) {
	o.PartitionType = v
}

// GetAuthenticationData returns the AuthenticationData field value
func (o *AwsCredentialsConfig) GetAuthenticationData() AwsAuthenticationData {
	if o == nil  {
		var ret AwsAuthenticationData
		return ret
	}

	return o.AuthenticationData
}

// GetAuthenticationDataOk returns a tuple with the AuthenticationData field value
// and a boolean to check if the value has been set.
func (o *AwsCredentialsConfig) GetAuthenticationDataOk() (*AwsAuthenticationData, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AuthenticationData, true
}

// SetAuthenticationData sets field value
func (o *AwsCredentialsConfig) SetAuthenticationData(v AwsAuthenticationData) {
	o.AuthenticationData = v
}

// GetTaggedOnly returns the TaggedOnly field value
func (o *AwsCredentialsConfig) GetTaggedOnly() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.TaggedOnly
}

// GetTaggedOnlyOk returns a tuple with the TaggedOnly field value
// and a boolean to check if the value has been set.
func (o *AwsCredentialsConfig) GetTaggedOnlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TaggedOnly, true
}

// SetTaggedOnly sets field value
func (o *AwsCredentialsConfig) SetTaggedOnly(v bool) {
	o.TaggedOnly = v
}

// GetTagsToMonitor returns the TagsToMonitor field value
func (o *AwsCredentialsConfig) GetTagsToMonitor() []AwsConfigTag {
	if o == nil  {
		var ret []AwsConfigTag
		return ret
	}

	return o.TagsToMonitor
}

// GetTagsToMonitorOk returns a tuple with the TagsToMonitor field value
// and a boolean to check if the value has been set.
func (o *AwsCredentialsConfig) GetTagsToMonitorOk() (*[]AwsConfigTag, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TagsToMonitor, true
}

// SetTagsToMonitor sets field value
func (o *AwsCredentialsConfig) SetTagsToMonitor(v []AwsConfigTag) {
	o.TagsToMonitor = v
}

// GetSupportingServicesToMonitor returns the SupportingServicesToMonitor field value if set, zero value otherwise.
func (o *AwsCredentialsConfig) GetSupportingServicesToMonitor() []AwsSupportingServiceConfig {
	if o == nil || o.SupportingServicesToMonitor == nil {
		var ret []AwsSupportingServiceConfig
		return ret
	}
	return *o.SupportingServicesToMonitor
}

// GetSupportingServicesToMonitorOk returns a tuple with the SupportingServicesToMonitor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsCredentialsConfig) GetSupportingServicesToMonitorOk() (*[]AwsSupportingServiceConfig, bool) {
	if o == nil || o.SupportingServicesToMonitor == nil {
		return nil, false
	}
	return o.SupportingServicesToMonitor, true
}

// HasSupportingServicesToMonitor returns a boolean if a field has been set.
func (o *AwsCredentialsConfig) HasSupportingServicesToMonitor() bool {
	if o != nil && o.SupportingServicesToMonitor != nil {
		return true
	}

	return false
}

// SetSupportingServicesToMonitor gets a reference to the given []AwsSupportingServiceConfig and assigns it to the SupportingServicesToMonitor field.
func (o *AwsCredentialsConfig) SetSupportingServicesToMonitor(v []AwsSupportingServiceConfig) {
	o.SupportingServicesToMonitor = &v
}

func (o AwsCredentialsConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ConnectionStatus != nil {
		toSerialize["connectionStatus"] = o.ConnectionStatus
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["partitionType"] = o.PartitionType
	}
	if true {
		toSerialize["authenticationData"] = o.AuthenticationData
	}
	if true {
		toSerialize["taggedOnly"] = o.TaggedOnly
	}
	if true {
		toSerialize["tagsToMonitor"] = o.TagsToMonitor
	}
	if o.SupportingServicesToMonitor != nil {
		toSerialize["supportingServicesToMonitor"] = o.SupportingServicesToMonitor
	}
	return json.Marshal(toSerialize)
}

type NullableAwsCredentialsConfig struct {
	value *AwsCredentialsConfig
	isSet bool
}

func (v NullableAwsCredentialsConfig) Get() *AwsCredentialsConfig {
	return v.value
}

func (v *NullableAwsCredentialsConfig) Set(val *AwsCredentialsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsCredentialsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsCredentialsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsCredentialsConfig(val *AwsCredentialsConfig) *NullableAwsCredentialsConfig {
	return &NullableAwsCredentialsConfig{value: val, isSet: true}
}

func (v NullableAwsCredentialsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsCredentialsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


