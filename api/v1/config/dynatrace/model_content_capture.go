/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ContentCapture Settings for content capture.
type ContentCapture struct {
	ResourceTimingSettings ResourceTimingSettings `json:"resourceTimingSettings"`
	// JavaScript errors monitoring enabled/disabled.
	JavaScriptErrors bool `json:"javaScriptErrors"`
	TimeoutSettings TimeoutSettings `json:"timeoutSettings"`
	// Visually complete and Speed index support enabled/disabled.
	VisuallyCompleteAndSpeedIndex bool `json:"visuallyCompleteAndSpeedIndex"`
	VisuallyComplete2Settings *VisuallyComplete2Settings `json:"visuallyComplete2Settings,omitempty"`
}

// NewContentCapture instantiates a new ContentCapture object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentCapture(resourceTimingSettings ResourceTimingSettings, javaScriptErrors bool, timeoutSettings TimeoutSettings, visuallyCompleteAndSpeedIndex bool, ) *ContentCapture {
	this := ContentCapture{}
	this.ResourceTimingSettings = resourceTimingSettings
	this.JavaScriptErrors = javaScriptErrors
	this.TimeoutSettings = timeoutSettings
	this.VisuallyCompleteAndSpeedIndex = visuallyCompleteAndSpeedIndex
	return &this
}

// NewContentCaptureWithDefaults instantiates a new ContentCapture object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentCaptureWithDefaults() *ContentCapture {
	this := ContentCapture{}
	return &this
}

// GetResourceTimingSettings returns the ResourceTimingSettings field value
func (o *ContentCapture) GetResourceTimingSettings() ResourceTimingSettings {
	if o == nil  {
		var ret ResourceTimingSettings
		return ret
	}

	return o.ResourceTimingSettings
}

// GetResourceTimingSettingsOk returns a tuple with the ResourceTimingSettings field value
// and a boolean to check if the value has been set.
func (o *ContentCapture) GetResourceTimingSettingsOk() (*ResourceTimingSettings, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceTimingSettings, true
}

// SetResourceTimingSettings sets field value
func (o *ContentCapture) SetResourceTimingSettings(v ResourceTimingSettings) {
	o.ResourceTimingSettings = v
}

// GetJavaScriptErrors returns the JavaScriptErrors field value
func (o *ContentCapture) GetJavaScriptErrors() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.JavaScriptErrors
}

// GetJavaScriptErrorsOk returns a tuple with the JavaScriptErrors field value
// and a boolean to check if the value has been set.
func (o *ContentCapture) GetJavaScriptErrorsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JavaScriptErrors, true
}

// SetJavaScriptErrors sets field value
func (o *ContentCapture) SetJavaScriptErrors(v bool) {
	o.JavaScriptErrors = v
}

// GetTimeoutSettings returns the TimeoutSettings field value
func (o *ContentCapture) GetTimeoutSettings() TimeoutSettings {
	if o == nil  {
		var ret TimeoutSettings
		return ret
	}

	return o.TimeoutSettings
}

// GetTimeoutSettingsOk returns a tuple with the TimeoutSettings field value
// and a boolean to check if the value has been set.
func (o *ContentCapture) GetTimeoutSettingsOk() (*TimeoutSettings, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TimeoutSettings, true
}

// SetTimeoutSettings sets field value
func (o *ContentCapture) SetTimeoutSettings(v TimeoutSettings) {
	o.TimeoutSettings = v
}

// GetVisuallyCompleteAndSpeedIndex returns the VisuallyCompleteAndSpeedIndex field value
func (o *ContentCapture) GetVisuallyCompleteAndSpeedIndex() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.VisuallyCompleteAndSpeedIndex
}

// GetVisuallyCompleteAndSpeedIndexOk returns a tuple with the VisuallyCompleteAndSpeedIndex field value
// and a boolean to check if the value has been set.
func (o *ContentCapture) GetVisuallyCompleteAndSpeedIndexOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VisuallyCompleteAndSpeedIndex, true
}

// SetVisuallyCompleteAndSpeedIndex sets field value
func (o *ContentCapture) SetVisuallyCompleteAndSpeedIndex(v bool) {
	o.VisuallyCompleteAndSpeedIndex = v
}

// GetVisuallyComplete2Settings returns the VisuallyComplete2Settings field value if set, zero value otherwise.
func (o *ContentCapture) GetVisuallyComplete2Settings() VisuallyComplete2Settings {
	if o == nil || o.VisuallyComplete2Settings == nil {
		var ret VisuallyComplete2Settings
		return ret
	}
	return *o.VisuallyComplete2Settings
}

// GetVisuallyComplete2SettingsOk returns a tuple with the VisuallyComplete2Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentCapture) GetVisuallyComplete2SettingsOk() (*VisuallyComplete2Settings, bool) {
	if o == nil || o.VisuallyComplete2Settings == nil {
		return nil, false
	}
	return o.VisuallyComplete2Settings, true
}

// HasVisuallyComplete2Settings returns a boolean if a field has been set.
func (o *ContentCapture) HasVisuallyComplete2Settings() bool {
	if o != nil && o.VisuallyComplete2Settings != nil {
		return true
	}

	return false
}

// SetVisuallyComplete2Settings gets a reference to the given VisuallyComplete2Settings and assigns it to the VisuallyComplete2Settings field.
func (o *ContentCapture) SetVisuallyComplete2Settings(v VisuallyComplete2Settings) {
	o.VisuallyComplete2Settings = &v
}

func (o ContentCapture) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resourceTimingSettings"] = o.ResourceTimingSettings
	}
	if true {
		toSerialize["javaScriptErrors"] = o.JavaScriptErrors
	}
	if true {
		toSerialize["timeoutSettings"] = o.TimeoutSettings
	}
	if true {
		toSerialize["visuallyCompleteAndSpeedIndex"] = o.VisuallyCompleteAndSpeedIndex
	}
	if o.VisuallyComplete2Settings != nil {
		toSerialize["visuallyComplete2Settings"] = o.VisuallyComplete2Settings
	}
	return json.Marshal(toSerialize)
}

type NullableContentCapture struct {
	value *ContentCapture
	isSet bool
}

func (v NullableContentCapture) Get() *ContentCapture {
	return v.value
}

func (v *NullableContentCapture) Set(val *ContentCapture) {
	v.value = val
	v.isSet = true
}

func (v NullableContentCapture) IsSet() bool {
	return v.isSet
}

func (v *NullableContentCapture) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentCapture(val *ContentCapture) *NullableContentCapture {
	return &NullableContentCapture{value: val, isSet: true}
}

func (v NullableContentCapture) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentCapture) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


