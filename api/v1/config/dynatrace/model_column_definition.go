/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ColumnDefinition Definition of numeric column.
type ColumnDefinition struct {
	Name string `json:"name"`
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `CUSTOM` -> CustomColumnDefinition  * `JSON` -> JsonColumnDefinition  
	Type string `json:"type"`
}

// NewColumnDefinition instantiates a new ColumnDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColumnDefinition(name string, type_ string, ) *ColumnDefinition {
	this := ColumnDefinition{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewColumnDefinitionWithDefaults instantiates a new ColumnDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColumnDefinitionWithDefaults() *ColumnDefinition {
	this := ColumnDefinition{}
	return &this
}

// GetName returns the Name field value
func (o *ColumnDefinition) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ColumnDefinition) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ColumnDefinition) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ColumnDefinition) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ColumnDefinition) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ColumnDefinition) SetType(v string) {
	o.Type = v
}

func (o ColumnDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableColumnDefinition struct {
	value *ColumnDefinition
	isSet bool
}

func (v NullableColumnDefinition) Get() *ColumnDefinition {
	return v.value
}

func (v *NullableColumnDefinition) Set(val *ColumnDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableColumnDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableColumnDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColumnDefinition(val *ColumnDefinition) *NullableColumnDefinition {
	return &NullableColumnDefinition{value: val, isSet: true}
}

func (v NullableColumnDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColumnDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


