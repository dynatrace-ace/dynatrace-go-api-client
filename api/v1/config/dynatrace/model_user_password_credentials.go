/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UserPasswordCredentials A credentials set of the `USERNAME_PASSWORD` type.
type UserPasswordCredentials struct {
	Credentials
	// The username of the credentials set.
	User string `json:"user"`
	// The password of the credential.
	Password string `json:"password"`
}

// NewUserPasswordCredentials instantiates a new UserPasswordCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPasswordCredentials(user string, password string, ) *UserPasswordCredentials {
	this := UserPasswordCredentials{}
	this.User = user
	this.Password = password
	return &this
}

// NewUserPasswordCredentialsWithDefaults instantiates a new UserPasswordCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPasswordCredentialsWithDefaults() *UserPasswordCredentials {
	this := UserPasswordCredentials{}
	return &this
}

// GetUser returns the User field value
func (o *UserPasswordCredentials) GetUser() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *UserPasswordCredentials) GetUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *UserPasswordCredentials) SetUser(v string) {
	o.User = v
}

// GetPassword returns the Password field value
func (o *UserPasswordCredentials) GetPassword() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *UserPasswordCredentials) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *UserPasswordCredentials) SetPassword(v string) {
	o.Password = v
}

func (o UserPasswordCredentials) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedCredentials, errCredentials := json.Marshal(o.Credentials)
	if errCredentials != nil {
		return []byte{}, errCredentials
	}
	errCredentials = json.Unmarshal([]byte(serializedCredentials), &toSerialize)
	if errCredentials != nil {
		return []byte{}, errCredentials
	}
	if true {
		toSerialize["user"] = o.User
	}
	if true {
		toSerialize["password"] = o.Password
	}
	return json.Marshal(toSerialize)
}

type NullableUserPasswordCredentials struct {
	value *UserPasswordCredentials
	isSet bool
}

func (v NullableUserPasswordCredentials) Get() *UserPasswordCredentials {
	return v.value
}

func (v *NullableUserPasswordCredentials) Set(val *UserPasswordCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPasswordCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPasswordCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPasswordCredentials(val *UserPasswordCredentials) *NullableUserPasswordCredentials {
	return &NullableUserPasswordCredentials{value: val, isSet: true}
}

func (v NullableUserPasswordCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPasswordCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


