/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// JiraNotificationConfigAllOf struct for JiraNotificationConfigAllOf
type JiraNotificationConfigAllOf struct {
	// The username of the Jira profile.
	Username *string `json:"username,omitempty"`
	// The password for the Jira profile.
	Password *string `json:"password,omitempty"`
	// The URL of the Jira API endpoint.
	Url *string `json:"url,omitempty"`
	// The project key of the Jira issue to be created by this notification.
	ProjectKey *string `json:"projectKey,omitempty"`
	// The type of the Jira issue to be created by this notification.
	IssueType *string `json:"issueType,omitempty"`
	// The summary of the Jira issue to be created by this notification.   You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Summary *string `json:"summary,omitempty"`
	// The description of the Jira issue to be created by this notification.    You can use same placeholders as in issue summary.
	Description *string `json:"description,omitempty"`
}

// NewJiraNotificationConfigAllOf instantiates a new JiraNotificationConfigAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJiraNotificationConfigAllOf() *JiraNotificationConfigAllOf {
	this := JiraNotificationConfigAllOf{}
	return &this
}

// NewJiraNotificationConfigAllOfWithDefaults instantiates a new JiraNotificationConfigAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJiraNotificationConfigAllOfWithDefaults() *JiraNotificationConfigAllOf {
	this := JiraNotificationConfigAllOf{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *JiraNotificationConfigAllOf) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JiraNotificationConfigAllOf) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *JiraNotificationConfigAllOf) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *JiraNotificationConfigAllOf) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *JiraNotificationConfigAllOf) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JiraNotificationConfigAllOf) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *JiraNotificationConfigAllOf) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *JiraNotificationConfigAllOf) SetPassword(v string) {
	o.Password = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *JiraNotificationConfigAllOf) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JiraNotificationConfigAllOf) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *JiraNotificationConfigAllOf) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *JiraNotificationConfigAllOf) SetUrl(v string) {
	o.Url = &v
}

// GetProjectKey returns the ProjectKey field value if set, zero value otherwise.
func (o *JiraNotificationConfigAllOf) GetProjectKey() string {
	if o == nil || o.ProjectKey == nil {
		var ret string
		return ret
	}
	return *o.ProjectKey
}

// GetProjectKeyOk returns a tuple with the ProjectKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JiraNotificationConfigAllOf) GetProjectKeyOk() (*string, bool) {
	if o == nil || o.ProjectKey == nil {
		return nil, false
	}
	return o.ProjectKey, true
}

// HasProjectKey returns a boolean if a field has been set.
func (o *JiraNotificationConfigAllOf) HasProjectKey() bool {
	if o != nil && o.ProjectKey != nil {
		return true
	}

	return false
}

// SetProjectKey gets a reference to the given string and assigns it to the ProjectKey field.
func (o *JiraNotificationConfigAllOf) SetProjectKey(v string) {
	o.ProjectKey = &v
}

// GetIssueType returns the IssueType field value if set, zero value otherwise.
func (o *JiraNotificationConfigAllOf) GetIssueType() string {
	if o == nil || o.IssueType == nil {
		var ret string
		return ret
	}
	return *o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JiraNotificationConfigAllOf) GetIssueTypeOk() (*string, bool) {
	if o == nil || o.IssueType == nil {
		return nil, false
	}
	return o.IssueType, true
}

// HasIssueType returns a boolean if a field has been set.
func (o *JiraNotificationConfigAllOf) HasIssueType() bool {
	if o != nil && o.IssueType != nil {
		return true
	}

	return false
}

// SetIssueType gets a reference to the given string and assigns it to the IssueType field.
func (o *JiraNotificationConfigAllOf) SetIssueType(v string) {
	o.IssueType = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *JiraNotificationConfigAllOf) GetSummary() string {
	if o == nil || o.Summary == nil {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JiraNotificationConfigAllOf) GetSummaryOk() (*string, bool) {
	if o == nil || o.Summary == nil {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *JiraNotificationConfigAllOf) HasSummary() bool {
	if o != nil && o.Summary != nil {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *JiraNotificationConfigAllOf) SetSummary(v string) {
	o.Summary = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *JiraNotificationConfigAllOf) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JiraNotificationConfigAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *JiraNotificationConfigAllOf) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *JiraNotificationConfigAllOf) SetDescription(v string) {
	o.Description = &v
}

func (o JiraNotificationConfigAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.ProjectKey != nil {
		toSerialize["projectKey"] = o.ProjectKey
	}
	if o.IssueType != nil {
		toSerialize["issueType"] = o.IssueType
	}
	if o.Summary != nil {
		toSerialize["summary"] = o.Summary
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableJiraNotificationConfigAllOf struct {
	value *JiraNotificationConfigAllOf
	isSet bool
}

func (v NullableJiraNotificationConfigAllOf) Get() *JiraNotificationConfigAllOf {
	return v.value
}

func (v *NullableJiraNotificationConfigAllOf) Set(val *JiraNotificationConfigAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableJiraNotificationConfigAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableJiraNotificationConfigAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJiraNotificationConfigAllOf(val *JiraNotificationConfigAllOf) *NullableJiraNotificationConfigAllOf {
	return &NullableJiraNotificationConfigAllOf{value: val, isSet: true}
}

func (v NullableJiraNotificationConfigAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJiraNotificationConfigAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


