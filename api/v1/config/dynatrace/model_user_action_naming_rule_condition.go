/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UserActionNamingRuleCondition The settings of conditions for user action naming.
type UserActionNamingRuleCondition struct {
	// Must be a defined placeholder wrapped in curly braces
	Operand1 string `json:"operand1"`
	// Must be null if operator is \"IS_EMPTY\", a regex if operator is \"MATCHES_REGULAR_ERPRESSION\". In all other cases the value can be a freetext or a placeholder wrapped in curly braces
	Operand2 *string `json:"operand2,omitempty"`
	// The operator of the condition
	Operator string `json:"operator"`
}

// NewUserActionNamingRuleCondition instantiates a new UserActionNamingRuleCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserActionNamingRuleCondition(operand1 string, operator string, ) *UserActionNamingRuleCondition {
	this := UserActionNamingRuleCondition{}
	this.Operand1 = operand1
	this.Operator = operator
	return &this
}

// NewUserActionNamingRuleConditionWithDefaults instantiates a new UserActionNamingRuleCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserActionNamingRuleConditionWithDefaults() *UserActionNamingRuleCondition {
	this := UserActionNamingRuleCondition{}
	return &this
}

// GetOperand1 returns the Operand1 field value
func (o *UserActionNamingRuleCondition) GetOperand1() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Operand1
}

// GetOperand1Ok returns a tuple with the Operand1 field value
// and a boolean to check if the value has been set.
func (o *UserActionNamingRuleCondition) GetOperand1Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Operand1, true
}

// SetOperand1 sets field value
func (o *UserActionNamingRuleCondition) SetOperand1(v string) {
	o.Operand1 = v
}

// GetOperand2 returns the Operand2 field value if set, zero value otherwise.
func (o *UserActionNamingRuleCondition) GetOperand2() string {
	if o == nil || o.Operand2 == nil {
		var ret string
		return ret
	}
	return *o.Operand2
}

// GetOperand2Ok returns a tuple with the Operand2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActionNamingRuleCondition) GetOperand2Ok() (*string, bool) {
	if o == nil || o.Operand2 == nil {
		return nil, false
	}
	return o.Operand2, true
}

// HasOperand2 returns a boolean if a field has been set.
func (o *UserActionNamingRuleCondition) HasOperand2() bool {
	if o != nil && o.Operand2 != nil {
		return true
	}

	return false
}

// SetOperand2 gets a reference to the given string and assigns it to the Operand2 field.
func (o *UserActionNamingRuleCondition) SetOperand2(v string) {
	o.Operand2 = &v
}

// GetOperator returns the Operator field value
func (o *UserActionNamingRuleCondition) GetOperator() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *UserActionNamingRuleCondition) GetOperatorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *UserActionNamingRuleCondition) SetOperator(v string) {
	o.Operator = v
}

func (o UserActionNamingRuleCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["operand1"] = o.Operand1
	}
	if o.Operand2 != nil {
		toSerialize["operand2"] = o.Operand2
	}
	if true {
		toSerialize["operator"] = o.Operator
	}
	return json.Marshal(toSerialize)
}

type NullableUserActionNamingRuleCondition struct {
	value *UserActionNamingRuleCondition
	isSet bool
}

func (v NullableUserActionNamingRuleCondition) Get() *UserActionNamingRuleCondition {
	return v.value
}

func (v *NullableUserActionNamingRuleCondition) Set(val *UserActionNamingRuleCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableUserActionNamingRuleCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableUserActionNamingRuleCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserActionNamingRuleCondition(val *UserActionNamingRuleCondition) *NullableUserActionNamingRuleCondition {
	return &NullableUserActionNamingRuleCondition{value: val, isSet: true}
}

func (v NullableUserActionNamingRuleCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserActionNamingRuleCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


