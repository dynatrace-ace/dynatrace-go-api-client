/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// VisitDurationDetails Configuration of a visit duration-based conversion goal.
type VisitDurationDetails struct {
	// The duration of session to hit the conversion goal, in milliseconds.
	DurationInMillis int64 `json:"durationInMillis"`
}

// NewVisitDurationDetails instantiates a new VisitDurationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisitDurationDetails(durationInMillis int64, ) *VisitDurationDetails {
	this := VisitDurationDetails{}
	this.DurationInMillis = durationInMillis
	return &this
}

// NewVisitDurationDetailsWithDefaults instantiates a new VisitDurationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisitDurationDetailsWithDefaults() *VisitDurationDetails {
	this := VisitDurationDetails{}
	return &this
}

// GetDurationInMillis returns the DurationInMillis field value
func (o *VisitDurationDetails) GetDurationInMillis() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.DurationInMillis
}

// GetDurationInMillisOk returns a tuple with the DurationInMillis field value
// and a boolean to check if the value has been set.
func (o *VisitDurationDetails) GetDurationInMillisOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DurationInMillis, true
}

// SetDurationInMillis sets field value
func (o *VisitDurationDetails) SetDurationInMillis(v int64) {
	o.DurationInMillis = v
}

func (o VisitDurationDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["durationInMillis"] = o.DurationInMillis
	}
	return json.Marshal(toSerialize)
}

type NullableVisitDurationDetails struct {
	value *VisitDurationDetails
	isSet bool
}

func (v NullableVisitDurationDetails) Get() *VisitDurationDetails {
	return v.value
}

func (v *NullableVisitDurationDetails) Set(val *VisitDurationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableVisitDurationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableVisitDurationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisitDurationDetails(val *VisitDurationDetails) *NullableVisitDurationDetails {
	return &NullableVisitDurationDetails{value: val, isSet: true}
}

func (v NullableVisitDurationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisitDurationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


