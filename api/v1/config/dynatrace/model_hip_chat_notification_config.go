/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// HipChatNotificationConfig Configuration of the HipChat notification.
type HipChatNotificationConfig struct {
	NotificationConfig
	// The URL of the HipChat WebHook.   This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests.
	Url *string `json:"url,omitempty"`
	// The content of the notification message.   You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Message string `json:"message"`
}

// NewHipChatNotificationConfig instantiates a new HipChatNotificationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHipChatNotificationConfig(message string, ) *HipChatNotificationConfig {
	this := HipChatNotificationConfig{}
	this.Message = message
	return &this
}

// NewHipChatNotificationConfigWithDefaults instantiates a new HipChatNotificationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHipChatNotificationConfigWithDefaults() *HipChatNotificationConfig {
	this := HipChatNotificationConfig{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *HipChatNotificationConfig) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HipChatNotificationConfig) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *HipChatNotificationConfig) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *HipChatNotificationConfig) SetUrl(v string) {
	o.Url = &v
}

// GetMessage returns the Message field value
func (o *HipChatNotificationConfig) GetMessage() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *HipChatNotificationConfig) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *HipChatNotificationConfig) SetMessage(v string) {
	o.Message = v
}

func (o HipChatNotificationConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedNotificationConfig, errNotificationConfig := json.Marshal(o.NotificationConfig)
	if errNotificationConfig != nil {
		return []byte{}, errNotificationConfig
	}
	errNotificationConfig = json.Unmarshal([]byte(serializedNotificationConfig), &toSerialize)
	if errNotificationConfig != nil {
		return []byte{}, errNotificationConfig
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableHipChatNotificationConfig struct {
	value *HipChatNotificationConfig
	isSet bool
}

func (v NullableHipChatNotificationConfig) Get() *HipChatNotificationConfig {
	return v.value
}

func (v *NullableHipChatNotificationConfig) Set(val *HipChatNotificationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHipChatNotificationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHipChatNotificationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHipChatNotificationConfig(val *HipChatNotificationConfig) *NullableHipChatNotificationConfig {
	return &NullableHipChatNotificationConfig{value: val, isSet: true}
}

func (v NullableHipChatNotificationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHipChatNotificationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


