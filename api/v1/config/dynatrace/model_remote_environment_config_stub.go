/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// RemoteEnvironmentConfigStub The short representation of a remote environment.
type RemoteEnvironmentConfigStub struct {
	Name *string `json:"name,omitempty"`
	Id string `json:"id"`
	// The display name of the remote environment.
	Uri *string `json:"uri,omitempty"`
	// The network scope of the remote environment: * `EXTERNAL`: The remote environment is located in an another network.  * `INTERNAL`: The remote environment is located in the same network.  * `CLUSTER`: The remote environment is located in the same cluster.   Dynatrace SaaS can only use `EXTERNAL`.  If not set, `EXTERNAL` is used.
	NetworkScope *string `json:"networkScope,omitempty"`
}

// NewRemoteEnvironmentConfigStub instantiates a new RemoteEnvironmentConfigStub object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteEnvironmentConfigStub(id string, ) *RemoteEnvironmentConfigStub {
	this := RemoteEnvironmentConfigStub{}
	this.Id = id
	return &this
}

// NewRemoteEnvironmentConfigStubWithDefaults instantiates a new RemoteEnvironmentConfigStub object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteEnvironmentConfigStubWithDefaults() *RemoteEnvironmentConfigStub {
	this := RemoteEnvironmentConfigStub{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RemoteEnvironmentConfigStub) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteEnvironmentConfigStub) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RemoteEnvironmentConfigStub) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RemoteEnvironmentConfigStub) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value
func (o *RemoteEnvironmentConfigStub) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RemoteEnvironmentConfigStub) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RemoteEnvironmentConfigStub) SetId(v string) {
	o.Id = v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *RemoteEnvironmentConfigStub) GetUri() string {
	if o == nil || o.Uri == nil {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteEnvironmentConfigStub) GetUriOk() (*string, bool) {
	if o == nil || o.Uri == nil {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *RemoteEnvironmentConfigStub) HasUri() bool {
	if o != nil && o.Uri != nil {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *RemoteEnvironmentConfigStub) SetUri(v string) {
	o.Uri = &v
}

// GetNetworkScope returns the NetworkScope field value if set, zero value otherwise.
func (o *RemoteEnvironmentConfigStub) GetNetworkScope() string {
	if o == nil || o.NetworkScope == nil {
		var ret string
		return ret
	}
	return *o.NetworkScope
}

// GetNetworkScopeOk returns a tuple with the NetworkScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteEnvironmentConfigStub) GetNetworkScopeOk() (*string, bool) {
	if o == nil || o.NetworkScope == nil {
		return nil, false
	}
	return o.NetworkScope, true
}

// HasNetworkScope returns a boolean if a field has been set.
func (o *RemoteEnvironmentConfigStub) HasNetworkScope() bool {
	if o != nil && o.NetworkScope != nil {
		return true
	}

	return false
}

// SetNetworkScope gets a reference to the given string and assigns it to the NetworkScope field.
func (o *RemoteEnvironmentConfigStub) SetNetworkScope(v string) {
	o.NetworkScope = &v
}

func (o RemoteEnvironmentConfigStub) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Uri != nil {
		toSerialize["uri"] = o.Uri
	}
	if o.NetworkScope != nil {
		toSerialize["networkScope"] = o.NetworkScope
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteEnvironmentConfigStub struct {
	value *RemoteEnvironmentConfigStub
	isSet bool
}

func (v NullableRemoteEnvironmentConfigStub) Get() *RemoteEnvironmentConfigStub {
	return v.value
}

func (v *NullableRemoteEnvironmentConfigStub) Set(val *RemoteEnvironmentConfigStub) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteEnvironmentConfigStub) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteEnvironmentConfigStub) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteEnvironmentConfigStub(val *RemoteEnvironmentConfigStub) *NullableRemoteEnvironmentConfigStub {
	return &NullableRemoteEnvironmentConfigStub{value: val, isSet: true}
}

func (v NullableRemoteEnvironmentConfigStub) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteEnvironmentConfigStub) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


