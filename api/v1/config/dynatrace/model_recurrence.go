/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Recurrence The recurrence of the maintenance window.
type Recurrence struct {
	// The day of the week for weekly maintenance.   The format is the full name of the day in upper case, for example `THURSDAY`.
	DayOfWeek *string `json:"dayOfWeek,omitempty"`
	// The day of the month for monthly maintenance.   The value of `31` is treated as the last day of the month for months that don't have a 31st day. The value of `30` is also treated as the last day of the month for February.
	DayOfMonth *int32 `json:"dayOfMonth,omitempty"`
	// The start time of the maintenance window in HH:mm format.
	StartTime string `json:"startTime"`
	// The duration of the maintenance window in minutes.
	DurationMinutes int32 `json:"durationMinutes"`
}

// NewRecurrence instantiates a new Recurrence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrence(startTime string, durationMinutes int32, ) *Recurrence {
	this := Recurrence{}
	this.StartTime = startTime
	this.DurationMinutes = durationMinutes
	return &this
}

// NewRecurrenceWithDefaults instantiates a new Recurrence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrenceWithDefaults() *Recurrence {
	this := Recurrence{}
	return &this
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise.
func (o *Recurrence) GetDayOfWeek() string {
	if o == nil || o.DayOfWeek == nil {
		var ret string
		return ret
	}
	return *o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recurrence) GetDayOfWeekOk() (*string, bool) {
	if o == nil || o.DayOfWeek == nil {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *Recurrence) HasDayOfWeek() bool {
	if o != nil && o.DayOfWeek != nil {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given string and assigns it to the DayOfWeek field.
func (o *Recurrence) SetDayOfWeek(v string) {
	o.DayOfWeek = &v
}

// GetDayOfMonth returns the DayOfMonth field value if set, zero value otherwise.
func (o *Recurrence) GetDayOfMonth() int32 {
	if o == nil || o.DayOfMonth == nil {
		var ret int32
		return ret
	}
	return *o.DayOfMonth
}

// GetDayOfMonthOk returns a tuple with the DayOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Recurrence) GetDayOfMonthOk() (*int32, bool) {
	if o == nil || o.DayOfMonth == nil {
		return nil, false
	}
	return o.DayOfMonth, true
}

// HasDayOfMonth returns a boolean if a field has been set.
func (o *Recurrence) HasDayOfMonth() bool {
	if o != nil && o.DayOfMonth != nil {
		return true
	}

	return false
}

// SetDayOfMonth gets a reference to the given int32 and assigns it to the DayOfMonth field.
func (o *Recurrence) SetDayOfMonth(v int32) {
	o.DayOfMonth = &v
}

// GetStartTime returns the StartTime field value
func (o *Recurrence) GetStartTime() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Recurrence) GetStartTimeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Recurrence) SetStartTime(v string) {
	o.StartTime = v
}

// GetDurationMinutes returns the DurationMinutes field value
func (o *Recurrence) GetDurationMinutes() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.DurationMinutes
}

// GetDurationMinutesOk returns a tuple with the DurationMinutes field value
// and a boolean to check if the value has been set.
func (o *Recurrence) GetDurationMinutesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DurationMinutes, true
}

// SetDurationMinutes sets field value
func (o *Recurrence) SetDurationMinutes(v int32) {
	o.DurationMinutes = v
}

func (o Recurrence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DayOfWeek != nil {
		toSerialize["dayOfWeek"] = o.DayOfWeek
	}
	if o.DayOfMonth != nil {
		toSerialize["dayOfMonth"] = o.DayOfMonth
	}
	if true {
		toSerialize["startTime"] = o.StartTime
	}
	if true {
		toSerialize["durationMinutes"] = o.DurationMinutes
	}
	return json.Marshal(toSerialize)
}

type NullableRecurrence struct {
	value *Recurrence
	isSet bool
}

func (v NullableRecurrence) Get() *Recurrence {
	return v.value
}

func (v *NullableRecurrence) Set(val *Recurrence) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrence) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrence(val *Recurrence) *NullableRecurrence {
	return &NullableRecurrence{value: val, isSet: true}
}

func (v NullableRecurrence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


