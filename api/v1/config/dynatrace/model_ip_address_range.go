/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// IpAddressRange The IP address or the IP address range to be mapped to the location.
type IpAddressRange struct {
	// The subnet mask of the IP address range.
	SubnetMask *int32 `json:"subnetMask,omitempty"`
	// The IP address to be mapped.   For an IP address range, this is the **from** address.
	Address string `json:"address"`
	// The **to** address of the IP address range.
	AddressTo *string `json:"addressTo,omitempty"`
}

// NewIpAddressRange instantiates a new IpAddressRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpAddressRange(address string, ) *IpAddressRange {
	this := IpAddressRange{}
	this.Address = address
	return &this
}

// NewIpAddressRangeWithDefaults instantiates a new IpAddressRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpAddressRangeWithDefaults() *IpAddressRange {
	this := IpAddressRange{}
	return &this
}

// GetSubnetMask returns the SubnetMask field value if set, zero value otherwise.
func (o *IpAddressRange) GetSubnetMask() int32 {
	if o == nil || o.SubnetMask == nil {
		var ret int32
		return ret
	}
	return *o.SubnetMask
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddressRange) GetSubnetMaskOk() (*int32, bool) {
	if o == nil || o.SubnetMask == nil {
		return nil, false
	}
	return o.SubnetMask, true
}

// HasSubnetMask returns a boolean if a field has been set.
func (o *IpAddressRange) HasSubnetMask() bool {
	if o != nil && o.SubnetMask != nil {
		return true
	}

	return false
}

// SetSubnetMask gets a reference to the given int32 and assigns it to the SubnetMask field.
func (o *IpAddressRange) SetSubnetMask(v int32) {
	o.SubnetMask = &v
}

// GetAddress returns the Address field value
func (o *IpAddressRange) GetAddress() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *IpAddressRange) GetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *IpAddressRange) SetAddress(v string) {
	o.Address = v
}

// GetAddressTo returns the AddressTo field value if set, zero value otherwise.
func (o *IpAddressRange) GetAddressTo() string {
	if o == nil || o.AddressTo == nil {
		var ret string
		return ret
	}
	return *o.AddressTo
}

// GetAddressToOk returns a tuple with the AddressTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddressRange) GetAddressToOk() (*string, bool) {
	if o == nil || o.AddressTo == nil {
		return nil, false
	}
	return o.AddressTo, true
}

// HasAddressTo returns a boolean if a field has been set.
func (o *IpAddressRange) HasAddressTo() bool {
	if o != nil && o.AddressTo != nil {
		return true
	}

	return false
}

// SetAddressTo gets a reference to the given string and assigns it to the AddressTo field.
func (o *IpAddressRange) SetAddressTo(v string) {
	o.AddressTo = &v
}

func (o IpAddressRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SubnetMask != nil {
		toSerialize["subnetMask"] = o.SubnetMask
	}
	if true {
		toSerialize["address"] = o.Address
	}
	if o.AddressTo != nil {
		toSerialize["addressTo"] = o.AddressTo
	}
	return json.Marshal(toSerialize)
}

type NullableIpAddressRange struct {
	value *IpAddressRange
	isSet bool
}

func (v NullableIpAddressRange) Get() *IpAddressRange {
	return v.value
}

func (v *NullableIpAddressRange) Set(val *IpAddressRange) {
	v.value = val
	v.isSet = true
}

func (v NullableIpAddressRange) IsSet() bool {
	return v.isSet
}

func (v *NullableIpAddressRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpAddressRange(val *IpAddressRange) *NullableIpAddressRange {
	return &NullableIpAddressRange{value: val, isSet: true}
}

func (v NullableIpAddressRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpAddressRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


