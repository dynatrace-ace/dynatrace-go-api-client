/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AlertingEventTypeFilter Configuration of the event filter for the alerting profile.   You have two mutually exclusive options:  * Select an event type from the list of the predefined events. Specify it in the **predefinedEventFilter** field.  * Set a rule for custom events. Specify it in the **customEventFilter** field.
type AlertingEventTypeFilter struct {
	PredefinedEventFilter *AlertingPredefinedEventFilter `json:"predefinedEventFilter,omitempty"`
	CustomEventFilter *AlertingCustomEventFilter `json:"customEventFilter,omitempty"`
}

// NewAlertingEventTypeFilter instantiates a new AlertingEventTypeFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertingEventTypeFilter() *AlertingEventTypeFilter {
	this := AlertingEventTypeFilter{}
	return &this
}

// NewAlertingEventTypeFilterWithDefaults instantiates a new AlertingEventTypeFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertingEventTypeFilterWithDefaults() *AlertingEventTypeFilter {
	this := AlertingEventTypeFilter{}
	return &this
}

// GetPredefinedEventFilter returns the PredefinedEventFilter field value if set, zero value otherwise.
func (o *AlertingEventTypeFilter) GetPredefinedEventFilter() AlertingPredefinedEventFilter {
	if o == nil || o.PredefinedEventFilter == nil {
		var ret AlertingPredefinedEventFilter
		return ret
	}
	return *o.PredefinedEventFilter
}

// GetPredefinedEventFilterOk returns a tuple with the PredefinedEventFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertingEventTypeFilter) GetPredefinedEventFilterOk() (*AlertingPredefinedEventFilter, bool) {
	if o == nil || o.PredefinedEventFilter == nil {
		return nil, false
	}
	return o.PredefinedEventFilter, true
}

// HasPredefinedEventFilter returns a boolean if a field has been set.
func (o *AlertingEventTypeFilter) HasPredefinedEventFilter() bool {
	if o != nil && o.PredefinedEventFilter != nil {
		return true
	}

	return false
}

// SetPredefinedEventFilter gets a reference to the given AlertingPredefinedEventFilter and assigns it to the PredefinedEventFilter field.
func (o *AlertingEventTypeFilter) SetPredefinedEventFilter(v AlertingPredefinedEventFilter) {
	o.PredefinedEventFilter = &v
}

// GetCustomEventFilter returns the CustomEventFilter field value if set, zero value otherwise.
func (o *AlertingEventTypeFilter) GetCustomEventFilter() AlertingCustomEventFilter {
	if o == nil || o.CustomEventFilter == nil {
		var ret AlertingCustomEventFilter
		return ret
	}
	return *o.CustomEventFilter
}

// GetCustomEventFilterOk returns a tuple with the CustomEventFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertingEventTypeFilter) GetCustomEventFilterOk() (*AlertingCustomEventFilter, bool) {
	if o == nil || o.CustomEventFilter == nil {
		return nil, false
	}
	return o.CustomEventFilter, true
}

// HasCustomEventFilter returns a boolean if a field has been set.
func (o *AlertingEventTypeFilter) HasCustomEventFilter() bool {
	if o != nil && o.CustomEventFilter != nil {
		return true
	}

	return false
}

// SetCustomEventFilter gets a reference to the given AlertingCustomEventFilter and assigns it to the CustomEventFilter field.
func (o *AlertingEventTypeFilter) SetCustomEventFilter(v AlertingCustomEventFilter) {
	o.CustomEventFilter = &v
}

func (o AlertingEventTypeFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PredefinedEventFilter != nil {
		toSerialize["predefinedEventFilter"] = o.PredefinedEventFilter
	}
	if o.CustomEventFilter != nil {
		toSerialize["customEventFilter"] = o.CustomEventFilter
	}
	return json.Marshal(toSerialize)
}

type NullableAlertingEventTypeFilter struct {
	value *AlertingEventTypeFilter
	isSet bool
}

func (v NullableAlertingEventTypeFilter) Get() *AlertingEventTypeFilter {
	return v.value
}

func (v *NullableAlertingEventTypeFilter) Set(val *AlertingEventTypeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertingEventTypeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertingEventTypeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertingEventTypeFilter(val *AlertingEventTypeFilter) *NullableAlertingEventTypeFilter {
	return &NullableAlertingEventTypeFilter{value: val, isSet: true}
}

func (v NullableAlertingEventTypeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertingEventTypeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


