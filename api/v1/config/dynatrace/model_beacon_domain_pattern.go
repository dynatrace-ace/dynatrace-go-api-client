/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// BeaconDomainPattern Allowed beacon origin for CORS requests.
type BeaconDomainPattern struct {
	// The matching operation for the **domainNamePattern**.
	DomainNameMatcher string `json:"domainNameMatcher"`
	// The pattern of the allowed domain name.
	DomainNamePattern string `json:"domainNamePattern"`
}

// NewBeaconDomainPattern instantiates a new BeaconDomainPattern object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeaconDomainPattern(domainNameMatcher string, domainNamePattern string, ) *BeaconDomainPattern {
	this := BeaconDomainPattern{}
	this.DomainNameMatcher = domainNameMatcher
	this.DomainNamePattern = domainNamePattern
	return &this
}

// NewBeaconDomainPatternWithDefaults instantiates a new BeaconDomainPattern object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconDomainPatternWithDefaults() *BeaconDomainPattern {
	this := BeaconDomainPattern{}
	return &this
}

// GetDomainNameMatcher returns the DomainNameMatcher field value
func (o *BeaconDomainPattern) GetDomainNameMatcher() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DomainNameMatcher
}

// GetDomainNameMatcherOk returns a tuple with the DomainNameMatcher field value
// and a boolean to check if the value has been set.
func (o *BeaconDomainPattern) GetDomainNameMatcherOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DomainNameMatcher, true
}

// SetDomainNameMatcher sets field value
func (o *BeaconDomainPattern) SetDomainNameMatcher(v string) {
	o.DomainNameMatcher = v
}

// GetDomainNamePattern returns the DomainNamePattern field value
func (o *BeaconDomainPattern) GetDomainNamePattern() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DomainNamePattern
}

// GetDomainNamePatternOk returns a tuple with the DomainNamePattern field value
// and a boolean to check if the value has been set.
func (o *BeaconDomainPattern) GetDomainNamePatternOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DomainNamePattern, true
}

// SetDomainNamePattern sets field value
func (o *BeaconDomainPattern) SetDomainNamePattern(v string) {
	o.DomainNamePattern = v
}

func (o BeaconDomainPattern) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["domainNameMatcher"] = o.DomainNameMatcher
	}
	if true {
		toSerialize["domainNamePattern"] = o.DomainNamePattern
	}
	return json.Marshal(toSerialize)
}

type NullableBeaconDomainPattern struct {
	value *BeaconDomainPattern
	isSet bool
}

func (v NullableBeaconDomainPattern) Get() *BeaconDomainPattern {
	return v.value
}

func (v *NullableBeaconDomainPattern) Set(val *BeaconDomainPattern) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconDomainPattern) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconDomainPattern) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconDomainPattern(val *BeaconDomainPattern) *NullableBeaconDomainPattern {
	return &NullableBeaconDomainPattern{value: val, isSet: true}
}

func (v NullableBeaconDomainPattern) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconDomainPattern) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


