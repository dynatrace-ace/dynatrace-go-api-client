/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// HttpErrorRule Configuration of the HTTP error in the web application.
type HttpErrorRule struct {
	// If `true`, match by errors that have unknown HTTP status code.
	ConsiderUnknownErrorCode bool `json:"considerUnknownErrorCode"`
	// The HTTP status code or status code range to match by.   This field is required if **considerUnknownErrorCode** is set to `false`.
	ErrorCodes *string `json:"errorCodes,omitempty"`
	// If `true`, filter errors by URL.
	FilterByUrl bool `json:"filterByUrl"`
	// The matching rule for the URL.
	Filter *string `json:"filter,omitempty"`
	// The URL to look for.
	Url *string `json:"url,omitempty"`
	// Capture (`true`) or ignore (`false`) the error.
	Capture bool `json:"capture"`
	// Include (`true`) or exclude (`false`) the error in Apdex calculation.
	ImpactApdex bool `json:"impactApdex"`
	// Include (`true`) or exclude (`false`) the error in Davis AI [problem detection and analysis](https://www.dynatrace.com/support/help/shortlink/problems-hub).
	ConsiderForAi bool `json:"considerForAi"`
}

// NewHttpErrorRule instantiates a new HttpErrorRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpErrorRule(considerUnknownErrorCode bool, filterByUrl bool, capture bool, impactApdex bool, considerForAi bool, ) *HttpErrorRule {
	this := HttpErrorRule{}
	this.ConsiderUnknownErrorCode = considerUnknownErrorCode
	this.FilterByUrl = filterByUrl
	this.Capture = capture
	this.ImpactApdex = impactApdex
	this.ConsiderForAi = considerForAi
	return &this
}

// NewHttpErrorRuleWithDefaults instantiates a new HttpErrorRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpErrorRuleWithDefaults() *HttpErrorRule {
	this := HttpErrorRule{}
	return &this
}

// GetConsiderUnknownErrorCode returns the ConsiderUnknownErrorCode field value
func (o *HttpErrorRule) GetConsiderUnknownErrorCode() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.ConsiderUnknownErrorCode
}

// GetConsiderUnknownErrorCodeOk returns a tuple with the ConsiderUnknownErrorCode field value
// and a boolean to check if the value has been set.
func (o *HttpErrorRule) GetConsiderUnknownErrorCodeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConsiderUnknownErrorCode, true
}

// SetConsiderUnknownErrorCode sets field value
func (o *HttpErrorRule) SetConsiderUnknownErrorCode(v bool) {
	o.ConsiderUnknownErrorCode = v
}

// GetErrorCodes returns the ErrorCodes field value if set, zero value otherwise.
func (o *HttpErrorRule) GetErrorCodes() string {
	if o == nil || o.ErrorCodes == nil {
		var ret string
		return ret
	}
	return *o.ErrorCodes
}

// GetErrorCodesOk returns a tuple with the ErrorCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpErrorRule) GetErrorCodesOk() (*string, bool) {
	if o == nil || o.ErrorCodes == nil {
		return nil, false
	}
	return o.ErrorCodes, true
}

// HasErrorCodes returns a boolean if a field has been set.
func (o *HttpErrorRule) HasErrorCodes() bool {
	if o != nil && o.ErrorCodes != nil {
		return true
	}

	return false
}

// SetErrorCodes gets a reference to the given string and assigns it to the ErrorCodes field.
func (o *HttpErrorRule) SetErrorCodes(v string) {
	o.ErrorCodes = &v
}

// GetFilterByUrl returns the FilterByUrl field value
func (o *HttpErrorRule) GetFilterByUrl() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.FilterByUrl
}

// GetFilterByUrlOk returns a tuple with the FilterByUrl field value
// and a boolean to check if the value has been set.
func (o *HttpErrorRule) GetFilterByUrlOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FilterByUrl, true
}

// SetFilterByUrl sets field value
func (o *HttpErrorRule) SetFilterByUrl(v bool) {
	o.FilterByUrl = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *HttpErrorRule) GetFilter() string {
	if o == nil || o.Filter == nil {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpErrorRule) GetFilterOk() (*string, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *HttpErrorRule) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *HttpErrorRule) SetFilter(v string) {
	o.Filter = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *HttpErrorRule) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpErrorRule) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *HttpErrorRule) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *HttpErrorRule) SetUrl(v string) {
	o.Url = &v
}

// GetCapture returns the Capture field value
func (o *HttpErrorRule) GetCapture() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Capture
}

// GetCaptureOk returns a tuple with the Capture field value
// and a boolean to check if the value has been set.
func (o *HttpErrorRule) GetCaptureOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Capture, true
}

// SetCapture sets field value
func (o *HttpErrorRule) SetCapture(v bool) {
	o.Capture = v
}

// GetImpactApdex returns the ImpactApdex field value
func (o *HttpErrorRule) GetImpactApdex() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.ImpactApdex
}

// GetImpactApdexOk returns a tuple with the ImpactApdex field value
// and a boolean to check if the value has been set.
func (o *HttpErrorRule) GetImpactApdexOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ImpactApdex, true
}

// SetImpactApdex sets field value
func (o *HttpErrorRule) SetImpactApdex(v bool) {
	o.ImpactApdex = v
}

// GetConsiderForAi returns the ConsiderForAi field value
func (o *HttpErrorRule) GetConsiderForAi() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.ConsiderForAi
}

// GetConsiderForAiOk returns a tuple with the ConsiderForAi field value
// and a boolean to check if the value has been set.
func (o *HttpErrorRule) GetConsiderForAiOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConsiderForAi, true
}

// SetConsiderForAi sets field value
func (o *HttpErrorRule) SetConsiderForAi(v bool) {
	o.ConsiderForAi = v
}

func (o HttpErrorRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["considerUnknownErrorCode"] = o.ConsiderUnknownErrorCode
	}
	if o.ErrorCodes != nil {
		toSerialize["errorCodes"] = o.ErrorCodes
	}
	if true {
		toSerialize["filterByUrl"] = o.FilterByUrl
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["capture"] = o.Capture
	}
	if true {
		toSerialize["impactApdex"] = o.ImpactApdex
	}
	if true {
		toSerialize["considerForAi"] = o.ConsiderForAi
	}
	return json.Marshal(toSerialize)
}

type NullableHttpErrorRule struct {
	value *HttpErrorRule
	isSet bool
}

func (v NullableHttpErrorRule) Get() *HttpErrorRule {
	return v.value
}

func (v *NullableHttpErrorRule) Set(val *HttpErrorRule) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpErrorRule) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpErrorRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpErrorRule(val *HttpErrorRule) *NullableHttpErrorRule {
	return &NullableHttpErrorRule{value: val, isSet: true}
}

func (v NullableHttpErrorRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpErrorRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


