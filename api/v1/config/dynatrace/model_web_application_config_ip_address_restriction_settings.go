/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// WebApplicationConfigIpAddressRestrictionSettings Settings for restricting certain ip addresses and for introducing subnet mask. It also restricts the mode.
type WebApplicationConfigIpAddressRestrictionSettings struct {
	// The mode of the list of ip address restrictions.
	Mode string `json:"mode"`
	IpAddressRestrictions *[]IpAddressRange `json:"ipAddressRestrictions,omitempty"`
}

// NewWebApplicationConfigIpAddressRestrictionSettings instantiates a new WebApplicationConfigIpAddressRestrictionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebApplicationConfigIpAddressRestrictionSettings(mode string, ) *WebApplicationConfigIpAddressRestrictionSettings {
	this := WebApplicationConfigIpAddressRestrictionSettings{}
	this.Mode = mode
	return &this
}

// NewWebApplicationConfigIpAddressRestrictionSettingsWithDefaults instantiates a new WebApplicationConfigIpAddressRestrictionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebApplicationConfigIpAddressRestrictionSettingsWithDefaults() *WebApplicationConfigIpAddressRestrictionSettings {
	this := WebApplicationConfigIpAddressRestrictionSettings{}
	return &this
}

// GetMode returns the Mode field value
func (o *WebApplicationConfigIpAddressRestrictionSettings) GetMode() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfigIpAddressRestrictionSettings) GetModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *WebApplicationConfigIpAddressRestrictionSettings) SetMode(v string) {
	o.Mode = v
}

// GetIpAddressRestrictions returns the IpAddressRestrictions field value if set, zero value otherwise.
func (o *WebApplicationConfigIpAddressRestrictionSettings) GetIpAddressRestrictions() []IpAddressRange {
	if o == nil || o.IpAddressRestrictions == nil {
		var ret []IpAddressRange
		return ret
	}
	return *o.IpAddressRestrictions
}

// GetIpAddressRestrictionsOk returns a tuple with the IpAddressRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfigIpAddressRestrictionSettings) GetIpAddressRestrictionsOk() (*[]IpAddressRange, bool) {
	if o == nil || o.IpAddressRestrictions == nil {
		return nil, false
	}
	return o.IpAddressRestrictions, true
}

// HasIpAddressRestrictions returns a boolean if a field has been set.
func (o *WebApplicationConfigIpAddressRestrictionSettings) HasIpAddressRestrictions() bool {
	if o != nil && o.IpAddressRestrictions != nil {
		return true
	}

	return false
}

// SetIpAddressRestrictions gets a reference to the given []IpAddressRange and assigns it to the IpAddressRestrictions field.
func (o *WebApplicationConfigIpAddressRestrictionSettings) SetIpAddressRestrictions(v []IpAddressRange) {
	o.IpAddressRestrictions = &v
}

func (o WebApplicationConfigIpAddressRestrictionSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mode"] = o.Mode
	}
	if o.IpAddressRestrictions != nil {
		toSerialize["ipAddressRestrictions"] = o.IpAddressRestrictions
	}
	return json.Marshal(toSerialize)
}

type NullableWebApplicationConfigIpAddressRestrictionSettings struct {
	value *WebApplicationConfigIpAddressRestrictionSettings
	isSet bool
}

func (v NullableWebApplicationConfigIpAddressRestrictionSettings) Get() *WebApplicationConfigIpAddressRestrictionSettings {
	return v.value
}

func (v *NullableWebApplicationConfigIpAddressRestrictionSettings) Set(val *WebApplicationConfigIpAddressRestrictionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableWebApplicationConfigIpAddressRestrictionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableWebApplicationConfigIpAddressRestrictionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebApplicationConfigIpAddressRestrictionSettings(val *WebApplicationConfigIpAddressRestrictionSettings) *NullableWebApplicationConfigIpAddressRestrictionSettings {
	return &NullableWebApplicationConfigIpAddressRestrictionSettings{value: val, isSet: true}
}

func (v NullableWebApplicationConfigIpAddressRestrictionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebApplicationConfigIpAddressRestrictionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


