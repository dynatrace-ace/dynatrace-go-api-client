/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AssignedEntitiesWithMetricTileAllOf struct for AssignedEntitiesWithMetricTileAllOf
type AssignedEntitiesWithMetricTileAllOf struct {
	// The list of Dynatrace entities, assigned to the tile.
	AssignedEntities *[]string `json:"assignedEntities,omitempty"`
	// The metric assigned to the tile.
	Metric *string `json:"metric,omitempty"`
}

// NewAssignedEntitiesWithMetricTileAllOf instantiates a new AssignedEntitiesWithMetricTileAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignedEntitiesWithMetricTileAllOf() *AssignedEntitiesWithMetricTileAllOf {
	this := AssignedEntitiesWithMetricTileAllOf{}
	return &this
}

// NewAssignedEntitiesWithMetricTileAllOfWithDefaults instantiates a new AssignedEntitiesWithMetricTileAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignedEntitiesWithMetricTileAllOfWithDefaults() *AssignedEntitiesWithMetricTileAllOf {
	this := AssignedEntitiesWithMetricTileAllOf{}
	return &this
}

// GetAssignedEntities returns the AssignedEntities field value if set, zero value otherwise.
func (o *AssignedEntitiesWithMetricTileAllOf) GetAssignedEntities() []string {
	if o == nil || o.AssignedEntities == nil {
		var ret []string
		return ret
	}
	return *o.AssignedEntities
}

// GetAssignedEntitiesOk returns a tuple with the AssignedEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedEntitiesWithMetricTileAllOf) GetAssignedEntitiesOk() (*[]string, bool) {
	if o == nil || o.AssignedEntities == nil {
		return nil, false
	}
	return o.AssignedEntities, true
}

// HasAssignedEntities returns a boolean if a field has been set.
func (o *AssignedEntitiesWithMetricTileAllOf) HasAssignedEntities() bool {
	if o != nil && o.AssignedEntities != nil {
		return true
	}

	return false
}

// SetAssignedEntities gets a reference to the given []string and assigns it to the AssignedEntities field.
func (o *AssignedEntitiesWithMetricTileAllOf) SetAssignedEntities(v []string) {
	o.AssignedEntities = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *AssignedEntitiesWithMetricTileAllOf) GetMetric() string {
	if o == nil || o.Metric == nil {
		var ret string
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedEntitiesWithMetricTileAllOf) GetMetricOk() (*string, bool) {
	if o == nil || o.Metric == nil {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *AssignedEntitiesWithMetricTileAllOf) HasMetric() bool {
	if o != nil && o.Metric != nil {
		return true
	}

	return false
}

// SetMetric gets a reference to the given string and assigns it to the Metric field.
func (o *AssignedEntitiesWithMetricTileAllOf) SetMetric(v string) {
	o.Metric = &v
}

func (o AssignedEntitiesWithMetricTileAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssignedEntities != nil {
		toSerialize["assignedEntities"] = o.AssignedEntities
	}
	if o.Metric != nil {
		toSerialize["metric"] = o.Metric
	}
	return json.Marshal(toSerialize)
}

type NullableAssignedEntitiesWithMetricTileAllOf struct {
	value *AssignedEntitiesWithMetricTileAllOf
	isSet bool
}

func (v NullableAssignedEntitiesWithMetricTileAllOf) Get() *AssignedEntitiesWithMetricTileAllOf {
	return v.value
}

func (v *NullableAssignedEntitiesWithMetricTileAllOf) Set(val *AssignedEntitiesWithMetricTileAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignedEntitiesWithMetricTileAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignedEntitiesWithMetricTileAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignedEntitiesWithMetricTileAllOf(val *AssignedEntitiesWithMetricTileAllOf) *NullableAssignedEntitiesWithMetricTileAllOf {
	return &NullableAssignedEntitiesWithMetricTileAllOf{value: val, isSet: true}
}

func (v NullableAssignedEntitiesWithMetricTileAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignedEntitiesWithMetricTileAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


