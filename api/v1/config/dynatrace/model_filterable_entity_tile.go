/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// FilterableEntityTile Configuration of a tile with the built-in custom filter.   An example is the Service health tile, which may use a custom timeframe.
type FilterableEntityTile struct {
	Tile
	FilterConfig *CustomFilterConfig `json:"filterConfig,omitempty"`
	ChartVisible *bool `json:"chartVisible,omitempty"`
}

// NewFilterableEntityTile instantiates a new FilterableEntityTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterableEntityTile() *FilterableEntityTile {
	this := FilterableEntityTile{}
	return &this
}

// NewFilterableEntityTileWithDefaults instantiates a new FilterableEntityTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterableEntityTileWithDefaults() *FilterableEntityTile {
	this := FilterableEntityTile{}
	return &this
}

// GetFilterConfig returns the FilterConfig field value if set, zero value otherwise.
func (o *FilterableEntityTile) GetFilterConfig() CustomFilterConfig {
	if o == nil || o.FilterConfig == nil {
		var ret CustomFilterConfig
		return ret
	}
	return *o.FilterConfig
}

// GetFilterConfigOk returns a tuple with the FilterConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterableEntityTile) GetFilterConfigOk() (*CustomFilterConfig, bool) {
	if o == nil || o.FilterConfig == nil {
		return nil, false
	}
	return o.FilterConfig, true
}

// HasFilterConfig returns a boolean if a field has been set.
func (o *FilterableEntityTile) HasFilterConfig() bool {
	if o != nil && o.FilterConfig != nil {
		return true
	}

	return false
}

// SetFilterConfig gets a reference to the given CustomFilterConfig and assigns it to the FilterConfig field.
func (o *FilterableEntityTile) SetFilterConfig(v CustomFilterConfig) {
	o.FilterConfig = &v
}

// GetChartVisible returns the ChartVisible field value if set, zero value otherwise.
func (o *FilterableEntityTile) GetChartVisible() bool {
	if o == nil || o.ChartVisible == nil {
		var ret bool
		return ret
	}
	return *o.ChartVisible
}

// GetChartVisibleOk returns a tuple with the ChartVisible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterableEntityTile) GetChartVisibleOk() (*bool, bool) {
	if o == nil || o.ChartVisible == nil {
		return nil, false
	}
	return o.ChartVisible, true
}

// HasChartVisible returns a boolean if a field has been set.
func (o *FilterableEntityTile) HasChartVisible() bool {
	if o != nil && o.ChartVisible != nil {
		return true
	}

	return false
}

// SetChartVisible gets a reference to the given bool and assigns it to the ChartVisible field.
func (o *FilterableEntityTile) SetChartVisible(v bool) {
	o.ChartVisible = &v
}

func (o FilterableEntityTile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTile, errTile := json.Marshal(o.Tile)
	if errTile != nil {
		return []byte{}, errTile
	}
	errTile = json.Unmarshal([]byte(serializedTile), &toSerialize)
	if errTile != nil {
		return []byte{}, errTile
	}
	if o.FilterConfig != nil {
		toSerialize["filterConfig"] = o.FilterConfig
	}
	if o.ChartVisible != nil {
		toSerialize["chartVisible"] = o.ChartVisible
	}
	return json.Marshal(toSerialize)
}

type NullableFilterableEntityTile struct {
	value *FilterableEntityTile
	isSet bool
}

func (v NullableFilterableEntityTile) Get() *FilterableEntityTile {
	return v.value
}

func (v *NullableFilterableEntityTile) Set(val *FilterableEntityTile) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterableEntityTile) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterableEntityTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterableEntityTile(val *FilterableEntityTile) *NullableFilterableEntityTile {
	return &NullableFilterableEntityTile{value: val, isSet: true}
}

func (v NullableFilterableEntityTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterableEntityTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


