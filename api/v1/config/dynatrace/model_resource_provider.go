/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ResourceProvider A rule for the content provider.
type ResourceProvider struct {
	// The name of the provider.
	ResourceName string `json:"resourceName"`
	// The type of the provider.
	ResourceType string `json:"resourceType"`
	// The URL of the provider's icon.
	BrandIconUrl string `json:"brandIconUrl"`
	// A list of domain patterns of the provider.
	DomainNamePatterns []string `json:"domainNamePatterns"`
}

// NewResourceProvider instantiates a new ResourceProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceProvider(resourceName string, resourceType string, brandIconUrl string, domainNamePatterns []string, ) *ResourceProvider {
	this := ResourceProvider{}
	this.ResourceName = resourceName
	this.ResourceType = resourceType
	this.BrandIconUrl = brandIconUrl
	this.DomainNamePatterns = domainNamePatterns
	return &this
}

// NewResourceProviderWithDefaults instantiates a new ResourceProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceProviderWithDefaults() *ResourceProvider {
	this := ResourceProvider{}
	return &this
}

// GetResourceName returns the ResourceName field value
func (o *ResourceProvider) GetResourceName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value
// and a boolean to check if the value has been set.
func (o *ResourceProvider) GetResourceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceName, true
}

// SetResourceName sets field value
func (o *ResourceProvider) SetResourceName(v string) {
	o.ResourceName = v
}

// GetResourceType returns the ResourceType field value
func (o *ResourceProvider) GetResourceType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *ResourceProvider) GetResourceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *ResourceProvider) SetResourceType(v string) {
	o.ResourceType = v
}

// GetBrandIconUrl returns the BrandIconUrl field value
func (o *ResourceProvider) GetBrandIconUrl() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BrandIconUrl
}

// GetBrandIconUrlOk returns a tuple with the BrandIconUrl field value
// and a boolean to check if the value has been set.
func (o *ResourceProvider) GetBrandIconUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BrandIconUrl, true
}

// SetBrandIconUrl sets field value
func (o *ResourceProvider) SetBrandIconUrl(v string) {
	o.BrandIconUrl = v
}

// GetDomainNamePatterns returns the DomainNamePatterns field value
func (o *ResourceProvider) GetDomainNamePatterns() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.DomainNamePatterns
}

// GetDomainNamePatternsOk returns a tuple with the DomainNamePatterns field value
// and a boolean to check if the value has been set.
func (o *ResourceProvider) GetDomainNamePatternsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DomainNamePatterns, true
}

// SetDomainNamePatterns sets field value
func (o *ResourceProvider) SetDomainNamePatterns(v []string) {
	o.DomainNamePatterns = v
}

func (o ResourceProvider) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resourceName"] = o.ResourceName
	}
	if true {
		toSerialize["resourceType"] = o.ResourceType
	}
	if true {
		toSerialize["brandIconUrl"] = o.BrandIconUrl
	}
	if true {
		toSerialize["domainNamePatterns"] = o.DomainNamePatterns
	}
	return json.Marshal(toSerialize)
}

type NullableResourceProvider struct {
	value *ResourceProvider
	isSet bool
}

func (v NullableResourceProvider) Get() *ResourceProvider {
	return v.value
}

func (v *NullableResourceProvider) Set(val *ResourceProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceProvider(val *ResourceProvider) *NullableResourceProvider {
	return &NullableResourceProvider{value: val, isSet: true}
}

func (v NullableResourceProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


