/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// DimensionalManagementZoneConditionDto List of the conditions that have to match.
type DimensionalManagementZoneConditionDto struct {
	// The type of the condition.
	ConditionType string `json:"conditionType"`
	// In what way the actual values are compared to the expected ones.
	RuleMatcher string `json:"ruleMatcher"`
	// The main value that is compared. For dimensions, this is the key.
	Key string `json:"key"`
	// The dimension value. For types other than dimension this must be null.
	Value *string `json:"value,omitempty"`
}

// NewDimensionalManagementZoneConditionDto instantiates a new DimensionalManagementZoneConditionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDimensionalManagementZoneConditionDto(conditionType string, ruleMatcher string, key string, ) *DimensionalManagementZoneConditionDto {
	this := DimensionalManagementZoneConditionDto{}
	this.ConditionType = conditionType
	this.RuleMatcher = ruleMatcher
	this.Key = key
	return &this
}

// NewDimensionalManagementZoneConditionDtoWithDefaults instantiates a new DimensionalManagementZoneConditionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDimensionalManagementZoneConditionDtoWithDefaults() *DimensionalManagementZoneConditionDto {
	this := DimensionalManagementZoneConditionDto{}
	return &this
}

// GetConditionType returns the ConditionType field value
func (o *DimensionalManagementZoneConditionDto) GetConditionType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value
// and a boolean to check if the value has been set.
func (o *DimensionalManagementZoneConditionDto) GetConditionTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConditionType, true
}

// SetConditionType sets field value
func (o *DimensionalManagementZoneConditionDto) SetConditionType(v string) {
	o.ConditionType = v
}

// GetRuleMatcher returns the RuleMatcher field value
func (o *DimensionalManagementZoneConditionDto) GetRuleMatcher() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.RuleMatcher
}

// GetRuleMatcherOk returns a tuple with the RuleMatcher field value
// and a boolean to check if the value has been set.
func (o *DimensionalManagementZoneConditionDto) GetRuleMatcherOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RuleMatcher, true
}

// SetRuleMatcher sets field value
func (o *DimensionalManagementZoneConditionDto) SetRuleMatcher(v string) {
	o.RuleMatcher = v
}

// GetKey returns the Key field value
func (o *DimensionalManagementZoneConditionDto) GetKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *DimensionalManagementZoneConditionDto) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *DimensionalManagementZoneConditionDto) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DimensionalManagementZoneConditionDto) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DimensionalManagementZoneConditionDto) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DimensionalManagementZoneConditionDto) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DimensionalManagementZoneConditionDto) SetValue(v string) {
	o.Value = &v
}

func (o DimensionalManagementZoneConditionDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["conditionType"] = o.ConditionType
	}
	if true {
		toSerialize["ruleMatcher"] = o.RuleMatcher
	}
	if true {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableDimensionalManagementZoneConditionDto struct {
	value *DimensionalManagementZoneConditionDto
	isSet bool
}

func (v NullableDimensionalManagementZoneConditionDto) Get() *DimensionalManagementZoneConditionDto {
	return v.value
}

func (v *NullableDimensionalManagementZoneConditionDto) Set(val *DimensionalManagementZoneConditionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensionalManagementZoneConditionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensionalManagementZoneConditionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensionalManagementZoneConditionDto(val *DimensionalManagementZoneConditionDto) *NullableDimensionalManagementZoneConditionDto {
	return &NullableDimensionalManagementZoneConditionDto{value: val, isSet: true}
}

func (v NullableDimensionalManagementZoneConditionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensionalManagementZoneConditionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


