/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// PluginStateList A list of plugin states.
type PluginStateList struct {
	// A list of plugin states.
	States *[]PluginState `json:"states,omitempty"`
}

// NewPluginStateList instantiates a new PluginStateList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluginStateList() *PluginStateList {
	this := PluginStateList{}
	return &this
}

// NewPluginStateListWithDefaults instantiates a new PluginStateList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluginStateListWithDefaults() *PluginStateList {
	this := PluginStateList{}
	return &this
}

// GetStates returns the States field value if set, zero value otherwise.
func (o *PluginStateList) GetStates() []PluginState {
	if o == nil || o.States == nil {
		var ret []PluginState
		return ret
	}
	return *o.States
}

// GetStatesOk returns a tuple with the States field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PluginStateList) GetStatesOk() (*[]PluginState, bool) {
	if o == nil || o.States == nil {
		return nil, false
	}
	return o.States, true
}

// HasStates returns a boolean if a field has been set.
func (o *PluginStateList) HasStates() bool {
	if o != nil && o.States != nil {
		return true
	}

	return false
}

// SetStates gets a reference to the given []PluginState and assigns it to the States field.
func (o *PluginStateList) SetStates(v []PluginState) {
	o.States = &v
}

func (o PluginStateList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.States != nil {
		toSerialize["states"] = o.States
	}
	return json.Marshal(toSerialize)
}

type NullablePluginStateList struct {
	value *PluginStateList
	isSet bool
}

func (v NullablePluginStateList) Get() *PluginStateList {
	return v.value
}

func (v *NullablePluginStateList) Set(val *PluginStateList) {
	v.value = val
	v.isSet = true
}

func (v NullablePluginStateList) IsSet() bool {
	return v.isSet
}

func (v *NullablePluginStateList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluginStateList(val *PluginStateList) *NullablePluginStateList {
	return &NullablePluginStateList{value: val, isSet: true}
}

func (v NullablePluginStateList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluginStateList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


