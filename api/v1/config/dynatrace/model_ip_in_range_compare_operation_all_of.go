/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// IpInRangeCompareOperationAllOf struct for IpInRangeCompareOperationAllOf
type IpInRangeCompareOperationAllOf struct {
	// Inverts the operation of the condition. Set to `true` to turn **IP is in range** into **IP is not in range**.    If not set, then `false` is used.
	Negate *bool `json:"negate,omitempty"`
	// The lower boundary of the IP range.
	Lower *string `json:"lower,omitempty"`
	// The upper boundary of the IP range.
	Upper *string `json:"upper,omitempty"`
}

// NewIpInRangeCompareOperationAllOf instantiates a new IpInRangeCompareOperationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpInRangeCompareOperationAllOf() *IpInRangeCompareOperationAllOf {
	this := IpInRangeCompareOperationAllOf{}
	return &this
}

// NewIpInRangeCompareOperationAllOfWithDefaults instantiates a new IpInRangeCompareOperationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpInRangeCompareOperationAllOfWithDefaults() *IpInRangeCompareOperationAllOf {
	this := IpInRangeCompareOperationAllOf{}
	return &this
}

// GetNegate returns the Negate field value if set, zero value otherwise.
func (o *IpInRangeCompareOperationAllOf) GetNegate() bool {
	if o == nil || o.Negate == nil {
		var ret bool
		return ret
	}
	return *o.Negate
}

// GetNegateOk returns a tuple with the Negate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpInRangeCompareOperationAllOf) GetNegateOk() (*bool, bool) {
	if o == nil || o.Negate == nil {
		return nil, false
	}
	return o.Negate, true
}

// HasNegate returns a boolean if a field has been set.
func (o *IpInRangeCompareOperationAllOf) HasNegate() bool {
	if o != nil && o.Negate != nil {
		return true
	}

	return false
}

// SetNegate gets a reference to the given bool and assigns it to the Negate field.
func (o *IpInRangeCompareOperationAllOf) SetNegate(v bool) {
	o.Negate = &v
}

// GetLower returns the Lower field value if set, zero value otherwise.
func (o *IpInRangeCompareOperationAllOf) GetLower() string {
	if o == nil || o.Lower == nil {
		var ret string
		return ret
	}
	return *o.Lower
}

// GetLowerOk returns a tuple with the Lower field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpInRangeCompareOperationAllOf) GetLowerOk() (*string, bool) {
	if o == nil || o.Lower == nil {
		return nil, false
	}
	return o.Lower, true
}

// HasLower returns a boolean if a field has been set.
func (o *IpInRangeCompareOperationAllOf) HasLower() bool {
	if o != nil && o.Lower != nil {
		return true
	}

	return false
}

// SetLower gets a reference to the given string and assigns it to the Lower field.
func (o *IpInRangeCompareOperationAllOf) SetLower(v string) {
	o.Lower = &v
}

// GetUpper returns the Upper field value if set, zero value otherwise.
func (o *IpInRangeCompareOperationAllOf) GetUpper() string {
	if o == nil || o.Upper == nil {
		var ret string
		return ret
	}
	return *o.Upper
}

// GetUpperOk returns a tuple with the Upper field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpInRangeCompareOperationAllOf) GetUpperOk() (*string, bool) {
	if o == nil || o.Upper == nil {
		return nil, false
	}
	return o.Upper, true
}

// HasUpper returns a boolean if a field has been set.
func (o *IpInRangeCompareOperationAllOf) HasUpper() bool {
	if o != nil && o.Upper != nil {
		return true
	}

	return false
}

// SetUpper gets a reference to the given string and assigns it to the Upper field.
func (o *IpInRangeCompareOperationAllOf) SetUpper(v string) {
	o.Upper = &v
}

func (o IpInRangeCompareOperationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Negate != nil {
		toSerialize["negate"] = o.Negate
	}
	if o.Lower != nil {
		toSerialize["lower"] = o.Lower
	}
	if o.Upper != nil {
		toSerialize["upper"] = o.Upper
	}
	return json.Marshal(toSerialize)
}

type NullableIpInRangeCompareOperationAllOf struct {
	value *IpInRangeCompareOperationAllOf
	isSet bool
}

func (v NullableIpInRangeCompareOperationAllOf) Get() *IpInRangeCompareOperationAllOf {
	return v.value
}

func (v *NullableIpInRangeCompareOperationAllOf) Set(val *IpInRangeCompareOperationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableIpInRangeCompareOperationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableIpInRangeCompareOperationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpInRangeCompareOperationAllOf(val *IpInRangeCompareOperationAllOf) *NullableIpInRangeCompareOperationAllOf {
	return &NullableIpInRangeCompareOperationAllOf{value: val, isSet: true}
}

func (v NullableIpInRangeCompareOperationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpInRangeCompareOperationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


