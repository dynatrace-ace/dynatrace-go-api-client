/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AssignedEntitiesWithMetricTile Configuration of a tile with an assigned Dynatrace entity and an assigned metric.   An example is the Worldmap tile, showing the data from an assigned performance or behavior metric of an assigned application.
type AssignedEntitiesWithMetricTile struct {
	Tile
	// The list of Dynatrace entities, assigned to the tile.
	AssignedEntities []string `json:"assignedEntities"`
	// The metric assigned to the tile.
	Metric *string `json:"metric,omitempty"`
}

// NewAssignedEntitiesWithMetricTile instantiates a new AssignedEntitiesWithMetricTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignedEntitiesWithMetricTile(assignedEntities []string, ) *AssignedEntitiesWithMetricTile {
	this := AssignedEntitiesWithMetricTile{}
	this.AssignedEntities = assignedEntities
	return &this
}

// NewAssignedEntitiesWithMetricTileWithDefaults instantiates a new AssignedEntitiesWithMetricTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignedEntitiesWithMetricTileWithDefaults() *AssignedEntitiesWithMetricTile {
	this := AssignedEntitiesWithMetricTile{}
	return &this
}

// GetAssignedEntities returns the AssignedEntities field value
func (o *AssignedEntitiesWithMetricTile) GetAssignedEntities() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.AssignedEntities
}

// GetAssignedEntitiesOk returns a tuple with the AssignedEntities field value
// and a boolean to check if the value has been set.
func (o *AssignedEntitiesWithMetricTile) GetAssignedEntitiesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AssignedEntities, true
}

// SetAssignedEntities sets field value
func (o *AssignedEntitiesWithMetricTile) SetAssignedEntities(v []string) {
	o.AssignedEntities = v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *AssignedEntitiesWithMetricTile) GetMetric() string {
	if o == nil || o.Metric == nil {
		var ret string
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedEntitiesWithMetricTile) GetMetricOk() (*string, bool) {
	if o == nil || o.Metric == nil {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *AssignedEntitiesWithMetricTile) HasMetric() bool {
	if o != nil && o.Metric != nil {
		return true
	}

	return false
}

// SetMetric gets a reference to the given string and assigns it to the Metric field.
func (o *AssignedEntitiesWithMetricTile) SetMetric(v string) {
	o.Metric = &v
}

func (o AssignedEntitiesWithMetricTile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTile, errTile := json.Marshal(o.Tile)
	if errTile != nil {
		return []byte{}, errTile
	}
	errTile = json.Unmarshal([]byte(serializedTile), &toSerialize)
	if errTile != nil {
		return []byte{}, errTile
	}
	if true {
		toSerialize["assignedEntities"] = o.AssignedEntities
	}
	if o.Metric != nil {
		toSerialize["metric"] = o.Metric
	}
	return json.Marshal(toSerialize)
}

type NullableAssignedEntitiesWithMetricTile struct {
	value *AssignedEntitiesWithMetricTile
	isSet bool
}

func (v NullableAssignedEntitiesWithMetricTile) Get() *AssignedEntitiesWithMetricTile {
	return v.value
}

func (v *NullableAssignedEntitiesWithMetricTile) Set(val *AssignedEntitiesWithMetricTile) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignedEntitiesWithMetricTile) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignedEntitiesWithMetricTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignedEntitiesWithMetricTile(val *AssignedEntitiesWithMetricTile) *NullableAssignedEntitiesWithMetricTile {
	return &NullableAssignedEntitiesWithMetricTile{value: val, isSet: true}
}

func (v NullableAssignedEntitiesWithMetricTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignedEntitiesWithMetricTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


