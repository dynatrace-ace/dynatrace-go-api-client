/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AlertingCustomEventFilter Configuration of a custom event filter.   Filters custom events by title or description. If both specified, the AND logic applies.
type AlertingCustomEventFilter struct {
	CustomTitleFilter *AlertingCustomTextFilter `json:"customTitleFilter,omitempty"`
	CustomDescriptionFilter *AlertingCustomTextFilter `json:"customDescriptionFilter,omitempty"`
}

// NewAlertingCustomEventFilter instantiates a new AlertingCustomEventFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertingCustomEventFilter() *AlertingCustomEventFilter {
	this := AlertingCustomEventFilter{}
	return &this
}

// NewAlertingCustomEventFilterWithDefaults instantiates a new AlertingCustomEventFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertingCustomEventFilterWithDefaults() *AlertingCustomEventFilter {
	this := AlertingCustomEventFilter{}
	return &this
}

// GetCustomTitleFilter returns the CustomTitleFilter field value if set, zero value otherwise.
func (o *AlertingCustomEventFilter) GetCustomTitleFilter() AlertingCustomTextFilter {
	if o == nil || o.CustomTitleFilter == nil {
		var ret AlertingCustomTextFilter
		return ret
	}
	return *o.CustomTitleFilter
}

// GetCustomTitleFilterOk returns a tuple with the CustomTitleFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertingCustomEventFilter) GetCustomTitleFilterOk() (*AlertingCustomTextFilter, bool) {
	if o == nil || o.CustomTitleFilter == nil {
		return nil, false
	}
	return o.CustomTitleFilter, true
}

// HasCustomTitleFilter returns a boolean if a field has been set.
func (o *AlertingCustomEventFilter) HasCustomTitleFilter() bool {
	if o != nil && o.CustomTitleFilter != nil {
		return true
	}

	return false
}

// SetCustomTitleFilter gets a reference to the given AlertingCustomTextFilter and assigns it to the CustomTitleFilter field.
func (o *AlertingCustomEventFilter) SetCustomTitleFilter(v AlertingCustomTextFilter) {
	o.CustomTitleFilter = &v
}

// GetCustomDescriptionFilter returns the CustomDescriptionFilter field value if set, zero value otherwise.
func (o *AlertingCustomEventFilter) GetCustomDescriptionFilter() AlertingCustomTextFilter {
	if o == nil || o.CustomDescriptionFilter == nil {
		var ret AlertingCustomTextFilter
		return ret
	}
	return *o.CustomDescriptionFilter
}

// GetCustomDescriptionFilterOk returns a tuple with the CustomDescriptionFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertingCustomEventFilter) GetCustomDescriptionFilterOk() (*AlertingCustomTextFilter, bool) {
	if o == nil || o.CustomDescriptionFilter == nil {
		return nil, false
	}
	return o.CustomDescriptionFilter, true
}

// HasCustomDescriptionFilter returns a boolean if a field has been set.
func (o *AlertingCustomEventFilter) HasCustomDescriptionFilter() bool {
	if o != nil && o.CustomDescriptionFilter != nil {
		return true
	}

	return false
}

// SetCustomDescriptionFilter gets a reference to the given AlertingCustomTextFilter and assigns it to the CustomDescriptionFilter field.
func (o *AlertingCustomEventFilter) SetCustomDescriptionFilter(v AlertingCustomTextFilter) {
	o.CustomDescriptionFilter = &v
}

func (o AlertingCustomEventFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomTitleFilter != nil {
		toSerialize["customTitleFilter"] = o.CustomTitleFilter
	}
	if o.CustomDescriptionFilter != nil {
		toSerialize["customDescriptionFilter"] = o.CustomDescriptionFilter
	}
	return json.Marshal(toSerialize)
}

type NullableAlertingCustomEventFilter struct {
	value *AlertingCustomEventFilter
	isSet bool
}

func (v NullableAlertingCustomEventFilter) Get() *AlertingCustomEventFilter {
	return v.value
}

func (v *NullableAlertingCustomEventFilter) Set(val *AlertingCustomEventFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertingCustomEventFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertingCustomEventFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertingCustomEventFilter(val *AlertingCustomEventFilter) *NullableAlertingCustomEventFilter {
	return &NullableAlertingCustomEventFilter{value: val, isSet: true}
}

func (v NullableAlertingCustomEventFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertingCustomEventFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


