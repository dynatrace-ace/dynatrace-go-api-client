/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CustomFilterChartConfig Configuration of a custom chart.
type CustomFilterChartConfig struct {
	// Defines if a legend should be shown.
	LegendShown *bool `json:"legendShown,omitempty"`
	// The type of the chart.
	Type string `json:"type"`
	// A list of charted metrics.
	Series []CustomFilterChartSeriesConfig `json:"series"`
	// Additional information about charted metric.
	ResultMetadata interface{} `json:"resultMetadata"`
	// The optional custom y-axis limits.
	AxisLimits *interface{} `json:"axisLimits,omitempty"`
	// The custom unit for the left Y-axis.
	LeftAxisCustomUnit *string `json:"leftAxisCustomUnit,omitempty"`
	// The custom unit for the right Y-axis.
	RightAxisCustomUnit *string `json:"rightAxisCustomUnit,omitempty"`
}

// NewCustomFilterChartConfig instantiates a new CustomFilterChartConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomFilterChartConfig(type_ string, series []CustomFilterChartSeriesConfig, resultMetadata interface{}) *CustomFilterChartConfig {
	this := CustomFilterChartConfig{}
	this.Type = type_
	this.Series = series
	this.ResultMetadata = resultMetadata
	return &this
}

// NewCustomFilterChartConfigWithDefaults instantiates a new CustomFilterChartConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFilterChartConfigWithDefaults() *CustomFilterChartConfig {
	this := CustomFilterChartConfig{}
	return &this
}

// GetLegendShown returns the LegendShown field value if set, zero value otherwise.
func (o *CustomFilterChartConfig) GetLegendShown() bool {
	if o == nil || o.LegendShown == nil {
		var ret bool
		return ret
	}
	return *o.LegendShown
}

// GetLegendShownOk returns a tuple with the LegendShown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFilterChartConfig) GetLegendShownOk() (*bool, bool) {
	if o == nil || o.LegendShown == nil {
		return nil, false
	}
	return o.LegendShown, true
}

// HasLegendShown returns a boolean if a field has been set.
func (o *CustomFilterChartConfig) HasLegendShown() bool {
	if o != nil && o.LegendShown != nil {
		return true
	}

	return false
}

// SetLegendShown gets a reference to the given bool and assigns it to the LegendShown field.
func (o *CustomFilterChartConfig) SetLegendShown(v bool) {
	o.LegendShown = &v
}

// GetType returns the Type field value
func (o *CustomFilterChartConfig) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CustomFilterChartConfig) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CustomFilterChartConfig) SetType(v string) {
	o.Type = v
}

// GetSeries returns the Series field value
func (o *CustomFilterChartConfig) GetSeries() []CustomFilterChartSeriesConfig {
	if o == nil {
		var ret []CustomFilterChartSeriesConfig
		return ret
	}

	return o.Series
}

// GetSeriesOk returns a tuple with the Series field value
// and a boolean to check if the value has been set.
func (o *CustomFilterChartConfig) GetSeriesOk() (*[]CustomFilterChartSeriesConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Series, true
}

// SetSeries sets field value
func (o *CustomFilterChartConfig) SetSeries(v []CustomFilterChartSeriesConfig) {
	o.Series = v
}

// GetResultMetadata returns the ResultMetadata field value
func (o *CustomFilterChartConfig) GetResultMetadata() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.ResultMetadata
}

// GetResultMetadataOk returns a tuple with the ResultMetadata field value
// and a boolean to check if the value has been set.
func (o *CustomFilterChartConfig) GetResultMetadataOk() (*interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultMetadata, true
}

// SetResultMetadata sets field value
func (o *CustomFilterChartConfig) SetResultMetadata(v interface{}) {
	o.ResultMetadata = v
}

// GetAxisLimits returns the AxisLimits field value if set, zero value otherwise.
func (o *CustomFilterChartConfig) GetAxisLimits() interface{} {
	if o == nil || o.AxisLimits == nil {
		var ret interface{}
		return ret
	}
	return *o.AxisLimits
}

// GetAxisLimitsOk returns a tuple with the AxisLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFilterChartConfig) GetAxisLimitsOk() (*interface{}, bool) {
	if o == nil || o.AxisLimits == nil {
		return nil, false
	}
	return o.AxisLimits, true
}

// HasAxisLimits returns a boolean if a field has been set.
func (o *CustomFilterChartConfig) HasAxisLimits() bool {
	if o != nil && o.AxisLimits != nil {
		return true
	}

	return false
}

// SetAxisLimits gets a reference to the given interface{} and assigns it to the AxisLimits field.
func (o *CustomFilterChartConfig) SetAxisLimits(v interface{}) {
	o.AxisLimits = &v
}

// GetLeftAxisCustomUnit returns the LeftAxisCustomUnit field value if set, zero value otherwise.
func (o *CustomFilterChartConfig) GetLeftAxisCustomUnit() string {
	if o == nil || o.LeftAxisCustomUnit == nil {
		var ret string
		return ret
	}
	return *o.LeftAxisCustomUnit
}

// GetLeftAxisCustomUnitOk returns a tuple with the LeftAxisCustomUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFilterChartConfig) GetLeftAxisCustomUnitOk() (*string, bool) {
	if o == nil || o.LeftAxisCustomUnit == nil {
		return nil, false
	}
	return o.LeftAxisCustomUnit, true
}

// HasLeftAxisCustomUnit returns a boolean if a field has been set.
func (o *CustomFilterChartConfig) HasLeftAxisCustomUnit() bool {
	if o != nil && o.LeftAxisCustomUnit != nil {
		return true
	}

	return false
}

// SetLeftAxisCustomUnit gets a reference to the given string and assigns it to the LeftAxisCustomUnit field.
func (o *CustomFilterChartConfig) SetLeftAxisCustomUnit(v string) {
	o.LeftAxisCustomUnit = &v
}

// GetRightAxisCustomUnit returns the RightAxisCustomUnit field value if set, zero value otherwise.
func (o *CustomFilterChartConfig) GetRightAxisCustomUnit() string {
	if o == nil || o.RightAxisCustomUnit == nil {
		var ret string
		return ret
	}
	return *o.RightAxisCustomUnit
}

// GetRightAxisCustomUnitOk returns a tuple with the RightAxisCustomUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFilterChartConfig) GetRightAxisCustomUnitOk() (*string, bool) {
	if o == nil || o.RightAxisCustomUnit == nil {
		return nil, false
	}
	return o.RightAxisCustomUnit, true
}

// HasRightAxisCustomUnit returns a boolean if a field has been set.
func (o *CustomFilterChartConfig) HasRightAxisCustomUnit() bool {
	if o != nil && o.RightAxisCustomUnit != nil {
		return true
	}

	return false
}

// SetRightAxisCustomUnit gets a reference to the given string and assigns it to the RightAxisCustomUnit field.
func (o *CustomFilterChartConfig) SetRightAxisCustomUnit(v string) {
	o.RightAxisCustomUnit = &v
}

func (o CustomFilterChartConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LegendShown != nil {
		toSerialize["legendShown"] = o.LegendShown
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["series"] = o.Series
	}
	if true {
		toSerialize["resultMetadata"] = o.ResultMetadata
	}
	if o.AxisLimits != nil {
		toSerialize["axisLimits"] = o.AxisLimits
	}
	if o.LeftAxisCustomUnit != nil {
		toSerialize["leftAxisCustomUnit"] = o.LeftAxisCustomUnit
	}
	if o.RightAxisCustomUnit != nil {
		toSerialize["rightAxisCustomUnit"] = o.RightAxisCustomUnit
	}
	return json.Marshal(toSerialize)
}

type NullableCustomFilterChartConfig struct {
	value *CustomFilterChartConfig
	isSet bool
}

func (v NullableCustomFilterChartConfig) Get() *CustomFilterChartConfig {
	return v.value
}

func (v *NullableCustomFilterChartConfig) Set(val *CustomFilterChartConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFilterChartConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFilterChartConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFilterChartConfig(val *CustomFilterChartConfig) *NullableCustomFilterChartConfig {
	return &NullableCustomFilterChartConfig{value: val, isSet: true}
}

func (v NullableCustomFilterChartConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFilterChartConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
