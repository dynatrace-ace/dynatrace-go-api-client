/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AfterTransformationAllOf struct for AfterTransformationAllOf
type AfterTransformationAllOf struct {
	// The delimiter of the transformation. The transformation removes everything before this delimiter and keeps everything after it.     The delimiter itself is not kept.    If several delimiters appear in the initial value, only the first one is used.
	Delimiter *string `json:"delimiter,omitempty"`
}

// NewAfterTransformationAllOf instantiates a new AfterTransformationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAfterTransformationAllOf() *AfterTransformationAllOf {
	this := AfterTransformationAllOf{}
	return &this
}

// NewAfterTransformationAllOfWithDefaults instantiates a new AfterTransformationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAfterTransformationAllOfWithDefaults() *AfterTransformationAllOf {
	this := AfterTransformationAllOf{}
	return &this
}

// GetDelimiter returns the Delimiter field value if set, zero value otherwise.
func (o *AfterTransformationAllOf) GetDelimiter() string {
	if o == nil || o.Delimiter == nil {
		var ret string
		return ret
	}
	return *o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AfterTransformationAllOf) GetDelimiterOk() (*string, bool) {
	if o == nil || o.Delimiter == nil {
		return nil, false
	}
	return o.Delimiter, true
}

// HasDelimiter returns a boolean if a field has been set.
func (o *AfterTransformationAllOf) HasDelimiter() bool {
	if o != nil && o.Delimiter != nil {
		return true
	}

	return false
}

// SetDelimiter gets a reference to the given string and assigns it to the Delimiter field.
func (o *AfterTransformationAllOf) SetDelimiter(v string) {
	o.Delimiter = &v
}

func (o AfterTransformationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Delimiter != nil {
		toSerialize["delimiter"] = o.Delimiter
	}
	return json.Marshal(toSerialize)
}

type NullableAfterTransformationAllOf struct {
	value *AfterTransformationAllOf
	isSet bool
}

func (v NullableAfterTransformationAllOf) Get() *AfterTransformationAllOf {
	return v.value
}

func (v *NullableAfterTransformationAllOf) Set(val *AfterTransformationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAfterTransformationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAfterTransformationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAfterTransformationAllOf(val *AfterTransformationAllOf) *NullableAfterTransformationAllOf {
	return &NullableAfterTransformationAllOf{value: val, isSet: true}
}

func (v NullableAfterTransformationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAfterTransformationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


