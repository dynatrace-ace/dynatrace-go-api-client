/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MetricEventMonitoringStrategy A monitoring strategy for a metric event config.  This is the base version of the monitoring strategy, depending on the type,  the actual JSON may contain additional fields.
type MetricEventMonitoringStrategy struct {
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `STATIC_THRESHOLD` -> MetricEventStaticThresholdMonitoringStrategy  * `AUTO_ADAPTIVE_BASELINE` -> MetricEventAutoAdaptiveBaselineMonitoringStrategy  
	Type string `json:"type"`
}

// NewMetricEventMonitoringStrategy instantiates a new MetricEventMonitoringStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricEventMonitoringStrategy(type_ string, ) *MetricEventMonitoringStrategy {
	this := MetricEventMonitoringStrategy{}
	this.Type = type_
	return &this
}

// NewMetricEventMonitoringStrategyWithDefaults instantiates a new MetricEventMonitoringStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricEventMonitoringStrategyWithDefaults() *MetricEventMonitoringStrategy {
	this := MetricEventMonitoringStrategy{}
	return &this
}

// GetType returns the Type field value
func (o *MetricEventMonitoringStrategy) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MetricEventMonitoringStrategy) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MetricEventMonitoringStrategy) SetType(v string) {
	o.Type = v
}

func (o MetricEventMonitoringStrategy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableMetricEventMonitoringStrategy struct {
	value *MetricEventMonitoringStrategy
	isSet bool
}

func (v NullableMetricEventMonitoringStrategy) Get() *MetricEventMonitoringStrategy {
	return v.value
}

func (v *NullableMetricEventMonitoringStrategy) Set(val *MetricEventMonitoringStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricEventMonitoringStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricEventMonitoringStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricEventMonitoringStrategy(val *MetricEventMonitoringStrategy) *NullableMetricEventMonitoringStrategy {
	return &NullableMetricEventMonitoringStrategy{value: val, isSet: true}
}

func (v NullableMetricEventMonitoringStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricEventMonitoringStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


