/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// DashboardReport Configuration of a dashboard report.   The dashboard report provides a public link to the associated dashboard with a custom reporting period: last week for weekly subscribers or last month for monthly subscribers.
type DashboardReport struct {
	// The ID of the report.
	Id *string `json:"id,omitempty"`
	Type string `json:"type"`
	// The ID of the associated dashboard.
	DashboardId string `json:"dashboardId"`
	// The email notifications for the dashboard report are enabled (`true`) or disabled (`false`).
	Enabled *bool `json:"enabled,omitempty"`
	Subscriptions DashboardReportSubscription `json:"subscriptions"`
}

// NewDashboardReport instantiates a new DashboardReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardReport(type_ string, dashboardId string, subscriptions DashboardReportSubscription, ) *DashboardReport {
	this := DashboardReport{}
	this.Type = type_
	this.DashboardId = dashboardId
	this.Subscriptions = subscriptions
	return &this
}

// NewDashboardReportWithDefaults instantiates a new DashboardReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardReportWithDefaults() *DashboardReport {
	this := DashboardReport{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DashboardReport) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardReport) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DashboardReport) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DashboardReport) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *DashboardReport) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DashboardReport) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DashboardReport) SetType(v string) {
	o.Type = v
}

// GetDashboardId returns the DashboardId field value
func (o *DashboardReport) GetDashboardId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DashboardId
}

// GetDashboardIdOk returns a tuple with the DashboardId field value
// and a boolean to check if the value has been set.
func (o *DashboardReport) GetDashboardIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DashboardId, true
}

// SetDashboardId sets field value
func (o *DashboardReport) SetDashboardId(v string) {
	o.DashboardId = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DashboardReport) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardReport) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DashboardReport) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DashboardReport) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSubscriptions returns the Subscriptions field value
func (o *DashboardReport) GetSubscriptions() DashboardReportSubscription {
	if o == nil  {
		var ret DashboardReportSubscription
		return ret
	}

	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value
// and a boolean to check if the value has been set.
func (o *DashboardReport) GetSubscriptionsOk() (*DashboardReportSubscription, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Subscriptions, true
}

// SetSubscriptions sets field value
func (o *DashboardReport) SetSubscriptions(v DashboardReportSubscription) {
	o.Subscriptions = v
}

func (o DashboardReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["dashboardId"] = o.DashboardId
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["subscriptions"] = o.Subscriptions
	}
	return json.Marshal(toSerialize)
}

type NullableDashboardReport struct {
	value *DashboardReport
	isSet bool
}

func (v NullableDashboardReport) Get() *DashboardReport {
	return v.value
}

func (v *NullableDashboardReport) Set(val *DashboardReport) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardReport) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardReport(val *DashboardReport) *NullableDashboardReport {
	return &NullableDashboardReport{value: val, isSet: true}
}

func (v NullableDashboardReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


