/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UniversalTagKey struct for UniversalTagKey
type UniversalTagKey struct {
	Context *string `json:"context,omitempty"`
	Key *string `json:"key,omitempty"`
}

// NewUniversalTagKey instantiates a new UniversalTagKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniversalTagKey() *UniversalTagKey {
	this := UniversalTagKey{}
	return &this
}

// NewUniversalTagKeyWithDefaults instantiates a new UniversalTagKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniversalTagKeyWithDefaults() *UniversalTagKey {
	this := UniversalTagKey{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *UniversalTagKey) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalTagKey) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *UniversalTagKey) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *UniversalTagKey) SetContext(v string) {
	o.Context = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *UniversalTagKey) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalTagKey) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *UniversalTagKey) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *UniversalTagKey) SetKey(v string) {
	o.Key = &v
}

func (o UniversalTagKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableUniversalTagKey struct {
	value *UniversalTagKey
	isSet bool
}

func (v NullableUniversalTagKey) Get() *UniversalTagKey {
	return v.value
}

func (v *NullableUniversalTagKey) Set(val *UniversalTagKey) {
	v.value = val
	v.isSet = true
}

func (v NullableUniversalTagKey) IsSet() bool {
	return v.isSet
}

func (v *NullableUniversalTagKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniversalTagKey(val *UniversalTagKey) *NullableUniversalTagKey {
	return &NullableUniversalTagKey{value: val, isSet: true}
}

func (v NullableUniversalTagKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniversalTagKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


