/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AzureSupportingService A supporting service to be monitored.
type AzureSupportingService struct {
	// The name of the supporting service.
	Name *string `json:"name,omitempty"`
	// A list of metrics to be monitored for this service. It must include all the recommended metrics.
	MonitoredMetrics *[]AzureMonitoredMetric `json:"monitoredMetrics,omitempty"`
}

// NewAzureSupportingService instantiates a new AzureSupportingService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureSupportingService() *AzureSupportingService {
	this := AzureSupportingService{}
	return &this
}

// NewAzureSupportingServiceWithDefaults instantiates a new AzureSupportingService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureSupportingServiceWithDefaults() *AzureSupportingService {
	this := AzureSupportingService{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AzureSupportingService) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureSupportingService) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AzureSupportingService) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AzureSupportingService) SetName(v string) {
	o.Name = &v
}

// GetMonitoredMetrics returns the MonitoredMetrics field value if set, zero value otherwise.
func (o *AzureSupportingService) GetMonitoredMetrics() []AzureMonitoredMetric {
	if o == nil || o.MonitoredMetrics == nil {
		var ret []AzureMonitoredMetric
		return ret
	}
	return *o.MonitoredMetrics
}

// GetMonitoredMetricsOk returns a tuple with the MonitoredMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureSupportingService) GetMonitoredMetricsOk() (*[]AzureMonitoredMetric, bool) {
	if o == nil || o.MonitoredMetrics == nil {
		return nil, false
	}
	return o.MonitoredMetrics, true
}

// HasMonitoredMetrics returns a boolean if a field has been set.
func (o *AzureSupportingService) HasMonitoredMetrics() bool {
	if o != nil && o.MonitoredMetrics != nil {
		return true
	}

	return false
}

// SetMonitoredMetrics gets a reference to the given []AzureMonitoredMetric and assigns it to the MonitoredMetrics field.
func (o *AzureSupportingService) SetMonitoredMetrics(v []AzureMonitoredMetric) {
	o.MonitoredMetrics = &v
}

func (o AzureSupportingService) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.MonitoredMetrics != nil {
		toSerialize["monitoredMetrics"] = o.MonitoredMetrics
	}
	return json.Marshal(toSerialize)
}

type NullableAzureSupportingService struct {
	value *AzureSupportingService
	isSet bool
}

func (v NullableAzureSupportingService) Get() *AzureSupportingService {
	return v.value
}

func (v *NullableAzureSupportingService) Set(val *AzureSupportingService) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureSupportingService) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureSupportingService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureSupportingService(val *AzureSupportingService) *NullableAzureSupportingService {
	return &NullableAzureSupportingService{value: val, isSet: true}
}

func (v NullableAzureSupportingService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureSupportingService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


