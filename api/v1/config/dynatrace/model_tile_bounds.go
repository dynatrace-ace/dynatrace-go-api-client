/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TileBounds The position and size of a tile.
type TileBounds struct {
	// The vertical distance from the top left corner of the dashboard to the top left corner of the tile, in pixels.
	Top *int32 `json:"top,omitempty"`
	// The horizontal distance from the top left corner of the dashboard to the top left corner of the tile, in pixels.
	Left *int32 `json:"left,omitempty"`
	// The width of the tile, in pixels.
	Width *int32 `json:"width,omitempty"`
	// The height of the tile, in pixels.
	Height *int32 `json:"height,omitempty"`
}

// NewTileBounds instantiates a new TileBounds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTileBounds() *TileBounds {
	this := TileBounds{}
	return &this
}

// NewTileBoundsWithDefaults instantiates a new TileBounds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTileBoundsWithDefaults() *TileBounds {
	this := TileBounds{}
	return &this
}

// GetTop returns the Top field value if set, zero value otherwise.
func (o *TileBounds) GetTop() int32 {
	if o == nil || o.Top == nil {
		var ret int32
		return ret
	}
	return *o.Top
}

// GetTopOk returns a tuple with the Top field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TileBounds) GetTopOk() (*int32, bool) {
	if o == nil || o.Top == nil {
		return nil, false
	}
	return o.Top, true
}

// HasTop returns a boolean if a field has been set.
func (o *TileBounds) HasTop() bool {
	if o != nil && o.Top != nil {
		return true
	}

	return false
}

// SetTop gets a reference to the given int32 and assigns it to the Top field.
func (o *TileBounds) SetTop(v int32) {
	o.Top = &v
}

// GetLeft returns the Left field value if set, zero value otherwise.
func (o *TileBounds) GetLeft() int32 {
	if o == nil || o.Left == nil {
		var ret int32
		return ret
	}
	return *o.Left
}

// GetLeftOk returns a tuple with the Left field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TileBounds) GetLeftOk() (*int32, bool) {
	if o == nil || o.Left == nil {
		return nil, false
	}
	return o.Left, true
}

// HasLeft returns a boolean if a field has been set.
func (o *TileBounds) HasLeft() bool {
	if o != nil && o.Left != nil {
		return true
	}

	return false
}

// SetLeft gets a reference to the given int32 and assigns it to the Left field.
func (o *TileBounds) SetLeft(v int32) {
	o.Left = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *TileBounds) GetWidth() int32 {
	if o == nil || o.Width == nil {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TileBounds) GetWidthOk() (*int32, bool) {
	if o == nil || o.Width == nil {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *TileBounds) HasWidth() bool {
	if o != nil && o.Width != nil {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *TileBounds) SetWidth(v int32) {
	o.Width = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *TileBounds) GetHeight() int32 {
	if o == nil || o.Height == nil {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TileBounds) GetHeightOk() (*int32, bool) {
	if o == nil || o.Height == nil {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *TileBounds) HasHeight() bool {
	if o != nil && o.Height != nil {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *TileBounds) SetHeight(v int32) {
	o.Height = &v
}

func (o TileBounds) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Top != nil {
		toSerialize["top"] = o.Top
	}
	if o.Left != nil {
		toSerialize["left"] = o.Left
	}
	if o.Width != nil {
		toSerialize["width"] = o.Width
	}
	if o.Height != nil {
		toSerialize["height"] = o.Height
	}
	return json.Marshal(toSerialize)
}

type NullableTileBounds struct {
	value *TileBounds
	isSet bool
}

func (v NullableTileBounds) Get() *TileBounds {
	return v.value
}

func (v *NullableTileBounds) Set(val *TileBounds) {
	v.value = val
	v.isSet = true
}

func (v NullableTileBounds) IsSet() bool {
	return v.isSet
}

func (v *NullableTileBounds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTileBounds(val *TileBounds) *NullableTileBounds {
	return &NullableTileBounds{value: val, isSet: true}
}

func (v NullableTileBounds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTileBounds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


