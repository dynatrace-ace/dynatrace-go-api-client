/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EventWrapperSettings In addition to the event handlers, events called using `addEventListener` or `attachEvent` can be captured. Be careful with this option! Event wrappers can conflict with the JavaScript code on a web page.
type EventWrapperSettings struct {
	// Click enabled/disabled.
	Click bool `json:"click"`
	// MouseUp enabled/disabled.
	MouseUp bool `json:"mouseUp"`
	// Change enabled/disabled.
	Change bool `json:"change"`
	// Blur enabled/disabled.
	Blur bool `json:"blur"`
	// TouchStart enabled/disabled.
	TouchStart bool `json:"touchStart"`
	// TouchEnd enabled/disabled.
	TouchEnd bool `json:"touchEnd"`
}

// NewEventWrapperSettings instantiates a new EventWrapperSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventWrapperSettings(click bool, mouseUp bool, change bool, blur bool, touchStart bool, touchEnd bool, ) *EventWrapperSettings {
	this := EventWrapperSettings{}
	this.Click = click
	this.MouseUp = mouseUp
	this.Change = change
	this.Blur = blur
	this.TouchStart = touchStart
	this.TouchEnd = touchEnd
	return &this
}

// NewEventWrapperSettingsWithDefaults instantiates a new EventWrapperSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWrapperSettingsWithDefaults() *EventWrapperSettings {
	this := EventWrapperSettings{}
	return &this
}

// GetClick returns the Click field value
func (o *EventWrapperSettings) GetClick() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Click
}

// GetClickOk returns a tuple with the Click field value
// and a boolean to check if the value has been set.
func (o *EventWrapperSettings) GetClickOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Click, true
}

// SetClick sets field value
func (o *EventWrapperSettings) SetClick(v bool) {
	o.Click = v
}

// GetMouseUp returns the MouseUp field value
func (o *EventWrapperSettings) GetMouseUp() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.MouseUp
}

// GetMouseUpOk returns a tuple with the MouseUp field value
// and a boolean to check if the value has been set.
func (o *EventWrapperSettings) GetMouseUpOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MouseUp, true
}

// SetMouseUp sets field value
func (o *EventWrapperSettings) SetMouseUp(v bool) {
	o.MouseUp = v
}

// GetChange returns the Change field value
func (o *EventWrapperSettings) GetChange() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Change
}

// GetChangeOk returns a tuple with the Change field value
// and a boolean to check if the value has been set.
func (o *EventWrapperSettings) GetChangeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Change, true
}

// SetChange sets field value
func (o *EventWrapperSettings) SetChange(v bool) {
	o.Change = v
}

// GetBlur returns the Blur field value
func (o *EventWrapperSettings) GetBlur() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Blur
}

// GetBlurOk returns a tuple with the Blur field value
// and a boolean to check if the value has been set.
func (o *EventWrapperSettings) GetBlurOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Blur, true
}

// SetBlur sets field value
func (o *EventWrapperSettings) SetBlur(v bool) {
	o.Blur = v
}

// GetTouchStart returns the TouchStart field value
func (o *EventWrapperSettings) GetTouchStart() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.TouchStart
}

// GetTouchStartOk returns a tuple with the TouchStart field value
// and a boolean to check if the value has been set.
func (o *EventWrapperSettings) GetTouchStartOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TouchStart, true
}

// SetTouchStart sets field value
func (o *EventWrapperSettings) SetTouchStart(v bool) {
	o.TouchStart = v
}

// GetTouchEnd returns the TouchEnd field value
func (o *EventWrapperSettings) GetTouchEnd() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.TouchEnd
}

// GetTouchEndOk returns a tuple with the TouchEnd field value
// and a boolean to check if the value has been set.
func (o *EventWrapperSettings) GetTouchEndOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TouchEnd, true
}

// SetTouchEnd sets field value
func (o *EventWrapperSettings) SetTouchEnd(v bool) {
	o.TouchEnd = v
}

func (o EventWrapperSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["click"] = o.Click
	}
	if true {
		toSerialize["mouseUp"] = o.MouseUp
	}
	if true {
		toSerialize["change"] = o.Change
	}
	if true {
		toSerialize["blur"] = o.Blur
	}
	if true {
		toSerialize["touchStart"] = o.TouchStart
	}
	if true {
		toSerialize["touchEnd"] = o.TouchEnd
	}
	return json.Marshal(toSerialize)
}

type NullableEventWrapperSettings struct {
	value *EventWrapperSettings
	isSet bool
}

func (v NullableEventWrapperSettings) Get() *EventWrapperSettings {
	return v.value
}

func (v *NullableEventWrapperSettings) Set(val *EventWrapperSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableEventWrapperSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableEventWrapperSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventWrapperSettings(val *EventWrapperSettings) *NullableEventWrapperSettings {
	return &NullableEventWrapperSettings{value: val, isSet: true}
}

func (v NullableEventWrapperSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventWrapperSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


