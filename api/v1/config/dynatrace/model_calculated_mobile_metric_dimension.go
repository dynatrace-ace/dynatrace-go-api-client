/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CalculatedMobileMetricDimension Dimension of the calculated mobile metric.
type CalculatedMobileMetricDimension struct {
	// The number of top values to be calculated.
	TopX int32 `json:"topX"`
	// The dimension of the metric.
	Dimension string `json:"dimension"`
}

// NewCalculatedMobileMetricDimension instantiates a new CalculatedMobileMetricDimension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalculatedMobileMetricDimension(topX int32, dimension string, ) *CalculatedMobileMetricDimension {
	this := CalculatedMobileMetricDimension{}
	this.TopX = topX
	this.Dimension = dimension
	return &this
}

// NewCalculatedMobileMetricDimensionWithDefaults instantiates a new CalculatedMobileMetricDimension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalculatedMobileMetricDimensionWithDefaults() *CalculatedMobileMetricDimension {
	this := CalculatedMobileMetricDimension{}
	return &this
}

// GetTopX returns the TopX field value
func (o *CalculatedMobileMetricDimension) GetTopX() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.TopX
}

// GetTopXOk returns a tuple with the TopX field value
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricDimension) GetTopXOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TopX, true
}

// SetTopX sets field value
func (o *CalculatedMobileMetricDimension) SetTopX(v int32) {
	o.TopX = v
}

// GetDimension returns the Dimension field value
func (o *CalculatedMobileMetricDimension) GetDimension() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Dimension
}

// GetDimensionOk returns a tuple with the Dimension field value
// and a boolean to check if the value has been set.
func (o *CalculatedMobileMetricDimension) GetDimensionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Dimension, true
}

// SetDimension sets field value
func (o *CalculatedMobileMetricDimension) SetDimension(v string) {
	o.Dimension = v
}

func (o CalculatedMobileMetricDimension) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["topX"] = o.TopX
	}
	if true {
		toSerialize["dimension"] = o.Dimension
	}
	return json.Marshal(toSerialize)
}

type NullableCalculatedMobileMetricDimension struct {
	value *CalculatedMobileMetricDimension
	isSet bool
}

func (v NullableCalculatedMobileMetricDimension) Get() *CalculatedMobileMetricDimension {
	return v.value
}

func (v *NullableCalculatedMobileMetricDimension) Set(val *CalculatedMobileMetricDimension) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculatedMobileMetricDimension) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculatedMobileMetricDimension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculatedMobileMetricDimension(val *CalculatedMobileMetricDimension) *NullableCalculatedMobileMetricDimension {
	return &NullableCalculatedMobileMetricDimension{value: val, isSet: true}
}

func (v NullableCalculatedMobileMetricDimension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculatedMobileMetricDimension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


