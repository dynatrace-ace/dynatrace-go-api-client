/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SplitSelectTransformationAllOf struct for SplitSelectTransformationAllOf
type SplitSelectTransformationAllOf struct {
	// The delimiter for splitting the detected value. The delimiter itself is not kept.
	Delimiter *string `json:"delimiter,omitempty"`
	// The index of the element in the split array to be used. Indexing starts with `1`.
	ItemIndex *int32 `json:"itemIndex,omitempty"`
}

// NewSplitSelectTransformationAllOf instantiates a new SplitSelectTransformationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplitSelectTransformationAllOf() *SplitSelectTransformationAllOf {
	this := SplitSelectTransformationAllOf{}
	return &this
}

// NewSplitSelectTransformationAllOfWithDefaults instantiates a new SplitSelectTransformationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplitSelectTransformationAllOfWithDefaults() *SplitSelectTransformationAllOf {
	this := SplitSelectTransformationAllOf{}
	return &this
}

// GetDelimiter returns the Delimiter field value if set, zero value otherwise.
func (o *SplitSelectTransformationAllOf) GetDelimiter() string {
	if o == nil || o.Delimiter == nil {
		var ret string
		return ret
	}
	return *o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitSelectTransformationAllOf) GetDelimiterOk() (*string, bool) {
	if o == nil || o.Delimiter == nil {
		return nil, false
	}
	return o.Delimiter, true
}

// HasDelimiter returns a boolean if a field has been set.
func (o *SplitSelectTransformationAllOf) HasDelimiter() bool {
	if o != nil && o.Delimiter != nil {
		return true
	}

	return false
}

// SetDelimiter gets a reference to the given string and assigns it to the Delimiter field.
func (o *SplitSelectTransformationAllOf) SetDelimiter(v string) {
	o.Delimiter = &v
}

// GetItemIndex returns the ItemIndex field value if set, zero value otherwise.
func (o *SplitSelectTransformationAllOf) GetItemIndex() int32 {
	if o == nil || o.ItemIndex == nil {
		var ret int32
		return ret
	}
	return *o.ItemIndex
}

// GetItemIndexOk returns a tuple with the ItemIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitSelectTransformationAllOf) GetItemIndexOk() (*int32, bool) {
	if o == nil || o.ItemIndex == nil {
		return nil, false
	}
	return o.ItemIndex, true
}

// HasItemIndex returns a boolean if a field has been set.
func (o *SplitSelectTransformationAllOf) HasItemIndex() bool {
	if o != nil && o.ItemIndex != nil {
		return true
	}

	return false
}

// SetItemIndex gets a reference to the given int32 and assigns it to the ItemIndex field.
func (o *SplitSelectTransformationAllOf) SetItemIndex(v int32) {
	o.ItemIndex = &v
}

func (o SplitSelectTransformationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Delimiter != nil {
		toSerialize["delimiter"] = o.Delimiter
	}
	if o.ItemIndex != nil {
		toSerialize["itemIndex"] = o.ItemIndex
	}
	return json.Marshal(toSerialize)
}

type NullableSplitSelectTransformationAllOf struct {
	value *SplitSelectTransformationAllOf
	isSet bool
}

func (v NullableSplitSelectTransformationAllOf) Get() *SplitSelectTransformationAllOf {
	return v.value
}

func (v *NullableSplitSelectTransformationAllOf) Set(val *SplitSelectTransformationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSplitSelectTransformationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSplitSelectTransformationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplitSelectTransformationAllOf(val *SplitSelectTransformationAllOf) *NullableSplitSelectTransformationAllOf {
	return &NullableSplitSelectTransformationAllOf{value: val, isSet: true}
}

func (v NullableSplitSelectTransformationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplitSelectTransformationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


