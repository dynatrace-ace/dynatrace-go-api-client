/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MetricEventAlertingScope A single filter for the alerting scope.  This is the base version of the filter, depending on the type,  the actual JSON may contain additional fields.
type MetricEventAlertingScope struct {
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `ENTITY_ID` -> EntityIdAlertingScope  * `MANAGEMENT_ZONE` -> ManagementZoneAlertingScope  * `TAG` -> TagFilterAlertingScope  * `NAME` -> NameAlertingScope  * `CUSTOM_DEVICE_GROUP_NAME` -> CustomDeviceGroupNameAlertingScope  * `HOST_GROUP_NAME` -> HostGroupNameAlertingScope  * `HOST_NAME` -> HostNameAlertingScope  * `PROCESS_GROUP_ID` -> ProcessGroupIdAlertingScope  * `PROCESS_GROUP_NAME` -> ProcessGroupNameAlertingScope  
	FilterType string `json:"filterType"`
}

// NewMetricEventAlertingScope instantiates a new MetricEventAlertingScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricEventAlertingScope(filterType string, ) *MetricEventAlertingScope {
	this := MetricEventAlertingScope{}
	this.FilterType = filterType
	return &this
}

// NewMetricEventAlertingScopeWithDefaults instantiates a new MetricEventAlertingScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricEventAlertingScopeWithDefaults() *MetricEventAlertingScope {
	this := MetricEventAlertingScope{}
	return &this
}

// GetFilterType returns the FilterType field value
func (o *MetricEventAlertingScope) GetFilterType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.FilterType
}

// GetFilterTypeOk returns a tuple with the FilterType field value
// and a boolean to check if the value has been set.
func (o *MetricEventAlertingScope) GetFilterTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FilterType, true
}

// SetFilterType sets field value
func (o *MetricEventAlertingScope) SetFilterType(v string) {
	o.FilterType = v
}

func (o MetricEventAlertingScope) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["filterType"] = o.FilterType
	}
	return json.Marshal(toSerialize)
}

type NullableMetricEventAlertingScope struct {
	value *MetricEventAlertingScope
	isSet bool
}

func (v NullableMetricEventAlertingScope) Get() *MetricEventAlertingScope {
	return v.value
}

func (v *NullableMetricEventAlertingScope) Set(val *MetricEventAlertingScope) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricEventAlertingScope) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricEventAlertingScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricEventAlertingScope(val *MetricEventAlertingScope) *NullableMetricEventAlertingScope {
	return &NullableMetricEventAlertingScope{value: val, isSet: true}
}

func (v NullableMetricEventAlertingScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricEventAlertingScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


