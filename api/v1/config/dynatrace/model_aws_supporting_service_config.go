/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AwsSupportingServiceConfig A supporting service to be monitored.
type AwsSupportingServiceConfig struct {
	// The name of the supporting service.
	Name string `json:"name"`
	// A list of metrics to be monitored for this service.
	MonitoredMetrics []AwsSupportingServiceMetric `json:"monitoredMetrics"`
}

// NewAwsSupportingServiceConfig instantiates a new AwsSupportingServiceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsSupportingServiceConfig(name string, monitoredMetrics []AwsSupportingServiceMetric, ) *AwsSupportingServiceConfig {
	this := AwsSupportingServiceConfig{}
	this.Name = name
	this.MonitoredMetrics = monitoredMetrics
	return &this
}

// NewAwsSupportingServiceConfigWithDefaults instantiates a new AwsSupportingServiceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsSupportingServiceConfigWithDefaults() *AwsSupportingServiceConfig {
	this := AwsSupportingServiceConfig{}
	return &this
}

// GetName returns the Name field value
func (o *AwsSupportingServiceConfig) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AwsSupportingServiceConfig) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AwsSupportingServiceConfig) SetName(v string) {
	o.Name = v
}

// GetMonitoredMetrics returns the MonitoredMetrics field value
func (o *AwsSupportingServiceConfig) GetMonitoredMetrics() []AwsSupportingServiceMetric {
	if o == nil  {
		var ret []AwsSupportingServiceMetric
		return ret
	}

	return o.MonitoredMetrics
}

// GetMonitoredMetricsOk returns a tuple with the MonitoredMetrics field value
// and a boolean to check if the value has been set.
func (o *AwsSupportingServiceConfig) GetMonitoredMetricsOk() (*[]AwsSupportingServiceMetric, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MonitoredMetrics, true
}

// SetMonitoredMetrics sets field value
func (o *AwsSupportingServiceConfig) SetMonitoredMetrics(v []AwsSupportingServiceMetric) {
	o.MonitoredMetrics = v
}

func (o AwsSupportingServiceConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["monitoredMetrics"] = o.MonitoredMetrics
	}
	return json.Marshal(toSerialize)
}

type NullableAwsSupportingServiceConfig struct {
	value *AwsSupportingServiceConfig
	isSet bool
}

func (v NullableAwsSupportingServiceConfig) Get() *AwsSupportingServiceConfig {
	return v.value
}

func (v *NullableAwsSupportingServiceConfig) Set(val *AwsSupportingServiceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsSupportingServiceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsSupportingServiceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsSupportingServiceConfig(val *AwsSupportingServiceConfig) *NullableAwsSupportingServiceConfig {
	return &NullableAwsSupportingServiceConfig{value: val, isSet: true}
}

func (v NullableAwsSupportingServiceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsSupportingServiceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


