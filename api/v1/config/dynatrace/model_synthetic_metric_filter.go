/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SyntheticMetricFilter Filter of the calculated synthetic metric.
type SyntheticMetricFilter struct {
	// Only user actions of the specified type are included in the metric calculation.
	ActionType *string `json:"actionType,omitempty"`
	// The execution status of the monitors to be included in the metric calculation:   * `true`: Only failed executions are included.    * `false`: All executions are included.
	HasError *bool `json:"hasError,omitempty"`
	// Only executions finished with the specified error code are included in the metric calculation.
	ErrorCode *int32 `json:"errorCode,omitempty"`
	// Only the specified browser clickpath event is included in the metric calculation.    Specify the Dynatrace entity ID of the event here. You can fetch the list of clickpath events of the monitor with the [GET a synthetic monitor](https://www.dynatrace.com/support/help/shortlink/api-synthetic-monitors-get-monitor) request from the Environment API
	Event *string `json:"event,omitempty"`
	// Only executions from the specified location are included in the metric calculation.    Specify the Dynatrace entity ID of the location here. You can fetch the list of locations the monitor is running from with the [GET a synthetic monitor](https://www.dynatrace.com/support/help/shortlink/api-synthetic-monitors-get-monitor) request from the Environment API.
	Location *string `json:"location,omitempty"`
}

// NewSyntheticMetricFilter instantiates a new SyntheticMetricFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticMetricFilter() *SyntheticMetricFilter {
	this := SyntheticMetricFilter{}
	return &this
}

// NewSyntheticMetricFilterWithDefaults instantiates a new SyntheticMetricFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticMetricFilterWithDefaults() *SyntheticMetricFilter {
	this := SyntheticMetricFilter{}
	return &this
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *SyntheticMetricFilter) GetActionType() string {
	if o == nil || o.ActionType == nil {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticMetricFilter) GetActionTypeOk() (*string, bool) {
	if o == nil || o.ActionType == nil {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *SyntheticMetricFilter) HasActionType() bool {
	if o != nil && o.ActionType != nil {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *SyntheticMetricFilter) SetActionType(v string) {
	o.ActionType = &v
}

// GetHasError returns the HasError field value if set, zero value otherwise.
func (o *SyntheticMetricFilter) GetHasError() bool {
	if o == nil || o.HasError == nil {
		var ret bool
		return ret
	}
	return *o.HasError
}

// GetHasErrorOk returns a tuple with the HasError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticMetricFilter) GetHasErrorOk() (*bool, bool) {
	if o == nil || o.HasError == nil {
		return nil, false
	}
	return o.HasError, true
}

// HasHasError returns a boolean if a field has been set.
func (o *SyntheticMetricFilter) HasHasError() bool {
	if o != nil && o.HasError != nil {
		return true
	}

	return false
}

// SetHasError gets a reference to the given bool and assigns it to the HasError field.
func (o *SyntheticMetricFilter) SetHasError(v bool) {
	o.HasError = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *SyntheticMetricFilter) GetErrorCode() int32 {
	if o == nil || o.ErrorCode == nil {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticMetricFilter) GetErrorCodeOk() (*int32, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *SyntheticMetricFilter) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *SyntheticMetricFilter) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *SyntheticMetricFilter) GetEvent() string {
	if o == nil || o.Event == nil {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticMetricFilter) GetEventOk() (*string, bool) {
	if o == nil || o.Event == nil {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *SyntheticMetricFilter) HasEvent() bool {
	if o != nil && o.Event != nil {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *SyntheticMetricFilter) SetEvent(v string) {
	o.Event = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *SyntheticMetricFilter) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticMetricFilter) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *SyntheticMetricFilter) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *SyntheticMetricFilter) SetLocation(v string) {
	o.Location = &v
}

func (o SyntheticMetricFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActionType != nil {
		toSerialize["actionType"] = o.ActionType
	}
	if o.HasError != nil {
		toSerialize["hasError"] = o.HasError
	}
	if o.ErrorCode != nil {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if o.Event != nil {
		toSerialize["event"] = o.Event
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticMetricFilter struct {
	value *SyntheticMetricFilter
	isSet bool
}

func (v NullableSyntheticMetricFilter) Get() *SyntheticMetricFilter {
	return v.value
}

func (v *NullableSyntheticMetricFilter) Set(val *SyntheticMetricFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticMetricFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticMetricFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticMetricFilter(val *SyntheticMetricFilter) *NullableSyntheticMetricFilter {
	return &NullableSyntheticMetricFilter{value: val, isSet: true}
}

func (v NullableSyntheticMetricFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticMetricFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


