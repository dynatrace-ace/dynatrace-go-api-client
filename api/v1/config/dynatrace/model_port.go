/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Port The contribution to the service ID calculation from the port, where the web request has been detected.
type Port struct {
	// The port is used (`false`) or isn't used (`true`) in the service ID calculation.
	DoNotUseForServiceId *bool `json:"doNotUseForServiceId,omitempty"`
}

// NewPort instantiates a new Port object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPort() *Port {
	this := Port{}
	return &this
}

// NewPortWithDefaults instantiates a new Port object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortWithDefaults() *Port {
	this := Port{}
	return &this
}

// GetDoNotUseForServiceId returns the DoNotUseForServiceId field value if set, zero value otherwise.
func (o *Port) GetDoNotUseForServiceId() bool {
	if o == nil || o.DoNotUseForServiceId == nil {
		var ret bool
		return ret
	}
	return *o.DoNotUseForServiceId
}

// GetDoNotUseForServiceIdOk returns a tuple with the DoNotUseForServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetDoNotUseForServiceIdOk() (*bool, bool) {
	if o == nil || o.DoNotUseForServiceId == nil {
		return nil, false
	}
	return o.DoNotUseForServiceId, true
}

// HasDoNotUseForServiceId returns a boolean if a field has been set.
func (o *Port) HasDoNotUseForServiceId() bool {
	if o != nil && o.DoNotUseForServiceId != nil {
		return true
	}

	return false
}

// SetDoNotUseForServiceId gets a reference to the given bool and assigns it to the DoNotUseForServiceId field.
func (o *Port) SetDoNotUseForServiceId(v bool) {
	o.DoNotUseForServiceId = &v
}

func (o Port) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DoNotUseForServiceId != nil {
		toSerialize["doNotUseForServiceId"] = o.DoNotUseForServiceId
	}
	return json.Marshal(toSerialize)
}

type NullablePort struct {
	value *Port
	isSet bool
}

func (v NullablePort) Get() *Port {
	return v.value
}

func (v *NullablePort) Set(val *Port) {
	v.value = val
	v.isSet = true
}

func (v NullablePort) IsSet() bool {
	return v.isSet
}

func (v *NullablePort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePort(val *Port) *NullablePort {
	return &NullablePort{value: val, isSet: true}
}

func (v NullablePort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


