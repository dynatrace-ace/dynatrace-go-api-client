/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AwsIamToken The external ID token for setting IAM Role in AWS.
type AwsIamToken struct {
	// The external ID token for setting IAM Role in AWS.
	Token string `json:"token"`
}

// NewAwsIamToken instantiates a new AwsIamToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsIamToken(token string, ) *AwsIamToken {
	this := AwsIamToken{}
	this.Token = token
	return &this
}

// NewAwsIamTokenWithDefaults instantiates a new AwsIamToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsIamTokenWithDefaults() *AwsIamToken {
	this := AwsIamToken{}
	return &this
}

// GetToken returns the Token field value
func (o *AwsIamToken) GetToken() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *AwsIamToken) GetTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *AwsIamToken) SetToken(v string) {
	o.Token = v
}

func (o AwsIamToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableAwsIamToken struct {
	value *AwsIamToken
	isSet bool
}

func (v NullableAwsIamToken) Get() *AwsIamToken {
	return v.value
}

func (v *NullableAwsIamToken) Set(val *AwsIamToken) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsIamToken) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsIamToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsIamToken(val *AwsIamToken) *NullableAwsIamToken {
	return &NullableAwsIamToken{value: val, isSet: true}
}

func (v NullableAwsIamToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsIamToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


