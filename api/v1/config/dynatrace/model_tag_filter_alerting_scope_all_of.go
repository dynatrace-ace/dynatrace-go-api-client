/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TagFilterAlertingScopeAllOf struct for TagFilterAlertingScopeAllOf
type TagFilterAlertingScopeAllOf struct {
	TagFilter *TagFilter `json:"tagFilter,omitempty"`
}

// NewTagFilterAlertingScopeAllOf instantiates a new TagFilterAlertingScopeAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagFilterAlertingScopeAllOf() *TagFilterAlertingScopeAllOf {
	this := TagFilterAlertingScopeAllOf{}
	return &this
}

// NewTagFilterAlertingScopeAllOfWithDefaults instantiates a new TagFilterAlertingScopeAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagFilterAlertingScopeAllOfWithDefaults() *TagFilterAlertingScopeAllOf {
	this := TagFilterAlertingScopeAllOf{}
	return &this
}

// GetTagFilter returns the TagFilter field value if set, zero value otherwise.
func (o *TagFilterAlertingScopeAllOf) GetTagFilter() TagFilter {
	if o == nil || o.TagFilter == nil {
		var ret TagFilter
		return ret
	}
	return *o.TagFilter
}

// GetTagFilterOk returns a tuple with the TagFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagFilterAlertingScopeAllOf) GetTagFilterOk() (*TagFilter, bool) {
	if o == nil || o.TagFilter == nil {
		return nil, false
	}
	return o.TagFilter, true
}

// HasTagFilter returns a boolean if a field has been set.
func (o *TagFilterAlertingScopeAllOf) HasTagFilter() bool {
	if o != nil && o.TagFilter != nil {
		return true
	}

	return false
}

// SetTagFilter gets a reference to the given TagFilter and assigns it to the TagFilter field.
func (o *TagFilterAlertingScopeAllOf) SetTagFilter(v TagFilter) {
	o.TagFilter = &v
}

func (o TagFilterAlertingScopeAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TagFilter != nil {
		toSerialize["tagFilter"] = o.TagFilter
	}
	return json.Marshal(toSerialize)
}

type NullableTagFilterAlertingScopeAllOf struct {
	value *TagFilterAlertingScopeAllOf
	isSet bool
}

func (v NullableTagFilterAlertingScopeAllOf) Get() *TagFilterAlertingScopeAllOf {
	return v.value
}

func (v *NullableTagFilterAlertingScopeAllOf) Set(val *TagFilterAlertingScopeAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTagFilterAlertingScopeAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTagFilterAlertingScopeAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagFilterAlertingScopeAllOf(val *TagFilterAlertingScopeAllOf) *NullableTagFilterAlertingScopeAllOf {
	return &NullableTagFilterAlertingScopeAllOf{value: val, isSet: true}
}

func (v NullableTagFilterAlertingScopeAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagFilterAlertingScopeAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


