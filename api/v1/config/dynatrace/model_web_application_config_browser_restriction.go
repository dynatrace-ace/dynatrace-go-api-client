/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// WebApplicationConfigBrowserRestriction Browser exclusion rules for the browsers that are to be excluded.
type WebApplicationConfigBrowserRestriction struct {
	// The version of the browser that is used.
	BrowserVersion *string `json:"browserVersion,omitempty"`
	// The type of the browser that is used.
	BrowserType string `json:"browserType"`
	// The platform on which the browser is being used.
	Platform *string `json:"platform,omitempty"`
	// Compares different browsers together.
	Comparator *string `json:"comparator,omitempty"`
}

// NewWebApplicationConfigBrowserRestriction instantiates a new WebApplicationConfigBrowserRestriction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebApplicationConfigBrowserRestriction(browserType string, ) *WebApplicationConfigBrowserRestriction {
	this := WebApplicationConfigBrowserRestriction{}
	this.BrowserType = browserType
	return &this
}

// NewWebApplicationConfigBrowserRestrictionWithDefaults instantiates a new WebApplicationConfigBrowserRestriction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebApplicationConfigBrowserRestrictionWithDefaults() *WebApplicationConfigBrowserRestriction {
	this := WebApplicationConfigBrowserRestriction{}
	return &this
}

// GetBrowserVersion returns the BrowserVersion field value if set, zero value otherwise.
func (o *WebApplicationConfigBrowserRestriction) GetBrowserVersion() string {
	if o == nil || o.BrowserVersion == nil {
		var ret string
		return ret
	}
	return *o.BrowserVersion
}

// GetBrowserVersionOk returns a tuple with the BrowserVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfigBrowserRestriction) GetBrowserVersionOk() (*string, bool) {
	if o == nil || o.BrowserVersion == nil {
		return nil, false
	}
	return o.BrowserVersion, true
}

// HasBrowserVersion returns a boolean if a field has been set.
func (o *WebApplicationConfigBrowserRestriction) HasBrowserVersion() bool {
	if o != nil && o.BrowserVersion != nil {
		return true
	}

	return false
}

// SetBrowserVersion gets a reference to the given string and assigns it to the BrowserVersion field.
func (o *WebApplicationConfigBrowserRestriction) SetBrowserVersion(v string) {
	o.BrowserVersion = &v
}

// GetBrowserType returns the BrowserType field value
func (o *WebApplicationConfigBrowserRestriction) GetBrowserType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BrowserType
}

// GetBrowserTypeOk returns a tuple with the BrowserType field value
// and a boolean to check if the value has been set.
func (o *WebApplicationConfigBrowserRestriction) GetBrowserTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BrowserType, true
}

// SetBrowserType sets field value
func (o *WebApplicationConfigBrowserRestriction) SetBrowserType(v string) {
	o.BrowserType = v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *WebApplicationConfigBrowserRestriction) GetPlatform() string {
	if o == nil || o.Platform == nil {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfigBrowserRestriction) GetPlatformOk() (*string, bool) {
	if o == nil || o.Platform == nil {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *WebApplicationConfigBrowserRestriction) HasPlatform() bool {
	if o != nil && o.Platform != nil {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *WebApplicationConfigBrowserRestriction) SetPlatform(v string) {
	o.Platform = &v
}

// GetComparator returns the Comparator field value if set, zero value otherwise.
func (o *WebApplicationConfigBrowserRestriction) GetComparator() string {
	if o == nil || o.Comparator == nil {
		var ret string
		return ret
	}
	return *o.Comparator
}

// GetComparatorOk returns a tuple with the Comparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebApplicationConfigBrowserRestriction) GetComparatorOk() (*string, bool) {
	if o == nil || o.Comparator == nil {
		return nil, false
	}
	return o.Comparator, true
}

// HasComparator returns a boolean if a field has been set.
func (o *WebApplicationConfigBrowserRestriction) HasComparator() bool {
	if o != nil && o.Comparator != nil {
		return true
	}

	return false
}

// SetComparator gets a reference to the given string and assigns it to the Comparator field.
func (o *WebApplicationConfigBrowserRestriction) SetComparator(v string) {
	o.Comparator = &v
}

func (o WebApplicationConfigBrowserRestriction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BrowserVersion != nil {
		toSerialize["browserVersion"] = o.BrowserVersion
	}
	if true {
		toSerialize["browserType"] = o.BrowserType
	}
	if o.Platform != nil {
		toSerialize["platform"] = o.Platform
	}
	if o.Comparator != nil {
		toSerialize["comparator"] = o.Comparator
	}
	return json.Marshal(toSerialize)
}

type NullableWebApplicationConfigBrowserRestriction struct {
	value *WebApplicationConfigBrowserRestriction
	isSet bool
}

func (v NullableWebApplicationConfigBrowserRestriction) Get() *WebApplicationConfigBrowserRestriction {
	return v.value
}

func (v *NullableWebApplicationConfigBrowserRestriction) Set(val *WebApplicationConfigBrowserRestriction) {
	v.value = val
	v.isSet = true
}

func (v NullableWebApplicationConfigBrowserRestriction) IsSet() bool {
	return v.isSet
}

func (v *NullableWebApplicationConfigBrowserRestriction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebApplicationConfigBrowserRestriction(val *WebApplicationConfigBrowserRestriction) *NullableWebApplicationConfigBrowserRestriction {
	return &NullableWebApplicationConfigBrowserRestriction{value: val, isSet: true}
}

func (v NullableWebApplicationConfigBrowserRestriction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebApplicationConfigBrowserRestriction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


