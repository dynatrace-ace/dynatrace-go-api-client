/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AppIdentifier The appId, the app version and the bundle id which uniquely identify the app
type AppIdentifier struct {
	// The id where the file belongs to
	Id *string `json:"id,omitempty"`
	// The version code (Android) / bundle version (iOS) the file belongs to
	VersionCode string `json:"versionCode"`
	// The version name (Android) / bundle versions string (iOS) the file belongs to
	VersionName string `json:"versionName"`
	// The bundleId (iOS) or package name (Android) the file belongs to
	PackageName *string `json:"packageName,omitempty"`
	// The operating system where the file belongs to
	Os *string `json:"os,omitempty"`
}

// NewAppIdentifier instantiates a new AppIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppIdentifier(versionCode string, versionName string, ) *AppIdentifier {
	this := AppIdentifier{}
	this.VersionCode = versionCode
	this.VersionName = versionName
	return &this
}

// NewAppIdentifierWithDefaults instantiates a new AppIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppIdentifierWithDefaults() *AppIdentifier {
	this := AppIdentifier{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AppIdentifier) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppIdentifier) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AppIdentifier) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AppIdentifier) SetId(v string) {
	o.Id = &v
}

// GetVersionCode returns the VersionCode field value
func (o *AppIdentifier) GetVersionCode() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.VersionCode
}

// GetVersionCodeOk returns a tuple with the VersionCode field value
// and a boolean to check if the value has been set.
func (o *AppIdentifier) GetVersionCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VersionCode, true
}

// SetVersionCode sets field value
func (o *AppIdentifier) SetVersionCode(v string) {
	o.VersionCode = v
}

// GetVersionName returns the VersionName field value
func (o *AppIdentifier) GetVersionName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.VersionName
}

// GetVersionNameOk returns a tuple with the VersionName field value
// and a boolean to check if the value has been set.
func (o *AppIdentifier) GetVersionNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VersionName, true
}

// SetVersionName sets field value
func (o *AppIdentifier) SetVersionName(v string) {
	o.VersionName = v
}

// GetPackageName returns the PackageName field value if set, zero value otherwise.
func (o *AppIdentifier) GetPackageName() string {
	if o == nil || o.PackageName == nil {
		var ret string
		return ret
	}
	return *o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppIdentifier) GetPackageNameOk() (*string, bool) {
	if o == nil || o.PackageName == nil {
		return nil, false
	}
	return o.PackageName, true
}

// HasPackageName returns a boolean if a field has been set.
func (o *AppIdentifier) HasPackageName() bool {
	if o != nil && o.PackageName != nil {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given string and assigns it to the PackageName field.
func (o *AppIdentifier) SetPackageName(v string) {
	o.PackageName = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *AppIdentifier) GetOs() string {
	if o == nil || o.Os == nil {
		var ret string
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppIdentifier) GetOsOk() (*string, bool) {
	if o == nil || o.Os == nil {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *AppIdentifier) HasOs() bool {
	if o != nil && o.Os != nil {
		return true
	}

	return false
}

// SetOs gets a reference to the given string and assigns it to the Os field.
func (o *AppIdentifier) SetOs(v string) {
	o.Os = &v
}

func (o AppIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["versionCode"] = o.VersionCode
	}
	if true {
		toSerialize["versionName"] = o.VersionName
	}
	if o.PackageName != nil {
		toSerialize["packageName"] = o.PackageName
	}
	if o.Os != nil {
		toSerialize["os"] = o.Os
	}
	return json.Marshal(toSerialize)
}

type NullableAppIdentifier struct {
	value *AppIdentifier
	isSet bool
}

func (v NullableAppIdentifier) Get() *AppIdentifier {
	return v.value
}

func (v *NullableAppIdentifier) Set(val *AppIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableAppIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableAppIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppIdentifier(val *AppIdentifier) *NullableAppIdentifier {
	return &NullableAppIdentifier{value: val, isSet: true}
}

func (v NullableAppIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


