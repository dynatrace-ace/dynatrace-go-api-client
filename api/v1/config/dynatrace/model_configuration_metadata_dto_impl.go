/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ConfigurationMetadataDtoImpl Metadata useful for debugging.
type ConfigurationMetadataDtoImpl struct {
	// A Sorted list of string version numbers of the configuration.
	CurrentConfigurationVersions *[]string `json:"currentConfigurationVersions,omitempty"`
	// A Sorted list of the version numbers of the configuration.
	ConfigurationVersions *[]int64 `json:"configurationVersions,omitempty"`
	// Dynatrace server version.
	ClusterVersion *string `json:"clusterVersion,omitempty"`
}

// NewConfigurationMetadataDtoImpl instantiates a new ConfigurationMetadataDtoImpl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationMetadataDtoImpl() *ConfigurationMetadataDtoImpl {
	this := ConfigurationMetadataDtoImpl{}
	return &this
}

// NewConfigurationMetadataDtoImplWithDefaults instantiates a new ConfigurationMetadataDtoImpl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationMetadataDtoImplWithDefaults() *ConfigurationMetadataDtoImpl {
	this := ConfigurationMetadataDtoImpl{}
	return &this
}

// GetCurrentConfigurationVersions returns the CurrentConfigurationVersions field value if set, zero value otherwise.
func (o *ConfigurationMetadataDtoImpl) GetCurrentConfigurationVersions() []string {
	if o == nil || o.CurrentConfigurationVersions == nil {
		var ret []string
		return ret
	}
	return *o.CurrentConfigurationVersions
}

// GetCurrentConfigurationVersionsOk returns a tuple with the CurrentConfigurationVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationMetadataDtoImpl) GetCurrentConfigurationVersionsOk() (*[]string, bool) {
	if o == nil || o.CurrentConfigurationVersions == nil {
		return nil, false
	}
	return o.CurrentConfigurationVersions, true
}

// HasCurrentConfigurationVersions returns a boolean if a field has been set.
func (o *ConfigurationMetadataDtoImpl) HasCurrentConfigurationVersions() bool {
	if o != nil && o.CurrentConfigurationVersions != nil {
		return true
	}

	return false
}

// SetCurrentConfigurationVersions gets a reference to the given []string and assigns it to the CurrentConfigurationVersions field.
func (o *ConfigurationMetadataDtoImpl) SetCurrentConfigurationVersions(v []string) {
	o.CurrentConfigurationVersions = &v
}

// GetConfigurationVersions returns the ConfigurationVersions field value if set, zero value otherwise.
func (o *ConfigurationMetadataDtoImpl) GetConfigurationVersions() []int64 {
	if o == nil || o.ConfigurationVersions == nil {
		var ret []int64
		return ret
	}
	return *o.ConfigurationVersions
}

// GetConfigurationVersionsOk returns a tuple with the ConfigurationVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationMetadataDtoImpl) GetConfigurationVersionsOk() (*[]int64, bool) {
	if o == nil || o.ConfigurationVersions == nil {
		return nil, false
	}
	return o.ConfigurationVersions, true
}

// HasConfigurationVersions returns a boolean if a field has been set.
func (o *ConfigurationMetadataDtoImpl) HasConfigurationVersions() bool {
	if o != nil && o.ConfigurationVersions != nil {
		return true
	}

	return false
}

// SetConfigurationVersions gets a reference to the given []int64 and assigns it to the ConfigurationVersions field.
func (o *ConfigurationMetadataDtoImpl) SetConfigurationVersions(v []int64) {
	o.ConfigurationVersions = &v
}

// GetClusterVersion returns the ClusterVersion field value if set, zero value otherwise.
func (o *ConfigurationMetadataDtoImpl) GetClusterVersion() string {
	if o == nil || o.ClusterVersion == nil {
		var ret string
		return ret
	}
	return *o.ClusterVersion
}

// GetClusterVersionOk returns a tuple with the ClusterVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationMetadataDtoImpl) GetClusterVersionOk() (*string, bool) {
	if o == nil || o.ClusterVersion == nil {
		return nil, false
	}
	return o.ClusterVersion, true
}

// HasClusterVersion returns a boolean if a field has been set.
func (o *ConfigurationMetadataDtoImpl) HasClusterVersion() bool {
	if o != nil && o.ClusterVersion != nil {
		return true
	}

	return false
}

// SetClusterVersion gets a reference to the given string and assigns it to the ClusterVersion field.
func (o *ConfigurationMetadataDtoImpl) SetClusterVersion(v string) {
	o.ClusterVersion = &v
}

func (o ConfigurationMetadataDtoImpl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentConfigurationVersions != nil {
		toSerialize["currentConfigurationVersions"] = o.CurrentConfigurationVersions
	}
	if o.ConfigurationVersions != nil {
		toSerialize["configurationVersions"] = o.ConfigurationVersions
	}
	if o.ClusterVersion != nil {
		toSerialize["clusterVersion"] = o.ClusterVersion
	}
	return json.Marshal(toSerialize)
}

type NullableConfigurationMetadataDtoImpl struct {
	value *ConfigurationMetadataDtoImpl
	isSet bool
}

func (v NullableConfigurationMetadataDtoImpl) Get() *ConfigurationMetadataDtoImpl {
	return v.value
}

func (v *NullableConfigurationMetadataDtoImpl) Set(val *ConfigurationMetadataDtoImpl) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationMetadataDtoImpl) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationMetadataDtoImpl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationMetadataDtoImpl(val *ConfigurationMetadataDtoImpl) *NullableConfigurationMetadataDtoImpl {
	return &NullableConfigurationMetadataDtoImpl{value: val, isSet: true}
}

func (v NullableConfigurationMetadataDtoImpl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationMetadataDtoImpl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


