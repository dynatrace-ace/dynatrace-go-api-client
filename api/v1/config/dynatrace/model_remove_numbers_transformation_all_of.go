/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// RemoveNumbersTransformationAllOf struct for RemoveNumbersTransformationAllOf
type RemoveNumbersTransformationAllOf struct {
	// Remove numbers that contain at least *X* digits.
	MinDigitCount *int32 `json:"minDigitCount,omitempty"`
	// Remove (`true`) or keep (`false`) hexadecimal numbers.    If not set, then `false` is used, keeping hexadecimal numbers.
	IncludeHexNumbers *bool `json:"includeHexNumbers,omitempty"`
}

// NewRemoveNumbersTransformationAllOf instantiates a new RemoveNumbersTransformationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveNumbersTransformationAllOf() *RemoveNumbersTransformationAllOf {
	this := RemoveNumbersTransformationAllOf{}
	return &this
}

// NewRemoveNumbersTransformationAllOfWithDefaults instantiates a new RemoveNumbersTransformationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveNumbersTransformationAllOfWithDefaults() *RemoveNumbersTransformationAllOf {
	this := RemoveNumbersTransformationAllOf{}
	return &this
}

// GetMinDigitCount returns the MinDigitCount field value if set, zero value otherwise.
func (o *RemoveNumbersTransformationAllOf) GetMinDigitCount() int32 {
	if o == nil || o.MinDigitCount == nil {
		var ret int32
		return ret
	}
	return *o.MinDigitCount
}

// GetMinDigitCountOk returns a tuple with the MinDigitCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveNumbersTransformationAllOf) GetMinDigitCountOk() (*int32, bool) {
	if o == nil || o.MinDigitCount == nil {
		return nil, false
	}
	return o.MinDigitCount, true
}

// HasMinDigitCount returns a boolean if a field has been set.
func (o *RemoveNumbersTransformationAllOf) HasMinDigitCount() bool {
	if o != nil && o.MinDigitCount != nil {
		return true
	}

	return false
}

// SetMinDigitCount gets a reference to the given int32 and assigns it to the MinDigitCount field.
func (o *RemoveNumbersTransformationAllOf) SetMinDigitCount(v int32) {
	o.MinDigitCount = &v
}

// GetIncludeHexNumbers returns the IncludeHexNumbers field value if set, zero value otherwise.
func (o *RemoveNumbersTransformationAllOf) GetIncludeHexNumbers() bool {
	if o == nil || o.IncludeHexNumbers == nil {
		var ret bool
		return ret
	}
	return *o.IncludeHexNumbers
}

// GetIncludeHexNumbersOk returns a tuple with the IncludeHexNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveNumbersTransformationAllOf) GetIncludeHexNumbersOk() (*bool, bool) {
	if o == nil || o.IncludeHexNumbers == nil {
		return nil, false
	}
	return o.IncludeHexNumbers, true
}

// HasIncludeHexNumbers returns a boolean if a field has been set.
func (o *RemoveNumbersTransformationAllOf) HasIncludeHexNumbers() bool {
	if o != nil && o.IncludeHexNumbers != nil {
		return true
	}

	return false
}

// SetIncludeHexNumbers gets a reference to the given bool and assigns it to the IncludeHexNumbers field.
func (o *RemoveNumbersTransformationAllOf) SetIncludeHexNumbers(v bool) {
	o.IncludeHexNumbers = &v
}

func (o RemoveNumbersTransformationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MinDigitCount != nil {
		toSerialize["minDigitCount"] = o.MinDigitCount
	}
	if o.IncludeHexNumbers != nil {
		toSerialize["includeHexNumbers"] = o.IncludeHexNumbers
	}
	return json.Marshal(toSerialize)
}

type NullableRemoveNumbersTransformationAllOf struct {
	value *RemoveNumbersTransformationAllOf
	isSet bool
}

func (v NullableRemoveNumbersTransformationAllOf) Get() *RemoveNumbersTransformationAllOf {
	return v.value
}

func (v *NullableRemoveNumbersTransformationAllOf) Set(val *RemoveNumbersTransformationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveNumbersTransformationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveNumbersTransformationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveNumbersTransformationAllOf(val *RemoveNumbersTransformationAllOf) *NullableRemoveNumbersTransformationAllOf {
	return &NullableRemoveNumbersTransformationAllOf{value: val, isSet: true}
}

func (v NullableRemoveNumbersTransformationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveNumbersTransformationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


