/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ContextRootTransformation Configuration of transformation of the detected value.   If several transformations are specified, they are handled sequentially from top to bottom. Each transformation is applied to the result of the preceding transformation. For example, the second transformation is applied to the result of the first transformation.   The actual set of fields depends on the `type` of the transformation.
type ContextRootTransformation struct {
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `BEFORE` -> BeforeTransformation  * `REPLACE_BETWEEN` -> ReplaceBetweenTransformation  * `REMOVE_NUMBERS` -> RemoveNumbersTransformation  * `REMOVE_CREDIT_CARDS` -> RemoveCreditCardNumbersTransformation  * `REMOVE_IBANS` -> RemoveIBANsTransformation  * `REMOVE_IPS` -> RemoveIPsTransformation  
	Type string `json:"type"`
}

// NewContextRootTransformation instantiates a new ContextRootTransformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextRootTransformation(type_ string, ) *ContextRootTransformation {
	this := ContextRootTransformation{}
	this.Type = type_
	return &this
}

// NewContextRootTransformationWithDefaults instantiates a new ContextRootTransformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextRootTransformationWithDefaults() *ContextRootTransformation {
	this := ContextRootTransformation{}
	return &this
}

// GetType returns the Type field value
func (o *ContextRootTransformation) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContextRootTransformation) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContextRootTransformation) SetType(v string) {
	o.Type = v
}

func (o ContextRootTransformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableContextRootTransformation struct {
	value *ContextRootTransformation
	isSet bool
}

func (v NullableContextRootTransformation) Get() *ContextRootTransformation {
	return v.value
}

func (v *NullableContextRootTransformation) Set(val *ContextRootTransformation) {
	v.value = val
	v.isSet = true
}

func (v NullableContextRootTransformation) IsSet() bool {
	return v.isSet
}

func (v *NullableContextRootTransformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextRootTransformation(val *ContextRootTransformation) *NullableContextRootTransformation {
	return &NullableContextRootTransformation{value: val, isSet: true}
}

func (v NullableContextRootTransformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextRootTransformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


