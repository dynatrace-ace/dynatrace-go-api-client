/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// NetworkHighRetransmissionDetectionConfig Configuration of high retransmission rate detection.
type NetworkHighRetransmissionDetectionConfig struct {
	// The detection is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	CustomThresholds *NetworkHighRetransmissionThresholds `json:"customThresholds,omitempty"`
}

// NewNetworkHighRetransmissionDetectionConfig instantiates a new NetworkHighRetransmissionDetectionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkHighRetransmissionDetectionConfig(enabled bool, ) *NetworkHighRetransmissionDetectionConfig {
	this := NetworkHighRetransmissionDetectionConfig{}
	this.Enabled = enabled
	return &this
}

// NewNetworkHighRetransmissionDetectionConfigWithDefaults instantiates a new NetworkHighRetransmissionDetectionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkHighRetransmissionDetectionConfigWithDefaults() *NetworkHighRetransmissionDetectionConfig {
	this := NetworkHighRetransmissionDetectionConfig{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *NetworkHighRetransmissionDetectionConfig) GetEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *NetworkHighRetransmissionDetectionConfig) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *NetworkHighRetransmissionDetectionConfig) SetEnabled(v bool) {
	o.Enabled = v
}

// GetCustomThresholds returns the CustomThresholds field value if set, zero value otherwise.
func (o *NetworkHighRetransmissionDetectionConfig) GetCustomThresholds() NetworkHighRetransmissionThresholds {
	if o == nil || o.CustomThresholds == nil {
		var ret NetworkHighRetransmissionThresholds
		return ret
	}
	return *o.CustomThresholds
}

// GetCustomThresholdsOk returns a tuple with the CustomThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkHighRetransmissionDetectionConfig) GetCustomThresholdsOk() (*NetworkHighRetransmissionThresholds, bool) {
	if o == nil || o.CustomThresholds == nil {
		return nil, false
	}
	return o.CustomThresholds, true
}

// HasCustomThresholds returns a boolean if a field has been set.
func (o *NetworkHighRetransmissionDetectionConfig) HasCustomThresholds() bool {
	if o != nil && o.CustomThresholds != nil {
		return true
	}

	return false
}

// SetCustomThresholds gets a reference to the given NetworkHighRetransmissionThresholds and assigns it to the CustomThresholds field.
func (o *NetworkHighRetransmissionDetectionConfig) SetCustomThresholds(v NetworkHighRetransmissionThresholds) {
	o.CustomThresholds = &v
}

func (o NetworkHighRetransmissionDetectionConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if o.CustomThresholds != nil {
		toSerialize["customThresholds"] = o.CustomThresholds
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkHighRetransmissionDetectionConfig struct {
	value *NetworkHighRetransmissionDetectionConfig
	isSet bool
}

func (v NullableNetworkHighRetransmissionDetectionConfig) Get() *NetworkHighRetransmissionDetectionConfig {
	return v.value
}

func (v *NullableNetworkHighRetransmissionDetectionConfig) Set(val *NetworkHighRetransmissionDetectionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkHighRetransmissionDetectionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkHighRetransmissionDetectionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkHighRetransmissionDetectionConfig(val *NetworkHighRetransmissionDetectionConfig) *NullableNetworkHighRetransmissionDetectionConfig {
	return &NullableNetworkHighRetransmissionDetectionConfig{value: val, isSet: true}
}

func (v NullableNetworkHighRetransmissionDetectionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkHighRetransmissionDetectionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


