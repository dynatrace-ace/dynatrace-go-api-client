/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ServiceNowNotificationConfigAllOf struct for ServiceNowNotificationConfigAllOf
type ServiceNowNotificationConfigAllOf struct {
	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.    This field is mutually exclusive with the **url** field. You can only use one of them.
	InstanceName *string `json:"instanceName,omitempty"`
	// The URL of the on-premise ServiceNow installation.    This field is mutually exclusive with the **instanceName** field. You can only use one of them.
	Url *string `json:"url,omitempty"`
	// The username of the ServiceNow account.    Make sure that your user account has the `rest_service`, `web_request_admin`, and `x_dynat_ruxit.Integration` roles.
	Username *string `json:"username,omitempty"`
	// The username to the ServiceNow account
	Password *string `json:"password,omitempty"`
	// The content of the ServiceNow description.     You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Message *string `json:"message,omitempty"`
	// Send incidents into ServiceNow ITSM (`true`).
	SendIncidents *bool `json:"sendIncidents,omitempty"`
	// Send events into ServiceNow ITOM (`true`).
	SendEvents *bool `json:"sendEvents,omitempty"`
}

// NewServiceNowNotificationConfigAllOf instantiates a new ServiceNowNotificationConfigAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceNowNotificationConfigAllOf() *ServiceNowNotificationConfigAllOf {
	this := ServiceNowNotificationConfigAllOf{}
	return &this
}

// NewServiceNowNotificationConfigAllOfWithDefaults instantiates a new ServiceNowNotificationConfigAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceNowNotificationConfigAllOfWithDefaults() *ServiceNowNotificationConfigAllOf {
	this := ServiceNowNotificationConfigAllOf{}
	return &this
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise.
func (o *ServiceNowNotificationConfigAllOf) GetInstanceName() string {
	if o == nil || o.InstanceName == nil {
		var ret string
		return ret
	}
	return *o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNowNotificationConfigAllOf) GetInstanceNameOk() (*string, bool) {
	if o == nil || o.InstanceName == nil {
		return nil, false
	}
	return o.InstanceName, true
}

// HasInstanceName returns a boolean if a field has been set.
func (o *ServiceNowNotificationConfigAllOf) HasInstanceName() bool {
	if o != nil && o.InstanceName != nil {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given string and assigns it to the InstanceName field.
func (o *ServiceNowNotificationConfigAllOf) SetInstanceName(v string) {
	o.InstanceName = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ServiceNowNotificationConfigAllOf) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNowNotificationConfigAllOf) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ServiceNowNotificationConfigAllOf) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ServiceNowNotificationConfigAllOf) SetUrl(v string) {
	o.Url = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ServiceNowNotificationConfigAllOf) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNowNotificationConfigAllOf) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ServiceNowNotificationConfigAllOf) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ServiceNowNotificationConfigAllOf) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ServiceNowNotificationConfigAllOf) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNowNotificationConfigAllOf) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ServiceNowNotificationConfigAllOf) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ServiceNowNotificationConfigAllOf) SetPassword(v string) {
	o.Password = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ServiceNowNotificationConfigAllOf) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNowNotificationConfigAllOf) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ServiceNowNotificationConfigAllOf) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ServiceNowNotificationConfigAllOf) SetMessage(v string) {
	o.Message = &v
}

// GetSendIncidents returns the SendIncidents field value if set, zero value otherwise.
func (o *ServiceNowNotificationConfigAllOf) GetSendIncidents() bool {
	if o == nil || o.SendIncidents == nil {
		var ret bool
		return ret
	}
	return *o.SendIncidents
}

// GetSendIncidentsOk returns a tuple with the SendIncidents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNowNotificationConfigAllOf) GetSendIncidentsOk() (*bool, bool) {
	if o == nil || o.SendIncidents == nil {
		return nil, false
	}
	return o.SendIncidents, true
}

// HasSendIncidents returns a boolean if a field has been set.
func (o *ServiceNowNotificationConfigAllOf) HasSendIncidents() bool {
	if o != nil && o.SendIncidents != nil {
		return true
	}

	return false
}

// SetSendIncidents gets a reference to the given bool and assigns it to the SendIncidents field.
func (o *ServiceNowNotificationConfigAllOf) SetSendIncidents(v bool) {
	o.SendIncidents = &v
}

// GetSendEvents returns the SendEvents field value if set, zero value otherwise.
func (o *ServiceNowNotificationConfigAllOf) GetSendEvents() bool {
	if o == nil || o.SendEvents == nil {
		var ret bool
		return ret
	}
	return *o.SendEvents
}

// GetSendEventsOk returns a tuple with the SendEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceNowNotificationConfigAllOf) GetSendEventsOk() (*bool, bool) {
	if o == nil || o.SendEvents == nil {
		return nil, false
	}
	return o.SendEvents, true
}

// HasSendEvents returns a boolean if a field has been set.
func (o *ServiceNowNotificationConfigAllOf) HasSendEvents() bool {
	if o != nil && o.SendEvents != nil {
		return true
	}

	return false
}

// SetSendEvents gets a reference to the given bool and assigns it to the SendEvents field.
func (o *ServiceNowNotificationConfigAllOf) SetSendEvents(v bool) {
	o.SendEvents = &v
}

func (o ServiceNowNotificationConfigAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InstanceName != nil {
		toSerialize["instanceName"] = o.InstanceName
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.SendIncidents != nil {
		toSerialize["sendIncidents"] = o.SendIncidents
	}
	if o.SendEvents != nil {
		toSerialize["sendEvents"] = o.SendEvents
	}
	return json.Marshal(toSerialize)
}

type NullableServiceNowNotificationConfigAllOf struct {
	value *ServiceNowNotificationConfigAllOf
	isSet bool
}

func (v NullableServiceNowNotificationConfigAllOf) Get() *ServiceNowNotificationConfigAllOf {
	return v.value
}

func (v *NullableServiceNowNotificationConfigAllOf) Set(val *ServiceNowNotificationConfigAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceNowNotificationConfigAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceNowNotificationConfigAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceNowNotificationConfigAllOf(val *ServiceNowNotificationConfigAllOf) *NullableServiceNowNotificationConfigAllOf {
	return &NullableServiceNowNotificationConfigAllOf{value: val, isSet: true}
}

func (v NullableServiceNowNotificationConfigAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceNowNotificationConfigAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


