/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// KeyUserActionList The list of key user actions in the web application
type KeyUserActionList struct {
	KeyUserActionList *[]KeyUserAction `json:"keyUserActionList,omitempty"`
}

// NewKeyUserActionList instantiates a new KeyUserActionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyUserActionList() *KeyUserActionList {
	this := KeyUserActionList{}
	return &this
}

// NewKeyUserActionListWithDefaults instantiates a new KeyUserActionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyUserActionListWithDefaults() *KeyUserActionList {
	this := KeyUserActionList{}
	return &this
}

// GetKeyUserActionList returns the KeyUserActionList field value if set, zero value otherwise.
func (o *KeyUserActionList) GetKeyUserActionList() []KeyUserAction {
	if o == nil || o.KeyUserActionList == nil {
		var ret []KeyUserAction
		return ret
	}
	return *o.KeyUserActionList
}

// GetKeyUserActionListOk returns a tuple with the KeyUserActionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyUserActionList) GetKeyUserActionListOk() (*[]KeyUserAction, bool) {
	if o == nil || o.KeyUserActionList == nil {
		return nil, false
	}
	return o.KeyUserActionList, true
}

// HasKeyUserActionList returns a boolean if a field has been set.
func (o *KeyUserActionList) HasKeyUserActionList() bool {
	if o != nil && o.KeyUserActionList != nil {
		return true
	}

	return false
}

// SetKeyUserActionList gets a reference to the given []KeyUserAction and assigns it to the KeyUserActionList field.
func (o *KeyUserActionList) SetKeyUserActionList(v []KeyUserAction) {
	o.KeyUserActionList = &v
}

func (o KeyUserActionList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KeyUserActionList != nil {
		toSerialize["keyUserActionList"] = o.KeyUserActionList
	}
	return json.Marshal(toSerialize)
}

type NullableKeyUserActionList struct {
	value *KeyUserActionList
	isSet bool
}

func (v NullableKeyUserActionList) Get() *KeyUserActionList {
	return v.value
}

func (v *NullableKeyUserActionList) Set(val *KeyUserActionList) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyUserActionList) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyUserActionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyUserActionList(val *KeyUserActionList) *NullableKeyUserActionList {
	return &NullableKeyUserActionList{value: val, isSet: true}
}

func (v NullableKeyUserActionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyUserActionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


