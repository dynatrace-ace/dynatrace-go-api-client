/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// DimensionalManagementZoneRuleDto struct for DimensionalManagementZoneRuleDto
type DimensionalManagementZoneRuleDto struct {
	// Whether or not this rule is enabled.
	Enabled bool `json:"enabled"`
	// Target of the rule.
	AppliesTo string `json:"appliesTo"`
	// List of the conditions that have to match.
	Conditions []DimensionalManagementZoneConditionDto `json:"conditions"`
}

// NewDimensionalManagementZoneRuleDto instantiates a new DimensionalManagementZoneRuleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDimensionalManagementZoneRuleDto(enabled bool, appliesTo string, conditions []DimensionalManagementZoneConditionDto, ) *DimensionalManagementZoneRuleDto {
	this := DimensionalManagementZoneRuleDto{}
	this.Enabled = enabled
	this.AppliesTo = appliesTo
	this.Conditions = conditions
	return &this
}

// NewDimensionalManagementZoneRuleDtoWithDefaults instantiates a new DimensionalManagementZoneRuleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDimensionalManagementZoneRuleDtoWithDefaults() *DimensionalManagementZoneRuleDto {
	this := DimensionalManagementZoneRuleDto{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *DimensionalManagementZoneRuleDto) GetEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DimensionalManagementZoneRuleDto) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DimensionalManagementZoneRuleDto) SetEnabled(v bool) {
	o.Enabled = v
}

// GetAppliesTo returns the AppliesTo field value
func (o *DimensionalManagementZoneRuleDto) GetAppliesTo() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.AppliesTo
}

// GetAppliesToOk returns a tuple with the AppliesTo field value
// and a boolean to check if the value has been set.
func (o *DimensionalManagementZoneRuleDto) GetAppliesToOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AppliesTo, true
}

// SetAppliesTo sets field value
func (o *DimensionalManagementZoneRuleDto) SetAppliesTo(v string) {
	o.AppliesTo = v
}

// GetConditions returns the Conditions field value
func (o *DimensionalManagementZoneRuleDto) GetConditions() []DimensionalManagementZoneConditionDto {
	if o == nil  {
		var ret []DimensionalManagementZoneConditionDto
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *DimensionalManagementZoneRuleDto) GetConditionsOk() (*[]DimensionalManagementZoneConditionDto, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Conditions, true
}

// SetConditions sets field value
func (o *DimensionalManagementZoneRuleDto) SetConditions(v []DimensionalManagementZoneConditionDto) {
	o.Conditions = v
}

func (o DimensionalManagementZoneRuleDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["appliesTo"] = o.AppliesTo
	}
	if true {
		toSerialize["conditions"] = o.Conditions
	}
	return json.Marshal(toSerialize)
}

type NullableDimensionalManagementZoneRuleDto struct {
	value *DimensionalManagementZoneRuleDto
	isSet bool
}

func (v NullableDimensionalManagementZoneRuleDto) Get() *DimensionalManagementZoneRuleDto {
	return v.value
}

func (v *NullableDimensionalManagementZoneRuleDto) Set(val *DimensionalManagementZoneRuleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDimensionalManagementZoneRuleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDimensionalManagementZoneRuleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDimensionalManagementZoneRuleDto(val *DimensionalManagementZoneRuleDto) *NullableDimensionalManagementZoneRuleDto {
	return &NullableDimensionalManagementZoneRuleDto{value: val, isSet: true}
}

func (v NullableDimensionalManagementZoneRuleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDimensionalManagementZoneRuleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


