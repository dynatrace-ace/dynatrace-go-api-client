/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AzureCredentials Configuration of Azure app-level credentials.
type AzureCredentials struct {
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
	// The Dynatrace entity ID of the Azure credentials configuration.
	Id *string `json:"id,omitempty"`
	// The unique name of the Azure credentials configuration.   Allowed characters are letters, numbers, and spaces. Also the special characters `.+-_` are allowed.
	Label string `json:"label"`
	// The Application ID (also referred to as Client ID)   The combination of Application ID and Directory ID must be unique.
	AppId string `json:"appId"`
	// The Directory ID (also referred to as Tenant ID)   The combination of Application ID and Directory ID must be unique.
	DirectoryId string `json:"directoryId"`
	// The secret key associated with the Application ID.   For security reasons, GET requests return this field as `null`.    Submit your key on creation or update of the configuration. If the field is omitted during an update, the old value remains unaffected.
	Key *string `json:"key,omitempty"`
	// The monitoring is enabled (`true`) or disabled (`false`).   If not set on creation, the `true` value is used.   If the field is omitted during an update, the old value remains unaffected.
	Active *bool `json:"active,omitempty"`
	// The automatic capture of Azure tags is on (`true`) or off (`false`).
	AutoTagging bool `json:"autoTagging"`
	// Monitor only resources that have specified Azure tags (`true`) or all resources (`false`).
	MonitorOnlyTaggedEntities bool `json:"monitorOnlyTaggedEntities"`
	// A list of Azure tags to be monitored.   You can specify up to 10 tags. A resource tagged with *any* of the specified tags is monitored.   Only applicable when the **monitorOnlyTaggedEntities** parameter is set to `true`.
	MonitorOnlyTagPairs []CloudTag `json:"monitorOnlyTagPairs"`
	// A list of Azure supporting services to be monitored. For each service there's a sublist of its metrics and the metrics' dimensions that should be monitored. All of these elements (services, metrics, dimensions) must have corresponding static definitions on the server.
	SupportingServices *[]AzureSupportingService `json:"supportingServices,omitempty"`
}

// NewAzureCredentials instantiates a new AzureCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureCredentials(label string, appId string, directoryId string, autoTagging bool, monitorOnlyTaggedEntities bool, monitorOnlyTagPairs []CloudTag, ) *AzureCredentials {
	this := AzureCredentials{}
	this.Label = label
	this.AppId = appId
	this.DirectoryId = directoryId
	this.AutoTagging = autoTagging
	this.MonitorOnlyTaggedEntities = monitorOnlyTaggedEntities
	this.MonitorOnlyTagPairs = monitorOnlyTagPairs
	return &this
}

// NewAzureCredentialsWithDefaults instantiates a new AzureCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureCredentialsWithDefaults() *AzureCredentials {
	this := AzureCredentials{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *AzureCredentials) GetMetadata() ConfigurationMetadata {
	if o == nil || o.Metadata == nil {
		var ret ConfigurationMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCredentials) GetMetadataOk() (*ConfigurationMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AzureCredentials) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConfigurationMetadata and assigns it to the Metadata field.
func (o *AzureCredentials) SetMetadata(v ConfigurationMetadata) {
	o.Metadata = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AzureCredentials) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCredentials) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AzureCredentials) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AzureCredentials) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value
func (o *AzureCredentials) GetLabel() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *AzureCredentials) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *AzureCredentials) SetLabel(v string) {
	o.Label = v
}

// GetAppId returns the AppId field value
func (o *AzureCredentials) GetAppId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *AzureCredentials) GetAppIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *AzureCredentials) SetAppId(v string) {
	o.AppId = v
}

// GetDirectoryId returns the DirectoryId field value
func (o *AzureCredentials) GetDirectoryId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DirectoryId
}

// GetDirectoryIdOk returns a tuple with the DirectoryId field value
// and a boolean to check if the value has been set.
func (o *AzureCredentials) GetDirectoryIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DirectoryId, true
}

// SetDirectoryId sets field value
func (o *AzureCredentials) SetDirectoryId(v string) {
	o.DirectoryId = v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AzureCredentials) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCredentials) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AzureCredentials) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *AzureCredentials) SetKey(v string) {
	o.Key = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *AzureCredentials) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCredentials) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *AzureCredentials) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *AzureCredentials) SetActive(v bool) {
	o.Active = &v
}

// GetAutoTagging returns the AutoTagging field value
func (o *AzureCredentials) GetAutoTagging() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.AutoTagging
}

// GetAutoTaggingOk returns a tuple with the AutoTagging field value
// and a boolean to check if the value has been set.
func (o *AzureCredentials) GetAutoTaggingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AutoTagging, true
}

// SetAutoTagging sets field value
func (o *AzureCredentials) SetAutoTagging(v bool) {
	o.AutoTagging = v
}

// GetMonitorOnlyTaggedEntities returns the MonitorOnlyTaggedEntities field value
func (o *AzureCredentials) GetMonitorOnlyTaggedEntities() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.MonitorOnlyTaggedEntities
}

// GetMonitorOnlyTaggedEntitiesOk returns a tuple with the MonitorOnlyTaggedEntities field value
// and a boolean to check if the value has been set.
func (o *AzureCredentials) GetMonitorOnlyTaggedEntitiesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MonitorOnlyTaggedEntities, true
}

// SetMonitorOnlyTaggedEntities sets field value
func (o *AzureCredentials) SetMonitorOnlyTaggedEntities(v bool) {
	o.MonitorOnlyTaggedEntities = v
}

// GetMonitorOnlyTagPairs returns the MonitorOnlyTagPairs field value
func (o *AzureCredentials) GetMonitorOnlyTagPairs() []CloudTag {
	if o == nil  {
		var ret []CloudTag
		return ret
	}

	return o.MonitorOnlyTagPairs
}

// GetMonitorOnlyTagPairsOk returns a tuple with the MonitorOnlyTagPairs field value
// and a boolean to check if the value has been set.
func (o *AzureCredentials) GetMonitorOnlyTagPairsOk() (*[]CloudTag, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MonitorOnlyTagPairs, true
}

// SetMonitorOnlyTagPairs sets field value
func (o *AzureCredentials) SetMonitorOnlyTagPairs(v []CloudTag) {
	o.MonitorOnlyTagPairs = v
}

// GetSupportingServices returns the SupportingServices field value if set, zero value otherwise.
func (o *AzureCredentials) GetSupportingServices() []AzureSupportingService {
	if o == nil || o.SupportingServices == nil {
		var ret []AzureSupportingService
		return ret
	}
	return *o.SupportingServices
}

// GetSupportingServicesOk returns a tuple with the SupportingServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCredentials) GetSupportingServicesOk() (*[]AzureSupportingService, bool) {
	if o == nil || o.SupportingServices == nil {
		return nil, false
	}
	return o.SupportingServices, true
}

// HasSupportingServices returns a boolean if a field has been set.
func (o *AzureCredentials) HasSupportingServices() bool {
	if o != nil && o.SupportingServices != nil {
		return true
	}

	return false
}

// SetSupportingServices gets a reference to the given []AzureSupportingService and assigns it to the SupportingServices field.
func (o *AzureCredentials) SetSupportingServices(v []AzureSupportingService) {
	o.SupportingServices = &v
}

func (o AzureCredentials) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["appId"] = o.AppId
	}
	if true {
		toSerialize["directoryId"] = o.DirectoryId
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if true {
		toSerialize["autoTagging"] = o.AutoTagging
	}
	if true {
		toSerialize["monitorOnlyTaggedEntities"] = o.MonitorOnlyTaggedEntities
	}
	if true {
		toSerialize["monitorOnlyTagPairs"] = o.MonitorOnlyTagPairs
	}
	if o.SupportingServices != nil {
		toSerialize["supportingServices"] = o.SupportingServices
	}
	return json.Marshal(toSerialize)
}

type NullableAzureCredentials struct {
	value *AzureCredentials
	isSet bool
}

func (v NullableAzureCredentials) Get() *AzureCredentials {
	return v.value
}

func (v *NullableAzureCredentials) Set(val *AzureCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureCredentials(val *AzureCredentials) *NullableAzureCredentials {
	return &NullableAzureCredentials{value: val, isSet: true}
}

func (v NullableAzureCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


