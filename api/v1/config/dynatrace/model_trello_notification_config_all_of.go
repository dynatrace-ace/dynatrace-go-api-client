/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TrelloNotificationConfigAllOf struct for TrelloNotificationConfigAllOf
type TrelloNotificationConfigAllOf struct {
	// The application key for the Trello account.
	ApplicationKey *string `json:"applicationKey,omitempty"`
	// The application token for the Trello account.
	AuthorizationToken *string `json:"authorizationToken,omitempty"`
	// The Trello board to which the card should be assigned.
	BoardId *string `json:"boardId,omitempty"`
	// The Trello list to which the card should be assigned.
	ListId *string `json:"listId,omitempty"`
	// The Trello list to which the card of the resolved problem should be assigned.
	ResolvedListId *string `json:"resolvedListId,omitempty"`
	// The text of the generated Trello card.   You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Text *string `json:"text,omitempty"`
	// The description of the Trello card.    You can use same placeholders as in card text.
	Description *string `json:"description,omitempty"`
}

// NewTrelloNotificationConfigAllOf instantiates a new TrelloNotificationConfigAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrelloNotificationConfigAllOf() *TrelloNotificationConfigAllOf {
	this := TrelloNotificationConfigAllOf{}
	return &this
}

// NewTrelloNotificationConfigAllOfWithDefaults instantiates a new TrelloNotificationConfigAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrelloNotificationConfigAllOfWithDefaults() *TrelloNotificationConfigAllOf {
	this := TrelloNotificationConfigAllOf{}
	return &this
}

// GetApplicationKey returns the ApplicationKey field value if set, zero value otherwise.
func (o *TrelloNotificationConfigAllOf) GetApplicationKey() string {
	if o == nil || o.ApplicationKey == nil {
		var ret string
		return ret
	}
	return *o.ApplicationKey
}

// GetApplicationKeyOk returns a tuple with the ApplicationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfigAllOf) GetApplicationKeyOk() (*string, bool) {
	if o == nil || o.ApplicationKey == nil {
		return nil, false
	}
	return o.ApplicationKey, true
}

// HasApplicationKey returns a boolean if a field has been set.
func (o *TrelloNotificationConfigAllOf) HasApplicationKey() bool {
	if o != nil && o.ApplicationKey != nil {
		return true
	}

	return false
}

// SetApplicationKey gets a reference to the given string and assigns it to the ApplicationKey field.
func (o *TrelloNotificationConfigAllOf) SetApplicationKey(v string) {
	o.ApplicationKey = &v
}

// GetAuthorizationToken returns the AuthorizationToken field value if set, zero value otherwise.
func (o *TrelloNotificationConfigAllOf) GetAuthorizationToken() string {
	if o == nil || o.AuthorizationToken == nil {
		var ret string
		return ret
	}
	return *o.AuthorizationToken
}

// GetAuthorizationTokenOk returns a tuple with the AuthorizationToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfigAllOf) GetAuthorizationTokenOk() (*string, bool) {
	if o == nil || o.AuthorizationToken == nil {
		return nil, false
	}
	return o.AuthorizationToken, true
}

// HasAuthorizationToken returns a boolean if a field has been set.
func (o *TrelloNotificationConfigAllOf) HasAuthorizationToken() bool {
	if o != nil && o.AuthorizationToken != nil {
		return true
	}

	return false
}

// SetAuthorizationToken gets a reference to the given string and assigns it to the AuthorizationToken field.
func (o *TrelloNotificationConfigAllOf) SetAuthorizationToken(v string) {
	o.AuthorizationToken = &v
}

// GetBoardId returns the BoardId field value if set, zero value otherwise.
func (o *TrelloNotificationConfigAllOf) GetBoardId() string {
	if o == nil || o.BoardId == nil {
		var ret string
		return ret
	}
	return *o.BoardId
}

// GetBoardIdOk returns a tuple with the BoardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfigAllOf) GetBoardIdOk() (*string, bool) {
	if o == nil || o.BoardId == nil {
		return nil, false
	}
	return o.BoardId, true
}

// HasBoardId returns a boolean if a field has been set.
func (o *TrelloNotificationConfigAllOf) HasBoardId() bool {
	if o != nil && o.BoardId != nil {
		return true
	}

	return false
}

// SetBoardId gets a reference to the given string and assigns it to the BoardId field.
func (o *TrelloNotificationConfigAllOf) SetBoardId(v string) {
	o.BoardId = &v
}

// GetListId returns the ListId field value if set, zero value otherwise.
func (o *TrelloNotificationConfigAllOf) GetListId() string {
	if o == nil || o.ListId == nil {
		var ret string
		return ret
	}
	return *o.ListId
}

// GetListIdOk returns a tuple with the ListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfigAllOf) GetListIdOk() (*string, bool) {
	if o == nil || o.ListId == nil {
		return nil, false
	}
	return o.ListId, true
}

// HasListId returns a boolean if a field has been set.
func (o *TrelloNotificationConfigAllOf) HasListId() bool {
	if o != nil && o.ListId != nil {
		return true
	}

	return false
}

// SetListId gets a reference to the given string and assigns it to the ListId field.
func (o *TrelloNotificationConfigAllOf) SetListId(v string) {
	o.ListId = &v
}

// GetResolvedListId returns the ResolvedListId field value if set, zero value otherwise.
func (o *TrelloNotificationConfigAllOf) GetResolvedListId() string {
	if o == nil || o.ResolvedListId == nil {
		var ret string
		return ret
	}
	return *o.ResolvedListId
}

// GetResolvedListIdOk returns a tuple with the ResolvedListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfigAllOf) GetResolvedListIdOk() (*string, bool) {
	if o == nil || o.ResolvedListId == nil {
		return nil, false
	}
	return o.ResolvedListId, true
}

// HasResolvedListId returns a boolean if a field has been set.
func (o *TrelloNotificationConfigAllOf) HasResolvedListId() bool {
	if o != nil && o.ResolvedListId != nil {
		return true
	}

	return false
}

// SetResolvedListId gets a reference to the given string and assigns it to the ResolvedListId field.
func (o *TrelloNotificationConfigAllOf) SetResolvedListId(v string) {
	o.ResolvedListId = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *TrelloNotificationConfigAllOf) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfigAllOf) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *TrelloNotificationConfigAllOf) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *TrelloNotificationConfigAllOf) SetText(v string) {
	o.Text = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TrelloNotificationConfigAllOf) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrelloNotificationConfigAllOf) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TrelloNotificationConfigAllOf) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TrelloNotificationConfigAllOf) SetDescription(v string) {
	o.Description = &v
}

func (o TrelloNotificationConfigAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplicationKey != nil {
		toSerialize["applicationKey"] = o.ApplicationKey
	}
	if o.AuthorizationToken != nil {
		toSerialize["authorizationToken"] = o.AuthorizationToken
	}
	if o.BoardId != nil {
		toSerialize["boardId"] = o.BoardId
	}
	if o.ListId != nil {
		toSerialize["listId"] = o.ListId
	}
	if o.ResolvedListId != nil {
		toSerialize["resolvedListId"] = o.ResolvedListId
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableTrelloNotificationConfigAllOf struct {
	value *TrelloNotificationConfigAllOf
	isSet bool
}

func (v NullableTrelloNotificationConfigAllOf) Get() *TrelloNotificationConfigAllOf {
	return v.value
}

func (v *NullableTrelloNotificationConfigAllOf) Set(val *TrelloNotificationConfigAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTrelloNotificationConfigAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTrelloNotificationConfigAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrelloNotificationConfigAllOf(val *TrelloNotificationConfigAllOf) *NullableTrelloNotificationConfigAllOf {
	return &NullableTrelloNotificationConfigAllOf{value: val, isSet: true}
}

func (v NullableTrelloNotificationConfigAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrelloNotificationConfigAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


