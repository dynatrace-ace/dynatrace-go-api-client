/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Condition A condition of a rule usage.
type Condition struct {
	// The attribute to be matched.
	Attribute string `json:"attribute"`
	ComparisonInfo ComparisonInfo `json:"comparisonInfo"`
}

// NewCondition instantiates a new Condition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCondition(attribute string, comparisonInfo ComparisonInfo, ) *Condition {
	this := Condition{}
	this.Attribute = attribute
	this.ComparisonInfo = comparisonInfo
	return &this
}

// NewConditionWithDefaults instantiates a new Condition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionWithDefaults() *Condition {
	this := Condition{}
	return &this
}

// GetAttribute returns the Attribute field value
func (o *Condition) GetAttribute() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Attribute
}

// GetAttributeOk returns a tuple with the Attribute field value
// and a boolean to check if the value has been set.
func (o *Condition) GetAttributeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Attribute, true
}

// SetAttribute sets field value
func (o *Condition) SetAttribute(v string) {
	o.Attribute = v
}

// GetComparisonInfo returns the ComparisonInfo field value
func (o *Condition) GetComparisonInfo() ComparisonInfo {
	if o == nil  {
		var ret ComparisonInfo
		return ret
	}

	return o.ComparisonInfo
}

// GetComparisonInfoOk returns a tuple with the ComparisonInfo field value
// and a boolean to check if the value has been set.
func (o *Condition) GetComparisonInfoOk() (*ComparisonInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ComparisonInfo, true
}

// SetComparisonInfo sets field value
func (o *Condition) SetComparisonInfo(v ComparisonInfo) {
	o.ComparisonInfo = v
}

func (o Condition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["attribute"] = o.Attribute
	}
	if true {
		toSerialize["comparisonInfo"] = o.ComparisonInfo
	}
	return json.Marshal(toSerialize)
}

type NullableCondition struct {
	value *Condition
	isSet bool
}

func (v NullableCondition) Get() *Condition {
	return v.value
}

func (v *NullableCondition) Set(val *Condition) {
	v.value = val
	v.isSet = true
}

func (v NullableCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCondition(val *Condition) *NullableCondition {
	return &NullableCondition{value: val, isSet: true}
}

func (v NullableCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


