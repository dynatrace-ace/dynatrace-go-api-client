/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AutoTag Configuration of an auto-tag. It defines the conditions of tag usage and the tag value.
type AutoTag struct {
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
	// The ID of the auto-tag.
	Id *string `json:"id,omitempty"`
	// The name of the auto-tag, which is applied to entities.   Additionally you can specify a **valueFormat** in the tag rule. In that case the tag is used in the `name:valueFormat` format.   For example you can extend the `Infrastructure` tag to `Infrastructure:Windows` and `Infrastructure:Linux`.
	Name string `json:"name"`
	// The list of rules for tag usage.   When there are multiple rules, the OR logic applies.
	Rules *[]AutoTagRule `json:"rules,omitempty"`
}

// NewAutoTag instantiates a new AutoTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutoTag(name string, ) *AutoTag {
	this := AutoTag{}
	this.Name = name
	return &this
}

// NewAutoTagWithDefaults instantiates a new AutoTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutoTagWithDefaults() *AutoTag {
	this := AutoTag{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *AutoTag) GetMetadata() ConfigurationMetadata {
	if o == nil || o.Metadata == nil {
		var ret ConfigurationMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoTag) GetMetadataOk() (*ConfigurationMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *AutoTag) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConfigurationMetadata and assigns it to the Metadata field.
func (o *AutoTag) SetMetadata(v ConfigurationMetadata) {
	o.Metadata = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AutoTag) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoTag) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AutoTag) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AutoTag) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *AutoTag) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AutoTag) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AutoTag) SetName(v string) {
	o.Name = v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *AutoTag) GetRules() []AutoTagRule {
	if o == nil || o.Rules == nil {
		var ret []AutoTagRule
		return ret
	}
	return *o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutoTag) GetRulesOk() (*[]AutoTagRule, bool) {
	if o == nil || o.Rules == nil {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *AutoTag) HasRules() bool {
	if o != nil && o.Rules != nil {
		return true
	}

	return false
}

// SetRules gets a reference to the given []AutoTagRule and assigns it to the Rules field.
func (o *AutoTag) SetRules(v []AutoTagRule) {
	o.Rules = &v
}

func (o AutoTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return json.Marshal(toSerialize)
}

type NullableAutoTag struct {
	value *AutoTag
	isSet bool
}

func (v NullableAutoTag) Get() *AutoTag {
	return v.value
}

func (v *NullableAutoTag) Set(val *AutoTag) {
	v.value = val
	v.isSet = true
}

func (v NullableAutoTag) IsSet() bool {
	return v.isSet
}

func (v *NullableAutoTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutoTag(val *AutoTag) *NullableAutoTag {
	return &NullableAutoTag{value: val, isSet: true}
}

func (v NullableAutoTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutoTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


