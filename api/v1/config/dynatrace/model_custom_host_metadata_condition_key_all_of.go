/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CustomHostMetadataConditionKeyAllOf struct for CustomHostMetadataConditionKeyAllOf
type CustomHostMetadataConditionKeyAllOf struct {
	DynamicKey *CustomHostMetadataKey `json:"dynamicKey,omitempty"`
}

// NewCustomHostMetadataConditionKeyAllOf instantiates a new CustomHostMetadataConditionKeyAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomHostMetadataConditionKeyAllOf() *CustomHostMetadataConditionKeyAllOf {
	this := CustomHostMetadataConditionKeyAllOf{}
	return &this
}

// NewCustomHostMetadataConditionKeyAllOfWithDefaults instantiates a new CustomHostMetadataConditionKeyAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomHostMetadataConditionKeyAllOfWithDefaults() *CustomHostMetadataConditionKeyAllOf {
	this := CustomHostMetadataConditionKeyAllOf{}
	return &this
}

// GetDynamicKey returns the DynamicKey field value if set, zero value otherwise.
func (o *CustomHostMetadataConditionKeyAllOf) GetDynamicKey() CustomHostMetadataKey {
	if o == nil || o.DynamicKey == nil {
		var ret CustomHostMetadataKey
		return ret
	}
	return *o.DynamicKey
}

// GetDynamicKeyOk returns a tuple with the DynamicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomHostMetadataConditionKeyAllOf) GetDynamicKeyOk() (*CustomHostMetadataKey, bool) {
	if o == nil || o.DynamicKey == nil {
		return nil, false
	}
	return o.DynamicKey, true
}

// HasDynamicKey returns a boolean if a field has been set.
func (o *CustomHostMetadataConditionKeyAllOf) HasDynamicKey() bool {
	if o != nil && o.DynamicKey != nil {
		return true
	}

	return false
}

// SetDynamicKey gets a reference to the given CustomHostMetadataKey and assigns it to the DynamicKey field.
func (o *CustomHostMetadataConditionKeyAllOf) SetDynamicKey(v CustomHostMetadataKey) {
	o.DynamicKey = &v
}

func (o CustomHostMetadataConditionKeyAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DynamicKey != nil {
		toSerialize["dynamicKey"] = o.DynamicKey
	}
	return json.Marshal(toSerialize)
}

type NullableCustomHostMetadataConditionKeyAllOf struct {
	value *CustomHostMetadataConditionKeyAllOf
	isSet bool
}

func (v NullableCustomHostMetadataConditionKeyAllOf) Get() *CustomHostMetadataConditionKeyAllOf {
	return v.value
}

func (v *NullableCustomHostMetadataConditionKeyAllOf) Set(val *CustomHostMetadataConditionKeyAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomHostMetadataConditionKeyAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomHostMetadataConditionKeyAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomHostMetadataConditionKeyAllOf(val *CustomHostMetadataConditionKeyAllOf) *NullableCustomHostMetadataConditionKeyAllOf {
	return &NullableCustomHostMetadataConditionKeyAllOf{value: val, isSet: true}
}

func (v NullableCustomHostMetadataConditionKeyAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomHostMetadataConditionKeyAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


