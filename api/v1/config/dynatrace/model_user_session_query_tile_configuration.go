/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UserSessionQueryTileConfiguration Configuration of a User session query visualization tile.
type UserSessionQueryTileConfiguration struct {
	// The axis bucketing when enabled groups similar series in the same virtual axis.
	HasAxisBucketing *bool `json:"hasAxisBucketing,omitempty"`
}

// NewUserSessionQueryTileConfiguration instantiates a new UserSessionQueryTileConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSessionQueryTileConfiguration() *UserSessionQueryTileConfiguration {
	this := UserSessionQueryTileConfiguration{}
	return &this
}

// NewUserSessionQueryTileConfigurationWithDefaults instantiates a new UserSessionQueryTileConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSessionQueryTileConfigurationWithDefaults() *UserSessionQueryTileConfiguration {
	this := UserSessionQueryTileConfiguration{}
	return &this
}

// GetHasAxisBucketing returns the HasAxisBucketing field value if set, zero value otherwise.
func (o *UserSessionQueryTileConfiguration) GetHasAxisBucketing() bool {
	if o == nil || o.HasAxisBucketing == nil {
		var ret bool
		return ret
	}
	return *o.HasAxisBucketing
}

// GetHasAxisBucketingOk returns a tuple with the HasAxisBucketing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionQueryTileConfiguration) GetHasAxisBucketingOk() (*bool, bool) {
	if o == nil || o.HasAxisBucketing == nil {
		return nil, false
	}
	return o.HasAxisBucketing, true
}

// HasHasAxisBucketing returns a boolean if a field has been set.
func (o *UserSessionQueryTileConfiguration) HasHasAxisBucketing() bool {
	if o != nil && o.HasAxisBucketing != nil {
		return true
	}

	return false
}

// SetHasAxisBucketing gets a reference to the given bool and assigns it to the HasAxisBucketing field.
func (o *UserSessionQueryTileConfiguration) SetHasAxisBucketing(v bool) {
	o.HasAxisBucketing = &v
}

func (o UserSessionQueryTileConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HasAxisBucketing != nil {
		toSerialize["hasAxisBucketing"] = o.HasAxisBucketing
	}
	return json.Marshal(toSerialize)
}

type NullableUserSessionQueryTileConfiguration struct {
	value *UserSessionQueryTileConfiguration
	isSet bool
}

func (v NullableUserSessionQueryTileConfiguration) Get() *UserSessionQueryTileConfiguration {
	return v.value
}

func (v *NullableUserSessionQueryTileConfiguration) Set(val *UserSessionQueryTileConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSessionQueryTileConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSessionQueryTileConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSessionQueryTileConfiguration(val *UserSessionQueryTileConfiguration) *NullableUserSessionQueryTileConfiguration {
	return &NullableUserSessionQueryTileConfiguration{value: val, isSet: true}
}

func (v NullableUserSessionQueryTileConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSessionQueryTileConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


