/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MetricEventEntityDimensionsAllOf struct for MetricEventEntityDimensionsAllOf
type MetricEventEntityDimensionsAllOf struct {
	NameFilter *MetricEventTextFilterMetricEventDimensionsFilterOperatorDto `json:"nameFilter,omitempty"`
}

// NewMetricEventEntityDimensionsAllOf instantiates a new MetricEventEntityDimensionsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricEventEntityDimensionsAllOf() *MetricEventEntityDimensionsAllOf {
	this := MetricEventEntityDimensionsAllOf{}
	return &this
}

// NewMetricEventEntityDimensionsAllOfWithDefaults instantiates a new MetricEventEntityDimensionsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricEventEntityDimensionsAllOfWithDefaults() *MetricEventEntityDimensionsAllOf {
	this := MetricEventEntityDimensionsAllOf{}
	return &this
}

// GetNameFilter returns the NameFilter field value if set, zero value otherwise.
func (o *MetricEventEntityDimensionsAllOf) GetNameFilter() MetricEventTextFilterMetricEventDimensionsFilterOperatorDto {
	if o == nil || o.NameFilter == nil {
		var ret MetricEventTextFilterMetricEventDimensionsFilterOperatorDto
		return ret
	}
	return *o.NameFilter
}

// GetNameFilterOk returns a tuple with the NameFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricEventEntityDimensionsAllOf) GetNameFilterOk() (*MetricEventTextFilterMetricEventDimensionsFilterOperatorDto, bool) {
	if o == nil || o.NameFilter == nil {
		return nil, false
	}
	return o.NameFilter, true
}

// HasNameFilter returns a boolean if a field has been set.
func (o *MetricEventEntityDimensionsAllOf) HasNameFilter() bool {
	if o != nil && o.NameFilter != nil {
		return true
	}

	return false
}

// SetNameFilter gets a reference to the given MetricEventTextFilterMetricEventDimensionsFilterOperatorDto and assigns it to the NameFilter field.
func (o *MetricEventEntityDimensionsAllOf) SetNameFilter(v MetricEventTextFilterMetricEventDimensionsFilterOperatorDto) {
	o.NameFilter = &v
}

func (o MetricEventEntityDimensionsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NameFilter != nil {
		toSerialize["nameFilter"] = o.NameFilter
	}
	return json.Marshal(toSerialize)
}

type NullableMetricEventEntityDimensionsAllOf struct {
	value *MetricEventEntityDimensionsAllOf
	isSet bool
}

func (v NullableMetricEventEntityDimensionsAllOf) Get() *MetricEventEntityDimensionsAllOf {
	return v.value
}

func (v *NullableMetricEventEntityDimensionsAllOf) Set(val *MetricEventEntityDimensionsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricEventEntityDimensionsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricEventEntityDimensionsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricEventEntityDimensionsAllOf(val *MetricEventEntityDimensionsAllOf) *NullableMetricEventEntityDimensionsAllOf {
	return &NullableMetricEventEntityDimensionsAllOf{value: val, isSet: true}
}

func (v NullableMetricEventEntityDimensionsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricEventEntityDimensionsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


