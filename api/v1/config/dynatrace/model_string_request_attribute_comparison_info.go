/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// StringRequestAttributeComparisonInfo Comparison for `STRING_REQUEST_ATTRIBUTE` attributes, specifically of the **String** type.
type StringRequestAttributeComparisonInfo struct {
	ComparisonInfo
	// Operator of the comparision. You can reverse it by setting **negate** to `true`.
	Comparison string `json:"comparison"`
	// The value to compare to.
	Value *string `json:"value,omitempty"`
	RequestAttribute string `json:"requestAttribute"`
	// The comparison is case-sensitive (`true`) or not case-sensitive (`false`).
	CaseSensitive *bool `json:"caseSensitive,omitempty"`
	// If `true`, the request attribute is matched on child service calls.    Default is `false`.
	MatchOnChildCalls *bool `json:"matchOnChildCalls,omitempty"`
	Source *PropagationSource `json:"source,omitempty"`
}

// NewStringRequestAttributeComparisonInfo instantiates a new StringRequestAttributeComparisonInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStringRequestAttributeComparisonInfo(comparison string, requestAttribute string, ) *StringRequestAttributeComparisonInfo {
	this := StringRequestAttributeComparisonInfo{}
	this.Comparison = comparison
	this.RequestAttribute = requestAttribute
	return &this
}

// NewStringRequestAttributeComparisonInfoWithDefaults instantiates a new StringRequestAttributeComparisonInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStringRequestAttributeComparisonInfoWithDefaults() *StringRequestAttributeComparisonInfo {
	this := StringRequestAttributeComparisonInfo{}
	return &this
}

// GetComparison returns the Comparison field value
func (o *StringRequestAttributeComparisonInfo) GetComparison() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Comparison
}

// GetComparisonOk returns a tuple with the Comparison field value
// and a boolean to check if the value has been set.
func (o *StringRequestAttributeComparisonInfo) GetComparisonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Comparison, true
}

// SetComparison sets field value
func (o *StringRequestAttributeComparisonInfo) SetComparison(v string) {
	o.Comparison = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *StringRequestAttributeComparisonInfo) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringRequestAttributeComparisonInfo) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *StringRequestAttributeComparisonInfo) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *StringRequestAttributeComparisonInfo) SetValue(v string) {
	o.Value = &v
}

// GetRequestAttribute returns the RequestAttribute field value
func (o *StringRequestAttributeComparisonInfo) GetRequestAttribute() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.RequestAttribute
}

// GetRequestAttributeOk returns a tuple with the RequestAttribute field value
// and a boolean to check if the value has been set.
func (o *StringRequestAttributeComparisonInfo) GetRequestAttributeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestAttribute, true
}

// SetRequestAttribute sets field value
func (o *StringRequestAttributeComparisonInfo) SetRequestAttribute(v string) {
	o.RequestAttribute = v
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *StringRequestAttributeComparisonInfo) GetCaseSensitive() bool {
	if o == nil || o.CaseSensitive == nil {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringRequestAttributeComparisonInfo) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || o.CaseSensitive == nil {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *StringRequestAttributeComparisonInfo) HasCaseSensitive() bool {
	if o != nil && o.CaseSensitive != nil {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *StringRequestAttributeComparisonInfo) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

// GetMatchOnChildCalls returns the MatchOnChildCalls field value if set, zero value otherwise.
func (o *StringRequestAttributeComparisonInfo) GetMatchOnChildCalls() bool {
	if o == nil || o.MatchOnChildCalls == nil {
		var ret bool
		return ret
	}
	return *o.MatchOnChildCalls
}

// GetMatchOnChildCallsOk returns a tuple with the MatchOnChildCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringRequestAttributeComparisonInfo) GetMatchOnChildCallsOk() (*bool, bool) {
	if o == nil || o.MatchOnChildCalls == nil {
		return nil, false
	}
	return o.MatchOnChildCalls, true
}

// HasMatchOnChildCalls returns a boolean if a field has been set.
func (o *StringRequestAttributeComparisonInfo) HasMatchOnChildCalls() bool {
	if o != nil && o.MatchOnChildCalls != nil {
		return true
	}

	return false
}

// SetMatchOnChildCalls gets a reference to the given bool and assigns it to the MatchOnChildCalls field.
func (o *StringRequestAttributeComparisonInfo) SetMatchOnChildCalls(v bool) {
	o.MatchOnChildCalls = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *StringRequestAttributeComparisonInfo) GetSource() PropagationSource {
	if o == nil || o.Source == nil {
		var ret PropagationSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StringRequestAttributeComparisonInfo) GetSourceOk() (*PropagationSource, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *StringRequestAttributeComparisonInfo) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given PropagationSource and assigns it to the Source field.
func (o *StringRequestAttributeComparisonInfo) SetSource(v PropagationSource) {
	o.Source = &v
}

func (o StringRequestAttributeComparisonInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedComparisonInfo, errComparisonInfo := json.Marshal(o.ComparisonInfo)
	if errComparisonInfo != nil {
		return []byte{}, errComparisonInfo
	}
	errComparisonInfo = json.Unmarshal([]byte(serializedComparisonInfo), &toSerialize)
	if errComparisonInfo != nil {
		return []byte{}, errComparisonInfo
	}
	if true {
		toSerialize["comparison"] = o.Comparison
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["requestAttribute"] = o.RequestAttribute
	}
	if o.CaseSensitive != nil {
		toSerialize["caseSensitive"] = o.CaseSensitive
	}
	if o.MatchOnChildCalls != nil {
		toSerialize["matchOnChildCalls"] = o.MatchOnChildCalls
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	return json.Marshal(toSerialize)
}

type NullableStringRequestAttributeComparisonInfo struct {
	value *StringRequestAttributeComparisonInfo
	isSet bool
}

func (v NullableStringRequestAttributeComparisonInfo) Get() *StringRequestAttributeComparisonInfo {
	return v.value
}

func (v *NullableStringRequestAttributeComparisonInfo) Set(val *StringRequestAttributeComparisonInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableStringRequestAttributeComparisonInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableStringRequestAttributeComparisonInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStringRequestAttributeComparisonInfo(val *StringRequestAttributeComparisonInfo) *NullableStringRequestAttributeComparisonInfo {
	return &NullableStringRequestAttributeComparisonInfo{value: val, isSet: true}
}

func (v NullableStringRequestAttributeComparisonInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStringRequestAttributeComparisonInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


