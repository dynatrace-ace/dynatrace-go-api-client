/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CalculatedSyntheticMetric Definition of the calculated synthetic metric.
type CalculatedSyntheticMetric struct {
	// The Dynatrace entity ID of the synthetic monitor to which the metric belongs.
	MonitorIdentifier string `json:"monitorIdentifier"`
	// The name of the metric, displayed in the UI.
	Name string `json:"name"`
	// The unique key of the metric.    The key must have the `calc:synthetic` prefix.
	MetricKey string `json:"metricKey"`
	// The metric is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	// The type of the synthetic metric.
	Metric string `json:"metric"`
	// A list of metric dimensions.
	Dimensions *[]SyntheticMetricDimension `json:"dimensions,omitempty"`
	Filter *SyntheticMetricFilter `json:"filter,omitempty"`
}

// NewCalculatedSyntheticMetric instantiates a new CalculatedSyntheticMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalculatedSyntheticMetric(monitorIdentifier string, name string, metricKey string, enabled bool, metric string, ) *CalculatedSyntheticMetric {
	this := CalculatedSyntheticMetric{}
	this.MonitorIdentifier = monitorIdentifier
	this.Name = name
	this.MetricKey = metricKey
	this.Enabled = enabled
	this.Metric = metric
	return &this
}

// NewCalculatedSyntheticMetricWithDefaults instantiates a new CalculatedSyntheticMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalculatedSyntheticMetricWithDefaults() *CalculatedSyntheticMetric {
	this := CalculatedSyntheticMetric{}
	return &this
}

// GetMonitorIdentifier returns the MonitorIdentifier field value
func (o *CalculatedSyntheticMetric) GetMonitorIdentifier() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.MonitorIdentifier
}

// GetMonitorIdentifierOk returns a tuple with the MonitorIdentifier field value
// and a boolean to check if the value has been set.
func (o *CalculatedSyntheticMetric) GetMonitorIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MonitorIdentifier, true
}

// SetMonitorIdentifier sets field value
func (o *CalculatedSyntheticMetric) SetMonitorIdentifier(v string) {
	o.MonitorIdentifier = v
}

// GetName returns the Name field value
func (o *CalculatedSyntheticMetric) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CalculatedSyntheticMetric) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CalculatedSyntheticMetric) SetName(v string) {
	o.Name = v
}

// GetMetricKey returns the MetricKey field value
func (o *CalculatedSyntheticMetric) GetMetricKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.MetricKey
}

// GetMetricKeyOk returns a tuple with the MetricKey field value
// and a boolean to check if the value has been set.
func (o *CalculatedSyntheticMetric) GetMetricKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MetricKey, true
}

// SetMetricKey sets field value
func (o *CalculatedSyntheticMetric) SetMetricKey(v string) {
	o.MetricKey = v
}

// GetEnabled returns the Enabled field value
func (o *CalculatedSyntheticMetric) GetEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *CalculatedSyntheticMetric) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *CalculatedSyntheticMetric) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMetric returns the Metric field value
func (o *CalculatedSyntheticMetric) GetMetric() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *CalculatedSyntheticMetric) GetMetricOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *CalculatedSyntheticMetric) SetMetric(v string) {
	o.Metric = v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *CalculatedSyntheticMetric) GetDimensions() []SyntheticMetricDimension {
	if o == nil || o.Dimensions == nil {
		var ret []SyntheticMetricDimension
		return ret
	}
	return *o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedSyntheticMetric) GetDimensionsOk() (*[]SyntheticMetricDimension, bool) {
	if o == nil || o.Dimensions == nil {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *CalculatedSyntheticMetric) HasDimensions() bool {
	if o != nil && o.Dimensions != nil {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given []SyntheticMetricDimension and assigns it to the Dimensions field.
func (o *CalculatedSyntheticMetric) SetDimensions(v []SyntheticMetricDimension) {
	o.Dimensions = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *CalculatedSyntheticMetric) GetFilter() SyntheticMetricFilter {
	if o == nil || o.Filter == nil {
		var ret SyntheticMetricFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalculatedSyntheticMetric) GetFilterOk() (*SyntheticMetricFilter, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *CalculatedSyntheticMetric) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given SyntheticMetricFilter and assigns it to the Filter field.
func (o *CalculatedSyntheticMetric) SetFilter(v SyntheticMetricFilter) {
	o.Filter = &v
}

func (o CalculatedSyntheticMetric) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["monitorIdentifier"] = o.MonitorIdentifier
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["metricKey"] = o.MetricKey
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["metric"] = o.Metric
	}
	if o.Dimensions != nil {
		toSerialize["dimensions"] = o.Dimensions
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	return json.Marshal(toSerialize)
}

type NullableCalculatedSyntheticMetric struct {
	value *CalculatedSyntheticMetric
	isSet bool
}

func (v NullableCalculatedSyntheticMetric) Get() *CalculatedSyntheticMetric {
	return v.value
}

func (v *NullableCalculatedSyntheticMetric) Set(val *CalculatedSyntheticMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculatedSyntheticMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculatedSyntheticMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculatedSyntheticMetric(val *CalculatedSyntheticMetric) *NullableCalculatedSyntheticMetric {
	return &NullableCalculatedSyntheticMetric{value: val, isSet: true}
}

func (v NullableCalculatedSyntheticMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculatedSyntheticMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


