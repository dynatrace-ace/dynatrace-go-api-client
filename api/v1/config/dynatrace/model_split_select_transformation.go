/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SplitSelectTransformation The transformation of the `SPLIT_SELECT` type.   The transformation splits the detected value into an array and keeps the specified element of the array.
type SplitSelectTransformation struct {
	TransformationBase
	// The delimiter for splitting the detected value. The delimiter itself is not kept.
	Delimiter string `json:"delimiter"`
	// The index of the element in the split array to be used. Indexing starts with `1`.
	ItemIndex int32 `json:"itemIndex"`
}

// NewSplitSelectTransformation instantiates a new SplitSelectTransformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplitSelectTransformation(delimiter string, itemIndex int32, ) *SplitSelectTransformation {
	this := SplitSelectTransformation{}
	this.Delimiter = delimiter
	this.ItemIndex = itemIndex
	return &this
}

// NewSplitSelectTransformationWithDefaults instantiates a new SplitSelectTransformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplitSelectTransformationWithDefaults() *SplitSelectTransformation {
	this := SplitSelectTransformation{}
	return &this
}

// GetDelimiter returns the Delimiter field value
func (o *SplitSelectTransformation) GetDelimiter() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value
// and a boolean to check if the value has been set.
func (o *SplitSelectTransformation) GetDelimiterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Delimiter, true
}

// SetDelimiter sets field value
func (o *SplitSelectTransformation) SetDelimiter(v string) {
	o.Delimiter = v
}

// GetItemIndex returns the ItemIndex field value
func (o *SplitSelectTransformation) GetItemIndex() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.ItemIndex
}

// GetItemIndexOk returns a tuple with the ItemIndex field value
// and a boolean to check if the value has been set.
func (o *SplitSelectTransformation) GetItemIndexOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ItemIndex, true
}

// SetItemIndex sets field value
func (o *SplitSelectTransformation) SetItemIndex(v int32) {
	o.ItemIndex = v
}

func (o SplitSelectTransformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTransformationBase, errTransformationBase := json.Marshal(o.TransformationBase)
	if errTransformationBase != nil {
		return []byte{}, errTransformationBase
	}
	errTransformationBase = json.Unmarshal([]byte(serializedTransformationBase), &toSerialize)
	if errTransformationBase != nil {
		return []byte{}, errTransformationBase
	}
	if true {
		toSerialize["delimiter"] = o.Delimiter
	}
	if true {
		toSerialize["itemIndex"] = o.ItemIndex
	}
	return json.Marshal(toSerialize)
}

type NullableSplitSelectTransformation struct {
	value *SplitSelectTransformation
	isSet bool
}

func (v NullableSplitSelectTransformation) Get() *SplitSelectTransformation {
	return v.value
}

func (v *NullableSplitSelectTransformation) Set(val *SplitSelectTransformation) {
	v.value = val
	v.isSet = true
}

func (v NullableSplitSelectTransformation) IsSet() bool {
	return v.isSet
}

func (v *NullableSplitSelectTransformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplitSelectTransformation(val *SplitSelectTransformation) *NullableSplitSelectTransformation {
	return &NullableSplitSelectTransformation{value: val, isSet: true}
}

func (v NullableSplitSelectTransformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplitSelectTransformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


