/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ApplicationDataPrivacyList struct for ApplicationDataPrivacyList
type ApplicationDataPrivacyList struct {
	Metadata *ConfigurationMetadata `json:"metadata,omitempty"`
	Values *[]ApplicationDataPrivacy `json:"values,omitempty"`
}

// NewApplicationDataPrivacyList instantiates a new ApplicationDataPrivacyList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationDataPrivacyList() *ApplicationDataPrivacyList {
	this := ApplicationDataPrivacyList{}
	return &this
}

// NewApplicationDataPrivacyListWithDefaults instantiates a new ApplicationDataPrivacyList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationDataPrivacyListWithDefaults() *ApplicationDataPrivacyList {
	this := ApplicationDataPrivacyList{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ApplicationDataPrivacyList) GetMetadata() ConfigurationMetadata {
	if o == nil || o.Metadata == nil {
		var ret ConfigurationMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDataPrivacyList) GetMetadataOk() (*ConfigurationMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ApplicationDataPrivacyList) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ConfigurationMetadata and assigns it to the Metadata field.
func (o *ApplicationDataPrivacyList) SetMetadata(v ConfigurationMetadata) {
	o.Metadata = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ApplicationDataPrivacyList) GetValues() []ApplicationDataPrivacy {
	if o == nil || o.Values == nil {
		var ret []ApplicationDataPrivacy
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationDataPrivacyList) GetValuesOk() (*[]ApplicationDataPrivacy, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ApplicationDataPrivacyList) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []ApplicationDataPrivacy and assigns it to the Values field.
func (o *ApplicationDataPrivacyList) SetValues(v []ApplicationDataPrivacy) {
	o.Values = &v
}

func (o ApplicationDataPrivacyList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationDataPrivacyList struct {
	value *ApplicationDataPrivacyList
	isSet bool
}

func (v NullableApplicationDataPrivacyList) Get() *ApplicationDataPrivacyList {
	return v.value
}

func (v *NullableApplicationDataPrivacyList) Set(val *ApplicationDataPrivacyList) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationDataPrivacyList) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationDataPrivacyList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationDataPrivacyList(val *ApplicationDataPrivacyList) *NullableApplicationDataPrivacyList {
	return &NullableApplicationDataPrivacyList{value: val, isSet: true}
}

func (v NullableApplicationDataPrivacyList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationDataPrivacyList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


