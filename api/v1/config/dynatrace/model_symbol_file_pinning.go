/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SymbolFilePinning struct for SymbolFilePinning
type SymbolFilePinning struct {
	// New setting for file pinning. True to pin the file, false to unpin the file
	Pinned bool `json:"pinned"`
}

// NewSymbolFilePinning instantiates a new SymbolFilePinning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSymbolFilePinning(pinned bool, ) *SymbolFilePinning {
	this := SymbolFilePinning{}
	this.Pinned = pinned
	return &this
}

// NewSymbolFilePinningWithDefaults instantiates a new SymbolFilePinning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSymbolFilePinningWithDefaults() *SymbolFilePinning {
	this := SymbolFilePinning{}
	return &this
}

// GetPinned returns the Pinned field value
func (o *SymbolFilePinning) GetPinned() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value
// and a boolean to check if the value has been set.
func (o *SymbolFilePinning) GetPinnedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Pinned, true
}

// SetPinned sets field value
func (o *SymbolFilePinning) SetPinned(v bool) {
	o.Pinned = v
}

func (o SymbolFilePinning) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pinned"] = o.Pinned
	}
	return json.Marshal(toSerialize)
}

type NullableSymbolFilePinning struct {
	value *SymbolFilePinning
	isSet bool
}

func (v NullableSymbolFilePinning) Get() *SymbolFilePinning {
	return v.value
}

func (v *NullableSymbolFilePinning) Set(val *SymbolFilePinning) {
	v.value = val
	v.isSet = true
}

func (v NullableSymbolFilePinning) IsSet() bool {
	return v.isSet
}

func (v *NullableSymbolFilePinning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSymbolFilePinning(val *SymbolFilePinning) *NullableSymbolFilePinning {
	return &NullableSymbolFilePinning{value: val, isSet: true}
}

func (v NullableSymbolFilePinning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSymbolFilePinning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


