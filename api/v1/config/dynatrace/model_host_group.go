/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// HostGroup Host group to which the host belongs.
type HostGroup struct {
	// The Dynatrace entity ID of the host group.
	MeId *string `json:"meId,omitempty"`
	// The name of the Dynatrace entity, displayed in the UI.
	Name *string `json:"name,omitempty"`
}

// NewHostGroup instantiates a new HostGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostGroup() *HostGroup {
	this := HostGroup{}
	return &this
}

// NewHostGroupWithDefaults instantiates a new HostGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostGroupWithDefaults() *HostGroup {
	this := HostGroup{}
	return &this
}

// GetMeId returns the MeId field value if set, zero value otherwise.
func (o *HostGroup) GetMeId() string {
	if o == nil || o.MeId == nil {
		var ret string
		return ret
	}
	return *o.MeId
}

// GetMeIdOk returns a tuple with the MeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostGroup) GetMeIdOk() (*string, bool) {
	if o == nil || o.MeId == nil {
		return nil, false
	}
	return o.MeId, true
}

// HasMeId returns a boolean if a field has been set.
func (o *HostGroup) HasMeId() bool {
	if o != nil && o.MeId != nil {
		return true
	}

	return false
}

// SetMeId gets a reference to the given string and assigns it to the MeId field.
func (o *HostGroup) SetMeId(v string) {
	o.MeId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HostGroup) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostGroup) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HostGroup) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HostGroup) SetName(v string) {
	o.Name = &v
}

func (o HostGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MeId != nil {
		toSerialize["meId"] = o.MeId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableHostGroup struct {
	value *HostGroup
	isSet bool
}

func (v NullableHostGroup) Get() *HostGroup {
	return v.value
}

func (v *NullableHostGroup) Set(val *HostGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableHostGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableHostGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostGroup(val *HostGroup) *NullableHostGroup {
	return &NullableHostGroup{value: val, isSet: true}
}

func (v NullableHostGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


