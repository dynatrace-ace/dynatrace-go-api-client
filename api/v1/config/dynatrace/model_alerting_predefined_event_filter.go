/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AlertingPredefinedEventFilter Configuration of a predefined event filter.
type AlertingPredefinedEventFilter struct {
	// The type of the predefined event.
	EventType string `json:"eventType"`
	// The alert triggers when the problem of specified severity arises while the specified event **is** happening (`false`) or while the specified event is **not** happening (`true`).    For example, if you chose the Slowdown (`PERFORMANCE`) severity and Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event with **negate** set to `true`, the alerting profile will trigger only when the slowdown problem is raised while there is no unexpected high traffic event.   Consider the following use case as an example. The Slowdown (`PERFORMANCE`) severity rule is set. Depending on the configuration of the event filter (Unexpected high traffic (`APPLICATION_UNEXPECTED_HIGH_LOAD`) event is used as an example), the behavior of the alerting profile is one of the following:* **negate** is set to `false`: The alert triggers when the slowdown problem is raised while unexpected high traffic event is happening.  * **negate** is set to `true`: The alert triggers when the slowdown problem is raised while there is no unexpected high traffic event.   * no event rule is set: The alert triggers when the slowdown problem is raised, regardless of any events.
	Negate bool `json:"negate"`
}

// NewAlertingPredefinedEventFilter instantiates a new AlertingPredefinedEventFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertingPredefinedEventFilter(eventType string, negate bool, ) *AlertingPredefinedEventFilter {
	this := AlertingPredefinedEventFilter{}
	this.EventType = eventType
	this.Negate = negate
	return &this
}

// NewAlertingPredefinedEventFilterWithDefaults instantiates a new AlertingPredefinedEventFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertingPredefinedEventFilterWithDefaults() *AlertingPredefinedEventFilter {
	this := AlertingPredefinedEventFilter{}
	return &this
}

// GetEventType returns the EventType field value
func (o *AlertingPredefinedEventFilter) GetEventType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *AlertingPredefinedEventFilter) GetEventTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *AlertingPredefinedEventFilter) SetEventType(v string) {
	o.EventType = v
}

// GetNegate returns the Negate field value
func (o *AlertingPredefinedEventFilter) GetNegate() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Negate
}

// GetNegateOk returns a tuple with the Negate field value
// and a boolean to check if the value has been set.
func (o *AlertingPredefinedEventFilter) GetNegateOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Negate, true
}

// SetNegate sets field value
func (o *AlertingPredefinedEventFilter) SetNegate(v bool) {
	o.Negate = v
}

func (o AlertingPredefinedEventFilter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["negate"] = o.Negate
	}
	return json.Marshal(toSerialize)
}

type NullableAlertingPredefinedEventFilter struct {
	value *AlertingPredefinedEventFilter
	isSet bool
}

func (v NullableAlertingPredefinedEventFilter) Get() *AlertingPredefinedEventFilter {
	return v.value
}

func (v *NullableAlertingPredefinedEventFilter) Set(val *AlertingPredefinedEventFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertingPredefinedEventFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertingPredefinedEventFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertingPredefinedEventFilter(val *AlertingPredefinedEventFilter) *NullableAlertingPredefinedEventFilter {
	return &NullableAlertingPredefinedEventFilter{value: val, isSet: true}
}

func (v NullableAlertingPredefinedEventFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertingPredefinedEventFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


