/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SyntheticSingleWebcheckTile Configuration of the Browser monitor tile.
type SyntheticSingleWebcheckTile struct {
	Tile
	// The list of Dynatrace entities, assigned to the tile.
	AssignedEntities []string `json:"assignedEntities"`
	// Include (`false') or exclude (`true`) maintenance windows from availability calculations.
	ExcludeMaintenanceWindows *bool `json:"excludeMaintenanceWindows,omitempty"`
}

// NewSyntheticSingleWebcheckTile instantiates a new SyntheticSingleWebcheckTile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticSingleWebcheckTile(assignedEntities []string, ) *SyntheticSingleWebcheckTile {
	this := SyntheticSingleWebcheckTile{}
	this.AssignedEntities = assignedEntities
	return &this
}

// NewSyntheticSingleWebcheckTileWithDefaults instantiates a new SyntheticSingleWebcheckTile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticSingleWebcheckTileWithDefaults() *SyntheticSingleWebcheckTile {
	this := SyntheticSingleWebcheckTile{}
	return &this
}

// GetAssignedEntities returns the AssignedEntities field value
func (o *SyntheticSingleWebcheckTile) GetAssignedEntities() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.AssignedEntities
}

// GetAssignedEntitiesOk returns a tuple with the AssignedEntities field value
// and a boolean to check if the value has been set.
func (o *SyntheticSingleWebcheckTile) GetAssignedEntitiesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AssignedEntities, true
}

// SetAssignedEntities sets field value
func (o *SyntheticSingleWebcheckTile) SetAssignedEntities(v []string) {
	o.AssignedEntities = v
}

// GetExcludeMaintenanceWindows returns the ExcludeMaintenanceWindows field value if set, zero value otherwise.
func (o *SyntheticSingleWebcheckTile) GetExcludeMaintenanceWindows() bool {
	if o == nil || o.ExcludeMaintenanceWindows == nil {
		var ret bool
		return ret
	}
	return *o.ExcludeMaintenanceWindows
}

// GetExcludeMaintenanceWindowsOk returns a tuple with the ExcludeMaintenanceWindows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticSingleWebcheckTile) GetExcludeMaintenanceWindowsOk() (*bool, bool) {
	if o == nil || o.ExcludeMaintenanceWindows == nil {
		return nil, false
	}
	return o.ExcludeMaintenanceWindows, true
}

// HasExcludeMaintenanceWindows returns a boolean if a field has been set.
func (o *SyntheticSingleWebcheckTile) HasExcludeMaintenanceWindows() bool {
	if o != nil && o.ExcludeMaintenanceWindows != nil {
		return true
	}

	return false
}

// SetExcludeMaintenanceWindows gets a reference to the given bool and assigns it to the ExcludeMaintenanceWindows field.
func (o *SyntheticSingleWebcheckTile) SetExcludeMaintenanceWindows(v bool) {
	o.ExcludeMaintenanceWindows = &v
}

func (o SyntheticSingleWebcheckTile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTile, errTile := json.Marshal(o.Tile)
	if errTile != nil {
		return []byte{}, errTile
	}
	errTile = json.Unmarshal([]byte(serializedTile), &toSerialize)
	if errTile != nil {
		return []byte{}, errTile
	}
	if true {
		toSerialize["assignedEntities"] = o.AssignedEntities
	}
	if o.ExcludeMaintenanceWindows != nil {
		toSerialize["excludeMaintenanceWindows"] = o.ExcludeMaintenanceWindows
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticSingleWebcheckTile struct {
	value *SyntheticSingleWebcheckTile
	isSet bool
}

func (v NullableSyntheticSingleWebcheckTile) Get() *SyntheticSingleWebcheckTile {
	return v.value
}

func (v *NullableSyntheticSingleWebcheckTile) Set(val *SyntheticSingleWebcheckTile) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticSingleWebcheckTile) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticSingleWebcheckTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticSingleWebcheckTile(val *SyntheticSingleWebcheckTile) *NullableSyntheticSingleWebcheckTile {
	return &NullableSyntheticSingleWebcheckTile{value: val, isSet: true}
}

func (v NullableSyntheticSingleWebcheckTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticSingleWebcheckTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


