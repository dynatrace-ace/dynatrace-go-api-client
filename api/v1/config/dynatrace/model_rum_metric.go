/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// RumMetric Descriptor of the calculated RUM metric.
type RumMetric struct {
	// The Dynatrace entity ID of the application to which the metric belongs.
	ApplicationIdentifier string `json:"applicationIdentifier"`
	// The displayed name of the metric.
	Name string `json:"name"`
	// The unique key of the metric.    The key must have the `calc:apps` prefix.
	MetricKey string `json:"metricKey"`
	// The metric is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	MetricDefinition RumMetricDefinition `json:"metricDefinition"`
	// A list of metric dimensions.
	Dimensions *[]RumDimensionDefinition `json:"dimensions,omitempty"`
	UserActionFilter *UserActionFilter `json:"userActionFilter,omitempty"`
}

// NewRumMetric instantiates a new RumMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRumMetric(applicationIdentifier string, name string, metricKey string, enabled bool, metricDefinition RumMetricDefinition, ) *RumMetric {
	this := RumMetric{}
	this.ApplicationIdentifier = applicationIdentifier
	this.Name = name
	this.MetricKey = metricKey
	this.Enabled = enabled
	this.MetricDefinition = metricDefinition
	return &this
}

// NewRumMetricWithDefaults instantiates a new RumMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRumMetricWithDefaults() *RumMetric {
	this := RumMetric{}
	return &this
}

// GetApplicationIdentifier returns the ApplicationIdentifier field value
func (o *RumMetric) GetApplicationIdentifier() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ApplicationIdentifier
}

// GetApplicationIdentifierOk returns a tuple with the ApplicationIdentifier field value
// and a boolean to check if the value has been set.
func (o *RumMetric) GetApplicationIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApplicationIdentifier, true
}

// SetApplicationIdentifier sets field value
func (o *RumMetric) SetApplicationIdentifier(v string) {
	o.ApplicationIdentifier = v
}

// GetName returns the Name field value
func (o *RumMetric) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RumMetric) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RumMetric) SetName(v string) {
	o.Name = v
}

// GetMetricKey returns the MetricKey field value
func (o *RumMetric) GetMetricKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.MetricKey
}

// GetMetricKeyOk returns a tuple with the MetricKey field value
// and a boolean to check if the value has been set.
func (o *RumMetric) GetMetricKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MetricKey, true
}

// SetMetricKey sets field value
func (o *RumMetric) SetMetricKey(v string) {
	o.MetricKey = v
}

// GetEnabled returns the Enabled field value
func (o *RumMetric) GetEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *RumMetric) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *RumMetric) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMetricDefinition returns the MetricDefinition field value
func (o *RumMetric) GetMetricDefinition() RumMetricDefinition {
	if o == nil  {
		var ret RumMetricDefinition
		return ret
	}

	return o.MetricDefinition
}

// GetMetricDefinitionOk returns a tuple with the MetricDefinition field value
// and a boolean to check if the value has been set.
func (o *RumMetric) GetMetricDefinitionOk() (*RumMetricDefinition, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MetricDefinition, true
}

// SetMetricDefinition sets field value
func (o *RumMetric) SetMetricDefinition(v RumMetricDefinition) {
	o.MetricDefinition = v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *RumMetric) GetDimensions() []RumDimensionDefinition {
	if o == nil || o.Dimensions == nil {
		var ret []RumDimensionDefinition
		return ret
	}
	return *o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumMetric) GetDimensionsOk() (*[]RumDimensionDefinition, bool) {
	if o == nil || o.Dimensions == nil {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *RumMetric) HasDimensions() bool {
	if o != nil && o.Dimensions != nil {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given []RumDimensionDefinition and assigns it to the Dimensions field.
func (o *RumMetric) SetDimensions(v []RumDimensionDefinition) {
	o.Dimensions = &v
}

// GetUserActionFilter returns the UserActionFilter field value if set, zero value otherwise.
func (o *RumMetric) GetUserActionFilter() UserActionFilter {
	if o == nil || o.UserActionFilter == nil {
		var ret UserActionFilter
		return ret
	}
	return *o.UserActionFilter
}

// GetUserActionFilterOk returns a tuple with the UserActionFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RumMetric) GetUserActionFilterOk() (*UserActionFilter, bool) {
	if o == nil || o.UserActionFilter == nil {
		return nil, false
	}
	return o.UserActionFilter, true
}

// HasUserActionFilter returns a boolean if a field has been set.
func (o *RumMetric) HasUserActionFilter() bool {
	if o != nil && o.UserActionFilter != nil {
		return true
	}

	return false
}

// SetUserActionFilter gets a reference to the given UserActionFilter and assigns it to the UserActionFilter field.
func (o *RumMetric) SetUserActionFilter(v UserActionFilter) {
	o.UserActionFilter = &v
}

func (o RumMetric) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["applicationIdentifier"] = o.ApplicationIdentifier
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["metricKey"] = o.MetricKey
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["metricDefinition"] = o.MetricDefinition
	}
	if o.Dimensions != nil {
		toSerialize["dimensions"] = o.Dimensions
	}
	if o.UserActionFilter != nil {
		toSerialize["userActionFilter"] = o.UserActionFilter
	}
	return json.Marshal(toSerialize)
}

type NullableRumMetric struct {
	value *RumMetric
	isSet bool
}

func (v NullableRumMetric) Get() *RumMetric {
	return v.value
}

func (v *NullableRumMetric) Set(val *RumMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableRumMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableRumMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRumMetric(val *RumMetric) *NullableRumMetric {
	return &NullableRumMetric{value: val, isSet: true}
}

func (v NullableRumMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRumMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


