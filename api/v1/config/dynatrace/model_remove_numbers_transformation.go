/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// RemoveNumbersTransformation The transformation of the `REMOVE_NUMBERS` type.   The transformation removes any numbers from the detected value.
type RemoveNumbersTransformation struct {
	TransformationBase
	// Remove numbers that contain at least *X* digits.
	MinDigitCount int32 `json:"minDigitCount"`
	// Remove (`true`) or keep (`false`) hexadecimal numbers.    If not set, then `false` is used, keeping hexadecimal numbers.
	IncludeHexNumbers *bool `json:"includeHexNumbers,omitempty"`
}

// NewRemoveNumbersTransformation instantiates a new RemoveNumbersTransformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveNumbersTransformation(minDigitCount int32, ) *RemoveNumbersTransformation {
	this := RemoveNumbersTransformation{}
	this.MinDigitCount = minDigitCount
	return &this
}

// NewRemoveNumbersTransformationWithDefaults instantiates a new RemoveNumbersTransformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveNumbersTransformationWithDefaults() *RemoveNumbersTransformation {
	this := RemoveNumbersTransformation{}
	return &this
}

// GetMinDigitCount returns the MinDigitCount field value
func (o *RemoveNumbersTransformation) GetMinDigitCount() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.MinDigitCount
}

// GetMinDigitCountOk returns a tuple with the MinDigitCount field value
// and a boolean to check if the value has been set.
func (o *RemoveNumbersTransformation) GetMinDigitCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MinDigitCount, true
}

// SetMinDigitCount sets field value
func (o *RemoveNumbersTransformation) SetMinDigitCount(v int32) {
	o.MinDigitCount = v
}

// GetIncludeHexNumbers returns the IncludeHexNumbers field value if set, zero value otherwise.
func (o *RemoveNumbersTransformation) GetIncludeHexNumbers() bool {
	if o == nil || o.IncludeHexNumbers == nil {
		var ret bool
		return ret
	}
	return *o.IncludeHexNumbers
}

// GetIncludeHexNumbersOk returns a tuple with the IncludeHexNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveNumbersTransformation) GetIncludeHexNumbersOk() (*bool, bool) {
	if o == nil || o.IncludeHexNumbers == nil {
		return nil, false
	}
	return o.IncludeHexNumbers, true
}

// HasIncludeHexNumbers returns a boolean if a field has been set.
func (o *RemoveNumbersTransformation) HasIncludeHexNumbers() bool {
	if o != nil && o.IncludeHexNumbers != nil {
		return true
	}

	return false
}

// SetIncludeHexNumbers gets a reference to the given bool and assigns it to the IncludeHexNumbers field.
func (o *RemoveNumbersTransformation) SetIncludeHexNumbers(v bool) {
	o.IncludeHexNumbers = &v
}

func (o RemoveNumbersTransformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTransformationBase, errTransformationBase := json.Marshal(o.TransformationBase)
	if errTransformationBase != nil {
		return []byte{}, errTransformationBase
	}
	errTransformationBase = json.Unmarshal([]byte(serializedTransformationBase), &toSerialize)
	if errTransformationBase != nil {
		return []byte{}, errTransformationBase
	}
	if true {
		toSerialize["minDigitCount"] = o.MinDigitCount
	}
	if o.IncludeHexNumbers != nil {
		toSerialize["includeHexNumbers"] = o.IncludeHexNumbers
	}
	return json.Marshal(toSerialize)
}

type NullableRemoveNumbersTransformation struct {
	value *RemoveNumbersTransformation
	isSet bool
}

func (v NullableRemoveNumbersTransformation) Get() *RemoveNumbersTransformation {
	return v.value
}

func (v *NullableRemoveNumbersTransformation) Set(val *RemoveNumbersTransformation) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveNumbersTransformation) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveNumbersTransformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveNumbersTransformation(val *RemoveNumbersTransformation) *NullableRemoveNumbersTransformation {
	return &NullableRemoveNumbersTransformation{value: val, isSet: true}
}

func (v NullableRemoveNumbersTransformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveNumbersTransformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


