/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TagCompareOperationAllOf struct for TagCompareOperationAllOf
type TagCompareOperationAllOf struct {
	// If `true` ignores the tag values and only validates that the tag key is matching. Defaults to `false`.
	CompareKeyOnly *bool `json:"compareKeyOnly,omitempty"`
	// The value to compare to.   If several values are specified, the OR logic applies.
	Tags *[]TagInfo `json:"tags,omitempty"`
}

// NewTagCompareOperationAllOf instantiates a new TagCompareOperationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagCompareOperationAllOf() *TagCompareOperationAllOf {
	this := TagCompareOperationAllOf{}
	return &this
}

// NewTagCompareOperationAllOfWithDefaults instantiates a new TagCompareOperationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagCompareOperationAllOfWithDefaults() *TagCompareOperationAllOf {
	this := TagCompareOperationAllOf{}
	return &this
}

// GetCompareKeyOnly returns the CompareKeyOnly field value if set, zero value otherwise.
func (o *TagCompareOperationAllOf) GetCompareKeyOnly() bool {
	if o == nil || o.CompareKeyOnly == nil {
		var ret bool
		return ret
	}
	return *o.CompareKeyOnly
}

// GetCompareKeyOnlyOk returns a tuple with the CompareKeyOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagCompareOperationAllOf) GetCompareKeyOnlyOk() (*bool, bool) {
	if o == nil || o.CompareKeyOnly == nil {
		return nil, false
	}
	return o.CompareKeyOnly, true
}

// HasCompareKeyOnly returns a boolean if a field has been set.
func (o *TagCompareOperationAllOf) HasCompareKeyOnly() bool {
	if o != nil && o.CompareKeyOnly != nil {
		return true
	}

	return false
}

// SetCompareKeyOnly gets a reference to the given bool and assigns it to the CompareKeyOnly field.
func (o *TagCompareOperationAllOf) SetCompareKeyOnly(v bool) {
	o.CompareKeyOnly = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TagCompareOperationAllOf) GetTags() []TagInfo {
	if o == nil || o.Tags == nil {
		var ret []TagInfo
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagCompareOperationAllOf) GetTagsOk() (*[]TagInfo, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TagCompareOperationAllOf) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagInfo and assigns it to the Tags field.
func (o *TagCompareOperationAllOf) SetTags(v []TagInfo) {
	o.Tags = &v
}

func (o TagCompareOperationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompareKeyOnly != nil {
		toSerialize["compareKeyOnly"] = o.CompareKeyOnly
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableTagCompareOperationAllOf struct {
	value *TagCompareOperationAllOf
	isSet bool
}

func (v NullableTagCompareOperationAllOf) Get() *TagCompareOperationAllOf {
	return v.value
}

func (v *NullableTagCompareOperationAllOf) Set(val *TagCompareOperationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTagCompareOperationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTagCompareOperationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagCompareOperationAllOf(val *TagCompareOperationAllOf) *NullableTagCompareOperationAllOf {
	return &NullableTagCompareOperationAllOf{value: val, isSet: true}
}

func (v NullableTagCompareOperationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagCompareOperationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


