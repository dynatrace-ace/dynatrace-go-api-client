/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CustomProcessMetadataConditionKeyAllOf struct for CustomProcessMetadataConditionKeyAllOf
type CustomProcessMetadataConditionKeyAllOf struct {
	DynamicKey *CustomProcessMetadataKey `json:"dynamicKey,omitempty"`
}

// NewCustomProcessMetadataConditionKeyAllOf instantiates a new CustomProcessMetadataConditionKeyAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomProcessMetadataConditionKeyAllOf() *CustomProcessMetadataConditionKeyAllOf {
	this := CustomProcessMetadataConditionKeyAllOf{}
	return &this
}

// NewCustomProcessMetadataConditionKeyAllOfWithDefaults instantiates a new CustomProcessMetadataConditionKeyAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomProcessMetadataConditionKeyAllOfWithDefaults() *CustomProcessMetadataConditionKeyAllOf {
	this := CustomProcessMetadataConditionKeyAllOf{}
	return &this
}

// GetDynamicKey returns the DynamicKey field value if set, zero value otherwise.
func (o *CustomProcessMetadataConditionKeyAllOf) GetDynamicKey() CustomProcessMetadataKey {
	if o == nil || o.DynamicKey == nil {
		var ret CustomProcessMetadataKey
		return ret
	}
	return *o.DynamicKey
}

// GetDynamicKeyOk returns a tuple with the DynamicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomProcessMetadataConditionKeyAllOf) GetDynamicKeyOk() (*CustomProcessMetadataKey, bool) {
	if o == nil || o.DynamicKey == nil {
		return nil, false
	}
	return o.DynamicKey, true
}

// HasDynamicKey returns a boolean if a field has been set.
func (o *CustomProcessMetadataConditionKeyAllOf) HasDynamicKey() bool {
	if o != nil && o.DynamicKey != nil {
		return true
	}

	return false
}

// SetDynamicKey gets a reference to the given CustomProcessMetadataKey and assigns it to the DynamicKey field.
func (o *CustomProcessMetadataConditionKeyAllOf) SetDynamicKey(v CustomProcessMetadataKey) {
	o.DynamicKey = &v
}

func (o CustomProcessMetadataConditionKeyAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DynamicKey != nil {
		toSerialize["dynamicKey"] = o.DynamicKey
	}
	return json.Marshal(toSerialize)
}

type NullableCustomProcessMetadataConditionKeyAllOf struct {
	value *CustomProcessMetadataConditionKeyAllOf
	isSet bool
}

func (v NullableCustomProcessMetadataConditionKeyAllOf) Get() *CustomProcessMetadataConditionKeyAllOf {
	return v.value
}

func (v *NullableCustomProcessMetadataConditionKeyAllOf) Set(val *CustomProcessMetadataConditionKeyAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomProcessMetadataConditionKeyAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomProcessMetadataConditionKeyAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomProcessMetadataConditionKeyAllOf(val *CustomProcessMetadataConditionKeyAllOf) *NullableCustomProcessMetadataConditionKeyAllOf {
	return &NullableCustomProcessMetadataConditionKeyAllOf{value: val, isSet: true}
}

func (v NullableCustomProcessMetadataConditionKeyAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomProcessMetadataConditionKeyAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


