/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MetricEventStaticThresholdMonitoringStrategy A static threshold monitoring strategy to alert on hard limits within a given metric. An example is the violation of a critical memory limit.
type MetricEventStaticThresholdMonitoringStrategy struct {
	MetricEventMonitoringStrategy
	// The number of one-minute samples that form the sliding evaluation window.
	Samples int32 `json:"samples"`
	// The number of one-minute samples within the evaluation window that must violate the threshold to trigger an event.
	ViolatingSamples int32 `json:"violatingSamples"`
	// The number of one-minute samples within the evaluation window that must go back to normal to close the event.
	DealertingSamples int32 `json:"dealertingSamples"`
	// The condition for the **threshold** value check: above or below.
	AlertCondition string `json:"alertCondition"`
	// The value of the static threshold based on the specified unit.
	Threshold float64 `json:"threshold"`
	// The unit of the threshold, matching the metric definition.
	Unit string `json:"unit"`
}

// NewMetricEventStaticThresholdMonitoringStrategy instantiates a new MetricEventStaticThresholdMonitoringStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricEventStaticThresholdMonitoringStrategy(samples int32, violatingSamples int32, dealertingSamples int32, alertCondition string, threshold float64, unit string, ) *MetricEventStaticThresholdMonitoringStrategy {
	this := MetricEventStaticThresholdMonitoringStrategy{}
	this.Samples = samples
	this.ViolatingSamples = violatingSamples
	this.DealertingSamples = dealertingSamples
	this.AlertCondition = alertCondition
	this.Threshold = threshold
	this.Unit = unit
	return &this
}

// NewMetricEventStaticThresholdMonitoringStrategyWithDefaults instantiates a new MetricEventStaticThresholdMonitoringStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricEventStaticThresholdMonitoringStrategyWithDefaults() *MetricEventStaticThresholdMonitoringStrategy {
	this := MetricEventStaticThresholdMonitoringStrategy{}
	return &this
}

// GetSamples returns the Samples field value
func (o *MetricEventStaticThresholdMonitoringStrategy) GetSamples() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetSamplesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Samples, true
}

// SetSamples sets field value
func (o *MetricEventStaticThresholdMonitoringStrategy) SetSamples(v int32) {
	o.Samples = v
}

// GetViolatingSamples returns the ViolatingSamples field value
func (o *MetricEventStaticThresholdMonitoringStrategy) GetViolatingSamples() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.ViolatingSamples
}

// GetViolatingSamplesOk returns a tuple with the ViolatingSamples field value
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetViolatingSamplesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ViolatingSamples, true
}

// SetViolatingSamples sets field value
func (o *MetricEventStaticThresholdMonitoringStrategy) SetViolatingSamples(v int32) {
	o.ViolatingSamples = v
}

// GetDealertingSamples returns the DealertingSamples field value
func (o *MetricEventStaticThresholdMonitoringStrategy) GetDealertingSamples() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.DealertingSamples
}

// GetDealertingSamplesOk returns a tuple with the DealertingSamples field value
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetDealertingSamplesOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DealertingSamples, true
}

// SetDealertingSamples sets field value
func (o *MetricEventStaticThresholdMonitoringStrategy) SetDealertingSamples(v int32) {
	o.DealertingSamples = v
}

// GetAlertCondition returns the AlertCondition field value
func (o *MetricEventStaticThresholdMonitoringStrategy) GetAlertCondition() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.AlertCondition
}

// GetAlertConditionOk returns a tuple with the AlertCondition field value
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetAlertConditionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AlertCondition, true
}

// SetAlertCondition sets field value
func (o *MetricEventStaticThresholdMonitoringStrategy) SetAlertCondition(v string) {
	o.AlertCondition = v
}

// GetThreshold returns the Threshold field value
func (o *MetricEventStaticThresholdMonitoringStrategy) GetThreshold() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetThresholdOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *MetricEventStaticThresholdMonitoringStrategy) SetThreshold(v float64) {
	o.Threshold = v
}

// GetUnit returns the Unit field value
func (o *MetricEventStaticThresholdMonitoringStrategy) GetUnit() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *MetricEventStaticThresholdMonitoringStrategy) GetUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *MetricEventStaticThresholdMonitoringStrategy) SetUnit(v string) {
	o.Unit = v
}

func (o MetricEventStaticThresholdMonitoringStrategy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedMetricEventMonitoringStrategy, errMetricEventMonitoringStrategy := json.Marshal(o.MetricEventMonitoringStrategy)
	if errMetricEventMonitoringStrategy != nil {
		return []byte{}, errMetricEventMonitoringStrategy
	}
	errMetricEventMonitoringStrategy = json.Unmarshal([]byte(serializedMetricEventMonitoringStrategy), &toSerialize)
	if errMetricEventMonitoringStrategy != nil {
		return []byte{}, errMetricEventMonitoringStrategy
	}
	if true {
		toSerialize["samples"] = o.Samples
	}
	if true {
		toSerialize["violatingSamples"] = o.ViolatingSamples
	}
	if true {
		toSerialize["dealertingSamples"] = o.DealertingSamples
	}
	if true {
		toSerialize["alertCondition"] = o.AlertCondition
	}
	if true {
		toSerialize["threshold"] = o.Threshold
	}
	if true {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableMetricEventStaticThresholdMonitoringStrategy struct {
	value *MetricEventStaticThresholdMonitoringStrategy
	isSet bool
}

func (v NullableMetricEventStaticThresholdMonitoringStrategy) Get() *MetricEventStaticThresholdMonitoringStrategy {
	return v.value
}

func (v *NullableMetricEventStaticThresholdMonitoringStrategy) Set(val *MetricEventStaticThresholdMonitoringStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricEventStaticThresholdMonitoringStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricEventStaticThresholdMonitoringStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricEventStaticThresholdMonitoringStrategy(val *MetricEventStaticThresholdMonitoringStrategy) *NullableMetricEventStaticThresholdMonitoringStrategy {
	return &NullableMetricEventStaticThresholdMonitoringStrategy{value: val, isSet: true}
}

func (v NullableMetricEventStaticThresholdMonitoringStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricEventStaticThresholdMonitoringStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


