/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ReportSubscriptions Configuration of a report subscription.
type ReportSubscriptions struct {
	// The schedule of the subscription.    * Weekly subscribers receive the report every Monday at midnight.   * Monthly subscribers receive the report on the first Monday of the month at midnight.
	Schedule string `json:"schedule"`
	// A list of the recipients.   You can specify email addresses or Dynatrace user IDs here.
	Recipients []string `json:"recipients"`
}

// NewReportSubscriptions instantiates a new ReportSubscriptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportSubscriptions(schedule string, recipients []string, ) *ReportSubscriptions {
	this := ReportSubscriptions{}
	this.Schedule = schedule
	this.Recipients = recipients
	return &this
}

// NewReportSubscriptionsWithDefaults instantiates a new ReportSubscriptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportSubscriptionsWithDefaults() *ReportSubscriptions {
	this := ReportSubscriptions{}
	return &this
}

// GetSchedule returns the Schedule field value
func (o *ReportSubscriptions) GetSchedule() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *ReportSubscriptions) GetScheduleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *ReportSubscriptions) SetSchedule(v string) {
	o.Schedule = v
}

// GetRecipients returns the Recipients field value
func (o *ReportSubscriptions) GetRecipients() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value
// and a boolean to check if the value has been set.
func (o *ReportSubscriptions) GetRecipientsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Recipients, true
}

// SetRecipients sets field value
func (o *ReportSubscriptions) SetRecipients(v []string) {
	o.Recipients = v
}

func (o ReportSubscriptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schedule"] = o.Schedule
	}
	if true {
		toSerialize["recipients"] = o.Recipients
	}
	return json.Marshal(toSerialize)
}

type NullableReportSubscriptions struct {
	value *ReportSubscriptions
	isSet bool
}

func (v NullableReportSubscriptions) Get() *ReportSubscriptions {
	return v.value
}

func (v *NullableReportSubscriptions) Set(val *ReportSubscriptions) {
	v.value = val
	v.isSet = true
}

func (v NullableReportSubscriptions) IsSet() bool {
	return v.isSet
}

func (v *NullableReportSubscriptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportSubscriptions(val *ReportSubscriptions) *NullableReportSubscriptions {
	return &NullableReportSubscriptions{value: val, isSet: true}
}

func (v NullableReportSubscriptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportSubscriptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


