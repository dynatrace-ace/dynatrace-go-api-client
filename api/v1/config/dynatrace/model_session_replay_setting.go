/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SessionReplaySetting Session replay settings.
type SessionReplaySetting struct {
	// SessionReplay Enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// Session replay sampling rating in percentage.
	CostControlPercentage *int32 `json:"costControlPercentage,omitempty"`
}

// NewSessionReplaySetting instantiates a new SessionReplaySetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionReplaySetting() *SessionReplaySetting {
	this := SessionReplaySetting{}
	return &this
}

// NewSessionReplaySettingWithDefaults instantiates a new SessionReplaySetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionReplaySettingWithDefaults() *SessionReplaySetting {
	this := SessionReplaySetting{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SessionReplaySetting) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionReplaySetting) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SessionReplaySetting) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SessionReplaySetting) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetCostControlPercentage returns the CostControlPercentage field value if set, zero value otherwise.
func (o *SessionReplaySetting) GetCostControlPercentage() int32 {
	if o == nil || o.CostControlPercentage == nil {
		var ret int32
		return ret
	}
	return *o.CostControlPercentage
}

// GetCostControlPercentageOk returns a tuple with the CostControlPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionReplaySetting) GetCostControlPercentageOk() (*int32, bool) {
	if o == nil || o.CostControlPercentage == nil {
		return nil, false
	}
	return o.CostControlPercentage, true
}

// HasCostControlPercentage returns a boolean if a field has been set.
func (o *SessionReplaySetting) HasCostControlPercentage() bool {
	if o != nil && o.CostControlPercentage != nil {
		return true
	}

	return false
}

// SetCostControlPercentage gets a reference to the given int32 and assigns it to the CostControlPercentage field.
func (o *SessionReplaySetting) SetCostControlPercentage(v int32) {
	o.CostControlPercentage = &v
}

func (o SessionReplaySetting) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.CostControlPercentage != nil {
		toSerialize["costControlPercentage"] = o.CostControlPercentage
	}
	return json.Marshal(toSerialize)
}

type NullableSessionReplaySetting struct {
	value *SessionReplaySetting
	isSet bool
}

func (v NullableSessionReplaySetting) Get() *SessionReplaySetting {
	return v.value
}

func (v *NullableSessionReplaySetting) Set(val *SessionReplaySetting) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionReplaySetting) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionReplaySetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionReplaySetting(val *SessionReplaySetting) *NullableSessionReplaySetting {
	return &NullableSessionReplaySetting{value: val, isSet: true}
}

func (v NullableSessionReplaySetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionReplaySetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


