/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ExtensionConfigurationDto struct for ExtensionConfigurationDto
type ExtensionConfigurationDto struct {
	// The ID of the extension.
	ExtensionId *string `json:"extensionId,omitempty"`
	// The extension is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	// Allows to skip current configuration and use global one.
	UseGlobal bool `json:"useGlobal"`
	// The list of extension parameters.    Each parameter is a key-value pair.
	Properties *map[string]string `json:"properties,omitempty"`
	// The ID of the host on which the extension runs.
	HostId *string `json:"hostId,omitempty"`
	ActiveGate *EntityShortRepresentation `json:"activeGate,omitempty"`
	// The ID of the endpoint.
	EndpointId *string `json:"endpointId,omitempty"`
	// The name of the endpoint, displayed in Dynatrace.
	EndpointName *string `json:"endpointName,omitempty"`
}

// NewExtensionConfigurationDto instantiates a new ExtensionConfigurationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionConfigurationDto(enabled bool, useGlobal bool, ) *ExtensionConfigurationDto {
	this := ExtensionConfigurationDto{}
	this.Enabled = enabled
	this.UseGlobal = useGlobal
	return &this
}

// NewExtensionConfigurationDtoWithDefaults instantiates a new ExtensionConfigurationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionConfigurationDtoWithDefaults() *ExtensionConfigurationDto {
	this := ExtensionConfigurationDto{}
	return &this
}

// GetExtensionId returns the ExtensionId field value if set, zero value otherwise.
func (o *ExtensionConfigurationDto) GetExtensionId() string {
	if o == nil || o.ExtensionId == nil {
		var ret string
		return ret
	}
	return *o.ExtensionId
}

// GetExtensionIdOk returns a tuple with the ExtensionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionConfigurationDto) GetExtensionIdOk() (*string, bool) {
	if o == nil || o.ExtensionId == nil {
		return nil, false
	}
	return o.ExtensionId, true
}

// HasExtensionId returns a boolean if a field has been set.
func (o *ExtensionConfigurationDto) HasExtensionId() bool {
	if o != nil && o.ExtensionId != nil {
		return true
	}

	return false
}

// SetExtensionId gets a reference to the given string and assigns it to the ExtensionId field.
func (o *ExtensionConfigurationDto) SetExtensionId(v string) {
	o.ExtensionId = &v
}

// GetEnabled returns the Enabled field value
func (o *ExtensionConfigurationDto) GetEnabled() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ExtensionConfigurationDto) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ExtensionConfigurationDto) SetEnabled(v bool) {
	o.Enabled = v
}

// GetUseGlobal returns the UseGlobal field value
func (o *ExtensionConfigurationDto) GetUseGlobal() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.UseGlobal
}

// GetUseGlobalOk returns a tuple with the UseGlobal field value
// and a boolean to check if the value has been set.
func (o *ExtensionConfigurationDto) GetUseGlobalOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UseGlobal, true
}

// SetUseGlobal sets field value
func (o *ExtensionConfigurationDto) SetUseGlobal(v bool) {
	o.UseGlobal = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ExtensionConfigurationDto) GetProperties() map[string]string {
	if o == nil || o.Properties == nil {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionConfigurationDto) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ExtensionConfigurationDto) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *ExtensionConfigurationDto) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetHostId returns the HostId field value if set, zero value otherwise.
func (o *ExtensionConfigurationDto) GetHostId() string {
	if o == nil || o.HostId == nil {
		var ret string
		return ret
	}
	return *o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionConfigurationDto) GetHostIdOk() (*string, bool) {
	if o == nil || o.HostId == nil {
		return nil, false
	}
	return o.HostId, true
}

// HasHostId returns a boolean if a field has been set.
func (o *ExtensionConfigurationDto) HasHostId() bool {
	if o != nil && o.HostId != nil {
		return true
	}

	return false
}

// SetHostId gets a reference to the given string and assigns it to the HostId field.
func (o *ExtensionConfigurationDto) SetHostId(v string) {
	o.HostId = &v
}

// GetActiveGate returns the ActiveGate field value if set, zero value otherwise.
func (o *ExtensionConfigurationDto) GetActiveGate() EntityShortRepresentation {
	if o == nil || o.ActiveGate == nil {
		var ret EntityShortRepresentation
		return ret
	}
	return *o.ActiveGate
}

// GetActiveGateOk returns a tuple with the ActiveGate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionConfigurationDto) GetActiveGateOk() (*EntityShortRepresentation, bool) {
	if o == nil || o.ActiveGate == nil {
		return nil, false
	}
	return o.ActiveGate, true
}

// HasActiveGate returns a boolean if a field has been set.
func (o *ExtensionConfigurationDto) HasActiveGate() bool {
	if o != nil && o.ActiveGate != nil {
		return true
	}

	return false
}

// SetActiveGate gets a reference to the given EntityShortRepresentation and assigns it to the ActiveGate field.
func (o *ExtensionConfigurationDto) SetActiveGate(v EntityShortRepresentation) {
	o.ActiveGate = &v
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *ExtensionConfigurationDto) GetEndpointId() string {
	if o == nil || o.EndpointId == nil {
		var ret string
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionConfigurationDto) GetEndpointIdOk() (*string, bool) {
	if o == nil || o.EndpointId == nil {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *ExtensionConfigurationDto) HasEndpointId() bool {
	if o != nil && o.EndpointId != nil {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given string and assigns it to the EndpointId field.
func (o *ExtensionConfigurationDto) SetEndpointId(v string) {
	o.EndpointId = &v
}

// GetEndpointName returns the EndpointName field value if set, zero value otherwise.
func (o *ExtensionConfigurationDto) GetEndpointName() string {
	if o == nil || o.EndpointName == nil {
		var ret string
		return ret
	}
	return *o.EndpointName
}

// GetEndpointNameOk returns a tuple with the EndpointName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionConfigurationDto) GetEndpointNameOk() (*string, bool) {
	if o == nil || o.EndpointName == nil {
		return nil, false
	}
	return o.EndpointName, true
}

// HasEndpointName returns a boolean if a field has been set.
func (o *ExtensionConfigurationDto) HasEndpointName() bool {
	if o != nil && o.EndpointName != nil {
		return true
	}

	return false
}

// SetEndpointName gets a reference to the given string and assigns it to the EndpointName field.
func (o *ExtensionConfigurationDto) SetEndpointName(v string) {
	o.EndpointName = &v
}

func (o ExtensionConfigurationDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExtensionId != nil {
		toSerialize["extensionId"] = o.ExtensionId
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["useGlobal"] = o.UseGlobal
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.HostId != nil {
		toSerialize["hostId"] = o.HostId
	}
	if o.ActiveGate != nil {
		toSerialize["activeGate"] = o.ActiveGate
	}
	if o.EndpointId != nil {
		toSerialize["endpointId"] = o.EndpointId
	}
	if o.EndpointName != nil {
		toSerialize["endpointName"] = o.EndpointName
	}
	return json.Marshal(toSerialize)
}

type NullableExtensionConfigurationDto struct {
	value *ExtensionConfigurationDto
	isSet bool
}

func (v NullableExtensionConfigurationDto) Get() *ExtensionConfigurationDto {
	return v.value
}

func (v *NullableExtensionConfigurationDto) Set(val *ExtensionConfigurationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionConfigurationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionConfigurationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionConfigurationDto(val *ExtensionConfigurationDto) *NullableExtensionConfigurationDto {
	return &NullableExtensionConfigurationDto{value: val, isSet: true}
}

func (v NullableExtensionConfigurationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionConfigurationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


