/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Tile Configuration of a tile.   The actual set of fields depends on the type of the tile. See the description of the **tileType** field.
type Tile struct {
	// The name of the tile.
	Name string `json:"name"`
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `CUSTOM_CHARTING` -> CustomChartingTile  * `DTAQL` -> UserSessionQueryTile  * `MARKDOWN` -> MarkdownTile  * `HOSTS` -> FilterableEntityTile  * `APPLICATIONS` -> FilterableEntityTile  * `SERVICES` -> FilterableEntityTile  * `DATABASES_OVERVIEW` -> FilterableEntityTile  * `SYNTHETIC_TESTS` -> FilterableEntityTile  * `APPLICATION_WORLDMAP` -> AssignedEntitiesWithMetricTile  * `RESOURCES` -> AssignedEntitiesWithMetricTile  * `THIRD_PARTY_MOST_ACTIVE` -> AssignedEntitiesWithMetricTile  * `UEM_CONVERSIONS_PER_GOAL` -> AssignedEntitiesWithMetricTile  * `HOST` -> AssignedEntitiesWithMetricTile  * `PROCESS_GROUPS_ONE` -> AssignedEntitiesWithMetricTile  * `SYNTHETIC_SINGLE_WEBCHECK` -> SyntheticSingleWebcheckTile  * `APPLICATION` -> AssignedEntitiesTile  * `VIRTUALIZATION` -> AssignedEntitiesTile  * `AWS` -> AssignedEntitiesTile  * `SERVICE_VERSATILE` -> AssignedEntitiesTile  * `SESSION_METRICS` -> AssignedEntitiesTile  * `USERS` -> AssignedEntitiesTile  * `UEM_KEY_USER_ACTIONS` -> AssignedEntitiesTile  * `BOUNCE_RATE` -> AssignedEntitiesTile  * `UEM_CONVERSIONS_OVERALL` -> AssignedEntitiesTile  * `UEM_JSERRORS_OVERALL` -> AssignedEntitiesTile  * `MOBILE_APPLICATION` -> AssignedEntitiesTile  * `SYNTHETIC_SINGLE_EXT_TEST` -> AssignedEntitiesTile  * `SYNTHETIC_HTTP_MONITOR` -> AssignedEntitiesTile  * `DATABASE` -> AssignedEntitiesTile  * `CUSTOM_APPLICATION` -> AssignedEntitiesTile  * `APPLICATION_METHOD` -> AssignedEntitiesTile  * `LOG_ANALYTICS` -> AssignedEntitiesTile  * `OPENSTACK` -> AssignedEntitiesTile  * `OPENSTACK_PROJECT` -> AssignedEntitiesTile  * `OPENSTACK_AV_ZONE` -> AssignedEntitiesTile  * `DEVICE_APPLICATION_METHOD` -> AssignedEntitiesTile  * `DEM_KEY_USER_ACTION` -> AssignedEntitiesTile  * `SLO` -> AssignedEntitiesTile  
	TileType string `json:"tileType"`
	// The tile is configured and ready to use (`true`) or just placed on the dashboard (`false`).
	Configured *bool `json:"configured,omitempty"`
	Bounds TileBounds `json:"bounds"`
	TileFilter *TileFilter `json:"tileFilter,omitempty"`
	// The list of Dynatrace entities, assigned to the tile.
	AssignedEntities *[]string `json:"assignedEntities,omitempty"`
	// The metric assigned to the tile.
	Metric *string `json:"metric,omitempty"`
	FilterConfig *CustomFilterConfig `json:"filterConfig,omitempty"`
	ChartVisible *bool `json:"chartVisible,omitempty"`
	// The markdown-formatted content of the tile.
	Markdown *string `json:"markdown,omitempty"`
	// Include (`false') or exclude (`true`) maintenance windows from availability calculations.
	ExcludeMaintenanceWindows *bool `json:"excludeMaintenanceWindows,omitempty"`
	// The name of the tile, set by user.
	CustomName *string `json:"customName,omitempty"`
	// A [user session query](https://www.dynatrace.com/support/help/shortlink/usql-info) executed by the tile.
	Query *string `json:"query,omitempty"`
	// The visualization of the tile.
	Type *string `json:"type,omitempty"`
	// The comparison timeframe of the query.    If specified, you additionally get the results of the same query with the specified time shift.
	TimeFrameShift *string `json:"timeFrameShift,omitempty"`
	VisualizationConfig *UserSessionQueryTileConfiguration `json:"visualizationConfig,omitempty"`
	// The limit of the results, if not set will use the default value of the system
	Limit *int32 `json:"limit,omitempty"`
}

// NewTile instantiates a new Tile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTile(name string, tileType string, bounds TileBounds, ) *Tile {
	this := Tile{}
	this.Name = name
	this.TileType = tileType
	this.Bounds = bounds
	return &this
}

// NewTileWithDefaults instantiates a new Tile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTileWithDefaults() *Tile {
	this := Tile{}
	return &this
}

// GetName returns the Name field value
func (o *Tile) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Tile) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Tile) SetName(v string) {
	o.Name = v
}

// GetTileType returns the TileType field value
func (o *Tile) GetTileType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.TileType
}

// GetTileTypeOk returns a tuple with the TileType field value
// and a boolean to check if the value has been set.
func (o *Tile) GetTileTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TileType, true
}

// SetTileType sets field value
func (o *Tile) SetTileType(v string) {
	o.TileType = v
}

// GetConfigured returns the Configured field value if set, zero value otherwise.
func (o *Tile) GetConfigured() bool {
	if o == nil || o.Configured == nil {
		var ret bool
		return ret
	}
	return *o.Configured
}

// GetConfiguredOk returns a tuple with the Configured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetConfiguredOk() (*bool, bool) {
	if o == nil || o.Configured == nil {
		return nil, false
	}
	return o.Configured, true
}

// HasConfigured returns a boolean if a field has been set.
func (o *Tile) HasConfigured() bool {
	if o != nil && o.Configured != nil {
		return true
	}

	return false
}

// SetConfigured gets a reference to the given bool and assigns it to the Configured field.
func (o *Tile) SetConfigured(v bool) {
	o.Configured = &v
}

// GetBounds returns the Bounds field value
func (o *Tile) GetBounds() TileBounds {
	if o == nil  {
		var ret TileBounds
		return ret
	}

	return o.Bounds
}

// GetBoundsOk returns a tuple with the Bounds field value
// and a boolean to check if the value has been set.
func (o *Tile) GetBoundsOk() (*TileBounds, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Bounds, true
}

// SetBounds sets field value
func (o *Tile) SetBounds(v TileBounds) {
	o.Bounds = v
}

// GetTileFilter returns the TileFilter field value if set, zero value otherwise.
func (o *Tile) GetTileFilter() TileFilter {
	if o == nil || o.TileFilter == nil {
		var ret TileFilter
		return ret
	}
	return *o.TileFilter
}

// GetTileFilterOk returns a tuple with the TileFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetTileFilterOk() (*TileFilter, bool) {
	if o == nil || o.TileFilter == nil {
		return nil, false
	}
	return o.TileFilter, true
}

// HasTileFilter returns a boolean if a field has been set.
func (o *Tile) HasTileFilter() bool {
	if o != nil && o.TileFilter != nil {
		return true
	}

	return false
}

// SetTileFilter gets a reference to the given TileFilter and assigns it to the TileFilter field.
func (o *Tile) SetTileFilter(v TileFilter) {
	o.TileFilter = &v
}

// GetAssignedEntities returns the AssignedEntities field value if set, zero value otherwise.
func (o *Tile) GetAssignedEntities() []string {
	if o == nil || o.AssignedEntities == nil {
		var ret []string
		return ret
	}
	return *o.AssignedEntities
}

// GetAssignedEntitiesOk returns a tuple with the AssignedEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetAssignedEntitiesOk() (*[]string, bool) {
	if o == nil || o.AssignedEntities == nil {
		return nil, false
	}
	return o.AssignedEntities, true
}

// HasAssignedEntities returns a boolean if a field has been set.
func (o *Tile) HasAssignedEntities() bool {
	if o != nil && o.AssignedEntities != nil {
		return true
	}

	return false
}

// SetAssignedEntities gets a reference to the given []string and assigns it to the AssignedEntities field.
func (o *Tile) SetAssignedEntities(v []string) {
	o.AssignedEntities = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *Tile) GetMetric() string {
	if o == nil || o.Metric == nil {
		var ret string
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetMetricOk() (*string, bool) {
	if o == nil || o.Metric == nil {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *Tile) HasMetric() bool {
	if o != nil && o.Metric != nil {
		return true
	}

	return false
}

// SetMetric gets a reference to the given string and assigns it to the Metric field.
func (o *Tile) SetMetric(v string) {
	o.Metric = &v
}

// GetFilterConfig returns the FilterConfig field value if set, zero value otherwise.
func (o *Tile) GetFilterConfig() CustomFilterConfig {
	if o == nil || o.FilterConfig == nil {
		var ret CustomFilterConfig
		return ret
	}
	return *o.FilterConfig
}

// GetFilterConfigOk returns a tuple with the FilterConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetFilterConfigOk() (*CustomFilterConfig, bool) {
	if o == nil || o.FilterConfig == nil {
		return nil, false
	}
	return o.FilterConfig, true
}

// HasFilterConfig returns a boolean if a field has been set.
func (o *Tile) HasFilterConfig() bool {
	if o != nil && o.FilterConfig != nil {
		return true
	}

	return false
}

// SetFilterConfig gets a reference to the given CustomFilterConfig and assigns it to the FilterConfig field.
func (o *Tile) SetFilterConfig(v CustomFilterConfig) {
	o.FilterConfig = &v
}

// GetChartVisible returns the ChartVisible field value if set, zero value otherwise.
func (o *Tile) GetChartVisible() bool {
	if o == nil || o.ChartVisible == nil {
		var ret bool
		return ret
	}
	return *o.ChartVisible
}

// GetChartVisibleOk returns a tuple with the ChartVisible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetChartVisibleOk() (*bool, bool) {
	if o == nil || o.ChartVisible == nil {
		return nil, false
	}
	return o.ChartVisible, true
}

// HasChartVisible returns a boolean if a field has been set.
func (o *Tile) HasChartVisible() bool {
	if o != nil && o.ChartVisible != nil {
		return true
	}

	return false
}

// SetChartVisible gets a reference to the given bool and assigns it to the ChartVisible field.
func (o *Tile) SetChartVisible(v bool) {
	o.ChartVisible = &v
}

// GetMarkdown returns the Markdown field value if set, zero value otherwise.
func (o *Tile) GetMarkdown() string {
	if o == nil || o.Markdown == nil {
		var ret string
		return ret
	}
	return *o.Markdown
}

// GetMarkdownOk returns a tuple with the Markdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetMarkdownOk() (*string, bool) {
	if o == nil || o.Markdown == nil {
		return nil, false
	}
	return o.Markdown, true
}

// HasMarkdown returns a boolean if a field has been set.
func (o *Tile) HasMarkdown() bool {
	if o != nil && o.Markdown != nil {
		return true
	}

	return false
}

// SetMarkdown gets a reference to the given string and assigns it to the Markdown field.
func (o *Tile) SetMarkdown(v string) {
	o.Markdown = &v
}

// GetExcludeMaintenanceWindows returns the ExcludeMaintenanceWindows field value if set, zero value otherwise.
func (o *Tile) GetExcludeMaintenanceWindows() bool {
	if o == nil || o.ExcludeMaintenanceWindows == nil {
		var ret bool
		return ret
	}
	return *o.ExcludeMaintenanceWindows
}

// GetExcludeMaintenanceWindowsOk returns a tuple with the ExcludeMaintenanceWindows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetExcludeMaintenanceWindowsOk() (*bool, bool) {
	if o == nil || o.ExcludeMaintenanceWindows == nil {
		return nil, false
	}
	return o.ExcludeMaintenanceWindows, true
}

// HasExcludeMaintenanceWindows returns a boolean if a field has been set.
func (o *Tile) HasExcludeMaintenanceWindows() bool {
	if o != nil && o.ExcludeMaintenanceWindows != nil {
		return true
	}

	return false
}

// SetExcludeMaintenanceWindows gets a reference to the given bool and assigns it to the ExcludeMaintenanceWindows field.
func (o *Tile) SetExcludeMaintenanceWindows(v bool) {
	o.ExcludeMaintenanceWindows = &v
}

// GetCustomName returns the CustomName field value if set, zero value otherwise.
func (o *Tile) GetCustomName() string {
	if o == nil || o.CustomName == nil {
		var ret string
		return ret
	}
	return *o.CustomName
}

// GetCustomNameOk returns a tuple with the CustomName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetCustomNameOk() (*string, bool) {
	if o == nil || o.CustomName == nil {
		return nil, false
	}
	return o.CustomName, true
}

// HasCustomName returns a boolean if a field has been set.
func (o *Tile) HasCustomName() bool {
	if o != nil && o.CustomName != nil {
		return true
	}

	return false
}

// SetCustomName gets a reference to the given string and assigns it to the CustomName field.
func (o *Tile) SetCustomName(v string) {
	o.CustomName = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *Tile) GetQuery() string {
	if o == nil || o.Query == nil {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetQueryOk() (*string, bool) {
	if o == nil || o.Query == nil {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *Tile) HasQuery() bool {
	if o != nil && o.Query != nil {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *Tile) SetQuery(v string) {
	o.Query = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Tile) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Tile) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Tile) SetType(v string) {
	o.Type = &v
}

// GetTimeFrameShift returns the TimeFrameShift field value if set, zero value otherwise.
func (o *Tile) GetTimeFrameShift() string {
	if o == nil || o.TimeFrameShift == nil {
		var ret string
		return ret
	}
	return *o.TimeFrameShift
}

// GetTimeFrameShiftOk returns a tuple with the TimeFrameShift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetTimeFrameShiftOk() (*string, bool) {
	if o == nil || o.TimeFrameShift == nil {
		return nil, false
	}
	return o.TimeFrameShift, true
}

// HasTimeFrameShift returns a boolean if a field has been set.
func (o *Tile) HasTimeFrameShift() bool {
	if o != nil && o.TimeFrameShift != nil {
		return true
	}

	return false
}

// SetTimeFrameShift gets a reference to the given string and assigns it to the TimeFrameShift field.
func (o *Tile) SetTimeFrameShift(v string) {
	o.TimeFrameShift = &v
}

// GetVisualizationConfig returns the VisualizationConfig field value if set, zero value otherwise.
func (o *Tile) GetVisualizationConfig() UserSessionQueryTileConfiguration {
	if o == nil || o.VisualizationConfig == nil {
		var ret UserSessionQueryTileConfiguration
		return ret
	}
	return *o.VisualizationConfig
}

// GetVisualizationConfigOk returns a tuple with the VisualizationConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetVisualizationConfigOk() (*UserSessionQueryTileConfiguration, bool) {
	if o == nil || o.VisualizationConfig == nil {
		return nil, false
	}
	return o.VisualizationConfig, true
}

// HasVisualizationConfig returns a boolean if a field has been set.
func (o *Tile) HasVisualizationConfig() bool {
	if o != nil && o.VisualizationConfig != nil {
		return true
	}

	return false
}

// SetVisualizationConfig gets a reference to the given UserSessionQueryTileConfiguration and assigns it to the VisualizationConfig field.
func (o *Tile) SetVisualizationConfig(v UserSessionQueryTileConfiguration) {
	o.VisualizationConfig = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *Tile) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Tile) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *Tile) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *Tile) SetLimit(v int32) {
	o.Limit = &v
}

func (o Tile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["tileType"] = o.TileType
	}
	if o.Configured != nil {
		toSerialize["configured"] = o.Configured
	}
	if true {
		toSerialize["bounds"] = o.Bounds
	}
	if o.TileFilter != nil {
		toSerialize["tileFilter"] = o.TileFilter
	}
	if o.AssignedEntities != nil {
		toSerialize["assignedEntities"] = o.AssignedEntities
	}
	if o.Metric != nil {
		toSerialize["metric"] = o.Metric
	}
	if o.FilterConfig != nil {
		toSerialize["filterConfig"] = o.FilterConfig
	}
	if o.ChartVisible != nil {
		toSerialize["chartVisible"] = o.ChartVisible
	}
	if o.Markdown != nil {
		toSerialize["markdown"] = o.Markdown
	}
	if o.ExcludeMaintenanceWindows != nil {
		toSerialize["excludeMaintenanceWindows"] = o.ExcludeMaintenanceWindows
	}
	if o.CustomName != nil {
		toSerialize["customName"] = o.CustomName
	}
	if o.Query != nil {
		toSerialize["query"] = o.Query
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.TimeFrameShift != nil {
		toSerialize["timeFrameShift"] = o.TimeFrameShift
	}
	if o.VisualizationConfig != nil {
		toSerialize["visualizationConfig"] = o.VisualizationConfig
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	return json.Marshal(toSerialize)
}

type NullableTile struct {
	value *Tile
	isSet bool
}

func (v NullableTile) Get() *Tile {
	return v.value
}

func (v *NullableTile) Set(val *Tile) {
	v.value = val
	v.isSet = true
}

func (v NullableTile) IsSet() bool {
	return v.isSet
}

func (v *NullableTile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTile(val *Tile) *NullableTile {
	return &NullableTile{value: val, isSet: true}
}

func (v NullableTile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


