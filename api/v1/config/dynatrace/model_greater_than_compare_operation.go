/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// GreaterThanCompareOperation The condition of the `GREATER_THAN` type.   The condition checks whether the integer value is greater than the specified value.
type GreaterThanCompareOperation struct {
	CompareOperation
	// The value to compare to.
	Value int32 `json:"value"`
}

// NewGreaterThanCompareOperation instantiates a new GreaterThanCompareOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGreaterThanCompareOperation(value int32, ) *GreaterThanCompareOperation {
	this := GreaterThanCompareOperation{}
	this.Value = value
	return &this
}

// NewGreaterThanCompareOperationWithDefaults instantiates a new GreaterThanCompareOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGreaterThanCompareOperationWithDefaults() *GreaterThanCompareOperation {
	this := GreaterThanCompareOperation{}
	return &this
}

// GetValue returns the Value field value
func (o *GreaterThanCompareOperation) GetValue() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *GreaterThanCompareOperation) GetValueOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *GreaterThanCompareOperation) SetValue(v int32) {
	o.Value = v
}

func (o GreaterThanCompareOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedCompareOperation, errCompareOperation := json.Marshal(o.CompareOperation)
	if errCompareOperation != nil {
		return []byte{}, errCompareOperation
	}
	errCompareOperation = json.Unmarshal([]byte(serializedCompareOperation), &toSerialize)
	if errCompareOperation != nil {
		return []byte{}, errCompareOperation
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableGreaterThanCompareOperation struct {
	value *GreaterThanCompareOperation
	isSet bool
}

func (v NullableGreaterThanCompareOperation) Get() *GreaterThanCompareOperation {
	return v.value
}

func (v *NullableGreaterThanCompareOperation) Set(val *GreaterThanCompareOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableGreaterThanCompareOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableGreaterThanCompareOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGreaterThanCompareOperation(val *GreaterThanCompareOperation) *NullableGreaterThanCompareOperation {
	return &NullableGreaterThanCompareOperation{value: val, isSet: true}
}

func (v NullableGreaterThanCompareOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGreaterThanCompareOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


