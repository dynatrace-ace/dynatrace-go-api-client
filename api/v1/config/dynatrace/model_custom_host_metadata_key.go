/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CustomHostMetadataKey The key of the attribute, which need dynamic keys.   Not applicable otherwise, as the attibute itself acts as a key.
type CustomHostMetadataKey struct {
	// The source of the custom metadata.
	Source string `json:"source"`
	// The actual key of the custom metadata.
	Key string `json:"key"`
}

// NewCustomHostMetadataKey instantiates a new CustomHostMetadataKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomHostMetadataKey(source string, key string, ) *CustomHostMetadataKey {
	this := CustomHostMetadataKey{}
	this.Source = source
	this.Key = key
	return &this
}

// NewCustomHostMetadataKeyWithDefaults instantiates a new CustomHostMetadataKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomHostMetadataKeyWithDefaults() *CustomHostMetadataKey {
	this := CustomHostMetadataKey{}
	return &this
}

// GetSource returns the Source field value
func (o *CustomHostMetadataKey) GetSource() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *CustomHostMetadataKey) GetSourceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *CustomHostMetadataKey) SetSource(v string) {
	o.Source = v
}

// GetKey returns the Key field value
func (o *CustomHostMetadataKey) GetKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *CustomHostMetadataKey) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *CustomHostMetadataKey) SetKey(v string) {
	o.Key = v
}

func (o CustomHostMetadataKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableCustomHostMetadataKey struct {
	value *CustomHostMetadataKey
	isSet bool
}

func (v NullableCustomHostMetadataKey) Get() *CustomHostMetadataKey {
	return v.value
}

func (v *NullableCustomHostMetadataKey) Set(val *CustomHostMetadataKey) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomHostMetadataKey) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomHostMetadataKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomHostMetadataKey(val *CustomHostMetadataKey) *NullableCustomHostMetadataKey {
	return &NullableCustomHostMetadataKey{value: val, isSet: true}
}

func (v NullableCustomHostMetadataKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomHostMetadataKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


