/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UserTag Defines UserTags settings of an application.
type UserTag struct {
	// uniqueId, unique among all userTags and properties of this application
	UniqueId int32 `json:"uniqueId"`
	// If it's of type metaData, metaData id of the userTag
	MetadataId *int32 `json:"metadataId,omitempty"`
	// Cleanup rule expression of the userTag
	CleanupRule *string `json:"cleanupRule,omitempty"`
	// requestAttribute Id of the userTag
	ServerSideRequestAttribute *string `json:"serverSideRequestAttribute,omitempty"`
	// If true, the value of this tag will always be stored in lower case. Defaults to false.
	IgnoreCase *bool `json:"ignoreCase,omitempty"`
}

// NewUserTag instantiates a new UserTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTag(uniqueId int32, ) *UserTag {
	this := UserTag{}
	this.UniqueId = uniqueId
	return &this
}

// NewUserTagWithDefaults instantiates a new UserTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTagWithDefaults() *UserTag {
	this := UserTag{}
	return &this
}

// GetUniqueId returns the UniqueId field value
func (o *UserTag) GetUniqueId() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.UniqueId
}

// GetUniqueIdOk returns a tuple with the UniqueId field value
// and a boolean to check if the value has been set.
func (o *UserTag) GetUniqueIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UniqueId, true
}

// SetUniqueId sets field value
func (o *UserTag) SetUniqueId(v int32) {
	o.UniqueId = v
}

// GetMetadataId returns the MetadataId field value if set, zero value otherwise.
func (o *UserTag) GetMetadataId() int32 {
	if o == nil || o.MetadataId == nil {
		var ret int32
		return ret
	}
	return *o.MetadataId
}

// GetMetadataIdOk returns a tuple with the MetadataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTag) GetMetadataIdOk() (*int32, bool) {
	if o == nil || o.MetadataId == nil {
		return nil, false
	}
	return o.MetadataId, true
}

// HasMetadataId returns a boolean if a field has been set.
func (o *UserTag) HasMetadataId() bool {
	if o != nil && o.MetadataId != nil {
		return true
	}

	return false
}

// SetMetadataId gets a reference to the given int32 and assigns it to the MetadataId field.
func (o *UserTag) SetMetadataId(v int32) {
	o.MetadataId = &v
}

// GetCleanupRule returns the CleanupRule field value if set, zero value otherwise.
func (o *UserTag) GetCleanupRule() string {
	if o == nil || o.CleanupRule == nil {
		var ret string
		return ret
	}
	return *o.CleanupRule
}

// GetCleanupRuleOk returns a tuple with the CleanupRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTag) GetCleanupRuleOk() (*string, bool) {
	if o == nil || o.CleanupRule == nil {
		return nil, false
	}
	return o.CleanupRule, true
}

// HasCleanupRule returns a boolean if a field has been set.
func (o *UserTag) HasCleanupRule() bool {
	if o != nil && o.CleanupRule != nil {
		return true
	}

	return false
}

// SetCleanupRule gets a reference to the given string and assigns it to the CleanupRule field.
func (o *UserTag) SetCleanupRule(v string) {
	o.CleanupRule = &v
}

// GetServerSideRequestAttribute returns the ServerSideRequestAttribute field value if set, zero value otherwise.
func (o *UserTag) GetServerSideRequestAttribute() string {
	if o == nil || o.ServerSideRequestAttribute == nil {
		var ret string
		return ret
	}
	return *o.ServerSideRequestAttribute
}

// GetServerSideRequestAttributeOk returns a tuple with the ServerSideRequestAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTag) GetServerSideRequestAttributeOk() (*string, bool) {
	if o == nil || o.ServerSideRequestAttribute == nil {
		return nil, false
	}
	return o.ServerSideRequestAttribute, true
}

// HasServerSideRequestAttribute returns a boolean if a field has been set.
func (o *UserTag) HasServerSideRequestAttribute() bool {
	if o != nil && o.ServerSideRequestAttribute != nil {
		return true
	}

	return false
}

// SetServerSideRequestAttribute gets a reference to the given string and assigns it to the ServerSideRequestAttribute field.
func (o *UserTag) SetServerSideRequestAttribute(v string) {
	o.ServerSideRequestAttribute = &v
}

// GetIgnoreCase returns the IgnoreCase field value if set, zero value otherwise.
func (o *UserTag) GetIgnoreCase() bool {
	if o == nil || o.IgnoreCase == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreCase
}

// GetIgnoreCaseOk returns a tuple with the IgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTag) GetIgnoreCaseOk() (*bool, bool) {
	if o == nil || o.IgnoreCase == nil {
		return nil, false
	}
	return o.IgnoreCase, true
}

// HasIgnoreCase returns a boolean if a field has been set.
func (o *UserTag) HasIgnoreCase() bool {
	if o != nil && o.IgnoreCase != nil {
		return true
	}

	return false
}

// SetIgnoreCase gets a reference to the given bool and assigns it to the IgnoreCase field.
func (o *UserTag) SetIgnoreCase(v bool) {
	o.IgnoreCase = &v
}

func (o UserTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["uniqueId"] = o.UniqueId
	}
	if o.MetadataId != nil {
		toSerialize["metadataId"] = o.MetadataId
	}
	if o.CleanupRule != nil {
		toSerialize["cleanupRule"] = o.CleanupRule
	}
	if o.ServerSideRequestAttribute != nil {
		toSerialize["serverSideRequestAttribute"] = o.ServerSideRequestAttribute
	}
	if o.IgnoreCase != nil {
		toSerialize["ignoreCase"] = o.IgnoreCase
	}
	return json.Marshal(toSerialize)
}

type NullableUserTag struct {
	value *UserTag
	isSet bool
}

func (v NullableUserTag) Get() *UserTag {
	return v.value
}

func (v *NullableUserTag) Set(val *UserTag) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTag) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTag(val *UserTag) *NullableUserTag {
	return &NullableUserTag{value: val, isSet: true}
}

func (v NullableUserTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


