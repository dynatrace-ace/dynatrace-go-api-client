/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// IpAddressMappingLocation The location for an IP address mapping.
type IpAddressMappingLocation struct {
	// The country code of the location.    Use the alpha-2 code of the [ISO 3166-2 standard](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes), (for example, `AT` for Austria or `PL` for Poland).
	CountryCode string `json:"countryCode"`
	// The city name of the location.
	City *string `json:"city,omitempty"`
	// The region code of the location.    For the [USA](https://www.iso.org/obp/ui/#iso:code:3166:US) or [Canada](https://www.iso.org/obp/ui/#iso:code:3166:CA) use ISO 3166-2 state codes without `US-` or `CA-` prefix.    For the rest of the world use [FIPS 10-4 codes](https://en.wikipedia.org/wiki/List_of_FIPS_region_codes) without country prefix.
	RegionCode *string `json:"regionCode,omitempty"`
	// The latitude of the location in `DDD.dddd` format.
	Latitude *float64 `json:"latitude,omitempty"`
	// The longitude of the location in `DDD.dddd` format.
	Longitude *float64 `json:"longitude,omitempty"`
}

// NewIpAddressMappingLocation instantiates a new IpAddressMappingLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpAddressMappingLocation(countryCode string, ) *IpAddressMappingLocation {
	this := IpAddressMappingLocation{}
	this.CountryCode = countryCode
	return &this
}

// NewIpAddressMappingLocationWithDefaults instantiates a new IpAddressMappingLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpAddressMappingLocationWithDefaults() *IpAddressMappingLocation {
	this := IpAddressMappingLocation{}
	return &this
}

// GetCountryCode returns the CountryCode field value
func (o *IpAddressMappingLocation) GetCountryCode() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
func (o *IpAddressMappingLocation) GetCountryCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CountryCode, true
}

// SetCountryCode sets field value
func (o *IpAddressMappingLocation) SetCountryCode(v string) {
	o.CountryCode = v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *IpAddressMappingLocation) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddressMappingLocation) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *IpAddressMappingLocation) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *IpAddressMappingLocation) SetCity(v string) {
	o.City = &v
}

// GetRegionCode returns the RegionCode field value if set, zero value otherwise.
func (o *IpAddressMappingLocation) GetRegionCode() string {
	if o == nil || o.RegionCode == nil {
		var ret string
		return ret
	}
	return *o.RegionCode
}

// GetRegionCodeOk returns a tuple with the RegionCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddressMappingLocation) GetRegionCodeOk() (*string, bool) {
	if o == nil || o.RegionCode == nil {
		return nil, false
	}
	return o.RegionCode, true
}

// HasRegionCode returns a boolean if a field has been set.
func (o *IpAddressMappingLocation) HasRegionCode() bool {
	if o != nil && o.RegionCode != nil {
		return true
	}

	return false
}

// SetRegionCode gets a reference to the given string and assigns it to the RegionCode field.
func (o *IpAddressMappingLocation) SetRegionCode(v string) {
	o.RegionCode = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *IpAddressMappingLocation) GetLatitude() float64 {
	if o == nil || o.Latitude == nil {
		var ret float64
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddressMappingLocation) GetLatitudeOk() (*float64, bool) {
	if o == nil || o.Latitude == nil {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *IpAddressMappingLocation) HasLatitude() bool {
	if o != nil && o.Latitude != nil {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float64 and assigns it to the Latitude field.
func (o *IpAddressMappingLocation) SetLatitude(v float64) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *IpAddressMappingLocation) GetLongitude() float64 {
	if o == nil || o.Longitude == nil {
		var ret float64
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpAddressMappingLocation) GetLongitudeOk() (*float64, bool) {
	if o == nil || o.Longitude == nil {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *IpAddressMappingLocation) HasLongitude() bool {
	if o != nil && o.Longitude != nil {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float64 and assigns it to the Longitude field.
func (o *IpAddressMappingLocation) SetLongitude(v float64) {
	o.Longitude = &v
}

func (o IpAddressMappingLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["countryCode"] = o.CountryCode
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.RegionCode != nil {
		toSerialize["regionCode"] = o.RegionCode
	}
	if o.Latitude != nil {
		toSerialize["latitude"] = o.Latitude
	}
	if o.Longitude != nil {
		toSerialize["longitude"] = o.Longitude
	}
	return json.Marshal(toSerialize)
}

type NullableIpAddressMappingLocation struct {
	value *IpAddressMappingLocation
	isSet bool
}

func (v NullableIpAddressMappingLocation) Get() *IpAddressMappingLocation {
	return v.value
}

func (v *NullableIpAddressMappingLocation) Set(val *IpAddressMappingLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableIpAddressMappingLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableIpAddressMappingLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpAddressMappingLocation(val *IpAddressMappingLocation) *NullableIpAddressMappingLocation {
	return &NullableIpAddressMappingLocation{value: val, isSet: true}
}

func (v NullableIpAddressMappingLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpAddressMappingLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


