/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ValueCondition IBM integration bus label node name condition for which the value is captured.
type ValueCondition struct {
	// Operator comparing the extracted value to the comparison value.
	Operator string `json:"operator"`
	// Negate the comparison.
	Negate bool `json:"negate"`
	// The value to compare to.
	Value string `json:"value"`
}

// NewValueCondition instantiates a new ValueCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValueCondition(operator string, negate bool, value string, ) *ValueCondition {
	this := ValueCondition{}
	this.Operator = operator
	this.Negate = negate
	this.Value = value
	return &this
}

// NewValueConditionWithDefaults instantiates a new ValueCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueConditionWithDefaults() *ValueCondition {
	this := ValueCondition{}
	return &this
}

// GetOperator returns the Operator field value
func (o *ValueCondition) GetOperator() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *ValueCondition) GetOperatorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *ValueCondition) SetOperator(v string) {
	o.Operator = v
}

// GetNegate returns the Negate field value
func (o *ValueCondition) GetNegate() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.Negate
}

// GetNegateOk returns a tuple with the Negate field value
// and a boolean to check if the value has been set.
func (o *ValueCondition) GetNegateOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Negate, true
}

// SetNegate sets field value
func (o *ValueCondition) SetNegate(v bool) {
	o.Negate = v
}

// GetValue returns the Value field value
func (o *ValueCondition) GetValue() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ValueCondition) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ValueCondition) SetValue(v string) {
	o.Value = v
}

func (o ValueCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["operator"] = o.Operator
	}
	if true {
		toSerialize["negate"] = o.Negate
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableValueCondition struct {
	value *ValueCondition
	isSet bool
}

func (v NullableValueCondition) Get() *ValueCondition {
	return v.value
}

func (v *NullableValueCondition) Set(val *ValueCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableValueCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableValueCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValueCondition(val *ValueCondition) *NullableValueCondition {
	return &NullableValueCondition{value: val, isSet: true}
}

func (v NullableValueCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValueCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


