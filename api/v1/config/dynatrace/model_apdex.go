/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Apdex Defines the Apdex settings of an application.
type Apdex struct {
	Threshold *float32 `json:"threshold,omitempty"`
	// Maximal length of an action, in milliseconds, which is considered as satisfied user experience.    You can use values between 100 and 60000.
	ToleratedThreshold *int32 `json:"toleratedThreshold,omitempty"`
	// Maximal length of an action, in milliseconds, which is considered as tolerable user experience.    You can use values between 100 and 240000.
	FrustratingThreshold *int32 `json:"frustratingThreshold,omitempty"`
	// Fallback threshold of an XHR action, in milliseconds, defining a satisfied user experience, when the configured KPM is not available.    Values between 100 and 60000 are allowed.
	ToleratedFallbackThreshold *int32 `json:"toleratedFallbackThreshold,omitempty"`
	// Fallback threshold of an XHR action, in milliseconds, defining a tolerable user experience, when the configured KPM is not available.    Values between 100 and 240000 are allowed.
	FrustratingFallbackThreshold *int32 `json:"frustratingFallbackThreshold,omitempty"`
}

// NewApdex instantiates a new Apdex object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApdex() *Apdex {
	this := Apdex{}
	return &this
}

// NewApdexWithDefaults instantiates a new Apdex object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApdexWithDefaults() *Apdex {
	this := Apdex{}
	return &this
}

// GetThreshold returns the Threshold field value if set, zero value otherwise.
func (o *Apdex) GetThreshold() float32 {
	if o == nil || o.Threshold == nil {
		var ret float32
		return ret
	}
	return *o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apdex) GetThresholdOk() (*float32, bool) {
	if o == nil || o.Threshold == nil {
		return nil, false
	}
	return o.Threshold, true
}

// HasThreshold returns a boolean if a field has been set.
func (o *Apdex) HasThreshold() bool {
	if o != nil && o.Threshold != nil {
		return true
	}

	return false
}

// SetThreshold gets a reference to the given float32 and assigns it to the Threshold field.
func (o *Apdex) SetThreshold(v float32) {
	o.Threshold = &v
}

// GetToleratedThreshold returns the ToleratedThreshold field value if set, zero value otherwise.
func (o *Apdex) GetToleratedThreshold() int32 {
	if o == nil || o.ToleratedThreshold == nil {
		var ret int32
		return ret
	}
	return *o.ToleratedThreshold
}

// GetToleratedThresholdOk returns a tuple with the ToleratedThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apdex) GetToleratedThresholdOk() (*int32, bool) {
	if o == nil || o.ToleratedThreshold == nil {
		return nil, false
	}
	return o.ToleratedThreshold, true
}

// HasToleratedThreshold returns a boolean if a field has been set.
func (o *Apdex) HasToleratedThreshold() bool {
	if o != nil && o.ToleratedThreshold != nil {
		return true
	}

	return false
}

// SetToleratedThreshold gets a reference to the given int32 and assigns it to the ToleratedThreshold field.
func (o *Apdex) SetToleratedThreshold(v int32) {
	o.ToleratedThreshold = &v
}

// GetFrustratingThreshold returns the FrustratingThreshold field value if set, zero value otherwise.
func (o *Apdex) GetFrustratingThreshold() int32 {
	if o == nil || o.FrustratingThreshold == nil {
		var ret int32
		return ret
	}
	return *o.FrustratingThreshold
}

// GetFrustratingThresholdOk returns a tuple with the FrustratingThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apdex) GetFrustratingThresholdOk() (*int32, bool) {
	if o == nil || o.FrustratingThreshold == nil {
		return nil, false
	}
	return o.FrustratingThreshold, true
}

// HasFrustratingThreshold returns a boolean if a field has been set.
func (o *Apdex) HasFrustratingThreshold() bool {
	if o != nil && o.FrustratingThreshold != nil {
		return true
	}

	return false
}

// SetFrustratingThreshold gets a reference to the given int32 and assigns it to the FrustratingThreshold field.
func (o *Apdex) SetFrustratingThreshold(v int32) {
	o.FrustratingThreshold = &v
}

// GetToleratedFallbackThreshold returns the ToleratedFallbackThreshold field value if set, zero value otherwise.
func (o *Apdex) GetToleratedFallbackThreshold() int32 {
	if o == nil || o.ToleratedFallbackThreshold == nil {
		var ret int32
		return ret
	}
	return *o.ToleratedFallbackThreshold
}

// GetToleratedFallbackThresholdOk returns a tuple with the ToleratedFallbackThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apdex) GetToleratedFallbackThresholdOk() (*int32, bool) {
	if o == nil || o.ToleratedFallbackThreshold == nil {
		return nil, false
	}
	return o.ToleratedFallbackThreshold, true
}

// HasToleratedFallbackThreshold returns a boolean if a field has been set.
func (o *Apdex) HasToleratedFallbackThreshold() bool {
	if o != nil && o.ToleratedFallbackThreshold != nil {
		return true
	}

	return false
}

// SetToleratedFallbackThreshold gets a reference to the given int32 and assigns it to the ToleratedFallbackThreshold field.
func (o *Apdex) SetToleratedFallbackThreshold(v int32) {
	o.ToleratedFallbackThreshold = &v
}

// GetFrustratingFallbackThreshold returns the FrustratingFallbackThreshold field value if set, zero value otherwise.
func (o *Apdex) GetFrustratingFallbackThreshold() int32 {
	if o == nil || o.FrustratingFallbackThreshold == nil {
		var ret int32
		return ret
	}
	return *o.FrustratingFallbackThreshold
}

// GetFrustratingFallbackThresholdOk returns a tuple with the FrustratingFallbackThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apdex) GetFrustratingFallbackThresholdOk() (*int32, bool) {
	if o == nil || o.FrustratingFallbackThreshold == nil {
		return nil, false
	}
	return o.FrustratingFallbackThreshold, true
}

// HasFrustratingFallbackThreshold returns a boolean if a field has been set.
func (o *Apdex) HasFrustratingFallbackThreshold() bool {
	if o != nil && o.FrustratingFallbackThreshold != nil {
		return true
	}

	return false
}

// SetFrustratingFallbackThreshold gets a reference to the given int32 and assigns it to the FrustratingFallbackThreshold field.
func (o *Apdex) SetFrustratingFallbackThreshold(v int32) {
	o.FrustratingFallbackThreshold = &v
}

func (o Apdex) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Threshold != nil {
		toSerialize["threshold"] = o.Threshold
	}
	if o.ToleratedThreshold != nil {
		toSerialize["toleratedThreshold"] = o.ToleratedThreshold
	}
	if o.FrustratingThreshold != nil {
		toSerialize["frustratingThreshold"] = o.FrustratingThreshold
	}
	if o.ToleratedFallbackThreshold != nil {
		toSerialize["toleratedFallbackThreshold"] = o.ToleratedFallbackThreshold
	}
	if o.FrustratingFallbackThreshold != nil {
		toSerialize["frustratingFallbackThreshold"] = o.FrustratingFallbackThreshold
	}
	return json.Marshal(toSerialize)
}

type NullableApdex struct {
	value *Apdex
	isSet bool
}

func (v NullableApdex) Get() *Apdex {
	return v.value
}

func (v *NullableApdex) Set(val *Apdex) {
	v.value = val
	v.isSet = true
}

func (v NullableApdex) IsSet() bool {
	return v.isSet
}

func (v *NullableApdex) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApdex(val *Apdex) *NullableApdex {
	return &NullableApdex{value: val, isSet: true}
}

func (v NullableApdex) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApdex) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


