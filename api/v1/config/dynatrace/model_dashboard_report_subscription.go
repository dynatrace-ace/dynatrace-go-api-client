/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// DashboardReportSubscription A list of the report subscribers.
type DashboardReportSubscription struct {
	// A list of weekly subscribers.   Weekly subscribers receive the report every Monday at midnight.    You can specify email addresses or Dynatrace user IDs here.
	WEEK *[]string `json:"WEEK,omitempty"`
	// A list of monthly subscribers.   Monthly subscribers receive the report on the first Monday of the month at midnight.   You can specify email addresses or Dynatrace user IDs here.
	MONTH *[]string `json:"MONTH,omitempty"`
}

// NewDashboardReportSubscription instantiates a new DashboardReportSubscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboardReportSubscription() *DashboardReportSubscription {
	this := DashboardReportSubscription{}
	return &this
}

// NewDashboardReportSubscriptionWithDefaults instantiates a new DashboardReportSubscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardReportSubscriptionWithDefaults() *DashboardReportSubscription {
	this := DashboardReportSubscription{}
	return &this
}

// GetWEEK returns the WEEK field value if set, zero value otherwise.
func (o *DashboardReportSubscription) GetWEEK() []string {
	if o == nil || o.WEEK == nil {
		var ret []string
		return ret
	}
	return *o.WEEK
}

// GetWEEKOk returns a tuple with the WEEK field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardReportSubscription) GetWEEKOk() (*[]string, bool) {
	if o == nil || o.WEEK == nil {
		return nil, false
	}
	return o.WEEK, true
}

// HasWEEK returns a boolean if a field has been set.
func (o *DashboardReportSubscription) HasWEEK() bool {
	if o != nil && o.WEEK != nil {
		return true
	}

	return false
}

// SetWEEK gets a reference to the given []string and assigns it to the WEEK field.
func (o *DashboardReportSubscription) SetWEEK(v []string) {
	o.WEEK = &v
}

// GetMONTH returns the MONTH field value if set, zero value otherwise.
func (o *DashboardReportSubscription) GetMONTH() []string {
	if o == nil || o.MONTH == nil {
		var ret []string
		return ret
	}
	return *o.MONTH
}

// GetMONTHOk returns a tuple with the MONTH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DashboardReportSubscription) GetMONTHOk() (*[]string, bool) {
	if o == nil || o.MONTH == nil {
		return nil, false
	}
	return o.MONTH, true
}

// HasMONTH returns a boolean if a field has been set.
func (o *DashboardReportSubscription) HasMONTH() bool {
	if o != nil && o.MONTH != nil {
		return true
	}

	return false
}

// SetMONTH gets a reference to the given []string and assigns it to the MONTH field.
func (o *DashboardReportSubscription) SetMONTH(v []string) {
	o.MONTH = &v
}

func (o DashboardReportSubscription) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WEEK != nil {
		toSerialize["WEEK"] = o.WEEK
	}
	if o.MONTH != nil {
		toSerialize["MONTH"] = o.MONTH
	}
	return json.Marshal(toSerialize)
}

type NullableDashboardReportSubscription struct {
	value *DashboardReportSubscription
	isSet bool
}

func (v NullableDashboardReportSubscription) Get() *DashboardReportSubscription {
	return v.value
}

func (v *NullableDashboardReportSubscription) Set(val *DashboardReportSubscription) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboardReportSubscription) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboardReportSubscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboardReportSubscription(val *DashboardReportSubscription) *NullableDashboardReportSubscription {
	return &NullableDashboardReportSubscription{value: val, isSet: true}
}

func (v NullableDashboardReportSubscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboardReportSubscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


