/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// HostList The list of hosts supported by extension.
type HostList struct {
	// Total number of results
	TotalResults *int32 `json:"totalResults,omitempty"`
	// The list of hosts
	Hosts *[]Host `json:"hosts,omitempty"`
	// Next page key used for paging
	NextPageKey *string `json:"nextPageKey,omitempty"`
}

// NewHostList instantiates a new HostList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostList() *HostList {
	this := HostList{}
	return &this
}

// NewHostListWithDefaults instantiates a new HostList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostListWithDefaults() *HostList {
	this := HostList{}
	return &this
}

// GetTotalResults returns the TotalResults field value if set, zero value otherwise.
func (o *HostList) GetTotalResults() int32 {
	if o == nil || o.TotalResults == nil {
		var ret int32
		return ret
	}
	return *o.TotalResults
}

// GetTotalResultsOk returns a tuple with the TotalResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostList) GetTotalResultsOk() (*int32, bool) {
	if o == nil || o.TotalResults == nil {
		return nil, false
	}
	return o.TotalResults, true
}

// HasTotalResults returns a boolean if a field has been set.
func (o *HostList) HasTotalResults() bool {
	if o != nil && o.TotalResults != nil {
		return true
	}

	return false
}

// SetTotalResults gets a reference to the given int32 and assigns it to the TotalResults field.
func (o *HostList) SetTotalResults(v int32) {
	o.TotalResults = &v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *HostList) GetHosts() []Host {
	if o == nil || o.Hosts == nil {
		var ret []Host
		return ret
	}
	return *o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostList) GetHostsOk() (*[]Host, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *HostList) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []Host and assigns it to the Hosts field.
func (o *HostList) SetHosts(v []Host) {
	o.Hosts = &v
}

// GetNextPageKey returns the NextPageKey field value if set, zero value otherwise.
func (o *HostList) GetNextPageKey() string {
	if o == nil || o.NextPageKey == nil {
		var ret string
		return ret
	}
	return *o.NextPageKey
}

// GetNextPageKeyOk returns a tuple with the NextPageKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostList) GetNextPageKeyOk() (*string, bool) {
	if o == nil || o.NextPageKey == nil {
		return nil, false
	}
	return o.NextPageKey, true
}

// HasNextPageKey returns a boolean if a field has been set.
func (o *HostList) HasNextPageKey() bool {
	if o != nil && o.NextPageKey != nil {
		return true
	}

	return false
}

// SetNextPageKey gets a reference to the given string and assigns it to the NextPageKey field.
func (o *HostList) SetNextPageKey(v string) {
	o.NextPageKey = &v
}

func (o HostList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TotalResults != nil {
		toSerialize["totalResults"] = o.TotalResults
	}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	if o.NextPageKey != nil {
		toSerialize["nextPageKey"] = o.NextPageKey
	}
	return json.Marshal(toSerialize)
}

type NullableHostList struct {
	value *HostList
	isSet bool
}

func (v NullableHostList) Get() *HostList {
	return v.value
}

func (v *NullableHostList) Set(val *HostList) {
	v.value = val
	v.isSet = true
}

func (v NullableHostList) IsSet() bool {
	return v.isSet
}

func (v *NullableHostList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostList(val *HostList) *NullableHostList {
	return &NullableHostList{value: val, isSet: true}
}

func (v NullableHostList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


