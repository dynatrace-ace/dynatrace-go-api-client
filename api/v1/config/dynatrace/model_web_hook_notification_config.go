/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// WebHookNotificationConfig Configuration of the custom WebHook notification.
type WebHookNotificationConfig struct {
	NotificationConfig
	// The URL of the WebHook endpoint.
	Url string `json:"url"`
	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates.
	AcceptAnyCertificate bool `json:"acceptAnyCertificate"`
	// The content of the notification message.   You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas.  
	Payload string `json:"payload"`
	// A list of the additional HTTP headers.
	Headers *[]HttpHeader `json:"headers,omitempty"`
}

// NewWebHookNotificationConfig instantiates a new WebHookNotificationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebHookNotificationConfig(url string, acceptAnyCertificate bool, payload string, ) *WebHookNotificationConfig {
	this := WebHookNotificationConfig{}
	this.Url = url
	this.AcceptAnyCertificate = acceptAnyCertificate
	this.Payload = payload
	return &this
}

// NewWebHookNotificationConfigWithDefaults instantiates a new WebHookNotificationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebHookNotificationConfigWithDefaults() *WebHookNotificationConfig {
	this := WebHookNotificationConfig{}
	return &this
}

// GetUrl returns the Url field value
func (o *WebHookNotificationConfig) GetUrl() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *WebHookNotificationConfig) GetUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *WebHookNotificationConfig) SetUrl(v string) {
	o.Url = v
}

// GetAcceptAnyCertificate returns the AcceptAnyCertificate field value
func (o *WebHookNotificationConfig) GetAcceptAnyCertificate() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.AcceptAnyCertificate
}

// GetAcceptAnyCertificateOk returns a tuple with the AcceptAnyCertificate field value
// and a boolean to check if the value has been set.
func (o *WebHookNotificationConfig) GetAcceptAnyCertificateOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AcceptAnyCertificate, true
}

// SetAcceptAnyCertificate sets field value
func (o *WebHookNotificationConfig) SetAcceptAnyCertificate(v bool) {
	o.AcceptAnyCertificate = v
}

// GetPayload returns the Payload field value
func (o *WebHookNotificationConfig) GetPayload() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *WebHookNotificationConfig) GetPayloadOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Payload, true
}

// SetPayload sets field value
func (o *WebHookNotificationConfig) SetPayload(v string) {
	o.Payload = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *WebHookNotificationConfig) GetHeaders() []HttpHeader {
	if o == nil || o.Headers == nil {
		var ret []HttpHeader
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebHookNotificationConfig) GetHeadersOk() (*[]HttpHeader, bool) {
	if o == nil || o.Headers == nil {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *WebHookNotificationConfig) HasHeaders() bool {
	if o != nil && o.Headers != nil {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []HttpHeader and assigns it to the Headers field.
func (o *WebHookNotificationConfig) SetHeaders(v []HttpHeader) {
	o.Headers = &v
}

func (o WebHookNotificationConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedNotificationConfig, errNotificationConfig := json.Marshal(o.NotificationConfig)
	if errNotificationConfig != nil {
		return []byte{}, errNotificationConfig
	}
	errNotificationConfig = json.Unmarshal([]byte(serializedNotificationConfig), &toSerialize)
	if errNotificationConfig != nil {
		return []byte{}, errNotificationConfig
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["acceptAnyCertificate"] = o.AcceptAnyCertificate
	}
	if true {
		toSerialize["payload"] = o.Payload
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	return json.Marshal(toSerialize)
}

type NullableWebHookNotificationConfig struct {
	value *WebHookNotificationConfig
	isSet bool
}

func (v NullableWebHookNotificationConfig) Get() *WebHookNotificationConfig {
	return v.value
}

func (v *NullableWebHookNotificationConfig) Set(val *WebHookNotificationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableWebHookNotificationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableWebHookNotificationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebHookNotificationConfig(val *WebHookNotificationConfig) *NullableWebHookNotificationConfig {
	return &NullableWebHookNotificationConfig{value: val, isSet: true}
}

func (v NullableWebHookNotificationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebHookNotificationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


