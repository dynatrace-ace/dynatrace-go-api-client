/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CustomColumnDefinition Definition of a custom column.
type CustomColumnDefinition struct {
	ColumnDefinition
	Prefix string `json:"prefix"`
	Suffix string `json:"suffix"`
}

// NewCustomColumnDefinition instantiates a new CustomColumnDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomColumnDefinition(prefix string, suffix string, ) *CustomColumnDefinition {
	this := CustomColumnDefinition{}
	this.Prefix = prefix
	this.Suffix = suffix
	return &this
}

// NewCustomColumnDefinitionWithDefaults instantiates a new CustomColumnDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomColumnDefinitionWithDefaults() *CustomColumnDefinition {
	this := CustomColumnDefinition{}
	return &this
}

// GetPrefix returns the Prefix field value
func (o *CustomColumnDefinition) GetPrefix() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *CustomColumnDefinition) GetPrefixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *CustomColumnDefinition) SetPrefix(v string) {
	o.Prefix = v
}

// GetSuffix returns the Suffix field value
func (o *CustomColumnDefinition) GetSuffix() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Suffix
}

// GetSuffixOk returns a tuple with the Suffix field value
// and a boolean to check if the value has been set.
func (o *CustomColumnDefinition) GetSuffixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Suffix, true
}

// SetSuffix sets field value
func (o *CustomColumnDefinition) SetSuffix(v string) {
	o.Suffix = v
}

func (o CustomColumnDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedColumnDefinition, errColumnDefinition := json.Marshal(o.ColumnDefinition)
	if errColumnDefinition != nil {
		return []byte{}, errColumnDefinition
	}
	errColumnDefinition = json.Unmarshal([]byte(serializedColumnDefinition), &toSerialize)
	if errColumnDefinition != nil {
		return []byte{}, errColumnDefinition
	}
	if true {
		toSerialize["prefix"] = o.Prefix
	}
	if true {
		toSerialize["suffix"] = o.Suffix
	}
	return json.Marshal(toSerialize)
}

type NullableCustomColumnDefinition struct {
	value *CustomColumnDefinition
	isSet bool
}

func (v NullableCustomColumnDefinition) Get() *CustomColumnDefinition {
	return v.value
}

func (v *NullableCustomColumnDefinition) Set(val *CustomColumnDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomColumnDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomColumnDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomColumnDefinition(val *CustomColumnDefinition) *NullableCustomColumnDefinition {
	return &NullableCustomColumnDefinition{value: val, isSet: true}
}

func (v NullableCustomColumnDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomColumnDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


