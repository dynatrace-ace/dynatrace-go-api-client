/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// DroppedPacketsThresholds Custom thresholds for high number of dropped packets. If not set then the automatic mode is used.
type DroppedPacketsThresholds struct {
	// Alert if receive/transmit dropped packets rate on NIC is higher than *X* packets per second in 3 out of 5 samples.
	DroppedPacketsPerSecond int32 `json:"droppedPacketsPerSecond"`
}

// NewDroppedPacketsThresholds instantiates a new DroppedPacketsThresholds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDroppedPacketsThresholds(droppedPacketsPerSecond int32, ) *DroppedPacketsThresholds {
	this := DroppedPacketsThresholds{}
	this.DroppedPacketsPerSecond = droppedPacketsPerSecond
	return &this
}

// NewDroppedPacketsThresholdsWithDefaults instantiates a new DroppedPacketsThresholds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDroppedPacketsThresholdsWithDefaults() *DroppedPacketsThresholds {
	this := DroppedPacketsThresholds{}
	return &this
}

// GetDroppedPacketsPerSecond returns the DroppedPacketsPerSecond field value
func (o *DroppedPacketsThresholds) GetDroppedPacketsPerSecond() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.DroppedPacketsPerSecond
}

// GetDroppedPacketsPerSecondOk returns a tuple with the DroppedPacketsPerSecond field value
// and a boolean to check if the value has been set.
func (o *DroppedPacketsThresholds) GetDroppedPacketsPerSecondOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DroppedPacketsPerSecond, true
}

// SetDroppedPacketsPerSecond sets field value
func (o *DroppedPacketsThresholds) SetDroppedPacketsPerSecond(v int32) {
	o.DroppedPacketsPerSecond = v
}

func (o DroppedPacketsThresholds) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["droppedPacketsPerSecond"] = o.DroppedPacketsPerSecond
	}
	return json.Marshal(toSerialize)
}

type NullableDroppedPacketsThresholds struct {
	value *DroppedPacketsThresholds
	isSet bool
}

func (v NullableDroppedPacketsThresholds) Get() *DroppedPacketsThresholds {
	return v.value
}

func (v *NullableDroppedPacketsThresholds) Set(val *DroppedPacketsThresholds) {
	v.value = val
	v.isSet = true
}

func (v NullableDroppedPacketsThresholds) IsSet() bool {
	return v.isSet
}

func (v *NullableDroppedPacketsThresholds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDroppedPacketsThresholds(val *DroppedPacketsThresholds) *NullableDroppedPacketsThresholds {
	return &NullableDroppedPacketsThresholds{value: val, isSet: true}
}

func (v NullableDroppedPacketsThresholds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDroppedPacketsThresholds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


