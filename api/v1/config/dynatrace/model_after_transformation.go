/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AfterTransformation The transformation of the `AFTER` type.The transformation removes everything before the specified delimiter and keeps the value after it.
type AfterTransformation struct {
	TransformationBase
	// The delimiter of the transformation. The transformation removes everything before this delimiter and keeps everything after it.     The delimiter itself is not kept.    If several delimiters appear in the initial value, only the first one is used.
	Delimiter string `json:"delimiter"`
}

// NewAfterTransformation instantiates a new AfterTransformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAfterTransformation(delimiter string, ) *AfterTransformation {
	this := AfterTransformation{}
	this.Delimiter = delimiter
	return &this
}

// NewAfterTransformationWithDefaults instantiates a new AfterTransformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAfterTransformationWithDefaults() *AfterTransformation {
	this := AfterTransformation{}
	return &this
}

// GetDelimiter returns the Delimiter field value
func (o *AfterTransformation) GetDelimiter() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value
// and a boolean to check if the value has been set.
func (o *AfterTransformation) GetDelimiterOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Delimiter, true
}

// SetDelimiter sets field value
func (o *AfterTransformation) SetDelimiter(v string) {
	o.Delimiter = v
}

func (o AfterTransformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedTransformationBase, errTransformationBase := json.Marshal(o.TransformationBase)
	if errTransformationBase != nil {
		return []byte{}, errTransformationBase
	}
	errTransformationBase = json.Unmarshal([]byte(serializedTransformationBase), &toSerialize)
	if errTransformationBase != nil {
		return []byte{}, errTransformationBase
	}
	if true {
		toSerialize["delimiter"] = o.Delimiter
	}
	return json.Marshal(toSerialize)
}

type NullableAfterTransformation struct {
	value *AfterTransformation
	isSet bool
}

func (v NullableAfterTransformation) Get() *AfterTransformation {
	return v.value
}

func (v *NullableAfterTransformation) Set(val *AfterTransformation) {
	v.value = val
	v.isSet = true
}

func (v NullableAfterTransformation) IsSet() bool {
	return v.isSet
}

func (v *NullableAfterTransformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAfterTransformation(val *AfterTransformation) *NullableAfterTransformation {
	return &NullableAfterTransformation{value: val, isSet: true}
}

func (v NullableAfterTransformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAfterTransformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


