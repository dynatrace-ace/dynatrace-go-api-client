/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// DiskSlowWriteAndReadsThresholds Custom thresholds for slow running disks. If not set, the automatic mode is used.
type DiskSlowWriteAndReadsThresholds struct {
	// Alert if disk read/write time is higher than *X* milliseconds in 3 out of 5 samples.
	WriteAndReadTime int32 `json:"writeAndReadTime"`
}

// NewDiskSlowWriteAndReadsThresholds instantiates a new DiskSlowWriteAndReadsThresholds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskSlowWriteAndReadsThresholds(writeAndReadTime int32, ) *DiskSlowWriteAndReadsThresholds {
	this := DiskSlowWriteAndReadsThresholds{}
	this.WriteAndReadTime = writeAndReadTime
	return &this
}

// NewDiskSlowWriteAndReadsThresholdsWithDefaults instantiates a new DiskSlowWriteAndReadsThresholds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskSlowWriteAndReadsThresholdsWithDefaults() *DiskSlowWriteAndReadsThresholds {
	this := DiskSlowWriteAndReadsThresholds{}
	return &this
}

// GetWriteAndReadTime returns the WriteAndReadTime field value
func (o *DiskSlowWriteAndReadsThresholds) GetWriteAndReadTime() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.WriteAndReadTime
}

// GetWriteAndReadTimeOk returns a tuple with the WriteAndReadTime field value
// and a boolean to check if the value has been set.
func (o *DiskSlowWriteAndReadsThresholds) GetWriteAndReadTimeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WriteAndReadTime, true
}

// SetWriteAndReadTime sets field value
func (o *DiskSlowWriteAndReadsThresholds) SetWriteAndReadTime(v int32) {
	o.WriteAndReadTime = v
}

func (o DiskSlowWriteAndReadsThresholds) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["writeAndReadTime"] = o.WriteAndReadTime
	}
	return json.Marshal(toSerialize)
}

type NullableDiskSlowWriteAndReadsThresholds struct {
	value *DiskSlowWriteAndReadsThresholds
	isSet bool
}

func (v NullableDiskSlowWriteAndReadsThresholds) Get() *DiskSlowWriteAndReadsThresholds {
	return v.value
}

func (v *NullableDiskSlowWriteAndReadsThresholds) Set(val *DiskSlowWriteAndReadsThresholds) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskSlowWriteAndReadsThresholds) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskSlowWriteAndReadsThresholds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskSlowWriteAndReadsThresholds(val *DiskSlowWriteAndReadsThresholds) *NullableDiskSlowWriteAndReadsThresholds {
	return &NullableDiskSlowWriteAndReadsThresholds{value: val, isSet: true}
}

func (v NullableDiskSlowWriteAndReadsThresholds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskSlowWriteAndReadsThresholds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


