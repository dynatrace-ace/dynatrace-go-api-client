/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ContextRoot The contribution to the service ID calculation from the detected context root.    The context root is the first segment of the request URL after server name. For example, in the `www.dynatrace.com/support/help/extend-dynatrace/dynatrace-api/` URL the context root is `support`.   You have two options:  * Keep a part of the detected URL. Specify the number of segments to be kept in the **segmentsToCopyFromUrlPath** field.  * Dynamically transform the detected URL. Specify the transformation parameters in the **transformations** field.   You can use one or both options. If you use both, the transformation applies to the modified URL.
type ContextRoot struct {
	// Transformations to be applied to the detected value.
	Transformations *[]ContextRootTransformation `json:"transformations,omitempty"`
	// The number of segments of the URL to be kept.   The URL is divided by slashes (`/`), the indexing starts with `1` at context root.   For example, if you specify `2` for the `www.dynatrace.com/support/help/dynatrace-api/` URL, the value of `support/help` is used.
	SegmentsToCopyFromUrlPath *int32 `json:"segmentsToCopyFromUrlPath,omitempty"`
}

// NewContextRoot instantiates a new ContextRoot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContextRoot() *ContextRoot {
	this := ContextRoot{}
	return &this
}

// NewContextRootWithDefaults instantiates a new ContextRoot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContextRootWithDefaults() *ContextRoot {
	this := ContextRoot{}
	return &this
}

// GetTransformations returns the Transformations field value if set, zero value otherwise.
func (o *ContextRoot) GetTransformations() []ContextRootTransformation {
	if o == nil || o.Transformations == nil {
		var ret []ContextRootTransformation
		return ret
	}
	return *o.Transformations
}

// GetTransformationsOk returns a tuple with the Transformations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextRoot) GetTransformationsOk() (*[]ContextRootTransformation, bool) {
	if o == nil || o.Transformations == nil {
		return nil, false
	}
	return o.Transformations, true
}

// HasTransformations returns a boolean if a field has been set.
func (o *ContextRoot) HasTransformations() bool {
	if o != nil && o.Transformations != nil {
		return true
	}

	return false
}

// SetTransformations gets a reference to the given []ContextRootTransformation and assigns it to the Transformations field.
func (o *ContextRoot) SetTransformations(v []ContextRootTransformation) {
	o.Transformations = &v
}

// GetSegmentsToCopyFromUrlPath returns the SegmentsToCopyFromUrlPath field value if set, zero value otherwise.
func (o *ContextRoot) GetSegmentsToCopyFromUrlPath() int32 {
	if o == nil || o.SegmentsToCopyFromUrlPath == nil {
		var ret int32
		return ret
	}
	return *o.SegmentsToCopyFromUrlPath
}

// GetSegmentsToCopyFromUrlPathOk returns a tuple with the SegmentsToCopyFromUrlPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContextRoot) GetSegmentsToCopyFromUrlPathOk() (*int32, bool) {
	if o == nil || o.SegmentsToCopyFromUrlPath == nil {
		return nil, false
	}
	return o.SegmentsToCopyFromUrlPath, true
}

// HasSegmentsToCopyFromUrlPath returns a boolean if a field has been set.
func (o *ContextRoot) HasSegmentsToCopyFromUrlPath() bool {
	if o != nil && o.SegmentsToCopyFromUrlPath != nil {
		return true
	}

	return false
}

// SetSegmentsToCopyFromUrlPath gets a reference to the given int32 and assigns it to the SegmentsToCopyFromUrlPath field.
func (o *ContextRoot) SetSegmentsToCopyFromUrlPath(v int32) {
	o.SegmentsToCopyFromUrlPath = &v
}

func (o ContextRoot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Transformations != nil {
		toSerialize["transformations"] = o.Transformations
	}
	if o.SegmentsToCopyFromUrlPath != nil {
		toSerialize["segmentsToCopyFromUrlPath"] = o.SegmentsToCopyFromUrlPath
	}
	return json.Marshal(toSerialize)
}

type NullableContextRoot struct {
	value *ContextRoot
	isSet bool
}

func (v NullableContextRoot) Get() *ContextRoot {
	return v.value
}

func (v *NullableContextRoot) Set(val *ContextRoot) {
	v.value = val
	v.isSet = true
}

func (v NullableContextRoot) IsSet() bool {
	return v.isSet
}

func (v *NullableContextRoot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContextRoot(val *ContextRoot) *NullableContextRoot {
	return &NullableContextRoot{value: val, isSet: true}
}

func (v NullableContextRoot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContextRoot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


