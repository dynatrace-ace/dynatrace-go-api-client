/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// HttpHeader The HTTP header.
type HttpHeader struct {
	// The name of the HTTP header.
	Name string `json:"name"`
	// The value of the HTTP header. May contain an empty value.    Required when creating a new notification.   For the **Authorization** header, GET requests return the `null` value.   If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value.
	Value *string `json:"value,omitempty"`
}

// NewHttpHeader instantiates a new HttpHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpHeader(name string, ) *HttpHeader {
	this := HttpHeader{}
	this.Name = name
	return &this
}

// NewHttpHeaderWithDefaults instantiates a new HttpHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpHeaderWithDefaults() *HttpHeader {
	this := HttpHeader{}
	return &this
}

// GetName returns the Name field value
func (o *HttpHeader) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HttpHeader) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HttpHeader) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *HttpHeader) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpHeader) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *HttpHeader) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *HttpHeader) SetValue(v string) {
	o.Value = &v
}

func (o HttpHeader) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableHttpHeader struct {
	value *HttpHeader
	isSet bool
}

func (v NullableHttpHeader) Get() *HttpHeader {
	return v.value
}

func (v *NullableHttpHeader) Set(val *HttpHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpHeader(val *HttpHeader) *NullableHttpHeader {
	return &NullableHttpHeader{value: val, isSet: true}
}

func (v NullableHttpHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


