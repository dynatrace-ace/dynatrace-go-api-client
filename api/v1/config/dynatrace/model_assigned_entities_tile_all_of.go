/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AssignedEntitiesTileAllOf struct for AssignedEntitiesTileAllOf
type AssignedEntitiesTileAllOf struct {
	// The list of Dynatrace entities, assigned to the tile.
	AssignedEntities *[]string `json:"assignedEntities,omitempty"`
}

// NewAssignedEntitiesTileAllOf instantiates a new AssignedEntitiesTileAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssignedEntitiesTileAllOf() *AssignedEntitiesTileAllOf {
	this := AssignedEntitiesTileAllOf{}
	return &this
}

// NewAssignedEntitiesTileAllOfWithDefaults instantiates a new AssignedEntitiesTileAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssignedEntitiesTileAllOfWithDefaults() *AssignedEntitiesTileAllOf {
	this := AssignedEntitiesTileAllOf{}
	return &this
}

// GetAssignedEntities returns the AssignedEntities field value if set, zero value otherwise.
func (o *AssignedEntitiesTileAllOf) GetAssignedEntities() []string {
	if o == nil || o.AssignedEntities == nil {
		var ret []string
		return ret
	}
	return *o.AssignedEntities
}

// GetAssignedEntitiesOk returns a tuple with the AssignedEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssignedEntitiesTileAllOf) GetAssignedEntitiesOk() (*[]string, bool) {
	if o == nil || o.AssignedEntities == nil {
		return nil, false
	}
	return o.AssignedEntities, true
}

// HasAssignedEntities returns a boolean if a field has been set.
func (o *AssignedEntitiesTileAllOf) HasAssignedEntities() bool {
	if o != nil && o.AssignedEntities != nil {
		return true
	}

	return false
}

// SetAssignedEntities gets a reference to the given []string and assigns it to the AssignedEntities field.
func (o *AssignedEntitiesTileAllOf) SetAssignedEntities(v []string) {
	o.AssignedEntities = &v
}

func (o AssignedEntitiesTileAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssignedEntities != nil {
		toSerialize["assignedEntities"] = o.AssignedEntities
	}
	return json.Marshal(toSerialize)
}

type NullableAssignedEntitiesTileAllOf struct {
	value *AssignedEntitiesTileAllOf
	isSet bool
}

func (v NullableAssignedEntitiesTileAllOf) Get() *AssignedEntitiesTileAllOf {
	return v.value
}

func (v *NullableAssignedEntitiesTileAllOf) Set(val *AssignedEntitiesTileAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAssignedEntitiesTileAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAssignedEntitiesTileAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssignedEntitiesTileAllOf(val *AssignedEntitiesTileAllOf) *NullableAssignedEntitiesTileAllOf {
	return &NullableAssignedEntitiesTileAllOf{value: val, isSet: true}
}

func (v NullableAssignedEntitiesTileAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssignedEntitiesTileAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


