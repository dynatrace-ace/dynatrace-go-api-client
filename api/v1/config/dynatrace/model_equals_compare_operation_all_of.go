/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EqualsCompareOperationAllOf struct for EqualsCompareOperationAllOf
type EqualsCompareOperationAllOf struct {
	// Inverts the operation of the condition. Set to `true` to turn **equals** into **does not equal**.    If not set, then `false` is used.
	Negate *bool `json:"negate,omitempty"`
	// The condition is case sensitive (`false`) or case insensitive (`true`).   If not set, then `false` is used, making the condition case sensitive.
	IgnoreCase *bool `json:"ignoreCase,omitempty"`
	// The value to compare to.   If several values are specified, the OR logic applies.
	Values *[]map[string]interface{} `json:"values,omitempty"`
}

// NewEqualsCompareOperationAllOf instantiates a new EqualsCompareOperationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEqualsCompareOperationAllOf() *EqualsCompareOperationAllOf {
	this := EqualsCompareOperationAllOf{}
	return &this
}

// NewEqualsCompareOperationAllOfWithDefaults instantiates a new EqualsCompareOperationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEqualsCompareOperationAllOfWithDefaults() *EqualsCompareOperationAllOf {
	this := EqualsCompareOperationAllOf{}
	return &this
}

// GetNegate returns the Negate field value if set, zero value otherwise.
func (o *EqualsCompareOperationAllOf) GetNegate() bool {
	if o == nil || o.Negate == nil {
		var ret bool
		return ret
	}
	return *o.Negate
}

// GetNegateOk returns a tuple with the Negate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EqualsCompareOperationAllOf) GetNegateOk() (*bool, bool) {
	if o == nil || o.Negate == nil {
		return nil, false
	}
	return o.Negate, true
}

// HasNegate returns a boolean if a field has been set.
func (o *EqualsCompareOperationAllOf) HasNegate() bool {
	if o != nil && o.Negate != nil {
		return true
	}

	return false
}

// SetNegate gets a reference to the given bool and assigns it to the Negate field.
func (o *EqualsCompareOperationAllOf) SetNegate(v bool) {
	o.Negate = &v
}

// GetIgnoreCase returns the IgnoreCase field value if set, zero value otherwise.
func (o *EqualsCompareOperationAllOf) GetIgnoreCase() bool {
	if o == nil || o.IgnoreCase == nil {
		var ret bool
		return ret
	}
	return *o.IgnoreCase
}

// GetIgnoreCaseOk returns a tuple with the IgnoreCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EqualsCompareOperationAllOf) GetIgnoreCaseOk() (*bool, bool) {
	if o == nil || o.IgnoreCase == nil {
		return nil, false
	}
	return o.IgnoreCase, true
}

// HasIgnoreCase returns a boolean if a field has been set.
func (o *EqualsCompareOperationAllOf) HasIgnoreCase() bool {
	if o != nil && o.IgnoreCase != nil {
		return true
	}

	return false
}

// SetIgnoreCase gets a reference to the given bool and assigns it to the IgnoreCase field.
func (o *EqualsCompareOperationAllOf) SetIgnoreCase(v bool) {
	o.IgnoreCase = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *EqualsCompareOperationAllOf) GetValues() []map[string]interface{} {
	if o == nil || o.Values == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EqualsCompareOperationAllOf) GetValuesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *EqualsCompareOperationAllOf) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []map[string]interface{} and assigns it to the Values field.
func (o *EqualsCompareOperationAllOf) SetValues(v []map[string]interface{}) {
	o.Values = &v
}

func (o EqualsCompareOperationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Negate != nil {
		toSerialize["negate"] = o.Negate
	}
	if o.IgnoreCase != nil {
		toSerialize["ignoreCase"] = o.IgnoreCase
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableEqualsCompareOperationAllOf struct {
	value *EqualsCompareOperationAllOf
	isSet bool
}

func (v NullableEqualsCompareOperationAllOf) Get() *EqualsCompareOperationAllOf {
	return v.value
}

func (v *NullableEqualsCompareOperationAllOf) Set(val *EqualsCompareOperationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEqualsCompareOperationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEqualsCompareOperationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEqualsCompareOperationAllOf(val *EqualsCompareOperationAllOf) *NullableEqualsCompareOperationAllOf {
	return &NullableEqualsCompareOperationAllOf{value: val, isSet: true}
}

func (v NullableEqualsCompareOperationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEqualsCompareOperationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


