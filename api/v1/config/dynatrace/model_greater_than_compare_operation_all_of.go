/*
 * Dynatrace Configuration API
 *
 * Documentation of the Dynatrace Configuration API. Refer to the [help page](https://www.dynatrace.com/support/help/shortlink/config-api) to read about use-cases and examples.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// GreaterThanCompareOperationAllOf struct for GreaterThanCompareOperationAllOf
type GreaterThanCompareOperationAllOf struct {
	// The value to compare to.
	Value *int32 `json:"value,omitempty"`
}

// NewGreaterThanCompareOperationAllOf instantiates a new GreaterThanCompareOperationAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGreaterThanCompareOperationAllOf() *GreaterThanCompareOperationAllOf {
	this := GreaterThanCompareOperationAllOf{}
	return &this
}

// NewGreaterThanCompareOperationAllOfWithDefaults instantiates a new GreaterThanCompareOperationAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGreaterThanCompareOperationAllOfWithDefaults() *GreaterThanCompareOperationAllOf {
	this := GreaterThanCompareOperationAllOf{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *GreaterThanCompareOperationAllOf) GetValue() int32 {
	if o == nil || o.Value == nil {
		var ret int32
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GreaterThanCompareOperationAllOf) GetValueOk() (*int32, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *GreaterThanCompareOperationAllOf) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given int32 and assigns it to the Value field.
func (o *GreaterThanCompareOperationAllOf) SetValue(v int32) {
	o.Value = &v
}

func (o GreaterThanCompareOperationAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableGreaterThanCompareOperationAllOf struct {
	value *GreaterThanCompareOperationAllOf
	isSet bool
}

func (v NullableGreaterThanCompareOperationAllOf) Get() *GreaterThanCompareOperationAllOf {
	return v.value
}

func (v *NullableGreaterThanCompareOperationAllOf) Set(val *GreaterThanCompareOperationAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableGreaterThanCompareOperationAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableGreaterThanCompareOperationAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGreaterThanCompareOperationAllOf(val *GreaterThanCompareOperationAllOf) *NullableGreaterThanCompareOperationAllOf {
	return &NullableGreaterThanCompareOperationAllOf{value: val, isSet: true}
}

func (v NullableGreaterThanCompareOperationAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGreaterThanCompareOperationAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


