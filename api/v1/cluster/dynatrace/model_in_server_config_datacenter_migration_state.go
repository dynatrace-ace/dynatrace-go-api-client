/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// InServerConfigDatacenterMigrationState State of in-server config migration for all components
type InServerConfigDatacenterMigrationState struct {
	// Map of (component, migration state) pairs
	ComponentMigrationStates *map[string]MigrationState `json:"componentMigrationStates,omitempty"`
}

// NewInServerConfigDatacenterMigrationState instantiates a new InServerConfigDatacenterMigrationState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInServerConfigDatacenterMigrationState() *InServerConfigDatacenterMigrationState {
	this := InServerConfigDatacenterMigrationState{}
	return &this
}

// NewInServerConfigDatacenterMigrationStateWithDefaults instantiates a new InServerConfigDatacenterMigrationState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInServerConfigDatacenterMigrationStateWithDefaults() *InServerConfigDatacenterMigrationState {
	this := InServerConfigDatacenterMigrationState{}
	return &this
}

// GetComponentMigrationStates returns the ComponentMigrationStates field value if set, zero value otherwise.
func (o *InServerConfigDatacenterMigrationState) GetComponentMigrationStates() map[string]MigrationState {
	if o == nil || o.ComponentMigrationStates == nil {
		var ret map[string]MigrationState
		return ret
	}
	return *o.ComponentMigrationStates
}

// GetComponentMigrationStatesOk returns a tuple with the ComponentMigrationStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InServerConfigDatacenterMigrationState) GetComponentMigrationStatesOk() (*map[string]MigrationState, bool) {
	if o == nil || o.ComponentMigrationStates == nil {
		return nil, false
	}
	return o.ComponentMigrationStates, true
}

// HasComponentMigrationStates returns a boolean if a field has been set.
func (o *InServerConfigDatacenterMigrationState) HasComponentMigrationStates() bool {
	if o != nil && o.ComponentMigrationStates != nil {
		return true
	}

	return false
}

// SetComponentMigrationStates gets a reference to the given map[string]MigrationState and assigns it to the ComponentMigrationStates field.
func (o *InServerConfigDatacenterMigrationState) SetComponentMigrationStates(v map[string]MigrationState) {
	o.ComponentMigrationStates = &v
}

func (o InServerConfigDatacenterMigrationState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ComponentMigrationStates != nil {
		toSerialize["componentMigrationStates"] = o.ComponentMigrationStates
	}
	return json.Marshal(toSerialize)
}

type NullableInServerConfigDatacenterMigrationState struct {
	value *InServerConfigDatacenterMigrationState
	isSet bool
}

func (v NullableInServerConfigDatacenterMigrationState) Get() *InServerConfigDatacenterMigrationState {
	return v.value
}

func (v *NullableInServerConfigDatacenterMigrationState) Set(val *InServerConfigDatacenterMigrationState) {
	v.value = val
	v.isSet = true
}

func (v NullableInServerConfigDatacenterMigrationState) IsSet() bool {
	return v.isSet
}

func (v *NullableInServerConfigDatacenterMigrationState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInServerConfigDatacenterMigrationState(val *InServerConfigDatacenterMigrationState) *NullableInServerConfigDatacenterMigrationState {
	return &NullableInServerConfigDatacenterMigrationState{value: val, isSet: true}
}

func (v NullableInServerConfigDatacenterMigrationState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInServerConfigDatacenterMigrationState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


