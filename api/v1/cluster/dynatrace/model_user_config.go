/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UserConfig The configuration of the user.
type UserConfig struct {
	// User ID
	Id string `json:"id"`
	// User's email address
	Email string `json:"email"`
	// User's first name
	FirstName string `json:"firstName"`
	// User's last name
	LastName string `json:"lastName"`
	// User's password in a clear text; used only to set initial password
	PasswordClearText *string `json:"passwordClearText,omitempty"`
	// List of user's user group IDs.
	Groups *[]string `json:"groups,omitempty"`
}

// NewUserConfig instantiates a new UserConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserConfig(id string, email string, firstName string, lastName string) *UserConfig {
	this := UserConfig{}
	this.Id = id
	this.Email = email
	this.FirstName = firstName
	this.LastName = lastName
	return &this
}

// NewUserConfigWithDefaults instantiates a new UserConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserConfigWithDefaults() *UserConfig {
	this := UserConfig{}
	return &this
}

// GetId returns the Id field value
func (o *UserConfig) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserConfig) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserConfig) SetId(v string) {
	o.Id = v
}

// GetEmail returns the Email field value
func (o *UserConfig) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserConfig) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserConfig) SetEmail(v string) {
	o.Email = v
}

// GetFirstName returns the FirstName field value
func (o *UserConfig) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *UserConfig) GetFirstNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *UserConfig) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *UserConfig) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *UserConfig) GetLastNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *UserConfig) SetLastName(v string) {
	o.LastName = v
}

// GetPasswordClearText returns the PasswordClearText field value if set, zero value otherwise.
func (o *UserConfig) GetPasswordClearText() string {
	if o == nil || o.PasswordClearText == nil {
		var ret string
		return ret
	}
	return *o.PasswordClearText
}

// GetPasswordClearTextOk returns a tuple with the PasswordClearText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConfig) GetPasswordClearTextOk() (*string, bool) {
	if o == nil || o.PasswordClearText == nil {
		return nil, false
	}
	return o.PasswordClearText, true
}

// HasPasswordClearText returns a boolean if a field has been set.
func (o *UserConfig) HasPasswordClearText() bool {
	if o != nil && o.PasswordClearText != nil {
		return true
	}

	return false
}

// SetPasswordClearText gets a reference to the given string and assigns it to the PasswordClearText field.
func (o *UserConfig) SetPasswordClearText(v string) {
	o.PasswordClearText = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *UserConfig) GetGroups() []string {
	if o == nil || o.Groups == nil {
		var ret []string
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserConfig) GetGroupsOk() (*[]string, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *UserConfig) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *UserConfig) SetGroups(v []string) {
	o.Groups = &v
}

func (o UserConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["firstName"] = o.FirstName
	}
	if true {
		toSerialize["lastName"] = o.LastName
	}
	if o.PasswordClearText != nil {
		toSerialize["passwordClearText"] = o.PasswordClearText
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	return json.Marshal(toSerialize)
}

type NullableUserConfig struct {
	value *UserConfig
	isSet bool
}

func (v NullableUserConfig) Get() *UserConfig {
	return v.value
}

func (v *NullableUserConfig) Set(val *UserConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableUserConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableUserConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserConfig(val *UserConfig) *NullableUserConfig {
	return &NullableUserConfig{value: val, isSet: true}
}

func (v NullableUserConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


