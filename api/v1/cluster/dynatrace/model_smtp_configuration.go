/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SmtpConfiguration struct for SmtpConfiguration
type SmtpConfiguration struct {
	// Host name
	HostName *string `json:"hostName,omitempty"`
	// Integer value of port
	Port *int32 `json:"port,omitempty"`
	// User name
	UserName *string `json:"userName,omitempty"`
	// Password
	Password *string `json:"password,omitempty"`
	// If true, a password has been configured.
	IsPasswordConfigured *bool `json:"isPasswordConfigured,omitempty"`
	// Connection security
	ConnectionSecurity *string `json:"connectionSecurity,omitempty"`
	// Sender email address
	SenderEmailAddress *string `json:"senderEmailAddress,omitempty"`
	// If true, we will send e-mails via Mission Control in case of problems with SMTP server.
	AllowFallbackViaMissionControl *bool `json:"allowFallbackViaMissionControl,omitempty"`
	// If true, we will send e-mails via SMTP server.
	UseSmtpServer *bool `json:"useSmtpServer,omitempty"`
}

// NewSmtpConfiguration instantiates a new SmtpConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmtpConfiguration() *SmtpConfiguration {
	this := SmtpConfiguration{}
	return &this
}

// NewSmtpConfigurationWithDefaults instantiates a new SmtpConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmtpConfigurationWithDefaults() *SmtpConfiguration {
	this := SmtpConfiguration{}
	return &this
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *SmtpConfiguration) GetHostName() string {
	if o == nil || o.HostName == nil {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpConfiguration) GetHostNameOk() (*string, bool) {
	if o == nil || o.HostName == nil {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *SmtpConfiguration) HasHostName() bool {
	if o != nil && o.HostName != nil {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *SmtpConfiguration) SetHostName(v string) {
	o.HostName = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *SmtpConfiguration) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpConfiguration) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *SmtpConfiguration) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *SmtpConfiguration) SetPort(v int32) {
	o.Port = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *SmtpConfiguration) GetUserName() string {
	if o == nil || o.UserName == nil {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpConfiguration) GetUserNameOk() (*string, bool) {
	if o == nil || o.UserName == nil {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *SmtpConfiguration) HasUserName() bool {
	if o != nil && o.UserName != nil {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *SmtpConfiguration) SetUserName(v string) {
	o.UserName = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SmtpConfiguration) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpConfiguration) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SmtpConfiguration) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *SmtpConfiguration) SetPassword(v string) {
	o.Password = &v
}

// GetIsPasswordConfigured returns the IsPasswordConfigured field value if set, zero value otherwise.
func (o *SmtpConfiguration) GetIsPasswordConfigured() bool {
	if o == nil || o.IsPasswordConfigured == nil {
		var ret bool
		return ret
	}
	return *o.IsPasswordConfigured
}

// GetIsPasswordConfiguredOk returns a tuple with the IsPasswordConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpConfiguration) GetIsPasswordConfiguredOk() (*bool, bool) {
	if o == nil || o.IsPasswordConfigured == nil {
		return nil, false
	}
	return o.IsPasswordConfigured, true
}

// HasIsPasswordConfigured returns a boolean if a field has been set.
func (o *SmtpConfiguration) HasIsPasswordConfigured() bool {
	if o != nil && o.IsPasswordConfigured != nil {
		return true
	}

	return false
}

// SetIsPasswordConfigured gets a reference to the given bool and assigns it to the IsPasswordConfigured field.
func (o *SmtpConfiguration) SetIsPasswordConfigured(v bool) {
	o.IsPasswordConfigured = &v
}

// GetConnectionSecurity returns the ConnectionSecurity field value if set, zero value otherwise.
func (o *SmtpConfiguration) GetConnectionSecurity() string {
	if o == nil || o.ConnectionSecurity == nil {
		var ret string
		return ret
	}
	return *o.ConnectionSecurity
}

// GetConnectionSecurityOk returns a tuple with the ConnectionSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpConfiguration) GetConnectionSecurityOk() (*string, bool) {
	if o == nil || o.ConnectionSecurity == nil {
		return nil, false
	}
	return o.ConnectionSecurity, true
}

// HasConnectionSecurity returns a boolean if a field has been set.
func (o *SmtpConfiguration) HasConnectionSecurity() bool {
	if o != nil && o.ConnectionSecurity != nil {
		return true
	}

	return false
}

// SetConnectionSecurity gets a reference to the given string and assigns it to the ConnectionSecurity field.
func (o *SmtpConfiguration) SetConnectionSecurity(v string) {
	o.ConnectionSecurity = &v
}

// GetSenderEmailAddress returns the SenderEmailAddress field value if set, zero value otherwise.
func (o *SmtpConfiguration) GetSenderEmailAddress() string {
	if o == nil || o.SenderEmailAddress == nil {
		var ret string
		return ret
	}
	return *o.SenderEmailAddress
}

// GetSenderEmailAddressOk returns a tuple with the SenderEmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpConfiguration) GetSenderEmailAddressOk() (*string, bool) {
	if o == nil || o.SenderEmailAddress == nil {
		return nil, false
	}
	return o.SenderEmailAddress, true
}

// HasSenderEmailAddress returns a boolean if a field has been set.
func (o *SmtpConfiguration) HasSenderEmailAddress() bool {
	if o != nil && o.SenderEmailAddress != nil {
		return true
	}

	return false
}

// SetSenderEmailAddress gets a reference to the given string and assigns it to the SenderEmailAddress field.
func (o *SmtpConfiguration) SetSenderEmailAddress(v string) {
	o.SenderEmailAddress = &v
}

// GetAllowFallbackViaMissionControl returns the AllowFallbackViaMissionControl field value if set, zero value otherwise.
func (o *SmtpConfiguration) GetAllowFallbackViaMissionControl() bool {
	if o == nil || o.AllowFallbackViaMissionControl == nil {
		var ret bool
		return ret
	}
	return *o.AllowFallbackViaMissionControl
}

// GetAllowFallbackViaMissionControlOk returns a tuple with the AllowFallbackViaMissionControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpConfiguration) GetAllowFallbackViaMissionControlOk() (*bool, bool) {
	if o == nil || o.AllowFallbackViaMissionControl == nil {
		return nil, false
	}
	return o.AllowFallbackViaMissionControl, true
}

// HasAllowFallbackViaMissionControl returns a boolean if a field has been set.
func (o *SmtpConfiguration) HasAllowFallbackViaMissionControl() bool {
	if o != nil && o.AllowFallbackViaMissionControl != nil {
		return true
	}

	return false
}

// SetAllowFallbackViaMissionControl gets a reference to the given bool and assigns it to the AllowFallbackViaMissionControl field.
func (o *SmtpConfiguration) SetAllowFallbackViaMissionControl(v bool) {
	o.AllowFallbackViaMissionControl = &v
}

// GetUseSmtpServer returns the UseSmtpServer field value if set, zero value otherwise.
func (o *SmtpConfiguration) GetUseSmtpServer() bool {
	if o == nil || o.UseSmtpServer == nil {
		var ret bool
		return ret
	}
	return *o.UseSmtpServer
}

// GetUseSmtpServerOk returns a tuple with the UseSmtpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SmtpConfiguration) GetUseSmtpServerOk() (*bool, bool) {
	if o == nil || o.UseSmtpServer == nil {
		return nil, false
	}
	return o.UseSmtpServer, true
}

// HasUseSmtpServer returns a boolean if a field has been set.
func (o *SmtpConfiguration) HasUseSmtpServer() bool {
	if o != nil && o.UseSmtpServer != nil {
		return true
	}

	return false
}

// SetUseSmtpServer gets a reference to the given bool and assigns it to the UseSmtpServer field.
func (o *SmtpConfiguration) SetUseSmtpServer(v bool) {
	o.UseSmtpServer = &v
}

func (o SmtpConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HostName != nil {
		toSerialize["hostName"] = o.HostName
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.UserName != nil {
		toSerialize["userName"] = o.UserName
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.IsPasswordConfigured != nil {
		toSerialize["isPasswordConfigured"] = o.IsPasswordConfigured
	}
	if o.ConnectionSecurity != nil {
		toSerialize["connectionSecurity"] = o.ConnectionSecurity
	}
	if o.SenderEmailAddress != nil {
		toSerialize["senderEmailAddress"] = o.SenderEmailAddress
	}
	if o.AllowFallbackViaMissionControl != nil {
		toSerialize["allowFallbackViaMissionControl"] = o.AllowFallbackViaMissionControl
	}
	if o.UseSmtpServer != nil {
		toSerialize["useSmtpServer"] = o.UseSmtpServer
	}
	return json.Marshal(toSerialize)
}

type NullableSmtpConfiguration struct {
	value *SmtpConfiguration
	isSet bool
}

func (v NullableSmtpConfiguration) Get() *SmtpConfiguration {
	return v.value
}

func (v *NullableSmtpConfiguration) Set(val *SmtpConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableSmtpConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableSmtpConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmtpConfiguration(val *SmtpConfiguration) *NullableSmtpConfiguration {
	return &NullableSmtpConfiguration{value: val, isSet: true}
}

func (v NullableSmtpConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmtpConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


