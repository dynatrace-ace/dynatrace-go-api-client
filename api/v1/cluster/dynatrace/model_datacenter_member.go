/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// DatacenterMember struct for DatacenterMember
type DatacenterMember struct {
	NodeId *int32 `json:"nodeId,omitempty"`
	NodeIp *string `json:"nodeIp,omitempty"`
}

// NewDatacenterMember instantiates a new DatacenterMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatacenterMember() *DatacenterMember {
	this := DatacenterMember{}
	return &this
}

// NewDatacenterMemberWithDefaults instantiates a new DatacenterMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatacenterMemberWithDefaults() *DatacenterMember {
	this := DatacenterMember{}
	return &this
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *DatacenterMember) GetNodeId() int32 {
	if o == nil || o.NodeId == nil {
		var ret int32
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatacenterMember) GetNodeIdOk() (*int32, bool) {
	if o == nil || o.NodeId == nil {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *DatacenterMember) HasNodeId() bool {
	if o != nil && o.NodeId != nil {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given int32 and assigns it to the NodeId field.
func (o *DatacenterMember) SetNodeId(v int32) {
	o.NodeId = &v
}

// GetNodeIp returns the NodeIp field value if set, zero value otherwise.
func (o *DatacenterMember) GetNodeIp() string {
	if o == nil || o.NodeIp == nil {
		var ret string
		return ret
	}
	return *o.NodeIp
}

// GetNodeIpOk returns a tuple with the NodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatacenterMember) GetNodeIpOk() (*string, bool) {
	if o == nil || o.NodeIp == nil {
		return nil, false
	}
	return o.NodeIp, true
}

// HasNodeIp returns a boolean if a field has been set.
func (o *DatacenterMember) HasNodeIp() bool {
	if o != nil && o.NodeIp != nil {
		return true
	}

	return false
}

// SetNodeIp gets a reference to the given string and assigns it to the NodeIp field.
func (o *DatacenterMember) SetNodeIp(v string) {
	o.NodeIp = &v
}

func (o DatacenterMember) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NodeId != nil {
		toSerialize["nodeId"] = o.NodeId
	}
	if o.NodeIp != nil {
		toSerialize["nodeIp"] = o.NodeIp
	}
	return json.Marshal(toSerialize)
}

type NullableDatacenterMember struct {
	value *DatacenterMember
	isSet bool
}

func (v NullableDatacenterMember) Get() *DatacenterMember {
	return v.value
}

func (v *NullableDatacenterMember) Set(val *DatacenterMember) {
	v.value = val
	v.isSet = true
}

func (v NullableDatacenterMember) IsSet() bool {
	return v.isSet
}

func (v *NullableDatacenterMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatacenterMember(val *DatacenterMember) *NullableDatacenterMember {
	return &NullableDatacenterMember{value: val, isSet: true}
}

func (v NullableDatacenterMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatacenterMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


