/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ConnectionStatus Internet connection test result
type ConnectionStatus struct {
	// Connection test result
	ConnectionOk *bool `json:"connectionOk,omitempty"`
	// Indicates whether test was executed at all
	TestExecuted *bool `json:"testExecuted,omitempty"`
	// Additional comments usually indicates why test was not executed
	TestExecutionMessage *string `json:"testExecutionMessage,omitempty"`
}

// NewConnectionStatus instantiates a new ConnectionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionStatus() *ConnectionStatus {
	this := ConnectionStatus{}
	return &this
}

// NewConnectionStatusWithDefaults instantiates a new ConnectionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionStatusWithDefaults() *ConnectionStatus {
	this := ConnectionStatus{}
	return &this
}

// GetConnectionOk returns the ConnectionOk field value if set, zero value otherwise.
func (o *ConnectionStatus) GetConnectionOk() bool {
	if o == nil || o.ConnectionOk == nil {
		var ret bool
		return ret
	}
	return *o.ConnectionOk
}

// GetConnectionOkOk returns a tuple with the ConnectionOk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetConnectionOkOk() (*bool, bool) {
	if o == nil || o.ConnectionOk == nil {
		return nil, false
	}
	return o.ConnectionOk, true
}

// HasConnectionOk returns a boolean if a field has been set.
func (o *ConnectionStatus) HasConnectionOk() bool {
	if o != nil && o.ConnectionOk != nil {
		return true
	}

	return false
}

// SetConnectionOk gets a reference to the given bool and assigns it to the ConnectionOk field.
func (o *ConnectionStatus) SetConnectionOk(v bool) {
	o.ConnectionOk = &v
}

// GetTestExecuted returns the TestExecuted field value if set, zero value otherwise.
func (o *ConnectionStatus) GetTestExecuted() bool {
	if o == nil || o.TestExecuted == nil {
		var ret bool
		return ret
	}
	return *o.TestExecuted
}

// GetTestExecutedOk returns a tuple with the TestExecuted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetTestExecutedOk() (*bool, bool) {
	if o == nil || o.TestExecuted == nil {
		return nil, false
	}
	return o.TestExecuted, true
}

// HasTestExecuted returns a boolean if a field has been set.
func (o *ConnectionStatus) HasTestExecuted() bool {
	if o != nil && o.TestExecuted != nil {
		return true
	}

	return false
}

// SetTestExecuted gets a reference to the given bool and assigns it to the TestExecuted field.
func (o *ConnectionStatus) SetTestExecuted(v bool) {
	o.TestExecuted = &v
}

// GetTestExecutionMessage returns the TestExecutionMessage field value if set, zero value otherwise.
func (o *ConnectionStatus) GetTestExecutionMessage() string {
	if o == nil || o.TestExecutionMessage == nil {
		var ret string
		return ret
	}
	return *o.TestExecutionMessage
}

// GetTestExecutionMessageOk returns a tuple with the TestExecutionMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionStatus) GetTestExecutionMessageOk() (*string, bool) {
	if o == nil || o.TestExecutionMessage == nil {
		return nil, false
	}
	return o.TestExecutionMessage, true
}

// HasTestExecutionMessage returns a boolean if a field has been set.
func (o *ConnectionStatus) HasTestExecutionMessage() bool {
	if o != nil && o.TestExecutionMessage != nil {
		return true
	}

	return false
}

// SetTestExecutionMessage gets a reference to the given string and assigns it to the TestExecutionMessage field.
func (o *ConnectionStatus) SetTestExecutionMessage(v string) {
	o.TestExecutionMessage = &v
}

func (o ConnectionStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionOk != nil {
		toSerialize["connectionOk"] = o.ConnectionOk
	}
	if o.TestExecuted != nil {
		toSerialize["testExecuted"] = o.TestExecuted
	}
	if o.TestExecutionMessage != nil {
		toSerialize["testExecutionMessage"] = o.TestExecutionMessage
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionStatus struct {
	value *ConnectionStatus
	isSet bool
}

func (v NullableConnectionStatus) Get() *ConnectionStatus {
	return v.value
}

func (v *NullableConnectionStatus) Set(val *ConnectionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionStatus(val *ConnectionStatus) *NullableConnectionStatus {
	return &NullableConnectionStatus{value: val, isSet: true}
}

func (v NullableConnectionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


