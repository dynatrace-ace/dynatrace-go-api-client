/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// NodeConfigDto struct for NodeConfigDto
type NodeConfigDto struct {
	Id *int32 `json:"id,omitempty"`
	WebUI *bool `json:"webUI,omitempty"`
	Agent *bool `json:"agent,omitempty"`
	Datacenter *string `json:"datacenter,omitempty"`
	KubernetesRole *string `json:"kubernetesRole,omitempty"`
}

// NewNodeConfigDto instantiates a new NodeConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeConfigDto() *NodeConfigDto {
	this := NodeConfigDto{}
	return &this
}

// NewNodeConfigDtoWithDefaults instantiates a new NodeConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeConfigDtoWithDefaults() *NodeConfigDto {
	this := NodeConfigDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NodeConfigDto) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeConfigDto) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NodeConfigDto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *NodeConfigDto) SetId(v int32) {
	o.Id = &v
}

// GetWebUI returns the WebUI field value if set, zero value otherwise.
func (o *NodeConfigDto) GetWebUI() bool {
	if o == nil || o.WebUI == nil {
		var ret bool
		return ret
	}
	return *o.WebUI
}

// GetWebUIOk returns a tuple with the WebUI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeConfigDto) GetWebUIOk() (*bool, bool) {
	if o == nil || o.WebUI == nil {
		return nil, false
	}
	return o.WebUI, true
}

// HasWebUI returns a boolean if a field has been set.
func (o *NodeConfigDto) HasWebUI() bool {
	if o != nil && o.WebUI != nil {
		return true
	}

	return false
}

// SetWebUI gets a reference to the given bool and assigns it to the WebUI field.
func (o *NodeConfigDto) SetWebUI(v bool) {
	o.WebUI = &v
}

// GetAgent returns the Agent field value if set, zero value otherwise.
func (o *NodeConfigDto) GetAgent() bool {
	if o == nil || o.Agent == nil {
		var ret bool
		return ret
	}
	return *o.Agent
}

// GetAgentOk returns a tuple with the Agent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeConfigDto) GetAgentOk() (*bool, bool) {
	if o == nil || o.Agent == nil {
		return nil, false
	}
	return o.Agent, true
}

// HasAgent returns a boolean if a field has been set.
func (o *NodeConfigDto) HasAgent() bool {
	if o != nil && o.Agent != nil {
		return true
	}

	return false
}

// SetAgent gets a reference to the given bool and assigns it to the Agent field.
func (o *NodeConfigDto) SetAgent(v bool) {
	o.Agent = &v
}

// GetDatacenter returns the Datacenter field value if set, zero value otherwise.
func (o *NodeConfigDto) GetDatacenter() string {
	if o == nil || o.Datacenter == nil {
		var ret string
		return ret
	}
	return *o.Datacenter
}

// GetDatacenterOk returns a tuple with the Datacenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeConfigDto) GetDatacenterOk() (*string, bool) {
	if o == nil || o.Datacenter == nil {
		return nil, false
	}
	return o.Datacenter, true
}

// HasDatacenter returns a boolean if a field has been set.
func (o *NodeConfigDto) HasDatacenter() bool {
	if o != nil && o.Datacenter != nil {
		return true
	}

	return false
}

// SetDatacenter gets a reference to the given string and assigns it to the Datacenter field.
func (o *NodeConfigDto) SetDatacenter(v string) {
	o.Datacenter = &v
}

// GetKubernetesRole returns the KubernetesRole field value if set, zero value otherwise.
func (o *NodeConfigDto) GetKubernetesRole() string {
	if o == nil || o.KubernetesRole == nil {
		var ret string
		return ret
	}
	return *o.KubernetesRole
}

// GetKubernetesRoleOk returns a tuple with the KubernetesRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeConfigDto) GetKubernetesRoleOk() (*string, bool) {
	if o == nil || o.KubernetesRole == nil {
		return nil, false
	}
	return o.KubernetesRole, true
}

// HasKubernetesRole returns a boolean if a field has been set.
func (o *NodeConfigDto) HasKubernetesRole() bool {
	if o != nil && o.KubernetesRole != nil {
		return true
	}

	return false
}

// SetKubernetesRole gets a reference to the given string and assigns it to the KubernetesRole field.
func (o *NodeConfigDto) SetKubernetesRole(v string) {
	o.KubernetesRole = &v
}

func (o NodeConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.WebUI != nil {
		toSerialize["webUI"] = o.WebUI
	}
	if o.Agent != nil {
		toSerialize["agent"] = o.Agent
	}
	if o.Datacenter != nil {
		toSerialize["datacenter"] = o.Datacenter
	}
	if o.KubernetesRole != nil {
		toSerialize["kubernetesRole"] = o.KubernetesRole
	}
	return json.Marshal(toSerialize)
}

type NullableNodeConfigDto struct {
	value *NodeConfigDto
	isSet bool
}

func (v NullableNodeConfigDto) Get() *NodeConfigDto {
	return v.value
}

func (v *NullableNodeConfigDto) Set(val *NodeConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeConfigDto(val *NodeConfigDto) *NullableNodeConfigDto {
	return &NullableNodeConfigDto{value: val, isSet: true}
}

func (v NullableNodeConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


