/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// GroupConfig The configuration of the group.
type GroupConfig struct {
	// If true, then the group has the cluster administrator rights.
	IsClusterAdminGroup bool `json:"isClusterAdminGroup"`
	// If true, then the group has the access account rights.
	HasAccessAccountRole *bool `json:"hasAccessAccountRole,omitempty"`
	// If true, then the group has the manage account rights.
	HasManageAccountAndViewProductUsageRole *bool `json:"hasManageAccountAndViewProductUsageRole,omitempty"`
	IsAccessAccount *bool `json:"isAccessAccount,omitempty"`
	IsManageAccount *bool `json:"isManageAccount,omitempty"`
	// Group ID. Leave empty if creating group. Set if updating group.
	Id string `json:"id"`
	// Group name
	Name string `json:"name"`
	// LDAP group names
	LdapGroupNames *[]string `json:"ldapGroupNames,omitempty"`
	// SSO group names. If defined it's used to map SSO group name to Dynatrace group name, otherwise mapping is done by group name
	SsoGroupNames *[]string `json:"ssoGroupNames,omitempty"`
	// Access rights
	AccessRight *map[string][]string `json:"accessRight,omitempty"`
}

// NewGroupConfig instantiates a new GroupConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupConfig(isClusterAdminGroup bool, id string, name string) *GroupConfig {
	this := GroupConfig{}
	this.IsClusterAdminGroup = isClusterAdminGroup
	this.Id = id
	this.Name = name
	return &this
}

// NewGroupConfigWithDefaults instantiates a new GroupConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupConfigWithDefaults() *GroupConfig {
	this := GroupConfig{}
	return &this
}

// GetIsClusterAdminGroup returns the IsClusterAdminGroup field value
func (o *GroupConfig) GetIsClusterAdminGroup() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsClusterAdminGroup
}

// GetIsClusterAdminGroupOk returns a tuple with the IsClusterAdminGroup field value
// and a boolean to check if the value has been set.
func (o *GroupConfig) GetIsClusterAdminGroupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsClusterAdminGroup, true
}

// SetIsClusterAdminGroup sets field value
func (o *GroupConfig) SetIsClusterAdminGroup(v bool) {
	o.IsClusterAdminGroup = v
}

// GetHasAccessAccountRole returns the HasAccessAccountRole field value if set, zero value otherwise.
func (o *GroupConfig) GetHasAccessAccountRole() bool {
	if o == nil || o.HasAccessAccountRole == nil {
		var ret bool
		return ret
	}
	return *o.HasAccessAccountRole
}

// GetHasAccessAccountRoleOk returns a tuple with the HasAccessAccountRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupConfig) GetHasAccessAccountRoleOk() (*bool, bool) {
	if o == nil || o.HasAccessAccountRole == nil {
		return nil, false
	}
	return o.HasAccessAccountRole, true
}

// HasHasAccessAccountRole returns a boolean if a field has been set.
func (o *GroupConfig) HasHasAccessAccountRole() bool {
	if o != nil && o.HasAccessAccountRole != nil {
		return true
	}

	return false
}

// SetHasAccessAccountRole gets a reference to the given bool and assigns it to the HasAccessAccountRole field.
func (o *GroupConfig) SetHasAccessAccountRole(v bool) {
	o.HasAccessAccountRole = &v
}

// GetHasManageAccountAndViewProductUsageRole returns the HasManageAccountAndViewProductUsageRole field value if set, zero value otherwise.
func (o *GroupConfig) GetHasManageAccountAndViewProductUsageRole() bool {
	if o == nil || o.HasManageAccountAndViewProductUsageRole == nil {
		var ret bool
		return ret
	}
	return *o.HasManageAccountAndViewProductUsageRole
}

// GetHasManageAccountAndViewProductUsageRoleOk returns a tuple with the HasManageAccountAndViewProductUsageRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupConfig) GetHasManageAccountAndViewProductUsageRoleOk() (*bool, bool) {
	if o == nil || o.HasManageAccountAndViewProductUsageRole == nil {
		return nil, false
	}
	return o.HasManageAccountAndViewProductUsageRole, true
}

// HasHasManageAccountAndViewProductUsageRole returns a boolean if a field has been set.
func (o *GroupConfig) HasHasManageAccountAndViewProductUsageRole() bool {
	if o != nil && o.HasManageAccountAndViewProductUsageRole != nil {
		return true
	}

	return false
}

// SetHasManageAccountAndViewProductUsageRole gets a reference to the given bool and assigns it to the HasManageAccountAndViewProductUsageRole field.
func (o *GroupConfig) SetHasManageAccountAndViewProductUsageRole(v bool) {
	o.HasManageAccountAndViewProductUsageRole = &v
}

// GetIsAccessAccount returns the IsAccessAccount field value if set, zero value otherwise.
func (o *GroupConfig) GetIsAccessAccount() bool {
	if o == nil || o.IsAccessAccount == nil {
		var ret bool
		return ret
	}
	return *o.IsAccessAccount
}

// GetIsAccessAccountOk returns a tuple with the IsAccessAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupConfig) GetIsAccessAccountOk() (*bool, bool) {
	if o == nil || o.IsAccessAccount == nil {
		return nil, false
	}
	return o.IsAccessAccount, true
}

// HasIsAccessAccount returns a boolean if a field has been set.
func (o *GroupConfig) HasIsAccessAccount() bool {
	if o != nil && o.IsAccessAccount != nil {
		return true
	}

	return false
}

// SetIsAccessAccount gets a reference to the given bool and assigns it to the IsAccessAccount field.
func (o *GroupConfig) SetIsAccessAccount(v bool) {
	o.IsAccessAccount = &v
}

// GetIsManageAccount returns the IsManageAccount field value if set, zero value otherwise.
func (o *GroupConfig) GetIsManageAccount() bool {
	if o == nil || o.IsManageAccount == nil {
		var ret bool
		return ret
	}
	return *o.IsManageAccount
}

// GetIsManageAccountOk returns a tuple with the IsManageAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupConfig) GetIsManageAccountOk() (*bool, bool) {
	if o == nil || o.IsManageAccount == nil {
		return nil, false
	}
	return o.IsManageAccount, true
}

// HasIsManageAccount returns a boolean if a field has been set.
func (o *GroupConfig) HasIsManageAccount() bool {
	if o != nil && o.IsManageAccount != nil {
		return true
	}

	return false
}

// SetIsManageAccount gets a reference to the given bool and assigns it to the IsManageAccount field.
func (o *GroupConfig) SetIsManageAccount(v bool) {
	o.IsManageAccount = &v
}

// GetId returns the Id field value
func (o *GroupConfig) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GroupConfig) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GroupConfig) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *GroupConfig) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GroupConfig) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GroupConfig) SetName(v string) {
	o.Name = v
}

// GetLdapGroupNames returns the LdapGroupNames field value if set, zero value otherwise.
func (o *GroupConfig) GetLdapGroupNames() []string {
	if o == nil || o.LdapGroupNames == nil {
		var ret []string
		return ret
	}
	return *o.LdapGroupNames
}

// GetLdapGroupNamesOk returns a tuple with the LdapGroupNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupConfig) GetLdapGroupNamesOk() (*[]string, bool) {
	if o == nil || o.LdapGroupNames == nil {
		return nil, false
	}
	return o.LdapGroupNames, true
}

// HasLdapGroupNames returns a boolean if a field has been set.
func (o *GroupConfig) HasLdapGroupNames() bool {
	if o != nil && o.LdapGroupNames != nil {
		return true
	}

	return false
}

// SetLdapGroupNames gets a reference to the given []string and assigns it to the LdapGroupNames field.
func (o *GroupConfig) SetLdapGroupNames(v []string) {
	o.LdapGroupNames = &v
}

// GetSsoGroupNames returns the SsoGroupNames field value if set, zero value otherwise.
func (o *GroupConfig) GetSsoGroupNames() []string {
	if o == nil || o.SsoGroupNames == nil {
		var ret []string
		return ret
	}
	return *o.SsoGroupNames
}

// GetSsoGroupNamesOk returns a tuple with the SsoGroupNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupConfig) GetSsoGroupNamesOk() (*[]string, bool) {
	if o == nil || o.SsoGroupNames == nil {
		return nil, false
	}
	return o.SsoGroupNames, true
}

// HasSsoGroupNames returns a boolean if a field has been set.
func (o *GroupConfig) HasSsoGroupNames() bool {
	if o != nil && o.SsoGroupNames != nil {
		return true
	}

	return false
}

// SetSsoGroupNames gets a reference to the given []string and assigns it to the SsoGroupNames field.
func (o *GroupConfig) SetSsoGroupNames(v []string) {
	o.SsoGroupNames = &v
}

// GetAccessRight returns the AccessRight field value if set, zero value otherwise.
func (o *GroupConfig) GetAccessRight() map[string][]string {
	if o == nil || o.AccessRight == nil {
		var ret map[string][]string
		return ret
	}
	return *o.AccessRight
}

// GetAccessRightOk returns a tuple with the AccessRight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupConfig) GetAccessRightOk() (*map[string][]string, bool) {
	if o == nil || o.AccessRight == nil {
		return nil, false
	}
	return o.AccessRight, true
}

// HasAccessRight returns a boolean if a field has been set.
func (o *GroupConfig) HasAccessRight() bool {
	if o != nil && o.AccessRight != nil {
		return true
	}

	return false
}

// SetAccessRight gets a reference to the given map[string][]string and assigns it to the AccessRight field.
func (o *GroupConfig) SetAccessRight(v map[string][]string) {
	o.AccessRight = &v
}

func (o GroupConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["isClusterAdminGroup"] = o.IsClusterAdminGroup
	}
	if o.HasAccessAccountRole != nil {
		toSerialize["hasAccessAccountRole"] = o.HasAccessAccountRole
	}
	if o.HasManageAccountAndViewProductUsageRole != nil {
		toSerialize["hasManageAccountAndViewProductUsageRole"] = o.HasManageAccountAndViewProductUsageRole
	}
	if o.IsAccessAccount != nil {
		toSerialize["isAccessAccount"] = o.IsAccessAccount
	}
	if o.IsManageAccount != nil {
		toSerialize["isManageAccount"] = o.IsManageAccount
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.LdapGroupNames != nil {
		toSerialize["ldapGroupNames"] = o.LdapGroupNames
	}
	if o.SsoGroupNames != nil {
		toSerialize["ssoGroupNames"] = o.SsoGroupNames
	}
	if o.AccessRight != nil {
		toSerialize["accessRight"] = o.AccessRight
	}
	return json.Marshal(toSerialize)
}

type NullableGroupConfig struct {
	value *GroupConfig
	isSet bool
}

func (v NullableGroupConfig) Get() *GroupConfig {
	return v.value
}

func (v *NullableGroupConfig) Set(val *GroupConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupConfig(val *GroupConfig) *NullableGroupConfig {
	return &NullableGroupConfig{value: val, isSet: true}
}

func (v NullableGroupConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


