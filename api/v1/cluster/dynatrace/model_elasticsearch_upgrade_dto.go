/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ElasticsearchUpgradeDTO struct for ElasticsearchUpgradeDTO
type ElasticsearchUpgradeDTO struct {
	UpgradePossible *bool `json:"upgradePossible,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// NewElasticsearchUpgradeDTO instantiates a new ElasticsearchUpgradeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElasticsearchUpgradeDTO() *ElasticsearchUpgradeDTO {
	this := ElasticsearchUpgradeDTO{}
	return &this
}

// NewElasticsearchUpgradeDTOWithDefaults instantiates a new ElasticsearchUpgradeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElasticsearchUpgradeDTOWithDefaults() *ElasticsearchUpgradeDTO {
	this := ElasticsearchUpgradeDTO{}
	return &this
}

// GetUpgradePossible returns the UpgradePossible field value if set, zero value otherwise.
func (o *ElasticsearchUpgradeDTO) GetUpgradePossible() bool {
	if o == nil || o.UpgradePossible == nil {
		var ret bool
		return ret
	}
	return *o.UpgradePossible
}

// GetUpgradePossibleOk returns a tuple with the UpgradePossible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchUpgradeDTO) GetUpgradePossibleOk() (*bool, bool) {
	if o == nil || o.UpgradePossible == nil {
		return nil, false
	}
	return o.UpgradePossible, true
}

// HasUpgradePossible returns a boolean if a field has been set.
func (o *ElasticsearchUpgradeDTO) HasUpgradePossible() bool {
	if o != nil && o.UpgradePossible != nil {
		return true
	}

	return false
}

// SetUpgradePossible gets a reference to the given bool and assigns it to the UpgradePossible field.
func (o *ElasticsearchUpgradeDTO) SetUpgradePossible(v bool) {
	o.UpgradePossible = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ElasticsearchUpgradeDTO) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchUpgradeDTO) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ElasticsearchUpgradeDTO) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ElasticsearchUpgradeDTO) SetReason(v string) {
	o.Reason = &v
}

func (o ElasticsearchUpgradeDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UpgradePossible != nil {
		toSerialize["upgradePossible"] = o.UpgradePossible
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableElasticsearchUpgradeDTO struct {
	value *ElasticsearchUpgradeDTO
	isSet bool
}

func (v NullableElasticsearchUpgradeDTO) Get() *ElasticsearchUpgradeDTO {
	return v.value
}

func (v *NullableElasticsearchUpgradeDTO) Set(val *ElasticsearchUpgradeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableElasticsearchUpgradeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableElasticsearchUpgradeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElasticsearchUpgradeDTO(val *ElasticsearchUpgradeDTO) *NullableElasticsearchUpgradeDTO {
	return &NullableElasticsearchUpgradeDTO{value: val, isSet: true}
}

func (v NullableElasticsearchUpgradeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElasticsearchUpgradeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


