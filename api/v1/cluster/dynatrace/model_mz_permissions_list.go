/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MzPermissionsList struct for MzPermissionsList
type MzPermissionsList struct {
	// The ID of the required management zone
	MzId *string `json:"mzId,omitempty"`
	// The list of permissions for the required management zone
	Permissions *[]string `json:"permissions,omitempty"`
}

// NewMzPermissionsList instantiates a new MzPermissionsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMzPermissionsList() *MzPermissionsList {
	this := MzPermissionsList{}
	return &this
}

// NewMzPermissionsListWithDefaults instantiates a new MzPermissionsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMzPermissionsListWithDefaults() *MzPermissionsList {
	this := MzPermissionsList{}
	return &this
}

// GetMzId returns the MzId field value if set, zero value otherwise.
func (o *MzPermissionsList) GetMzId() string {
	if o == nil || o.MzId == nil {
		var ret string
		return ret
	}
	return *o.MzId
}

// GetMzIdOk returns a tuple with the MzId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MzPermissionsList) GetMzIdOk() (*string, bool) {
	if o == nil || o.MzId == nil {
		return nil, false
	}
	return o.MzId, true
}

// HasMzId returns a boolean if a field has been set.
func (o *MzPermissionsList) HasMzId() bool {
	if o != nil && o.MzId != nil {
		return true
	}

	return false
}

// SetMzId gets a reference to the given string and assigns it to the MzId field.
func (o *MzPermissionsList) SetMzId(v string) {
	o.MzId = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *MzPermissionsList) GetPermissions() []string {
	if o == nil || o.Permissions == nil {
		var ret []string
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MzPermissionsList) GetPermissionsOk() (*[]string, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *MzPermissionsList) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []string and assigns it to the Permissions field.
func (o *MzPermissionsList) SetPermissions(v []string) {
	o.Permissions = &v
}

func (o MzPermissionsList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MzId != nil {
		toSerialize["mzId"] = o.MzId
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return json.Marshal(toSerialize)
}

type NullableMzPermissionsList struct {
	value *MzPermissionsList
	isSet bool
}

func (v NullableMzPermissionsList) Get() *MzPermissionsList {
	return v.value
}

func (v *NullableMzPermissionsList) Set(val *MzPermissionsList) {
	v.value = val
	v.isSet = true
}

func (v NullableMzPermissionsList) IsSet() bool {
	return v.isSet
}

func (v *NullableMzPermissionsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMzPermissionsList(val *MzPermissionsList) *NullableMzPermissionsList {
	return &NullableMzPermissionsList{value: val, isSet: true}
}

func (v NullableMzPermissionsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMzPermissionsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


