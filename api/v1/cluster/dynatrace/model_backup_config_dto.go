/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// BackupConfigDto Configuration of the cluster backup.
type BackupConfigDto struct {
	// Backups are enabled (`true`) or disabled (`false`).
	Enabled *bool `json:"enabled,omitempty"`
	// Datacenter which will create backups
	Datacenter *string `json:"datacenter,omitempty"`
	// A full path to the backup archive
	StoragePath *string `json:"storagePath,omitempty"`
	// Include user sessions (`true`) or GDPR compliance (`false`)
	IncludeRumData *bool `json:"includeRumData,omitempty"`
	// Include time series metric-data (`true`) or retain configuration data only (`false`))
	IncludeTsMetricData *bool `json:"includeTsMetricData,omitempty"`
	// Cassandra backup bandwidth limit in Mbps
	BandwidthLimitMbits *int32 `json:"bandwidthLimitMbits,omitempty"`
	// Max number of Elasticsearch snapshots to clean. Elasticsearch snapshots won't be created anymore if there will be more backups to clean than this value.
	MaxEsSnapshotsToClean *int32 `json:"maxEsSnapshotsToClean,omitempty"`
	// Hour to start Cassandra backups each day.
	CassandraScheduledTime *int32 `json:"cassandraScheduledTime,omitempty"`
	// Pauses Elasticsearch and Cassandra backups. In comparison to enable/disable backup, this option does not modify any configuration like Elasticsearch properties.
	PauseBackups *bool `json:"pauseBackups,omitempty"`
}

// NewBackupConfigDto instantiates a new BackupConfigDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupConfigDto() *BackupConfigDto {
	this := BackupConfigDto{}
	return &this
}

// NewBackupConfigDtoWithDefaults instantiates a new BackupConfigDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupConfigDtoWithDefaults() *BackupConfigDto {
	this := BackupConfigDto{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *BackupConfigDto) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupConfigDto) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *BackupConfigDto) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *BackupConfigDto) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetDatacenter returns the Datacenter field value if set, zero value otherwise.
func (o *BackupConfigDto) GetDatacenter() string {
	if o == nil || o.Datacenter == nil {
		var ret string
		return ret
	}
	return *o.Datacenter
}

// GetDatacenterOk returns a tuple with the Datacenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupConfigDto) GetDatacenterOk() (*string, bool) {
	if o == nil || o.Datacenter == nil {
		return nil, false
	}
	return o.Datacenter, true
}

// HasDatacenter returns a boolean if a field has been set.
func (o *BackupConfigDto) HasDatacenter() bool {
	if o != nil && o.Datacenter != nil {
		return true
	}

	return false
}

// SetDatacenter gets a reference to the given string and assigns it to the Datacenter field.
func (o *BackupConfigDto) SetDatacenter(v string) {
	o.Datacenter = &v
}

// GetStoragePath returns the StoragePath field value if set, zero value otherwise.
func (o *BackupConfigDto) GetStoragePath() string {
	if o == nil || o.StoragePath == nil {
		var ret string
		return ret
	}
	return *o.StoragePath
}

// GetStoragePathOk returns a tuple with the StoragePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupConfigDto) GetStoragePathOk() (*string, bool) {
	if o == nil || o.StoragePath == nil {
		return nil, false
	}
	return o.StoragePath, true
}

// HasStoragePath returns a boolean if a field has been set.
func (o *BackupConfigDto) HasStoragePath() bool {
	if o != nil && o.StoragePath != nil {
		return true
	}

	return false
}

// SetStoragePath gets a reference to the given string and assigns it to the StoragePath field.
func (o *BackupConfigDto) SetStoragePath(v string) {
	o.StoragePath = &v
}

// GetIncludeRumData returns the IncludeRumData field value if set, zero value otherwise.
func (o *BackupConfigDto) GetIncludeRumData() bool {
	if o == nil || o.IncludeRumData == nil {
		var ret bool
		return ret
	}
	return *o.IncludeRumData
}

// GetIncludeRumDataOk returns a tuple with the IncludeRumData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupConfigDto) GetIncludeRumDataOk() (*bool, bool) {
	if o == nil || o.IncludeRumData == nil {
		return nil, false
	}
	return o.IncludeRumData, true
}

// HasIncludeRumData returns a boolean if a field has been set.
func (o *BackupConfigDto) HasIncludeRumData() bool {
	if o != nil && o.IncludeRumData != nil {
		return true
	}

	return false
}

// SetIncludeRumData gets a reference to the given bool and assigns it to the IncludeRumData field.
func (o *BackupConfigDto) SetIncludeRumData(v bool) {
	o.IncludeRumData = &v
}

// GetIncludeTsMetricData returns the IncludeTsMetricData field value if set, zero value otherwise.
func (o *BackupConfigDto) GetIncludeTsMetricData() bool {
	if o == nil || o.IncludeTsMetricData == nil {
		var ret bool
		return ret
	}
	return *o.IncludeTsMetricData
}

// GetIncludeTsMetricDataOk returns a tuple with the IncludeTsMetricData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupConfigDto) GetIncludeTsMetricDataOk() (*bool, bool) {
	if o == nil || o.IncludeTsMetricData == nil {
		return nil, false
	}
	return o.IncludeTsMetricData, true
}

// HasIncludeTsMetricData returns a boolean if a field has been set.
func (o *BackupConfigDto) HasIncludeTsMetricData() bool {
	if o != nil && o.IncludeTsMetricData != nil {
		return true
	}

	return false
}

// SetIncludeTsMetricData gets a reference to the given bool and assigns it to the IncludeTsMetricData field.
func (o *BackupConfigDto) SetIncludeTsMetricData(v bool) {
	o.IncludeTsMetricData = &v
}

// GetBandwidthLimitMbits returns the BandwidthLimitMbits field value if set, zero value otherwise.
func (o *BackupConfigDto) GetBandwidthLimitMbits() int32 {
	if o == nil || o.BandwidthLimitMbits == nil {
		var ret int32
		return ret
	}
	return *o.BandwidthLimitMbits
}

// GetBandwidthLimitMbitsOk returns a tuple with the BandwidthLimitMbits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupConfigDto) GetBandwidthLimitMbitsOk() (*int32, bool) {
	if o == nil || o.BandwidthLimitMbits == nil {
		return nil, false
	}
	return o.BandwidthLimitMbits, true
}

// HasBandwidthLimitMbits returns a boolean if a field has been set.
func (o *BackupConfigDto) HasBandwidthLimitMbits() bool {
	if o != nil && o.BandwidthLimitMbits != nil {
		return true
	}

	return false
}

// SetBandwidthLimitMbits gets a reference to the given int32 and assigns it to the BandwidthLimitMbits field.
func (o *BackupConfigDto) SetBandwidthLimitMbits(v int32) {
	o.BandwidthLimitMbits = &v
}

// GetMaxEsSnapshotsToClean returns the MaxEsSnapshotsToClean field value if set, zero value otherwise.
func (o *BackupConfigDto) GetMaxEsSnapshotsToClean() int32 {
	if o == nil || o.MaxEsSnapshotsToClean == nil {
		var ret int32
		return ret
	}
	return *o.MaxEsSnapshotsToClean
}

// GetMaxEsSnapshotsToCleanOk returns a tuple with the MaxEsSnapshotsToClean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupConfigDto) GetMaxEsSnapshotsToCleanOk() (*int32, bool) {
	if o == nil || o.MaxEsSnapshotsToClean == nil {
		return nil, false
	}
	return o.MaxEsSnapshotsToClean, true
}

// HasMaxEsSnapshotsToClean returns a boolean if a field has been set.
func (o *BackupConfigDto) HasMaxEsSnapshotsToClean() bool {
	if o != nil && o.MaxEsSnapshotsToClean != nil {
		return true
	}

	return false
}

// SetMaxEsSnapshotsToClean gets a reference to the given int32 and assigns it to the MaxEsSnapshotsToClean field.
func (o *BackupConfigDto) SetMaxEsSnapshotsToClean(v int32) {
	o.MaxEsSnapshotsToClean = &v
}

// GetCassandraScheduledTime returns the CassandraScheduledTime field value if set, zero value otherwise.
func (o *BackupConfigDto) GetCassandraScheduledTime() int32 {
	if o == nil || o.CassandraScheduledTime == nil {
		var ret int32
		return ret
	}
	return *o.CassandraScheduledTime
}

// GetCassandraScheduledTimeOk returns a tuple with the CassandraScheduledTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupConfigDto) GetCassandraScheduledTimeOk() (*int32, bool) {
	if o == nil || o.CassandraScheduledTime == nil {
		return nil, false
	}
	return o.CassandraScheduledTime, true
}

// HasCassandraScheduledTime returns a boolean if a field has been set.
func (o *BackupConfigDto) HasCassandraScheduledTime() bool {
	if o != nil && o.CassandraScheduledTime != nil {
		return true
	}

	return false
}

// SetCassandraScheduledTime gets a reference to the given int32 and assigns it to the CassandraScheduledTime field.
func (o *BackupConfigDto) SetCassandraScheduledTime(v int32) {
	o.CassandraScheduledTime = &v
}

// GetPauseBackups returns the PauseBackups field value if set, zero value otherwise.
func (o *BackupConfigDto) GetPauseBackups() bool {
	if o == nil || o.PauseBackups == nil {
		var ret bool
		return ret
	}
	return *o.PauseBackups
}

// GetPauseBackupsOk returns a tuple with the PauseBackups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupConfigDto) GetPauseBackupsOk() (*bool, bool) {
	if o == nil || o.PauseBackups == nil {
		return nil, false
	}
	return o.PauseBackups, true
}

// HasPauseBackups returns a boolean if a field has been set.
func (o *BackupConfigDto) HasPauseBackups() bool {
	if o != nil && o.PauseBackups != nil {
		return true
	}

	return false
}

// SetPauseBackups gets a reference to the given bool and assigns it to the PauseBackups field.
func (o *BackupConfigDto) SetPauseBackups(v bool) {
	o.PauseBackups = &v
}

func (o BackupConfigDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Datacenter != nil {
		toSerialize["datacenter"] = o.Datacenter
	}
	if o.StoragePath != nil {
		toSerialize["storagePath"] = o.StoragePath
	}
	if o.IncludeRumData != nil {
		toSerialize["includeRumData"] = o.IncludeRumData
	}
	if o.IncludeTsMetricData != nil {
		toSerialize["includeTsMetricData"] = o.IncludeTsMetricData
	}
	if o.BandwidthLimitMbits != nil {
		toSerialize["bandwidthLimitMbits"] = o.BandwidthLimitMbits
	}
	if o.MaxEsSnapshotsToClean != nil {
		toSerialize["maxEsSnapshotsToClean"] = o.MaxEsSnapshotsToClean
	}
	if o.CassandraScheduledTime != nil {
		toSerialize["cassandraScheduledTime"] = o.CassandraScheduledTime
	}
	if o.PauseBackups != nil {
		toSerialize["pauseBackups"] = o.PauseBackups
	}
	return json.Marshal(toSerialize)
}

type NullableBackupConfigDto struct {
	value *BackupConfigDto
	isSet bool
}

func (v NullableBackupConfigDto) Get() *BackupConfigDto {
	return v.value
}

func (v *NullableBackupConfigDto) Set(val *BackupConfigDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupConfigDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupConfigDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupConfigDto(val *BackupConfigDto) *NullableBackupConfigDto {
	return &NullableBackupConfigDto{value: val, isSet: true}
}

func (v NullableBackupConfigDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupConfigDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


