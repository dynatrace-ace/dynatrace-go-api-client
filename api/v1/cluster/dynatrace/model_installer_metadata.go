/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// InstallerMetadata Metadata used by installer
type InstallerMetadata struct {
	// Network attached storage path for the backup
	ClusterBackupPath *string `json:"clusterBackupPath,omitempty"`
	// Elasticsearch repository used for the backup
	ElasticsearchBackupPath *string `json:"elasticsearchBackupPath,omitempty"`
	// Datacenter for backup, used only in multidc setups
	DatacenterWithBackupEnabled *string `json:"datacenterWithBackupEnabled,omitempty"`
}

// NewInstallerMetadata instantiates a new InstallerMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstallerMetadata() *InstallerMetadata {
	this := InstallerMetadata{}
	return &this
}

// NewInstallerMetadataWithDefaults instantiates a new InstallerMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstallerMetadataWithDefaults() *InstallerMetadata {
	this := InstallerMetadata{}
	return &this
}

// GetClusterBackupPath returns the ClusterBackupPath field value if set, zero value otherwise.
func (o *InstallerMetadata) GetClusterBackupPath() string {
	if o == nil || o.ClusterBackupPath == nil {
		var ret string
		return ret
	}
	return *o.ClusterBackupPath
}

// GetClusterBackupPathOk returns a tuple with the ClusterBackupPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerMetadata) GetClusterBackupPathOk() (*string, bool) {
	if o == nil || o.ClusterBackupPath == nil {
		return nil, false
	}
	return o.ClusterBackupPath, true
}

// HasClusterBackupPath returns a boolean if a field has been set.
func (o *InstallerMetadata) HasClusterBackupPath() bool {
	if o != nil && o.ClusterBackupPath != nil {
		return true
	}

	return false
}

// SetClusterBackupPath gets a reference to the given string and assigns it to the ClusterBackupPath field.
func (o *InstallerMetadata) SetClusterBackupPath(v string) {
	o.ClusterBackupPath = &v
}

// GetElasticsearchBackupPath returns the ElasticsearchBackupPath field value if set, zero value otherwise.
func (o *InstallerMetadata) GetElasticsearchBackupPath() string {
	if o == nil || o.ElasticsearchBackupPath == nil {
		var ret string
		return ret
	}
	return *o.ElasticsearchBackupPath
}

// GetElasticsearchBackupPathOk returns a tuple with the ElasticsearchBackupPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerMetadata) GetElasticsearchBackupPathOk() (*string, bool) {
	if o == nil || o.ElasticsearchBackupPath == nil {
		return nil, false
	}
	return o.ElasticsearchBackupPath, true
}

// HasElasticsearchBackupPath returns a boolean if a field has been set.
func (o *InstallerMetadata) HasElasticsearchBackupPath() bool {
	if o != nil && o.ElasticsearchBackupPath != nil {
		return true
	}

	return false
}

// SetElasticsearchBackupPath gets a reference to the given string and assigns it to the ElasticsearchBackupPath field.
func (o *InstallerMetadata) SetElasticsearchBackupPath(v string) {
	o.ElasticsearchBackupPath = &v
}

// GetDatacenterWithBackupEnabled returns the DatacenterWithBackupEnabled field value if set, zero value otherwise.
func (o *InstallerMetadata) GetDatacenterWithBackupEnabled() string {
	if o == nil || o.DatacenterWithBackupEnabled == nil {
		var ret string
		return ret
	}
	return *o.DatacenterWithBackupEnabled
}

// GetDatacenterWithBackupEnabledOk returns a tuple with the DatacenterWithBackupEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstallerMetadata) GetDatacenterWithBackupEnabledOk() (*string, bool) {
	if o == nil || o.DatacenterWithBackupEnabled == nil {
		return nil, false
	}
	return o.DatacenterWithBackupEnabled, true
}

// HasDatacenterWithBackupEnabled returns a boolean if a field has been set.
func (o *InstallerMetadata) HasDatacenterWithBackupEnabled() bool {
	if o != nil && o.DatacenterWithBackupEnabled != nil {
		return true
	}

	return false
}

// SetDatacenterWithBackupEnabled gets a reference to the given string and assigns it to the DatacenterWithBackupEnabled field.
func (o *InstallerMetadata) SetDatacenterWithBackupEnabled(v string) {
	o.DatacenterWithBackupEnabled = &v
}

func (o InstallerMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterBackupPath != nil {
		toSerialize["clusterBackupPath"] = o.ClusterBackupPath
	}
	if o.ElasticsearchBackupPath != nil {
		toSerialize["elasticsearchBackupPath"] = o.ElasticsearchBackupPath
	}
	if o.DatacenterWithBackupEnabled != nil {
		toSerialize["datacenterWithBackupEnabled"] = o.DatacenterWithBackupEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableInstallerMetadata struct {
	value *InstallerMetadata
	isSet bool
}

func (v NullableInstallerMetadata) Get() *InstallerMetadata {
	return v.value
}

func (v *NullableInstallerMetadata) Set(val *InstallerMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableInstallerMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableInstallerMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstallerMetadata(val *InstallerMetadata) *NullableInstallerMetadata {
	return &NullableInstallerMetadata{value: val, isSet: true}
}

func (v NullableInstallerMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstallerMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


