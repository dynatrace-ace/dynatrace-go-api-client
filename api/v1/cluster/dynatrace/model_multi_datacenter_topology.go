/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MultiDatacenterTopology Multi datacenter topology
type MultiDatacenterTopology struct {
	// Map of multidatacenter topology
	DatacenterTopology *map[string]DatacenterDesc `json:"datacenterTopology,omitempty"`
	OldDatacenterName *string `json:"oldDatacenterName,omitempty"`
	NewDatacenterName *string `json:"newDatacenterName,omitempty"`
}

// NewMultiDatacenterTopology instantiates a new MultiDatacenterTopology object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiDatacenterTopology() *MultiDatacenterTopology {
	this := MultiDatacenterTopology{}
	return &this
}

// NewMultiDatacenterTopologyWithDefaults instantiates a new MultiDatacenterTopology object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiDatacenterTopologyWithDefaults() *MultiDatacenterTopology {
	this := MultiDatacenterTopology{}
	return &this
}

// GetDatacenterTopology returns the DatacenterTopology field value if set, zero value otherwise.
func (o *MultiDatacenterTopology) GetDatacenterTopology() map[string]DatacenterDesc {
	if o == nil || o.DatacenterTopology == nil {
		var ret map[string]DatacenterDesc
		return ret
	}
	return *o.DatacenterTopology
}

// GetDatacenterTopologyOk returns a tuple with the DatacenterTopology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiDatacenterTopology) GetDatacenterTopologyOk() (*map[string]DatacenterDesc, bool) {
	if o == nil || o.DatacenterTopology == nil {
		return nil, false
	}
	return o.DatacenterTopology, true
}

// HasDatacenterTopology returns a boolean if a field has been set.
func (o *MultiDatacenterTopology) HasDatacenterTopology() bool {
	if o != nil && o.DatacenterTopology != nil {
		return true
	}

	return false
}

// SetDatacenterTopology gets a reference to the given map[string]DatacenterDesc and assigns it to the DatacenterTopology field.
func (o *MultiDatacenterTopology) SetDatacenterTopology(v map[string]DatacenterDesc) {
	o.DatacenterTopology = &v
}

// GetOldDatacenterName returns the OldDatacenterName field value if set, zero value otherwise.
func (o *MultiDatacenterTopology) GetOldDatacenterName() string {
	if o == nil || o.OldDatacenterName == nil {
		var ret string
		return ret
	}
	return *o.OldDatacenterName
}

// GetOldDatacenterNameOk returns a tuple with the OldDatacenterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiDatacenterTopology) GetOldDatacenterNameOk() (*string, bool) {
	if o == nil || o.OldDatacenterName == nil {
		return nil, false
	}
	return o.OldDatacenterName, true
}

// HasOldDatacenterName returns a boolean if a field has been set.
func (o *MultiDatacenterTopology) HasOldDatacenterName() bool {
	if o != nil && o.OldDatacenterName != nil {
		return true
	}

	return false
}

// SetOldDatacenterName gets a reference to the given string and assigns it to the OldDatacenterName field.
func (o *MultiDatacenterTopology) SetOldDatacenterName(v string) {
	o.OldDatacenterName = &v
}

// GetNewDatacenterName returns the NewDatacenterName field value if set, zero value otherwise.
func (o *MultiDatacenterTopology) GetNewDatacenterName() string {
	if o == nil || o.NewDatacenterName == nil {
		var ret string
		return ret
	}
	return *o.NewDatacenterName
}

// GetNewDatacenterNameOk returns a tuple with the NewDatacenterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultiDatacenterTopology) GetNewDatacenterNameOk() (*string, bool) {
	if o == nil || o.NewDatacenterName == nil {
		return nil, false
	}
	return o.NewDatacenterName, true
}

// HasNewDatacenterName returns a boolean if a field has been set.
func (o *MultiDatacenterTopology) HasNewDatacenterName() bool {
	if o != nil && o.NewDatacenterName != nil {
		return true
	}

	return false
}

// SetNewDatacenterName gets a reference to the given string and assigns it to the NewDatacenterName field.
func (o *MultiDatacenterTopology) SetNewDatacenterName(v string) {
	o.NewDatacenterName = &v
}

func (o MultiDatacenterTopology) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatacenterTopology != nil {
		toSerialize["datacenterTopology"] = o.DatacenterTopology
	}
	if o.OldDatacenterName != nil {
		toSerialize["oldDatacenterName"] = o.OldDatacenterName
	}
	if o.NewDatacenterName != nil {
		toSerialize["newDatacenterName"] = o.NewDatacenterName
	}
	return json.Marshal(toSerialize)
}

type NullableMultiDatacenterTopology struct {
	value *MultiDatacenterTopology
	isSet bool
}

func (v NullableMultiDatacenterTopology) Get() *MultiDatacenterTopology {
	return v.value
}

func (v *NullableMultiDatacenterTopology) Set(val *MultiDatacenterTopology) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiDatacenterTopology) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiDatacenterTopology) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiDatacenterTopology(val *MultiDatacenterTopology) *NullableMultiDatacenterTopology {
	return &NullableMultiDatacenterTopology{value: val, isSet: true}
}

func (v NullableMultiDatacenterTopology) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiDatacenterTopology) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


