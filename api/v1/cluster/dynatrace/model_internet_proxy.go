/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// InternetProxy Configuration of proxy server for Internet connection
type InternetProxy struct {
	// Protocol which proxy server uses
	Scheme *string `json:"scheme,omitempty"`
	// Address (either IP or Hostname) of proxy server
	Server *string `json:"server,omitempty"`
	// Port of proxy server
	Port *int32 `json:"port,omitempty"`
	// Definition of hosts for which proxy won't be used.
	NonProxyHosts *[]string `json:"nonProxyHosts,omitempty"`
	// Indicates if user/password for proxy is configured
	UserOrPasswordDefined *bool `json:"userOrPasswordDefined,omitempty"`
}

// NewInternetProxy instantiates a new InternetProxy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternetProxy() *InternetProxy {
	this := InternetProxy{}
	return &this
}

// NewInternetProxyWithDefaults instantiates a new InternetProxy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternetProxyWithDefaults() *InternetProxy {
	this := InternetProxy{}
	return &this
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *InternetProxy) GetScheme() string {
	if o == nil || o.Scheme == nil {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternetProxy) GetSchemeOk() (*string, bool) {
	if o == nil || o.Scheme == nil {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *InternetProxy) HasScheme() bool {
	if o != nil && o.Scheme != nil {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *InternetProxy) SetScheme(v string) {
	o.Scheme = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *InternetProxy) GetServer() string {
	if o == nil || o.Server == nil {
		var ret string
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternetProxy) GetServerOk() (*string, bool) {
	if o == nil || o.Server == nil {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *InternetProxy) HasServer() bool {
	if o != nil && o.Server != nil {
		return true
	}

	return false
}

// SetServer gets a reference to the given string and assigns it to the Server field.
func (o *InternetProxy) SetServer(v string) {
	o.Server = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *InternetProxy) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternetProxy) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *InternetProxy) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *InternetProxy) SetPort(v int32) {
	o.Port = &v
}

// GetNonProxyHosts returns the NonProxyHosts field value if set, zero value otherwise.
func (o *InternetProxy) GetNonProxyHosts() []string {
	if o == nil || o.NonProxyHosts == nil {
		var ret []string
		return ret
	}
	return *o.NonProxyHosts
}

// GetNonProxyHostsOk returns a tuple with the NonProxyHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternetProxy) GetNonProxyHostsOk() (*[]string, bool) {
	if o == nil || o.NonProxyHosts == nil {
		return nil, false
	}
	return o.NonProxyHosts, true
}

// HasNonProxyHosts returns a boolean if a field has been set.
func (o *InternetProxy) HasNonProxyHosts() bool {
	if o != nil && o.NonProxyHosts != nil {
		return true
	}

	return false
}

// SetNonProxyHosts gets a reference to the given []string and assigns it to the NonProxyHosts field.
func (o *InternetProxy) SetNonProxyHosts(v []string) {
	o.NonProxyHosts = &v
}

// GetUserOrPasswordDefined returns the UserOrPasswordDefined field value if set, zero value otherwise.
func (o *InternetProxy) GetUserOrPasswordDefined() bool {
	if o == nil || o.UserOrPasswordDefined == nil {
		var ret bool
		return ret
	}
	return *o.UserOrPasswordDefined
}

// GetUserOrPasswordDefinedOk returns a tuple with the UserOrPasswordDefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternetProxy) GetUserOrPasswordDefinedOk() (*bool, bool) {
	if o == nil || o.UserOrPasswordDefined == nil {
		return nil, false
	}
	return o.UserOrPasswordDefined, true
}

// HasUserOrPasswordDefined returns a boolean if a field has been set.
func (o *InternetProxy) HasUserOrPasswordDefined() bool {
	if o != nil && o.UserOrPasswordDefined != nil {
		return true
	}

	return false
}

// SetUserOrPasswordDefined gets a reference to the given bool and assigns it to the UserOrPasswordDefined field.
func (o *InternetProxy) SetUserOrPasswordDefined(v bool) {
	o.UserOrPasswordDefined = &v
}

func (o InternetProxy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Scheme != nil {
		toSerialize["scheme"] = o.Scheme
	}
	if o.Server != nil {
		toSerialize["server"] = o.Server
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.NonProxyHosts != nil {
		toSerialize["nonProxyHosts"] = o.NonProxyHosts
	}
	if o.UserOrPasswordDefined != nil {
		toSerialize["userOrPasswordDefined"] = o.UserOrPasswordDefined
	}
	return json.Marshal(toSerialize)
}

type NullableInternetProxy struct {
	value *InternetProxy
	isSet bool
}

func (v NullableInternetProxy) Get() *InternetProxy {
	return v.value
}

func (v *NullableInternetProxy) Set(val *InternetProxy) {
	v.value = val
	v.isSet = true
}

func (v NullableInternetProxy) IsSet() bool {
	return v.isSet
}

func (v *NullableInternetProxy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternetProxy(val *InternetProxy) *NullableInternetProxy {
	return &NullableInternetProxy{value: val, isSet: true}
}

func (v NullableInternetProxy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternetProxy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


