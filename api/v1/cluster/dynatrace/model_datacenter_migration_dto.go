/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// DatacenterMigrationDto struct for DatacenterMigrationDto
type DatacenterMigrationDto struct {
	NewDatacenterName *string `json:"newDatacenterName,omitempty"`
	NodesIp *[]string `json:"nodesIp,omitempty"`
}

// NewDatacenterMigrationDto instantiates a new DatacenterMigrationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatacenterMigrationDto() *DatacenterMigrationDto {
	this := DatacenterMigrationDto{}
	return &this
}

// NewDatacenterMigrationDtoWithDefaults instantiates a new DatacenterMigrationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatacenterMigrationDtoWithDefaults() *DatacenterMigrationDto {
	this := DatacenterMigrationDto{}
	return &this
}

// GetNewDatacenterName returns the NewDatacenterName field value if set, zero value otherwise.
func (o *DatacenterMigrationDto) GetNewDatacenterName() string {
	if o == nil || o.NewDatacenterName == nil {
		var ret string
		return ret
	}
	return *o.NewDatacenterName
}

// GetNewDatacenterNameOk returns a tuple with the NewDatacenterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatacenterMigrationDto) GetNewDatacenterNameOk() (*string, bool) {
	if o == nil || o.NewDatacenterName == nil {
		return nil, false
	}
	return o.NewDatacenterName, true
}

// HasNewDatacenterName returns a boolean if a field has been set.
func (o *DatacenterMigrationDto) HasNewDatacenterName() bool {
	if o != nil && o.NewDatacenterName != nil {
		return true
	}

	return false
}

// SetNewDatacenterName gets a reference to the given string and assigns it to the NewDatacenterName field.
func (o *DatacenterMigrationDto) SetNewDatacenterName(v string) {
	o.NewDatacenterName = &v
}

// GetNodesIp returns the NodesIp field value if set, zero value otherwise.
func (o *DatacenterMigrationDto) GetNodesIp() []string {
	if o == nil || o.NodesIp == nil {
		var ret []string
		return ret
	}
	return *o.NodesIp
}

// GetNodesIpOk returns a tuple with the NodesIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatacenterMigrationDto) GetNodesIpOk() (*[]string, bool) {
	if o == nil || o.NodesIp == nil {
		return nil, false
	}
	return o.NodesIp, true
}

// HasNodesIp returns a boolean if a field has been set.
func (o *DatacenterMigrationDto) HasNodesIp() bool {
	if o != nil && o.NodesIp != nil {
		return true
	}

	return false
}

// SetNodesIp gets a reference to the given []string and assigns it to the NodesIp field.
func (o *DatacenterMigrationDto) SetNodesIp(v []string) {
	o.NodesIp = &v
}

func (o DatacenterMigrationDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NewDatacenterName != nil {
		toSerialize["newDatacenterName"] = o.NewDatacenterName
	}
	if o.NodesIp != nil {
		toSerialize["nodesIp"] = o.NodesIp
	}
	return json.Marshal(toSerialize)
}

type NullableDatacenterMigrationDto struct {
	value *DatacenterMigrationDto
	isSet bool
}

func (v NullableDatacenterMigrationDto) Get() *DatacenterMigrationDto {
	return v.value
}

func (v *NullableDatacenterMigrationDto) Set(val *DatacenterMigrationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDatacenterMigrationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDatacenterMigrationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatacenterMigrationDto(val *DatacenterMigrationDto) *NullableDatacenterMigrationDto {
	return &NullableDatacenterMigrationDto{value: val, isSet: true}
}

func (v NullableDatacenterMigrationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatacenterMigrationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


