/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MzListForEnvironment struct for MzListForEnvironment
type MzListForEnvironment struct {
	// Environment UUID
	EnvironmentUuid *string `json:"environmentUuid,omitempty"`
	// List of management zone models with permissions
	MzPermissions *[]MzPermissionsList `json:"mzPermissions,omitempty"`
}

// NewMzListForEnvironment instantiates a new MzListForEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMzListForEnvironment() *MzListForEnvironment {
	this := MzListForEnvironment{}
	return &this
}

// NewMzListForEnvironmentWithDefaults instantiates a new MzListForEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMzListForEnvironmentWithDefaults() *MzListForEnvironment {
	this := MzListForEnvironment{}
	return &this
}

// GetEnvironmentUuid returns the EnvironmentUuid field value if set, zero value otherwise.
func (o *MzListForEnvironment) GetEnvironmentUuid() string {
	if o == nil || o.EnvironmentUuid == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentUuid
}

// GetEnvironmentUuidOk returns a tuple with the EnvironmentUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MzListForEnvironment) GetEnvironmentUuidOk() (*string, bool) {
	if o == nil || o.EnvironmentUuid == nil {
		return nil, false
	}
	return o.EnvironmentUuid, true
}

// HasEnvironmentUuid returns a boolean if a field has been set.
func (o *MzListForEnvironment) HasEnvironmentUuid() bool {
	if o != nil && o.EnvironmentUuid != nil {
		return true
	}

	return false
}

// SetEnvironmentUuid gets a reference to the given string and assigns it to the EnvironmentUuid field.
func (o *MzListForEnvironment) SetEnvironmentUuid(v string) {
	o.EnvironmentUuid = &v
}

// GetMzPermissions returns the MzPermissions field value if set, zero value otherwise.
func (o *MzListForEnvironment) GetMzPermissions() []MzPermissionsList {
	if o == nil || o.MzPermissions == nil {
		var ret []MzPermissionsList
		return ret
	}
	return *o.MzPermissions
}

// GetMzPermissionsOk returns a tuple with the MzPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MzListForEnvironment) GetMzPermissionsOk() (*[]MzPermissionsList, bool) {
	if o == nil || o.MzPermissions == nil {
		return nil, false
	}
	return o.MzPermissions, true
}

// HasMzPermissions returns a boolean if a field has been set.
func (o *MzListForEnvironment) HasMzPermissions() bool {
	if o != nil && o.MzPermissions != nil {
		return true
	}

	return false
}

// SetMzPermissions gets a reference to the given []MzPermissionsList and assigns it to the MzPermissions field.
func (o *MzListForEnvironment) SetMzPermissions(v []MzPermissionsList) {
	o.MzPermissions = &v
}

func (o MzListForEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnvironmentUuid != nil {
		toSerialize["environmentUuid"] = o.EnvironmentUuid
	}
	if o.MzPermissions != nil {
		toSerialize["mzPermissions"] = o.MzPermissions
	}
	return json.Marshal(toSerialize)
}

type NullableMzListForEnvironment struct {
	value *MzListForEnvironment
	isSet bool
}

func (v NullableMzListForEnvironment) Get() *MzListForEnvironment {
	return v.value
}

func (v *NullableMzListForEnvironment) Set(val *MzListForEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullableMzListForEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableMzListForEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMzListForEnvironment(val *MzListForEnvironment) *NullableMzListForEnvironment {
	return &NullableMzListForEnvironment{value: val, isSet: true}
}

func (v NullableMzListForEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMzListForEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


