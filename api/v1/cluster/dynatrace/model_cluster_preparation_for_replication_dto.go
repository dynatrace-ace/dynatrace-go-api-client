/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ClusterPreparationForReplicationDto struct for ClusterPreparationForReplicationDto
type ClusterPreparationForReplicationDto struct {
	Done *bool `json:"done,omitempty"`
	Success *bool `json:"success,omitempty"`
	PercentDone *float64 `json:"percentDone,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// NewClusterPreparationForReplicationDto instantiates a new ClusterPreparationForReplicationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterPreparationForReplicationDto() *ClusterPreparationForReplicationDto {
	this := ClusterPreparationForReplicationDto{}
	return &this
}

// NewClusterPreparationForReplicationDtoWithDefaults instantiates a new ClusterPreparationForReplicationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterPreparationForReplicationDtoWithDefaults() *ClusterPreparationForReplicationDto {
	this := ClusterPreparationForReplicationDto{}
	return &this
}

// GetDone returns the Done field value if set, zero value otherwise.
func (o *ClusterPreparationForReplicationDto) GetDone() bool {
	if o == nil || o.Done == nil {
		var ret bool
		return ret
	}
	return *o.Done
}

// GetDoneOk returns a tuple with the Done field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPreparationForReplicationDto) GetDoneOk() (*bool, bool) {
	if o == nil || o.Done == nil {
		return nil, false
	}
	return o.Done, true
}

// HasDone returns a boolean if a field has been set.
func (o *ClusterPreparationForReplicationDto) HasDone() bool {
	if o != nil && o.Done != nil {
		return true
	}

	return false
}

// SetDone gets a reference to the given bool and assigns it to the Done field.
func (o *ClusterPreparationForReplicationDto) SetDone(v bool) {
	o.Done = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ClusterPreparationForReplicationDto) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPreparationForReplicationDto) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ClusterPreparationForReplicationDto) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *ClusterPreparationForReplicationDto) SetSuccess(v bool) {
	o.Success = &v
}

// GetPercentDone returns the PercentDone field value if set, zero value otherwise.
func (o *ClusterPreparationForReplicationDto) GetPercentDone() float64 {
	if o == nil || o.PercentDone == nil {
		var ret float64
		return ret
	}
	return *o.PercentDone
}

// GetPercentDoneOk returns a tuple with the PercentDone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPreparationForReplicationDto) GetPercentDoneOk() (*float64, bool) {
	if o == nil || o.PercentDone == nil {
		return nil, false
	}
	return o.PercentDone, true
}

// HasPercentDone returns a boolean if a field has been set.
func (o *ClusterPreparationForReplicationDto) HasPercentDone() bool {
	if o != nil && o.PercentDone != nil {
		return true
	}

	return false
}

// SetPercentDone gets a reference to the given float64 and assigns it to the PercentDone field.
func (o *ClusterPreparationForReplicationDto) SetPercentDone(v float64) {
	o.PercentDone = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *ClusterPreparationForReplicationDto) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPreparationForReplicationDto) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ClusterPreparationForReplicationDto) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *ClusterPreparationForReplicationDto) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o ClusterPreparationForReplicationDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Done != nil {
		toSerialize["done"] = o.Done
	}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.PercentDone != nil {
		toSerialize["percentDone"] = o.PercentDone
	}
	if o.ErrorMessage != nil {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	return json.Marshal(toSerialize)
}

type NullableClusterPreparationForReplicationDto struct {
	value *ClusterPreparationForReplicationDto
	isSet bool
}

func (v NullableClusterPreparationForReplicationDto) Get() *ClusterPreparationForReplicationDto {
	return v.value
}

func (v *NullableClusterPreparationForReplicationDto) Set(val *ClusterPreparationForReplicationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterPreparationForReplicationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterPreparationForReplicationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterPreparationForReplicationDto(val *ClusterPreparationForReplicationDto) *NullableClusterPreparationForReplicationDto {
	return &NullableClusterPreparationForReplicationDto{value: val, isSet: true}
}

func (v NullableClusterPreparationForReplicationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterPreparationForReplicationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


