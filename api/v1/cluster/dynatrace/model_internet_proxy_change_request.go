/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// InternetProxyChangeRequest Configuration of proxy server for Internet connection
type InternetProxyChangeRequest struct {
	// Protocol which proxy server uses
	Scheme string `json:"scheme"`
	// Address (either IP or Hostname) of proxy server
	Server string `json:"server"`
	// Port of proxy server
	Port int32 `json:"port"`
	// User of proxy server, null means do not change previous value
	User *string `json:"user,omitempty"`
	// Password of proxy server, null means do not change previous value
	Password *string `json:"password,omitempty"`
	// Definition of hosts for which proxy won't be used. You can define multiple hosts. Each host can start or end with wildcard '*' for instance to match whole domain.
	NonProxyHosts *[]string `json:"nonProxyHosts,omitempty"`
}

// NewInternetProxyChangeRequest instantiates a new InternetProxyChangeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternetProxyChangeRequest(scheme string, server string, port int32) *InternetProxyChangeRequest {
	this := InternetProxyChangeRequest{}
	this.Scheme = scheme
	this.Server = server
	this.Port = port
	return &this
}

// NewInternetProxyChangeRequestWithDefaults instantiates a new InternetProxyChangeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternetProxyChangeRequestWithDefaults() *InternetProxyChangeRequest {
	this := InternetProxyChangeRequest{}
	return &this
}

// GetScheme returns the Scheme field value
func (o *InternetProxyChangeRequest) GetScheme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value
// and a boolean to check if the value has been set.
func (o *InternetProxyChangeRequest) GetSchemeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Scheme, true
}

// SetScheme sets field value
func (o *InternetProxyChangeRequest) SetScheme(v string) {
	o.Scheme = v
}

// GetServer returns the Server field value
func (o *InternetProxyChangeRequest) GetServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *InternetProxyChangeRequest) GetServerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *InternetProxyChangeRequest) SetServer(v string) {
	o.Server = v
}

// GetPort returns the Port field value
func (o *InternetProxyChangeRequest) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *InternetProxyChangeRequest) GetPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *InternetProxyChangeRequest) SetPort(v int32) {
	o.Port = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *InternetProxyChangeRequest) GetUser() string {
	if o == nil || o.User == nil {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternetProxyChangeRequest) GetUserOk() (*string, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *InternetProxyChangeRequest) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *InternetProxyChangeRequest) SetUser(v string) {
	o.User = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *InternetProxyChangeRequest) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternetProxyChangeRequest) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *InternetProxyChangeRequest) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *InternetProxyChangeRequest) SetPassword(v string) {
	o.Password = &v
}

// GetNonProxyHosts returns the NonProxyHosts field value if set, zero value otherwise.
func (o *InternetProxyChangeRequest) GetNonProxyHosts() []string {
	if o == nil || o.NonProxyHosts == nil {
		var ret []string
		return ret
	}
	return *o.NonProxyHosts
}

// GetNonProxyHostsOk returns a tuple with the NonProxyHosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternetProxyChangeRequest) GetNonProxyHostsOk() (*[]string, bool) {
	if o == nil || o.NonProxyHosts == nil {
		return nil, false
	}
	return o.NonProxyHosts, true
}

// HasNonProxyHosts returns a boolean if a field has been set.
func (o *InternetProxyChangeRequest) HasNonProxyHosts() bool {
	if o != nil && o.NonProxyHosts != nil {
		return true
	}

	return false
}

// SetNonProxyHosts gets a reference to the given []string and assigns it to the NonProxyHosts field.
func (o *InternetProxyChangeRequest) SetNonProxyHosts(v []string) {
	o.NonProxyHosts = &v
}

func (o InternetProxyChangeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["scheme"] = o.Scheme
	}
	if true {
		toSerialize["server"] = o.Server
	}
	if true {
		toSerialize["port"] = o.Port
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.NonProxyHosts != nil {
		toSerialize["nonProxyHosts"] = o.NonProxyHosts
	}
	return json.Marshal(toSerialize)
}

type NullableInternetProxyChangeRequest struct {
	value *InternetProxyChangeRequest
	isSet bool
}

func (v NullableInternetProxyChangeRequest) Get() *InternetProxyChangeRequest {
	return v.value
}

func (v *NullableInternetProxyChangeRequest) Set(val *InternetProxyChangeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInternetProxyChangeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInternetProxyChangeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternetProxyChangeRequest(val *InternetProxyChangeRequest) *NullableInternetProxyChangeRequest {
	return &NullableInternetProxyChangeRequest{value: val, isSet: true}
}

func (v NullableInternetProxyChangeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternetProxyChangeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


