/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ProxyConfigurations Configurations of proxy servers for all existing Data Centers
type ProxyConfigurations struct {
	// Map of (Data Center name, Proxy) pairs
	Configurations *map[string]InternetProxy `json:"configurations,omitempty"`
}

// NewProxyConfigurations instantiates a new ProxyConfigurations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProxyConfigurations() *ProxyConfigurations {
	this := ProxyConfigurations{}
	return &this
}

// NewProxyConfigurationsWithDefaults instantiates a new ProxyConfigurations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProxyConfigurationsWithDefaults() *ProxyConfigurations {
	this := ProxyConfigurations{}
	return &this
}

// GetConfigurations returns the Configurations field value if set, zero value otherwise.
func (o *ProxyConfigurations) GetConfigurations() map[string]InternetProxy {
	if o == nil || o.Configurations == nil {
		var ret map[string]InternetProxy
		return ret
	}
	return *o.Configurations
}

// GetConfigurationsOk returns a tuple with the Configurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProxyConfigurations) GetConfigurationsOk() (*map[string]InternetProxy, bool) {
	if o == nil || o.Configurations == nil {
		return nil, false
	}
	return o.Configurations, true
}

// HasConfigurations returns a boolean if a field has been set.
func (o *ProxyConfigurations) HasConfigurations() bool {
	if o != nil && o.Configurations != nil {
		return true
	}

	return false
}

// SetConfigurations gets a reference to the given map[string]InternetProxy and assigns it to the Configurations field.
func (o *ProxyConfigurations) SetConfigurations(v map[string]InternetProxy) {
	o.Configurations = &v
}

func (o ProxyConfigurations) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Configurations != nil {
		toSerialize["configurations"] = o.Configurations
	}
	return json.Marshal(toSerialize)
}

type NullableProxyConfigurations struct {
	value *ProxyConfigurations
	isSet bool
}

func (v NullableProxyConfigurations) Get() *ProxyConfigurations {
	return v.value
}

func (v *NullableProxyConfigurations) Set(val *ProxyConfigurations) {
	v.value = val
	v.isSet = true
}

func (v NullableProxyConfigurations) IsSet() bool {
	return v.isSet
}

func (v *NullableProxyConfigurations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProxyConfigurations(val *ProxyConfigurations) *NullableProxyConfigurations {
	return &NullableProxyConfigurations{value: val, isSet: true}
}

func (v NullableProxyConfigurations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProxyConfigurations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


