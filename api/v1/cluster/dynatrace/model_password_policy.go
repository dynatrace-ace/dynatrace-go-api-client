/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// PasswordPolicy Password policy configuration.
type PasswordPolicy struct {
	RealmId *string `json:"realmId,omitempty"`
	// Minimum password length
	MinPasswordLength int64 `json:"minPasswordLength"`
	// Minimum number of uppercase characters
	MinNumberOfUppercaseChars int64 `json:"minNumberOfUppercaseChars"`
	// Minimum number of lowercase characters
	MinNumberOfLowercaseChars int64 `json:"minNumberOfLowercaseChars"`
	// Minimum number of digits
	MinNumberOfDigits int64 `json:"minNumberOfDigits"`
	// Minimum number of non-alphanumeric characters
	MinNumberOfNonAlphanumericChars int64 `json:"minNumberOfNonAlphanumericChars"`
}

// NewPasswordPolicy instantiates a new PasswordPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordPolicy(minPasswordLength int64, minNumberOfUppercaseChars int64, minNumberOfLowercaseChars int64, minNumberOfDigits int64, minNumberOfNonAlphanumericChars int64) *PasswordPolicy {
	this := PasswordPolicy{}
	this.MinPasswordLength = minPasswordLength
	this.MinNumberOfUppercaseChars = minNumberOfUppercaseChars
	this.MinNumberOfLowercaseChars = minNumberOfLowercaseChars
	this.MinNumberOfDigits = minNumberOfDigits
	this.MinNumberOfNonAlphanumericChars = minNumberOfNonAlphanumericChars
	return &this
}

// NewPasswordPolicyWithDefaults instantiates a new PasswordPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordPolicyWithDefaults() *PasswordPolicy {
	this := PasswordPolicy{}
	return &this
}

// GetRealmId returns the RealmId field value if set, zero value otherwise.
func (o *PasswordPolicy) GetRealmId() string {
	if o == nil || o.RealmId == nil {
		var ret string
		return ret
	}
	return *o.RealmId
}

// GetRealmIdOk returns a tuple with the RealmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetRealmIdOk() (*string, bool) {
	if o == nil || o.RealmId == nil {
		return nil, false
	}
	return o.RealmId, true
}

// HasRealmId returns a boolean if a field has been set.
func (o *PasswordPolicy) HasRealmId() bool {
	if o != nil && o.RealmId != nil {
		return true
	}

	return false
}

// SetRealmId gets a reference to the given string and assigns it to the RealmId field.
func (o *PasswordPolicy) SetRealmId(v string) {
	o.RealmId = &v
}

// GetMinPasswordLength returns the MinPasswordLength field value
func (o *PasswordPolicy) GetMinPasswordLength() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinPasswordLength
}

// GetMinPasswordLengthOk returns a tuple with the MinPasswordLength field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMinPasswordLengthOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MinPasswordLength, true
}

// SetMinPasswordLength sets field value
func (o *PasswordPolicy) SetMinPasswordLength(v int64) {
	o.MinPasswordLength = v
}

// GetMinNumberOfUppercaseChars returns the MinNumberOfUppercaseChars field value
func (o *PasswordPolicy) GetMinNumberOfUppercaseChars() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinNumberOfUppercaseChars
}

// GetMinNumberOfUppercaseCharsOk returns a tuple with the MinNumberOfUppercaseChars field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMinNumberOfUppercaseCharsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MinNumberOfUppercaseChars, true
}

// SetMinNumberOfUppercaseChars sets field value
func (o *PasswordPolicy) SetMinNumberOfUppercaseChars(v int64) {
	o.MinNumberOfUppercaseChars = v
}

// GetMinNumberOfLowercaseChars returns the MinNumberOfLowercaseChars field value
func (o *PasswordPolicy) GetMinNumberOfLowercaseChars() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinNumberOfLowercaseChars
}

// GetMinNumberOfLowercaseCharsOk returns a tuple with the MinNumberOfLowercaseChars field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMinNumberOfLowercaseCharsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MinNumberOfLowercaseChars, true
}

// SetMinNumberOfLowercaseChars sets field value
func (o *PasswordPolicy) SetMinNumberOfLowercaseChars(v int64) {
	o.MinNumberOfLowercaseChars = v
}

// GetMinNumberOfDigits returns the MinNumberOfDigits field value
func (o *PasswordPolicy) GetMinNumberOfDigits() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinNumberOfDigits
}

// GetMinNumberOfDigitsOk returns a tuple with the MinNumberOfDigits field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMinNumberOfDigitsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MinNumberOfDigits, true
}

// SetMinNumberOfDigits sets field value
func (o *PasswordPolicy) SetMinNumberOfDigits(v int64) {
	o.MinNumberOfDigits = v
}

// GetMinNumberOfNonAlphanumericChars returns the MinNumberOfNonAlphanumericChars field value
func (o *PasswordPolicy) GetMinNumberOfNonAlphanumericChars() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MinNumberOfNonAlphanumericChars
}

// GetMinNumberOfNonAlphanumericCharsOk returns a tuple with the MinNumberOfNonAlphanumericChars field value
// and a boolean to check if the value has been set.
func (o *PasswordPolicy) GetMinNumberOfNonAlphanumericCharsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MinNumberOfNonAlphanumericChars, true
}

// SetMinNumberOfNonAlphanumericChars sets field value
func (o *PasswordPolicy) SetMinNumberOfNonAlphanumericChars(v int64) {
	o.MinNumberOfNonAlphanumericChars = v
}

func (o PasswordPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RealmId != nil {
		toSerialize["realmId"] = o.RealmId
	}
	if true {
		toSerialize["minPasswordLength"] = o.MinPasswordLength
	}
	if true {
		toSerialize["minNumberOfUppercaseChars"] = o.MinNumberOfUppercaseChars
	}
	if true {
		toSerialize["minNumberOfLowercaseChars"] = o.MinNumberOfLowercaseChars
	}
	if true {
		toSerialize["minNumberOfDigits"] = o.MinNumberOfDigits
	}
	if true {
		toSerialize["minNumberOfNonAlphanumericChars"] = o.MinNumberOfNonAlphanumericChars
	}
	return json.Marshal(toSerialize)
}

type NullablePasswordPolicy struct {
	value *PasswordPolicy
	isSet bool
}

func (v NullablePasswordPolicy) Get() *PasswordPolicy {
	return v.value
}

func (v *NullablePasswordPolicy) Set(val *PasswordPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordPolicy(val *PasswordPolicy) *NullablePasswordPolicy {
	return &NullablePasswordPolicy{value: val, isSet: true}
}

func (v NullablePasswordPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


