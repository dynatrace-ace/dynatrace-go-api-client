/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AddressWrapper struct for AddressWrapper
type AddressWrapper struct {
	// Address
	Address string `json:"address"`
	// New address
	NewAddress *string `json:"newAddress,omitempty"`
	// If true, public IP will be used for domain generation.
	UsePublicIpForDomainGeneration *bool `json:"usePublicIpForDomainGeneration,omitempty"`
	// If true, public IP address will be used for OneAgents.
	UsePublicIpForAgents *bool `json:"usePublicIpForAgents,omitempty"`
}

// NewAddressWrapper instantiates a new AddressWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddressWrapper(address string) *AddressWrapper {
	this := AddressWrapper{}
	this.Address = address
	return &this
}

// NewAddressWrapperWithDefaults instantiates a new AddressWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddressWrapperWithDefaults() *AddressWrapper {
	this := AddressWrapper{}
	return &this
}

// GetAddress returns the Address field value
func (o *AddressWrapper) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *AddressWrapper) GetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *AddressWrapper) SetAddress(v string) {
	o.Address = v
}

// GetNewAddress returns the NewAddress field value if set, zero value otherwise.
func (o *AddressWrapper) GetNewAddress() string {
	if o == nil || o.NewAddress == nil {
		var ret string
		return ret
	}
	return *o.NewAddress
}

// GetNewAddressOk returns a tuple with the NewAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressWrapper) GetNewAddressOk() (*string, bool) {
	if o == nil || o.NewAddress == nil {
		return nil, false
	}
	return o.NewAddress, true
}

// HasNewAddress returns a boolean if a field has been set.
func (o *AddressWrapper) HasNewAddress() bool {
	if o != nil && o.NewAddress != nil {
		return true
	}

	return false
}

// SetNewAddress gets a reference to the given string and assigns it to the NewAddress field.
func (o *AddressWrapper) SetNewAddress(v string) {
	o.NewAddress = &v
}

// GetUsePublicIpForDomainGeneration returns the UsePublicIpForDomainGeneration field value if set, zero value otherwise.
func (o *AddressWrapper) GetUsePublicIpForDomainGeneration() bool {
	if o == nil || o.UsePublicIpForDomainGeneration == nil {
		var ret bool
		return ret
	}
	return *o.UsePublicIpForDomainGeneration
}

// GetUsePublicIpForDomainGenerationOk returns a tuple with the UsePublicIpForDomainGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressWrapper) GetUsePublicIpForDomainGenerationOk() (*bool, bool) {
	if o == nil || o.UsePublicIpForDomainGeneration == nil {
		return nil, false
	}
	return o.UsePublicIpForDomainGeneration, true
}

// HasUsePublicIpForDomainGeneration returns a boolean if a field has been set.
func (o *AddressWrapper) HasUsePublicIpForDomainGeneration() bool {
	if o != nil && o.UsePublicIpForDomainGeneration != nil {
		return true
	}

	return false
}

// SetUsePublicIpForDomainGeneration gets a reference to the given bool and assigns it to the UsePublicIpForDomainGeneration field.
func (o *AddressWrapper) SetUsePublicIpForDomainGeneration(v bool) {
	o.UsePublicIpForDomainGeneration = &v
}

// GetUsePublicIpForAgents returns the UsePublicIpForAgents field value if set, zero value otherwise.
func (o *AddressWrapper) GetUsePublicIpForAgents() bool {
	if o == nil || o.UsePublicIpForAgents == nil {
		var ret bool
		return ret
	}
	return *o.UsePublicIpForAgents
}

// GetUsePublicIpForAgentsOk returns a tuple with the UsePublicIpForAgents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddressWrapper) GetUsePublicIpForAgentsOk() (*bool, bool) {
	if o == nil || o.UsePublicIpForAgents == nil {
		return nil, false
	}
	return o.UsePublicIpForAgents, true
}

// HasUsePublicIpForAgents returns a boolean if a field has been set.
func (o *AddressWrapper) HasUsePublicIpForAgents() bool {
	if o != nil && o.UsePublicIpForAgents != nil {
		return true
	}

	return false
}

// SetUsePublicIpForAgents gets a reference to the given bool and assigns it to the UsePublicIpForAgents field.
func (o *AddressWrapper) SetUsePublicIpForAgents(v bool) {
	o.UsePublicIpForAgents = &v
}

func (o AddressWrapper) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["address"] = o.Address
	}
	if o.NewAddress != nil {
		toSerialize["newAddress"] = o.NewAddress
	}
	if o.UsePublicIpForDomainGeneration != nil {
		toSerialize["usePublicIpForDomainGeneration"] = o.UsePublicIpForDomainGeneration
	}
	if o.UsePublicIpForAgents != nil {
		toSerialize["usePublicIpForAgents"] = o.UsePublicIpForAgents
	}
	return json.Marshal(toSerialize)
}

type NullableAddressWrapper struct {
	value *AddressWrapper
	isSet bool
}

func (v NullableAddressWrapper) Get() *AddressWrapper {
	return v.value
}

func (v *NullableAddressWrapper) Set(val *AddressWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableAddressWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableAddressWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddressWrapper(val *AddressWrapper) *NullableAddressWrapper {
	return &NullableAddressWrapper{value: val, isSet: true}
}

func (v NullableAddressWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddressWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


