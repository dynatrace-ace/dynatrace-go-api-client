/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
	"time"
)

// SSLDetails struct for SSLDetails
type SSLDetails struct {
	InProgress *bool `json:"inProgress,omitempty"`
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	RestartRequired *bool `json:"restartRequired,omitempty"`
	CustomKeyStore *bool `json:"customKeyStore,omitempty"`
	CustomKeyStoreWritable *bool `json:"customKeyStoreWritable,omitempty"`
	Issuer *string `json:"issuer,omitempty"`
	Subject *string `json:"subject,omitempty"`
	Default *bool `json:"default,omitempty"`
}

// NewSSLDetails instantiates a new SSLDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSSLDetails() *SSLDetails {
	this := SSLDetails{}
	return &this
}

// NewSSLDetailsWithDefaults instantiates a new SSLDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSSLDetailsWithDefaults() *SSLDetails {
	this := SSLDetails{}
	return &this
}

// GetInProgress returns the InProgress field value if set, zero value otherwise.
func (o *SSLDetails) GetInProgress() bool {
	if o == nil || o.InProgress == nil {
		var ret bool
		return ret
	}
	return *o.InProgress
}

// GetInProgressOk returns a tuple with the InProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLDetails) GetInProgressOk() (*bool, bool) {
	if o == nil || o.InProgress == nil {
		return nil, false
	}
	return o.InProgress, true
}

// HasInProgress returns a boolean if a field has been set.
func (o *SSLDetails) HasInProgress() bool {
	if o != nil && o.InProgress != nil {
		return true
	}

	return false
}

// SetInProgress gets a reference to the given bool and assigns it to the InProgress field.
func (o *SSLDetails) SetInProgress(v bool) {
	o.InProgress = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *SSLDetails) GetExpirationDate() time.Time {
	if o == nil || o.ExpirationDate == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLDetails) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || o.ExpirationDate == nil {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *SSLDetails) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate != nil {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *SSLDetails) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetRestartRequired returns the RestartRequired field value if set, zero value otherwise.
func (o *SSLDetails) GetRestartRequired() bool {
	if o == nil || o.RestartRequired == nil {
		var ret bool
		return ret
	}
	return *o.RestartRequired
}

// GetRestartRequiredOk returns a tuple with the RestartRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLDetails) GetRestartRequiredOk() (*bool, bool) {
	if o == nil || o.RestartRequired == nil {
		return nil, false
	}
	return o.RestartRequired, true
}

// HasRestartRequired returns a boolean if a field has been set.
func (o *SSLDetails) HasRestartRequired() bool {
	if o != nil && o.RestartRequired != nil {
		return true
	}

	return false
}

// SetRestartRequired gets a reference to the given bool and assigns it to the RestartRequired field.
func (o *SSLDetails) SetRestartRequired(v bool) {
	o.RestartRequired = &v
}

// GetCustomKeyStore returns the CustomKeyStore field value if set, zero value otherwise.
func (o *SSLDetails) GetCustomKeyStore() bool {
	if o == nil || o.CustomKeyStore == nil {
		var ret bool
		return ret
	}
	return *o.CustomKeyStore
}

// GetCustomKeyStoreOk returns a tuple with the CustomKeyStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLDetails) GetCustomKeyStoreOk() (*bool, bool) {
	if o == nil || o.CustomKeyStore == nil {
		return nil, false
	}
	return o.CustomKeyStore, true
}

// HasCustomKeyStore returns a boolean if a field has been set.
func (o *SSLDetails) HasCustomKeyStore() bool {
	if o != nil && o.CustomKeyStore != nil {
		return true
	}

	return false
}

// SetCustomKeyStore gets a reference to the given bool and assigns it to the CustomKeyStore field.
func (o *SSLDetails) SetCustomKeyStore(v bool) {
	o.CustomKeyStore = &v
}

// GetCustomKeyStoreWritable returns the CustomKeyStoreWritable field value if set, zero value otherwise.
func (o *SSLDetails) GetCustomKeyStoreWritable() bool {
	if o == nil || o.CustomKeyStoreWritable == nil {
		var ret bool
		return ret
	}
	return *o.CustomKeyStoreWritable
}

// GetCustomKeyStoreWritableOk returns a tuple with the CustomKeyStoreWritable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLDetails) GetCustomKeyStoreWritableOk() (*bool, bool) {
	if o == nil || o.CustomKeyStoreWritable == nil {
		return nil, false
	}
	return o.CustomKeyStoreWritable, true
}

// HasCustomKeyStoreWritable returns a boolean if a field has been set.
func (o *SSLDetails) HasCustomKeyStoreWritable() bool {
	if o != nil && o.CustomKeyStoreWritable != nil {
		return true
	}

	return false
}

// SetCustomKeyStoreWritable gets a reference to the given bool and assigns it to the CustomKeyStoreWritable field.
func (o *SSLDetails) SetCustomKeyStoreWritable(v bool) {
	o.CustomKeyStoreWritable = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *SSLDetails) GetIssuer() string {
	if o == nil || o.Issuer == nil {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLDetails) GetIssuerOk() (*string, bool) {
	if o == nil || o.Issuer == nil {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *SSLDetails) HasIssuer() bool {
	if o != nil && o.Issuer != nil {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *SSLDetails) SetIssuer(v string) {
	o.Issuer = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *SSLDetails) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLDetails) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *SSLDetails) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *SSLDetails) SetSubject(v string) {
	o.Subject = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *SSLDetails) GetDefault() bool {
	if o == nil || o.Default == nil {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SSLDetails) GetDefaultOk() (*bool, bool) {
	if o == nil || o.Default == nil {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *SSLDetails) HasDefault() bool {
	if o != nil && o.Default != nil {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *SSLDetails) SetDefault(v bool) {
	o.Default = &v
}

func (o SSLDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InProgress != nil {
		toSerialize["inProgress"] = o.InProgress
	}
	if o.ExpirationDate != nil {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if o.RestartRequired != nil {
		toSerialize["restartRequired"] = o.RestartRequired
	}
	if o.CustomKeyStore != nil {
		toSerialize["customKeyStore"] = o.CustomKeyStore
	}
	if o.CustomKeyStoreWritable != nil {
		toSerialize["customKeyStoreWritable"] = o.CustomKeyStoreWritable
	}
	if o.Issuer != nil {
		toSerialize["issuer"] = o.Issuer
	}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.Default != nil {
		toSerialize["default"] = o.Default
	}
	return json.Marshal(toSerialize)
}

type NullableSSLDetails struct {
	value *SSLDetails
	isSet bool
}

func (v NullableSSLDetails) Get() *SSLDetails {
	return v.value
}

func (v *NullableSSLDetails) Set(val *SSLDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSSLDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSSLDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSLDetails(val *SSLDetails) *NullableSSLDetails {
	return &NullableSSLDetails{value: val, isSet: true}
}

func (v NullableSSLDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSLDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


