/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CertDto Certificate configuration.
type CertDto struct {
	// Private key PKCS #8 standard, PEM base64-encoded format
	PrivateKeyEncoded string `json:"privateKeyEncoded"`
	// Certificate X.509 standard, PEM base64-encoded format
	PublicKeyCertificateEncoded string `json:"publicKeyCertificateEncoded"`
}

// NewCertDto instantiates a new CertDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertDto(privateKeyEncoded string, publicKeyCertificateEncoded string) *CertDto {
	this := CertDto{}
	this.PrivateKeyEncoded = privateKeyEncoded
	this.PublicKeyCertificateEncoded = publicKeyCertificateEncoded
	return &this
}

// NewCertDtoWithDefaults instantiates a new CertDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertDtoWithDefaults() *CertDto {
	this := CertDto{}
	return &this
}

// GetPrivateKeyEncoded returns the PrivateKeyEncoded field value
func (o *CertDto) GetPrivateKeyEncoded() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKeyEncoded
}

// GetPrivateKeyEncodedOk returns a tuple with the PrivateKeyEncoded field value
// and a boolean to check if the value has been set.
func (o *CertDto) GetPrivateKeyEncodedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PrivateKeyEncoded, true
}

// SetPrivateKeyEncoded sets field value
func (o *CertDto) SetPrivateKeyEncoded(v string) {
	o.PrivateKeyEncoded = v
}

// GetPublicKeyCertificateEncoded returns the PublicKeyCertificateEncoded field value
func (o *CertDto) GetPublicKeyCertificateEncoded() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicKeyCertificateEncoded
}

// GetPublicKeyCertificateEncodedOk returns a tuple with the PublicKeyCertificateEncoded field value
// and a boolean to check if the value has been set.
func (o *CertDto) GetPublicKeyCertificateEncodedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PublicKeyCertificateEncoded, true
}

// SetPublicKeyCertificateEncoded sets field value
func (o *CertDto) SetPublicKeyCertificateEncoded(v string) {
	o.PublicKeyCertificateEncoded = v
}

func (o CertDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["privateKeyEncoded"] = o.PrivateKeyEncoded
	}
	if true {
		toSerialize["publicKeyCertificateEncoded"] = o.PublicKeyCertificateEncoded
	}
	return json.Marshal(toSerialize)
}

type NullableCertDto struct {
	value *CertDto
	isSet bool
}

func (v NullableCertDto) Get() *CertDto {
	return v.value
}

func (v *NullableCertDto) Set(val *CertDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCertDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCertDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertDto(val *CertDto) *NullableCertDto {
	return &NullableCertDto{value: val, isSet: true}
}

func (v NullableCertDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


