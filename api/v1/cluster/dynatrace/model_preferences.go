/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Preferences struct for Preferences
type Preferences struct {
	CertificateManagementEnabled *bool `json:"certificateManagementEnabled,omitempty"`
	CertificateManagementPossible *bool `json:"certificateManagementPossible,omitempty"`
	// If true, usage and billing information will be reported.
	SupportSendBilling bool `json:"supportSendBilling"`
	// If true, usage and billing information will NOT be reported.
	SuppressNonBillingRelevantData bool `json:"suppressNonBillingRelevantData"`
	// If true, Dynatrace cluster health will be reported.
	SupportSendClusterHealth bool `json:"supportSendClusterHealth"`
	// If true, Dynatrace cluster health and OneAgent events will be reported.
	SupportSendEvents *bool `json:"supportSendEvents,omitempty"`
	// If true, audited remote-access to your Dynatrace configuration is allowed settings.
	SupportAllowRemoteAccess *bool `json:"supportAllowRemoteAccess,omitempty"`
	// If true, audited access to your Dynatrace cluster is allowed by approved Dynatrace employees otherwise by privileged Dynatrace employees.
	RemoteAccessOnDemandOnly *bool `json:"remoteAccessOnDemandOnly,omitempty"`
	// If true, each new user will be set up as a Dynatrace Community user upon first login.
	CommunityCreateUser *bool `json:"communityCreateUser,omitempty"`
	// If true, you can search Dynatrace Community and Dynatrace Help when using the product search.
	CommunityExternalSearch *bool `json:"communityExternalSearch,omitempty"`
	// Deprecated. Use the backup configuration endpoint. If true, backups are enabled.
	BackupEnabled *bool `json:"backupEnabled,omitempty"`
	// If true, Dynatrace OneAgent monitors Dynatrace.
	RuxitMonitorsRuxit *bool `json:"ruxitMonitorsRuxit,omitempty"`
	TelemetrySharing *bool `json:"telemetrySharing,omitempty"`
	// If true, Dynatrace ONE live chat is enabled.
	HelpChatEnabled *bool `json:"helpChatEnabled,omitempty"`
	// If true, audited, read-only remote access to your Dynatrace configuration settings is allowed.
	ReadOnlyRemoteAccessAllowed *bool `json:"readOnlyRemoteAccessAllowed,omitempty"`
}

// NewPreferences instantiates a new Preferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreferences(supportSendBilling bool, suppressNonBillingRelevantData bool, supportSendClusterHealth bool) *Preferences {
	this := Preferences{}
	this.SupportSendBilling = supportSendBilling
	this.SuppressNonBillingRelevantData = suppressNonBillingRelevantData
	this.SupportSendClusterHealth = supportSendClusterHealth
	return &this
}

// NewPreferencesWithDefaults instantiates a new Preferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreferencesWithDefaults() *Preferences {
	this := Preferences{}
	return &this
}

// GetCertificateManagementEnabled returns the CertificateManagementEnabled field value if set, zero value otherwise.
func (o *Preferences) GetCertificateManagementEnabled() bool {
	if o == nil || o.CertificateManagementEnabled == nil {
		var ret bool
		return ret
	}
	return *o.CertificateManagementEnabled
}

// GetCertificateManagementEnabledOk returns a tuple with the CertificateManagementEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetCertificateManagementEnabledOk() (*bool, bool) {
	if o == nil || o.CertificateManagementEnabled == nil {
		return nil, false
	}
	return o.CertificateManagementEnabled, true
}

// HasCertificateManagementEnabled returns a boolean if a field has been set.
func (o *Preferences) HasCertificateManagementEnabled() bool {
	if o != nil && o.CertificateManagementEnabled != nil {
		return true
	}

	return false
}

// SetCertificateManagementEnabled gets a reference to the given bool and assigns it to the CertificateManagementEnabled field.
func (o *Preferences) SetCertificateManagementEnabled(v bool) {
	o.CertificateManagementEnabled = &v
}

// GetCertificateManagementPossible returns the CertificateManagementPossible field value if set, zero value otherwise.
func (o *Preferences) GetCertificateManagementPossible() bool {
	if o == nil || o.CertificateManagementPossible == nil {
		var ret bool
		return ret
	}
	return *o.CertificateManagementPossible
}

// GetCertificateManagementPossibleOk returns a tuple with the CertificateManagementPossible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetCertificateManagementPossibleOk() (*bool, bool) {
	if o == nil || o.CertificateManagementPossible == nil {
		return nil, false
	}
	return o.CertificateManagementPossible, true
}

// HasCertificateManagementPossible returns a boolean if a field has been set.
func (o *Preferences) HasCertificateManagementPossible() bool {
	if o != nil && o.CertificateManagementPossible != nil {
		return true
	}

	return false
}

// SetCertificateManagementPossible gets a reference to the given bool and assigns it to the CertificateManagementPossible field.
func (o *Preferences) SetCertificateManagementPossible(v bool) {
	o.CertificateManagementPossible = &v
}

// GetSupportSendBilling returns the SupportSendBilling field value
func (o *Preferences) GetSupportSendBilling() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportSendBilling
}

// GetSupportSendBillingOk returns a tuple with the SupportSendBilling field value
// and a boolean to check if the value has been set.
func (o *Preferences) GetSupportSendBillingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SupportSendBilling, true
}

// SetSupportSendBilling sets field value
func (o *Preferences) SetSupportSendBilling(v bool) {
	o.SupportSendBilling = v
}

// GetSuppressNonBillingRelevantData returns the SuppressNonBillingRelevantData field value
func (o *Preferences) GetSuppressNonBillingRelevantData() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SuppressNonBillingRelevantData
}

// GetSuppressNonBillingRelevantDataOk returns a tuple with the SuppressNonBillingRelevantData field value
// and a boolean to check if the value has been set.
func (o *Preferences) GetSuppressNonBillingRelevantDataOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SuppressNonBillingRelevantData, true
}

// SetSuppressNonBillingRelevantData sets field value
func (o *Preferences) SetSuppressNonBillingRelevantData(v bool) {
	o.SuppressNonBillingRelevantData = v
}

// GetSupportSendClusterHealth returns the SupportSendClusterHealth field value
func (o *Preferences) GetSupportSendClusterHealth() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SupportSendClusterHealth
}

// GetSupportSendClusterHealthOk returns a tuple with the SupportSendClusterHealth field value
// and a boolean to check if the value has been set.
func (o *Preferences) GetSupportSendClusterHealthOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SupportSendClusterHealth, true
}

// SetSupportSendClusterHealth sets field value
func (o *Preferences) SetSupportSendClusterHealth(v bool) {
	o.SupportSendClusterHealth = v
}

// GetSupportSendEvents returns the SupportSendEvents field value if set, zero value otherwise.
func (o *Preferences) GetSupportSendEvents() bool {
	if o == nil || o.SupportSendEvents == nil {
		var ret bool
		return ret
	}
	return *o.SupportSendEvents
}

// GetSupportSendEventsOk returns a tuple with the SupportSendEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetSupportSendEventsOk() (*bool, bool) {
	if o == nil || o.SupportSendEvents == nil {
		return nil, false
	}
	return o.SupportSendEvents, true
}

// HasSupportSendEvents returns a boolean if a field has been set.
func (o *Preferences) HasSupportSendEvents() bool {
	if o != nil && o.SupportSendEvents != nil {
		return true
	}

	return false
}

// SetSupportSendEvents gets a reference to the given bool and assigns it to the SupportSendEvents field.
func (o *Preferences) SetSupportSendEvents(v bool) {
	o.SupportSendEvents = &v
}

// GetSupportAllowRemoteAccess returns the SupportAllowRemoteAccess field value if set, zero value otherwise.
func (o *Preferences) GetSupportAllowRemoteAccess() bool {
	if o == nil || o.SupportAllowRemoteAccess == nil {
		var ret bool
		return ret
	}
	return *o.SupportAllowRemoteAccess
}

// GetSupportAllowRemoteAccessOk returns a tuple with the SupportAllowRemoteAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetSupportAllowRemoteAccessOk() (*bool, bool) {
	if o == nil || o.SupportAllowRemoteAccess == nil {
		return nil, false
	}
	return o.SupportAllowRemoteAccess, true
}

// HasSupportAllowRemoteAccess returns a boolean if a field has been set.
func (o *Preferences) HasSupportAllowRemoteAccess() bool {
	if o != nil && o.SupportAllowRemoteAccess != nil {
		return true
	}

	return false
}

// SetSupportAllowRemoteAccess gets a reference to the given bool and assigns it to the SupportAllowRemoteAccess field.
func (o *Preferences) SetSupportAllowRemoteAccess(v bool) {
	o.SupportAllowRemoteAccess = &v
}

// GetRemoteAccessOnDemandOnly returns the RemoteAccessOnDemandOnly field value if set, zero value otherwise.
func (o *Preferences) GetRemoteAccessOnDemandOnly() bool {
	if o == nil || o.RemoteAccessOnDemandOnly == nil {
		var ret bool
		return ret
	}
	return *o.RemoteAccessOnDemandOnly
}

// GetRemoteAccessOnDemandOnlyOk returns a tuple with the RemoteAccessOnDemandOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetRemoteAccessOnDemandOnlyOk() (*bool, bool) {
	if o == nil || o.RemoteAccessOnDemandOnly == nil {
		return nil, false
	}
	return o.RemoteAccessOnDemandOnly, true
}

// HasRemoteAccessOnDemandOnly returns a boolean if a field has been set.
func (o *Preferences) HasRemoteAccessOnDemandOnly() bool {
	if o != nil && o.RemoteAccessOnDemandOnly != nil {
		return true
	}

	return false
}

// SetRemoteAccessOnDemandOnly gets a reference to the given bool and assigns it to the RemoteAccessOnDemandOnly field.
func (o *Preferences) SetRemoteAccessOnDemandOnly(v bool) {
	o.RemoteAccessOnDemandOnly = &v
}

// GetCommunityCreateUser returns the CommunityCreateUser field value if set, zero value otherwise.
func (o *Preferences) GetCommunityCreateUser() bool {
	if o == nil || o.CommunityCreateUser == nil {
		var ret bool
		return ret
	}
	return *o.CommunityCreateUser
}

// GetCommunityCreateUserOk returns a tuple with the CommunityCreateUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetCommunityCreateUserOk() (*bool, bool) {
	if o == nil || o.CommunityCreateUser == nil {
		return nil, false
	}
	return o.CommunityCreateUser, true
}

// HasCommunityCreateUser returns a boolean if a field has been set.
func (o *Preferences) HasCommunityCreateUser() bool {
	if o != nil && o.CommunityCreateUser != nil {
		return true
	}

	return false
}

// SetCommunityCreateUser gets a reference to the given bool and assigns it to the CommunityCreateUser field.
func (o *Preferences) SetCommunityCreateUser(v bool) {
	o.CommunityCreateUser = &v
}

// GetCommunityExternalSearch returns the CommunityExternalSearch field value if set, zero value otherwise.
func (o *Preferences) GetCommunityExternalSearch() bool {
	if o == nil || o.CommunityExternalSearch == nil {
		var ret bool
		return ret
	}
	return *o.CommunityExternalSearch
}

// GetCommunityExternalSearchOk returns a tuple with the CommunityExternalSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetCommunityExternalSearchOk() (*bool, bool) {
	if o == nil || o.CommunityExternalSearch == nil {
		return nil, false
	}
	return o.CommunityExternalSearch, true
}

// HasCommunityExternalSearch returns a boolean if a field has been set.
func (o *Preferences) HasCommunityExternalSearch() bool {
	if o != nil && o.CommunityExternalSearch != nil {
		return true
	}

	return false
}

// SetCommunityExternalSearch gets a reference to the given bool and assigns it to the CommunityExternalSearch field.
func (o *Preferences) SetCommunityExternalSearch(v bool) {
	o.CommunityExternalSearch = &v
}

// GetBackupEnabled returns the BackupEnabled field value if set, zero value otherwise.
func (o *Preferences) GetBackupEnabled() bool {
	if o == nil || o.BackupEnabled == nil {
		var ret bool
		return ret
	}
	return *o.BackupEnabled
}

// GetBackupEnabledOk returns a tuple with the BackupEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetBackupEnabledOk() (*bool, bool) {
	if o == nil || o.BackupEnabled == nil {
		return nil, false
	}
	return o.BackupEnabled, true
}

// HasBackupEnabled returns a boolean if a field has been set.
func (o *Preferences) HasBackupEnabled() bool {
	if o != nil && o.BackupEnabled != nil {
		return true
	}

	return false
}

// SetBackupEnabled gets a reference to the given bool and assigns it to the BackupEnabled field.
func (o *Preferences) SetBackupEnabled(v bool) {
	o.BackupEnabled = &v
}

// GetRuxitMonitorsRuxit returns the RuxitMonitorsRuxit field value if set, zero value otherwise.
func (o *Preferences) GetRuxitMonitorsRuxit() bool {
	if o == nil || o.RuxitMonitorsRuxit == nil {
		var ret bool
		return ret
	}
	return *o.RuxitMonitorsRuxit
}

// GetRuxitMonitorsRuxitOk returns a tuple with the RuxitMonitorsRuxit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetRuxitMonitorsRuxitOk() (*bool, bool) {
	if o == nil || o.RuxitMonitorsRuxit == nil {
		return nil, false
	}
	return o.RuxitMonitorsRuxit, true
}

// HasRuxitMonitorsRuxit returns a boolean if a field has been set.
func (o *Preferences) HasRuxitMonitorsRuxit() bool {
	if o != nil && o.RuxitMonitorsRuxit != nil {
		return true
	}

	return false
}

// SetRuxitMonitorsRuxit gets a reference to the given bool and assigns it to the RuxitMonitorsRuxit field.
func (o *Preferences) SetRuxitMonitorsRuxit(v bool) {
	o.RuxitMonitorsRuxit = &v
}

// GetTelemetrySharing returns the TelemetrySharing field value if set, zero value otherwise.
func (o *Preferences) GetTelemetrySharing() bool {
	if o == nil || o.TelemetrySharing == nil {
		var ret bool
		return ret
	}
	return *o.TelemetrySharing
}

// GetTelemetrySharingOk returns a tuple with the TelemetrySharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetTelemetrySharingOk() (*bool, bool) {
	if o == nil || o.TelemetrySharing == nil {
		return nil, false
	}
	return o.TelemetrySharing, true
}

// HasTelemetrySharing returns a boolean if a field has been set.
func (o *Preferences) HasTelemetrySharing() bool {
	if o != nil && o.TelemetrySharing != nil {
		return true
	}

	return false
}

// SetTelemetrySharing gets a reference to the given bool and assigns it to the TelemetrySharing field.
func (o *Preferences) SetTelemetrySharing(v bool) {
	o.TelemetrySharing = &v
}

// GetHelpChatEnabled returns the HelpChatEnabled field value if set, zero value otherwise.
func (o *Preferences) GetHelpChatEnabled() bool {
	if o == nil || o.HelpChatEnabled == nil {
		var ret bool
		return ret
	}
	return *o.HelpChatEnabled
}

// GetHelpChatEnabledOk returns a tuple with the HelpChatEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetHelpChatEnabledOk() (*bool, bool) {
	if o == nil || o.HelpChatEnabled == nil {
		return nil, false
	}
	return o.HelpChatEnabled, true
}

// HasHelpChatEnabled returns a boolean if a field has been set.
func (o *Preferences) HasHelpChatEnabled() bool {
	if o != nil && o.HelpChatEnabled != nil {
		return true
	}

	return false
}

// SetHelpChatEnabled gets a reference to the given bool and assigns it to the HelpChatEnabled field.
func (o *Preferences) SetHelpChatEnabled(v bool) {
	o.HelpChatEnabled = &v
}

// GetReadOnlyRemoteAccessAllowed returns the ReadOnlyRemoteAccessAllowed field value if set, zero value otherwise.
func (o *Preferences) GetReadOnlyRemoteAccessAllowed() bool {
	if o == nil || o.ReadOnlyRemoteAccessAllowed == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnlyRemoteAccessAllowed
}

// GetReadOnlyRemoteAccessAllowedOk returns a tuple with the ReadOnlyRemoteAccessAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Preferences) GetReadOnlyRemoteAccessAllowedOk() (*bool, bool) {
	if o == nil || o.ReadOnlyRemoteAccessAllowed == nil {
		return nil, false
	}
	return o.ReadOnlyRemoteAccessAllowed, true
}

// HasReadOnlyRemoteAccessAllowed returns a boolean if a field has been set.
func (o *Preferences) HasReadOnlyRemoteAccessAllowed() bool {
	if o != nil && o.ReadOnlyRemoteAccessAllowed != nil {
		return true
	}

	return false
}

// SetReadOnlyRemoteAccessAllowed gets a reference to the given bool and assigns it to the ReadOnlyRemoteAccessAllowed field.
func (o *Preferences) SetReadOnlyRemoteAccessAllowed(v bool) {
	o.ReadOnlyRemoteAccessAllowed = &v
}

func (o Preferences) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CertificateManagementEnabled != nil {
		toSerialize["certificateManagementEnabled"] = o.CertificateManagementEnabled
	}
	if o.CertificateManagementPossible != nil {
		toSerialize["certificateManagementPossible"] = o.CertificateManagementPossible
	}
	if true {
		toSerialize["supportSendBilling"] = o.SupportSendBilling
	}
	if true {
		toSerialize["suppressNonBillingRelevantData"] = o.SuppressNonBillingRelevantData
	}
	if true {
		toSerialize["supportSendClusterHealth"] = o.SupportSendClusterHealth
	}
	if o.SupportSendEvents != nil {
		toSerialize["supportSendEvents"] = o.SupportSendEvents
	}
	if o.SupportAllowRemoteAccess != nil {
		toSerialize["supportAllowRemoteAccess"] = o.SupportAllowRemoteAccess
	}
	if o.RemoteAccessOnDemandOnly != nil {
		toSerialize["remoteAccessOnDemandOnly"] = o.RemoteAccessOnDemandOnly
	}
	if o.CommunityCreateUser != nil {
		toSerialize["communityCreateUser"] = o.CommunityCreateUser
	}
	if o.CommunityExternalSearch != nil {
		toSerialize["communityExternalSearch"] = o.CommunityExternalSearch
	}
	if o.BackupEnabled != nil {
		toSerialize["backupEnabled"] = o.BackupEnabled
	}
	if o.RuxitMonitorsRuxit != nil {
		toSerialize["ruxitMonitorsRuxit"] = o.RuxitMonitorsRuxit
	}
	if o.TelemetrySharing != nil {
		toSerialize["telemetrySharing"] = o.TelemetrySharing
	}
	if o.HelpChatEnabled != nil {
		toSerialize["helpChatEnabled"] = o.HelpChatEnabled
	}
	if o.ReadOnlyRemoteAccessAllowed != nil {
		toSerialize["readOnlyRemoteAccessAllowed"] = o.ReadOnlyRemoteAccessAllowed
	}
	return json.Marshal(toSerialize)
}

type NullablePreferences struct {
	value *Preferences
	isSet bool
}

func (v NullablePreferences) Get() *Preferences {
	return v.value
}

func (v *NullablePreferences) Set(val *Preferences) {
	v.value = val
	v.isSet = true
}

func (v NullablePreferences) IsSet() bool {
	return v.isSet
}

func (v *NullablePreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreferences(val *Preferences) *NullablePreferences {
	return &NullablePreferences{value: val, isSet: true}
}

func (v NullablePreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


