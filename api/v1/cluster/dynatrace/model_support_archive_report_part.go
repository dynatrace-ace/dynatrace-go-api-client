/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SupportArchiveReportPart struct for SupportArchiveReportPart
type SupportArchiveReportPart struct {
	NumberOfFiles *int32 `json:"numberOfFiles,omitempty"`
	UncompressedTotalBytes *int64 `json:"uncompressedTotalBytes,omitempty"`
	CompressedTotalBytes *int64 `json:"compressedTotalBytes,omitempty"`
	Source *string `json:"source,omitempty"`
	Errors *[]string `json:"errors,omitempty"`
}

// NewSupportArchiveReportPart instantiates a new SupportArchiveReportPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportArchiveReportPart() *SupportArchiveReportPart {
	this := SupportArchiveReportPart{}
	return &this
}

// NewSupportArchiveReportPartWithDefaults instantiates a new SupportArchiveReportPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportArchiveReportPartWithDefaults() *SupportArchiveReportPart {
	this := SupportArchiveReportPart{}
	return &this
}

// GetNumberOfFiles returns the NumberOfFiles field value if set, zero value otherwise.
func (o *SupportArchiveReportPart) GetNumberOfFiles() int32 {
	if o == nil || o.NumberOfFiles == nil {
		var ret int32
		return ret
	}
	return *o.NumberOfFiles
}

// GetNumberOfFilesOk returns a tuple with the NumberOfFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportArchiveReportPart) GetNumberOfFilesOk() (*int32, bool) {
	if o == nil || o.NumberOfFiles == nil {
		return nil, false
	}
	return o.NumberOfFiles, true
}

// HasNumberOfFiles returns a boolean if a field has been set.
func (o *SupportArchiveReportPart) HasNumberOfFiles() bool {
	if o != nil && o.NumberOfFiles != nil {
		return true
	}

	return false
}

// SetNumberOfFiles gets a reference to the given int32 and assigns it to the NumberOfFiles field.
func (o *SupportArchiveReportPart) SetNumberOfFiles(v int32) {
	o.NumberOfFiles = &v
}

// GetUncompressedTotalBytes returns the UncompressedTotalBytes field value if set, zero value otherwise.
func (o *SupportArchiveReportPart) GetUncompressedTotalBytes() int64 {
	if o == nil || o.UncompressedTotalBytes == nil {
		var ret int64
		return ret
	}
	return *o.UncompressedTotalBytes
}

// GetUncompressedTotalBytesOk returns a tuple with the UncompressedTotalBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportArchiveReportPart) GetUncompressedTotalBytesOk() (*int64, bool) {
	if o == nil || o.UncompressedTotalBytes == nil {
		return nil, false
	}
	return o.UncompressedTotalBytes, true
}

// HasUncompressedTotalBytes returns a boolean if a field has been set.
func (o *SupportArchiveReportPart) HasUncompressedTotalBytes() bool {
	if o != nil && o.UncompressedTotalBytes != nil {
		return true
	}

	return false
}

// SetUncompressedTotalBytes gets a reference to the given int64 and assigns it to the UncompressedTotalBytes field.
func (o *SupportArchiveReportPart) SetUncompressedTotalBytes(v int64) {
	o.UncompressedTotalBytes = &v
}

// GetCompressedTotalBytes returns the CompressedTotalBytes field value if set, zero value otherwise.
func (o *SupportArchiveReportPart) GetCompressedTotalBytes() int64 {
	if o == nil || o.CompressedTotalBytes == nil {
		var ret int64
		return ret
	}
	return *o.CompressedTotalBytes
}

// GetCompressedTotalBytesOk returns a tuple with the CompressedTotalBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportArchiveReportPart) GetCompressedTotalBytesOk() (*int64, bool) {
	if o == nil || o.CompressedTotalBytes == nil {
		return nil, false
	}
	return o.CompressedTotalBytes, true
}

// HasCompressedTotalBytes returns a boolean if a field has been set.
func (o *SupportArchiveReportPart) HasCompressedTotalBytes() bool {
	if o != nil && o.CompressedTotalBytes != nil {
		return true
	}

	return false
}

// SetCompressedTotalBytes gets a reference to the given int64 and assigns it to the CompressedTotalBytes field.
func (o *SupportArchiveReportPart) SetCompressedTotalBytes(v int64) {
	o.CompressedTotalBytes = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SupportArchiveReportPart) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportArchiveReportPart) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SupportArchiveReportPart) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *SupportArchiveReportPart) SetSource(v string) {
	o.Source = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *SupportArchiveReportPart) GetErrors() []string {
	if o == nil || o.Errors == nil {
		var ret []string
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportArchiveReportPart) GetErrorsOk() (*[]string, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *SupportArchiveReportPart) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *SupportArchiveReportPart) SetErrors(v []string) {
	o.Errors = &v
}

func (o SupportArchiveReportPart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumberOfFiles != nil {
		toSerialize["numberOfFiles"] = o.NumberOfFiles
	}
	if o.UncompressedTotalBytes != nil {
		toSerialize["uncompressedTotalBytes"] = o.UncompressedTotalBytes
	}
	if o.CompressedTotalBytes != nil {
		toSerialize["compressedTotalBytes"] = o.CompressedTotalBytes
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableSupportArchiveReportPart struct {
	value *SupportArchiveReportPart
	isSet bool
}

func (v NullableSupportArchiveReportPart) Get() *SupportArchiveReportPart {
	return v.value
}

func (v *NullableSupportArchiveReportPart) Set(val *SupportArchiveReportPart) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportArchiveReportPart) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportArchiveReportPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportArchiveReportPart(val *SupportArchiveReportPart) *NullableSupportArchiveReportPart {
	return &NullableSupportArchiveReportPart{value: val, isSet: true}
}

func (v NullableSupportArchiveReportPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportArchiveReportPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


