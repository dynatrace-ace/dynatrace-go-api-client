/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster management functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found, e.g. User account. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade. 
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// LdapConnectionDescImpl struct for LdapConnectionDescImpl
type LdapConnectionDescImpl struct {
	ShouldUseSecureConnection *bool `json:"shouldUseSecureConnection,omitempty"`
	HostName *string `json:"hostName,omitempty"`
	Port *int32 `json:"port,omitempty"`
	BindDn *string `json:"bindDn,omitempty"`
	BindPassword *string `json:"bindPassword,omitempty"`
	BindPasswordSet *bool `json:"bindPasswordSet,omitempty"`
	ReferralHopLimit *int32 `json:"referralHopLimit,omitempty"`
}

// NewLdapConnectionDescImpl instantiates a new LdapConnectionDescImpl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdapConnectionDescImpl() *LdapConnectionDescImpl {
	this := LdapConnectionDescImpl{}
	return &this
}

// NewLdapConnectionDescImplWithDefaults instantiates a new LdapConnectionDescImpl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapConnectionDescImplWithDefaults() *LdapConnectionDescImpl {
	this := LdapConnectionDescImpl{}
	return &this
}

// GetShouldUseSecureConnection returns the ShouldUseSecureConnection field value if set, zero value otherwise.
func (o *LdapConnectionDescImpl) GetShouldUseSecureConnection() bool {
	if o == nil || o.ShouldUseSecureConnection == nil {
		var ret bool
		return ret
	}
	return *o.ShouldUseSecureConnection
}

// GetShouldUseSecureConnectionOk returns a tuple with the ShouldUseSecureConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionDescImpl) GetShouldUseSecureConnectionOk() (*bool, bool) {
	if o == nil || o.ShouldUseSecureConnection == nil {
		return nil, false
	}
	return o.ShouldUseSecureConnection, true
}

// HasShouldUseSecureConnection returns a boolean if a field has been set.
func (o *LdapConnectionDescImpl) HasShouldUseSecureConnection() bool {
	if o != nil && o.ShouldUseSecureConnection != nil {
		return true
	}

	return false
}

// SetShouldUseSecureConnection gets a reference to the given bool and assigns it to the ShouldUseSecureConnection field.
func (o *LdapConnectionDescImpl) SetShouldUseSecureConnection(v bool) {
	o.ShouldUseSecureConnection = &v
}

// GetHostName returns the HostName field value if set, zero value otherwise.
func (o *LdapConnectionDescImpl) GetHostName() string {
	if o == nil || o.HostName == nil {
		var ret string
		return ret
	}
	return *o.HostName
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionDescImpl) GetHostNameOk() (*string, bool) {
	if o == nil || o.HostName == nil {
		return nil, false
	}
	return o.HostName, true
}

// HasHostName returns a boolean if a field has been set.
func (o *LdapConnectionDescImpl) HasHostName() bool {
	if o != nil && o.HostName != nil {
		return true
	}

	return false
}

// SetHostName gets a reference to the given string and assigns it to the HostName field.
func (o *LdapConnectionDescImpl) SetHostName(v string) {
	o.HostName = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *LdapConnectionDescImpl) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionDescImpl) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *LdapConnectionDescImpl) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *LdapConnectionDescImpl) SetPort(v int32) {
	o.Port = &v
}

// GetBindDn returns the BindDn field value if set, zero value otherwise.
func (o *LdapConnectionDescImpl) GetBindDn() string {
	if o == nil || o.BindDn == nil {
		var ret string
		return ret
	}
	return *o.BindDn
}

// GetBindDnOk returns a tuple with the BindDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionDescImpl) GetBindDnOk() (*string, bool) {
	if o == nil || o.BindDn == nil {
		return nil, false
	}
	return o.BindDn, true
}

// HasBindDn returns a boolean if a field has been set.
func (o *LdapConnectionDescImpl) HasBindDn() bool {
	if o != nil && o.BindDn != nil {
		return true
	}

	return false
}

// SetBindDn gets a reference to the given string and assigns it to the BindDn field.
func (o *LdapConnectionDescImpl) SetBindDn(v string) {
	o.BindDn = &v
}

// GetBindPassword returns the BindPassword field value if set, zero value otherwise.
func (o *LdapConnectionDescImpl) GetBindPassword() string {
	if o == nil || o.BindPassword == nil {
		var ret string
		return ret
	}
	return *o.BindPassword
}

// GetBindPasswordOk returns a tuple with the BindPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionDescImpl) GetBindPasswordOk() (*string, bool) {
	if o == nil || o.BindPassword == nil {
		return nil, false
	}
	return o.BindPassword, true
}

// HasBindPassword returns a boolean if a field has been set.
func (o *LdapConnectionDescImpl) HasBindPassword() bool {
	if o != nil && o.BindPassword != nil {
		return true
	}

	return false
}

// SetBindPassword gets a reference to the given string and assigns it to the BindPassword field.
func (o *LdapConnectionDescImpl) SetBindPassword(v string) {
	o.BindPassword = &v
}

// GetBindPasswordSet returns the BindPasswordSet field value if set, zero value otherwise.
func (o *LdapConnectionDescImpl) GetBindPasswordSet() bool {
	if o == nil || o.BindPasswordSet == nil {
		var ret bool
		return ret
	}
	return *o.BindPasswordSet
}

// GetBindPasswordSetOk returns a tuple with the BindPasswordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionDescImpl) GetBindPasswordSetOk() (*bool, bool) {
	if o == nil || o.BindPasswordSet == nil {
		return nil, false
	}
	return o.BindPasswordSet, true
}

// HasBindPasswordSet returns a boolean if a field has been set.
func (o *LdapConnectionDescImpl) HasBindPasswordSet() bool {
	if o != nil && o.BindPasswordSet != nil {
		return true
	}

	return false
}

// SetBindPasswordSet gets a reference to the given bool and assigns it to the BindPasswordSet field.
func (o *LdapConnectionDescImpl) SetBindPasswordSet(v bool) {
	o.BindPasswordSet = &v
}

// GetReferralHopLimit returns the ReferralHopLimit field value if set, zero value otherwise.
func (o *LdapConnectionDescImpl) GetReferralHopLimit() int32 {
	if o == nil || o.ReferralHopLimit == nil {
		var ret int32
		return ret
	}
	return *o.ReferralHopLimit
}

// GetReferralHopLimitOk returns a tuple with the ReferralHopLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapConnectionDescImpl) GetReferralHopLimitOk() (*int32, bool) {
	if o == nil || o.ReferralHopLimit == nil {
		return nil, false
	}
	return o.ReferralHopLimit, true
}

// HasReferralHopLimit returns a boolean if a field has been set.
func (o *LdapConnectionDescImpl) HasReferralHopLimit() bool {
	if o != nil && o.ReferralHopLimit != nil {
		return true
	}

	return false
}

// SetReferralHopLimit gets a reference to the given int32 and assigns it to the ReferralHopLimit field.
func (o *LdapConnectionDescImpl) SetReferralHopLimit(v int32) {
	o.ReferralHopLimit = &v
}

func (o LdapConnectionDescImpl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ShouldUseSecureConnection != nil {
		toSerialize["shouldUseSecureConnection"] = o.ShouldUseSecureConnection
	}
	if o.HostName != nil {
		toSerialize["hostName"] = o.HostName
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.BindDn != nil {
		toSerialize["bindDn"] = o.BindDn
	}
	if o.BindPassword != nil {
		toSerialize["bindPassword"] = o.BindPassword
	}
	if o.BindPasswordSet != nil {
		toSerialize["bindPasswordSet"] = o.BindPasswordSet
	}
	if o.ReferralHopLimit != nil {
		toSerialize["referralHopLimit"] = o.ReferralHopLimit
	}
	return json.Marshal(toSerialize)
}

type NullableLdapConnectionDescImpl struct {
	value *LdapConnectionDescImpl
	isSet bool
}

func (v NullableLdapConnectionDescImpl) Get() *LdapConnectionDescImpl {
	return v.value
}

func (v *NullableLdapConnectionDescImpl) Set(val *LdapConnectionDescImpl) {
	v.value = val
	v.isSet = true
}

func (v NullableLdapConnectionDescImpl) IsSet() bool {
	return v.isSet
}

func (v *NullableLdapConnectionDescImpl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdapConnectionDescImpl(val *LdapConnectionDescImpl) *NullableLdapConnectionDescImpl {
	return &NullableLdapConnectionDescImpl{value: val, isSet: true}
}

func (v NullableLdapConnectionDescImpl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdapConnectionDescImpl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


