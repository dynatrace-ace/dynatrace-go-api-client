/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TimeseriesRegistrationMessage The definition of a custom metric.
type TimeseriesRegistrationMessage struct {
	// The name of the metric that will appear in the user interface. It is limited to 256 characters.
	DisplayName *string `json:"displayName,omitempty"`
	// The unit the metric will use. If the parameter is not specified or the wrong value is specified, the `Count` value will be assigned.
	Unit *string `json:"unit,omitempty"`
	// The metric dimension key that will be used to report multiple dimensions. For example, a dimension key to report the metric for different network cards for the same firewall.   You can use alphanumeric characters and the following punctuation marks: periods (`.`), hyphens (`-`), and underscores (`_`).   The CUSTOM_DEVICE dimension is added to each new custom metric automatically.
	Dimensions *[]string `json:"dimensions,omitempty"`
	// The definition of the technology type. It is used to group metrics under a logical technology name in the UI.   Metrics must be assigned a software technology type that is identical to the technology type of the custom device you are sending the metric to.   For example, if you define your custom device using type `F5-Firewall` you must also register all related custom metrics as type `F5-Firewall`.
	Types *[]string `json:"types,omitempty"`
}

// NewTimeseriesRegistrationMessage instantiates a new TimeseriesRegistrationMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeseriesRegistrationMessage() *TimeseriesRegistrationMessage {
	this := TimeseriesRegistrationMessage{}
	return &this
}

// NewTimeseriesRegistrationMessageWithDefaults instantiates a new TimeseriesRegistrationMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeseriesRegistrationMessageWithDefaults() *TimeseriesRegistrationMessage {
	this := TimeseriesRegistrationMessage{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *TimeseriesRegistrationMessage) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesRegistrationMessage) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *TimeseriesRegistrationMessage) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *TimeseriesRegistrationMessage) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *TimeseriesRegistrationMessage) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesRegistrationMessage) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *TimeseriesRegistrationMessage) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *TimeseriesRegistrationMessage) SetUnit(v string) {
	o.Unit = &v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *TimeseriesRegistrationMessage) GetDimensions() []string {
	if o == nil || o.Dimensions == nil {
		var ret []string
		return ret
	}
	return *o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesRegistrationMessage) GetDimensionsOk() (*[]string, bool) {
	if o == nil || o.Dimensions == nil {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *TimeseriesRegistrationMessage) HasDimensions() bool {
	if o != nil && o.Dimensions != nil {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given []string and assigns it to the Dimensions field.
func (o *TimeseriesRegistrationMessage) SetDimensions(v []string) {
	o.Dimensions = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *TimeseriesRegistrationMessage) GetTypes() []string {
	if o == nil || o.Types == nil {
		var ret []string
		return ret
	}
	return *o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesRegistrationMessage) GetTypesOk() (*[]string, bool) {
	if o == nil || o.Types == nil {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *TimeseriesRegistrationMessage) HasTypes() bool {
	if o != nil && o.Types != nil {
		return true
	}

	return false
}

// SetTypes gets a reference to the given []string and assigns it to the Types field.
func (o *TimeseriesRegistrationMessage) SetTypes(v []string) {
	o.Types = &v
}

func (o TimeseriesRegistrationMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.Dimensions != nil {
		toSerialize["dimensions"] = o.Dimensions
	}
	if o.Types != nil {
		toSerialize["types"] = o.Types
	}
	return json.Marshal(toSerialize)
}

type NullableTimeseriesRegistrationMessage struct {
	value *TimeseriesRegistrationMessage
	isSet bool
}

func (v NullableTimeseriesRegistrationMessage) Get() *TimeseriesRegistrationMessage {
	return v.value
}

func (v *NullableTimeseriesRegistrationMessage) Set(val *TimeseriesRegistrationMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeseriesRegistrationMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeseriesRegistrationMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeseriesRegistrationMessage(val *TimeseriesRegistrationMessage) *NullableTimeseriesRegistrationMessage {
	return &NullableTimeseriesRegistrationMessage{value: val, isSet: true}
}

func (v NullableTimeseriesRegistrationMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeseriesRegistrationMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


