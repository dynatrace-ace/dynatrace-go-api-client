/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// LogRecord The analysis result for a single log entry.
type LogRecord struct {
	// The timestamp of the log entry, in UTC milliseconds.
	Timestamp *int64 `json:"timestamp,omitempty"`
	// The severity level of the log entry.
	LogLevel *string `json:"logLevel,omitempty"`
	// The entity ID of the host that produced the log.    Not applicable to OS logs.
	HostId *string `json:"hostId,omitempty"`
	// The text of the log entry.
	Text *string `json:"text,omitempty"`
	// The map of the log entry custom fields.
	CustomFields *map[string]map[string]interface{} `json:"customFields,omitempty"`
}

// NewLogRecord instantiates a new LogRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogRecord() *LogRecord {
	this := LogRecord{}
	return &this
}

// NewLogRecordWithDefaults instantiates a new LogRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogRecordWithDefaults() *LogRecord {
	this := LogRecord{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *LogRecord) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecord) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *LogRecord) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *LogRecord) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetLogLevel returns the LogLevel field value if set, zero value otherwise.
func (o *LogRecord) GetLogLevel() string {
	if o == nil || o.LogLevel == nil {
		var ret string
		return ret
	}
	return *o.LogLevel
}

// GetLogLevelOk returns a tuple with the LogLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecord) GetLogLevelOk() (*string, bool) {
	if o == nil || o.LogLevel == nil {
		return nil, false
	}
	return o.LogLevel, true
}

// HasLogLevel returns a boolean if a field has been set.
func (o *LogRecord) HasLogLevel() bool {
	if o != nil && o.LogLevel != nil {
		return true
	}

	return false
}

// SetLogLevel gets a reference to the given string and assigns it to the LogLevel field.
func (o *LogRecord) SetLogLevel(v string) {
	o.LogLevel = &v
}

// GetHostId returns the HostId field value if set, zero value otherwise.
func (o *LogRecord) GetHostId() string {
	if o == nil || o.HostId == nil {
		var ret string
		return ret
	}
	return *o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecord) GetHostIdOk() (*string, bool) {
	if o == nil || o.HostId == nil {
		return nil, false
	}
	return o.HostId, true
}

// HasHostId returns a boolean if a field has been set.
func (o *LogRecord) HasHostId() bool {
	if o != nil && o.HostId != nil {
		return true
	}

	return false
}

// SetHostId gets a reference to the given string and assigns it to the HostId field.
func (o *LogRecord) SetHostId(v string) {
	o.HostId = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *LogRecord) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecord) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *LogRecord) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *LogRecord) SetText(v string) {
	o.Text = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *LogRecord) GetCustomFields() map[string]map[string]interface{} {
	if o == nil || o.CustomFields == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecord) GetCustomFieldsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.CustomFields == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *LogRecord) HasCustomFields() bool {
	if o != nil && o.CustomFields != nil {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]map[string]interface{} and assigns it to the CustomFields field.
func (o *LogRecord) SetCustomFields(v map[string]map[string]interface{}) {
	o.CustomFields = &v
}

func (o LogRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.LogLevel != nil {
		toSerialize["logLevel"] = o.LogLevel
	}
	if o.HostId != nil {
		toSerialize["hostId"] = o.HostId
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.CustomFields != nil {
		toSerialize["customFields"] = o.CustomFields
	}
	return json.Marshal(toSerialize)
}

type NullableLogRecord struct {
	value *LogRecord
	isSet bool
}

func (v NullableLogRecord) Get() *LogRecord {
	return v.value
}

func (v *NullableLogRecord) Set(val *LogRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableLogRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableLogRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogRecord(val *LogRecord) *NullableLogRecord {
	return &NullableLogRecord{value: val, isSet: true}
}

func (v NullableLogRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


