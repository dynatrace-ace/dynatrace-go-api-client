/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// OneAgentOnAHostApiService OneAgentOnAHostApi service
type OneAgentOnAHostApiService service

type ApiGetHostsWithSpecificAgentsRequest struct {
	ctx _context.Context
	ApiService *OneAgentOnAHostApiService
	startTimestamp *int64
	endTimestamp *int64
	relativeTime *string
	tag *[]string
	entity *[]string
	managementZoneId *int64
	managementZone *string
	networkZoneId *string
	hostGroupId *string
	hostGroupName *string
	osType *string
	availabilityState *string
	monitoringType *string
	agentVersionIs *string
	agentVersionNumber *string
	autoUpdateSetting *string
	updateStatus *string
	faultyVersion *bool
	technologyModuleType *string
	technologyModuleVersionIs *string
	technologyModuleVersionNumber *string
	technologyModuleFaultyVersion *bool
	pluginName *string
	pluginVersionIs *string
	pluginVersionNumber *string
	pluginState *string
	nextPageKey *string
}

func (r ApiGetHostsWithSpecificAgentsRequest) StartTimestamp(startTimestamp int64) ApiGetHostsWithSpecificAgentsRequest {
	r.startTimestamp = &startTimestamp
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) EndTimestamp(endTimestamp int64) ApiGetHostsWithSpecificAgentsRequest {
	r.endTimestamp = &endTimestamp
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) RelativeTime(relativeTime string) ApiGetHostsWithSpecificAgentsRequest {
	r.relativeTime = &relativeTime
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) Tag(tag []string) ApiGetHostsWithSpecificAgentsRequest {
	r.tag = &tag
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) Entity(entity []string) ApiGetHostsWithSpecificAgentsRequest {
	r.entity = &entity
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) ManagementZoneId(managementZoneId int64) ApiGetHostsWithSpecificAgentsRequest {
	r.managementZoneId = &managementZoneId
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) ManagementZone(managementZone string) ApiGetHostsWithSpecificAgentsRequest {
	r.managementZone = &managementZone
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) NetworkZoneId(networkZoneId string) ApiGetHostsWithSpecificAgentsRequest {
	r.networkZoneId = &networkZoneId
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) HostGroupId(hostGroupId string) ApiGetHostsWithSpecificAgentsRequest {
	r.hostGroupId = &hostGroupId
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) HostGroupName(hostGroupName string) ApiGetHostsWithSpecificAgentsRequest {
	r.hostGroupName = &hostGroupName
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) OsType(osType string) ApiGetHostsWithSpecificAgentsRequest {
	r.osType = &osType
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) AvailabilityState(availabilityState string) ApiGetHostsWithSpecificAgentsRequest {
	r.availabilityState = &availabilityState
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) MonitoringType(monitoringType string) ApiGetHostsWithSpecificAgentsRequest {
	r.monitoringType = &monitoringType
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) AgentVersionIs(agentVersionIs string) ApiGetHostsWithSpecificAgentsRequest {
	r.agentVersionIs = &agentVersionIs
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) AgentVersionNumber(agentVersionNumber string) ApiGetHostsWithSpecificAgentsRequest {
	r.agentVersionNumber = &agentVersionNumber
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) AutoUpdateSetting(autoUpdateSetting string) ApiGetHostsWithSpecificAgentsRequest {
	r.autoUpdateSetting = &autoUpdateSetting
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) UpdateStatus(updateStatus string) ApiGetHostsWithSpecificAgentsRequest {
	r.updateStatus = &updateStatus
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) FaultyVersion(faultyVersion bool) ApiGetHostsWithSpecificAgentsRequest {
	r.faultyVersion = &faultyVersion
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) TechnologyModuleType(technologyModuleType string) ApiGetHostsWithSpecificAgentsRequest {
	r.technologyModuleType = &technologyModuleType
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) TechnologyModuleVersionIs(technologyModuleVersionIs string) ApiGetHostsWithSpecificAgentsRequest {
	r.technologyModuleVersionIs = &technologyModuleVersionIs
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) TechnologyModuleVersionNumber(technologyModuleVersionNumber string) ApiGetHostsWithSpecificAgentsRequest {
	r.technologyModuleVersionNumber = &technologyModuleVersionNumber
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) TechnologyModuleFaultyVersion(technologyModuleFaultyVersion bool) ApiGetHostsWithSpecificAgentsRequest {
	r.technologyModuleFaultyVersion = &technologyModuleFaultyVersion
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) PluginName(pluginName string) ApiGetHostsWithSpecificAgentsRequest {
	r.pluginName = &pluginName
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) PluginVersionIs(pluginVersionIs string) ApiGetHostsWithSpecificAgentsRequest {
	r.pluginVersionIs = &pluginVersionIs
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) PluginVersionNumber(pluginVersionNumber string) ApiGetHostsWithSpecificAgentsRequest {
	r.pluginVersionNumber = &pluginVersionNumber
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) PluginState(pluginState string) ApiGetHostsWithSpecificAgentsRequest {
	r.pluginState = &pluginState
	return r
}
func (r ApiGetHostsWithSpecificAgentsRequest) NextPageKey(nextPageKey string) ApiGetHostsWithSpecificAgentsRequest {
	r.nextPageKey = &nextPageKey
	return r
}

func (r ApiGetHostsWithSpecificAgentsRequest) Execute() (HostsListPage, *_nethttp.Response, error) {
	return r.ApiService.GetHostsWithSpecificAgentsExecute(r)
}

/*
 * GetHostsWithSpecificAgents Gets the list of hosts with OneAgent deployment information for each host
 * You can narrow down the output by specifying filtering parameters for the request. 

The response is limited to 500 items. Use the **nextPageKey** cursor to obtain subsequent results.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetHostsWithSpecificAgentsRequest
 */
func (a *OneAgentOnAHostApiService) GetHostsWithSpecificAgents(ctx _context.Context) ApiGetHostsWithSpecificAgentsRequest {
	return ApiGetHostsWithSpecificAgentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return HostsListPage
 */
func (a *OneAgentOnAHostApiService) GetHostsWithSpecificAgentsExecute(r ApiGetHostsWithSpecificAgentsRequest) (HostsListPage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  HostsListPage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OneAgentOnAHostApiService.GetHostsWithSpecificAgents")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oneagents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.startTimestamp != nil {
		localVarQueryParams.Add("startTimestamp", parameterToString(*r.startTimestamp, ""))
	}
	if r.endTimestamp != nil {
		localVarQueryParams.Add("endTimestamp", parameterToString(*r.endTimestamp, ""))
	}
	if r.relativeTime != nil {
		localVarQueryParams.Add("relativeTime", parameterToString(*r.relativeTime, ""))
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.entity != nil {
		t := *r.entity
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("entity", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("entity", parameterToString(t, "multi"))
		}
	}
	if r.managementZoneId != nil {
		localVarQueryParams.Add("managementZoneId", parameterToString(*r.managementZoneId, ""))
	}
	if r.managementZone != nil {
		localVarQueryParams.Add("managementZone", parameterToString(*r.managementZone, ""))
	}
	if r.networkZoneId != nil {
		localVarQueryParams.Add("networkZoneId", parameterToString(*r.networkZoneId, ""))
	}
	if r.hostGroupId != nil {
		localVarQueryParams.Add("hostGroupId", parameterToString(*r.hostGroupId, ""))
	}
	if r.hostGroupName != nil {
		localVarQueryParams.Add("hostGroupName", parameterToString(*r.hostGroupName, ""))
	}
	if r.osType != nil {
		localVarQueryParams.Add("osType", parameterToString(*r.osType, ""))
	}
	if r.availabilityState != nil {
		localVarQueryParams.Add("availabilityState", parameterToString(*r.availabilityState, ""))
	}
	if r.monitoringType != nil {
		localVarQueryParams.Add("monitoringType", parameterToString(*r.monitoringType, ""))
	}
	if r.agentVersionIs != nil {
		localVarQueryParams.Add("agentVersionIs", parameterToString(*r.agentVersionIs, ""))
	}
	if r.agentVersionNumber != nil {
		localVarQueryParams.Add("agentVersionNumber", parameterToString(*r.agentVersionNumber, ""))
	}
	if r.autoUpdateSetting != nil {
		localVarQueryParams.Add("autoUpdateSetting", parameterToString(*r.autoUpdateSetting, ""))
	}
	if r.updateStatus != nil {
		localVarQueryParams.Add("updateStatus", parameterToString(*r.updateStatus, ""))
	}
	if r.faultyVersion != nil {
		localVarQueryParams.Add("faultyVersion", parameterToString(*r.faultyVersion, ""))
	}
	if r.technologyModuleType != nil {
		localVarQueryParams.Add("technologyModuleType", parameterToString(*r.technologyModuleType, ""))
	}
	if r.technologyModuleVersionIs != nil {
		localVarQueryParams.Add("technologyModuleVersionIs", parameterToString(*r.technologyModuleVersionIs, ""))
	}
	if r.technologyModuleVersionNumber != nil {
		localVarQueryParams.Add("technologyModuleVersionNumber", parameterToString(*r.technologyModuleVersionNumber, ""))
	}
	if r.technologyModuleFaultyVersion != nil {
		localVarQueryParams.Add("technologyModuleFaultyVersion", parameterToString(*r.technologyModuleFaultyVersion, ""))
	}
	if r.pluginName != nil {
		localVarQueryParams.Add("pluginName", parameterToString(*r.pluginName, ""))
	}
	if r.pluginVersionIs != nil {
		localVarQueryParams.Add("pluginVersionIs", parameterToString(*r.pluginVersionIs, ""))
	}
	if r.pluginVersionNumber != nil {
		localVarQueryParams.Add("pluginVersionNumber", parameterToString(*r.pluginVersionNumber, ""))
	}
	if r.pluginState != nil {
		localVarQueryParams.Add("pluginState", parameterToString(*r.pluginState, ""))
	}
	if r.nextPageKey != nil {
		localVarQueryParams.Add("nextPageKey", parameterToString(*r.nextPageKey, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
