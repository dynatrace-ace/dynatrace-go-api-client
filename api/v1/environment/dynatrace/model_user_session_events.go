/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UserSessionEvents The external event of a user session.
type UserSessionEvents struct {
	// The type of event.
	Type *string `json:"type,omitempty"`
	// The name of the event.
	Name *string `json:"name,omitempty"`
	// The DNS domain where the event has been recorded.
	Domain *string `json:"domain,omitempty"`
	// The timestamp of the error, in UTC milliseconds.
	StartTime *int64 `json:"startTime,omitempty"`
	// The name of the application, based on the configured detection rules.
	Application *string `json:"application,omitempty"`
	// The Dynatrace entity ID of the application.    This information is useful when calling various REST APIs, for example, as a key for time series queries.
	InternalApplicationId *string `json:"internalApplicationId,omitempty"`
	// The metadata attached to the event.
	Metadata *string `json:"metadata,omitempty"`
}

// NewUserSessionEvents instantiates a new UserSessionEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSessionEvents() *UserSessionEvents {
	this := UserSessionEvents{}
	return &this
}

// NewUserSessionEventsWithDefaults instantiates a new UserSessionEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSessionEventsWithDefaults() *UserSessionEvents {
	this := UserSessionEvents{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserSessionEvents) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionEvents) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserSessionEvents) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserSessionEvents) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserSessionEvents) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionEvents) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserSessionEvents) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserSessionEvents) SetName(v string) {
	o.Name = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *UserSessionEvents) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionEvents) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *UserSessionEvents) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *UserSessionEvents) SetDomain(v string) {
	o.Domain = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *UserSessionEvents) GetStartTime() int64 {
	if o == nil || o.StartTime == nil {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionEvents) GetStartTimeOk() (*int64, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *UserSessionEvents) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *UserSessionEvents) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *UserSessionEvents) GetApplication() string {
	if o == nil || o.Application == nil {
		var ret string
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionEvents) GetApplicationOk() (*string, bool) {
	if o == nil || o.Application == nil {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *UserSessionEvents) HasApplication() bool {
	if o != nil && o.Application != nil {
		return true
	}

	return false
}

// SetApplication gets a reference to the given string and assigns it to the Application field.
func (o *UserSessionEvents) SetApplication(v string) {
	o.Application = &v
}

// GetInternalApplicationId returns the InternalApplicationId field value if set, zero value otherwise.
func (o *UserSessionEvents) GetInternalApplicationId() string {
	if o == nil || o.InternalApplicationId == nil {
		var ret string
		return ret
	}
	return *o.InternalApplicationId
}

// GetInternalApplicationIdOk returns a tuple with the InternalApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionEvents) GetInternalApplicationIdOk() (*string, bool) {
	if o == nil || o.InternalApplicationId == nil {
		return nil, false
	}
	return o.InternalApplicationId, true
}

// HasInternalApplicationId returns a boolean if a field has been set.
func (o *UserSessionEvents) HasInternalApplicationId() bool {
	if o != nil && o.InternalApplicationId != nil {
		return true
	}

	return false
}

// SetInternalApplicationId gets a reference to the given string and assigns it to the InternalApplicationId field.
func (o *UserSessionEvents) SetInternalApplicationId(v string) {
	o.InternalApplicationId = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *UserSessionEvents) GetMetadata() string {
	if o == nil || o.Metadata == nil {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionEvents) GetMetadataOk() (*string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *UserSessionEvents) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *UserSessionEvents) SetMetadata(v string) {
	o.Metadata = &v
}

func (o UserSessionEvents) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.StartTime != nil {
		toSerialize["startTime"] = o.StartTime
	}
	if o.Application != nil {
		toSerialize["application"] = o.Application
	}
	if o.InternalApplicationId != nil {
		toSerialize["internalApplicationId"] = o.InternalApplicationId
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableUserSessionEvents struct {
	value *UserSessionEvents
	isSet bool
}

func (v NullableUserSessionEvents) Get() *UserSessionEvents {
	return v.value
}

func (v *NullableUserSessionEvents) Set(val *UserSessionEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSessionEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSessionEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSessionEvents(val *UserSessionEvents) *NullableUserSessionEvents {
	return &NullableUserSessionEvents{value: val, isSet: true}
}

func (v NullableUserSessionEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSessionEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


