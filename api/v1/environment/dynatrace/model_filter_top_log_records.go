/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// FilterTopLogRecords A query to filter top log records.
type FilterTopLogRecords struct {
	// The query for filtering.   See the [Search patterns in log data and parse results](https://dt-url.net/hf23k34) help page for syntax description.
	FilterQuery *string `json:"filterQuery,omitempty"`
}

// NewFilterTopLogRecords instantiates a new FilterTopLogRecords object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterTopLogRecords() *FilterTopLogRecords {
	this := FilterTopLogRecords{}
	return &this
}

// NewFilterTopLogRecordsWithDefaults instantiates a new FilterTopLogRecords object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterTopLogRecordsWithDefaults() *FilterTopLogRecords {
	this := FilterTopLogRecords{}
	return &this
}

// GetFilterQuery returns the FilterQuery field value if set, zero value otherwise.
func (o *FilterTopLogRecords) GetFilterQuery() string {
	if o == nil || o.FilterQuery == nil {
		var ret string
		return ret
	}
	return *o.FilterQuery
}

// GetFilterQueryOk returns a tuple with the FilterQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterTopLogRecords) GetFilterQueryOk() (*string, bool) {
	if o == nil || o.FilterQuery == nil {
		return nil, false
	}
	return o.FilterQuery, true
}

// HasFilterQuery returns a boolean if a field has been set.
func (o *FilterTopLogRecords) HasFilterQuery() bool {
	if o != nil && o.FilterQuery != nil {
		return true
	}

	return false
}

// SetFilterQuery gets a reference to the given string and assigns it to the FilterQuery field.
func (o *FilterTopLogRecords) SetFilterQuery(v string) {
	o.FilterQuery = &v
}

func (o FilterTopLogRecords) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilterQuery != nil {
		toSerialize["filterQuery"] = o.FilterQuery
	}
	return json.Marshal(toSerialize)
}

type NullableFilterTopLogRecords struct {
	value *FilterTopLogRecords
	isSet bool
}

func (v NullableFilterTopLogRecords) Get() *FilterTopLogRecords {
	return v.value
}

func (v *NullableFilterTopLogRecords) Set(val *FilterTopLogRecords) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterTopLogRecords) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterTopLogRecords) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterTopLogRecords(val *FilterTopLogRecords) *NullableFilterTopLogRecords {
	return &NullableFilterTopLogRecords{value: val, isSet: true}
}

func (v NullableFilterTopLogRecords) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterTopLogRecords) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


