/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UserSessionSyntheticEvent A synthetic event of a user session.
type UserSessionSyntheticEvent struct {
	// The name of the synthetic event.
	Name *string `json:"name,omitempty"`
	// The Dynatrace entity ID for the synthetic event.
	SyntheticEventId *string `json:"syntheticEventId,omitempty"`
	// The sequence number of the synthetic event in scope of the complete browser monitor.
	SequenceNumber *int32 `json:"sequenceNumber,omitempty"`
	// The timestamp when the synthetic event was simulated, in UTC milliseconds.
	Timestamp *int64 `json:"timestamp,omitempty"`
	// The type of the synthetic event. For example click or keystroke.
	Type *string `json:"type,omitempty"`
	// The error code of the error that occurred during this event.
	ErrorCode *int32 `json:"errorCode,omitempty"`
	// Description of the error that occurred during this event.
	ErrorName *string `json:"errorName,omitempty"`
}

// NewUserSessionSyntheticEvent instantiates a new UserSessionSyntheticEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSessionSyntheticEvent() *UserSessionSyntheticEvent {
	this := UserSessionSyntheticEvent{}
	return &this
}

// NewUserSessionSyntheticEventWithDefaults instantiates a new UserSessionSyntheticEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSessionSyntheticEventWithDefaults() *UserSessionSyntheticEvent {
	this := UserSessionSyntheticEvent{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserSessionSyntheticEvent) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionSyntheticEvent) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserSessionSyntheticEvent) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserSessionSyntheticEvent) SetName(v string) {
	o.Name = &v
}

// GetSyntheticEventId returns the SyntheticEventId field value if set, zero value otherwise.
func (o *UserSessionSyntheticEvent) GetSyntheticEventId() string {
	if o == nil || o.SyntheticEventId == nil {
		var ret string
		return ret
	}
	return *o.SyntheticEventId
}

// GetSyntheticEventIdOk returns a tuple with the SyntheticEventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionSyntheticEvent) GetSyntheticEventIdOk() (*string, bool) {
	if o == nil || o.SyntheticEventId == nil {
		return nil, false
	}
	return o.SyntheticEventId, true
}

// HasSyntheticEventId returns a boolean if a field has been set.
func (o *UserSessionSyntheticEvent) HasSyntheticEventId() bool {
	if o != nil && o.SyntheticEventId != nil {
		return true
	}

	return false
}

// SetSyntheticEventId gets a reference to the given string and assigns it to the SyntheticEventId field.
func (o *UserSessionSyntheticEvent) SetSyntheticEventId(v string) {
	o.SyntheticEventId = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise.
func (o *UserSessionSyntheticEvent) GetSequenceNumber() int32 {
	if o == nil || o.SequenceNumber == nil {
		var ret int32
		return ret
	}
	return *o.SequenceNumber
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionSyntheticEvent) GetSequenceNumberOk() (*int32, bool) {
	if o == nil || o.SequenceNumber == nil {
		return nil, false
	}
	return o.SequenceNumber, true
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *UserSessionSyntheticEvent) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber != nil {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given int32 and assigns it to the SequenceNumber field.
func (o *UserSessionSyntheticEvent) SetSequenceNumber(v int32) {
	o.SequenceNumber = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *UserSessionSyntheticEvent) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionSyntheticEvent) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UserSessionSyntheticEvent) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *UserSessionSyntheticEvent) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserSessionSyntheticEvent) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionSyntheticEvent) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserSessionSyntheticEvent) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserSessionSyntheticEvent) SetType(v string) {
	o.Type = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *UserSessionSyntheticEvent) GetErrorCode() int32 {
	if o == nil || o.ErrorCode == nil {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionSyntheticEvent) GetErrorCodeOk() (*int32, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *UserSessionSyntheticEvent) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *UserSessionSyntheticEvent) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetErrorName returns the ErrorName field value if set, zero value otherwise.
func (o *UserSessionSyntheticEvent) GetErrorName() string {
	if o == nil || o.ErrorName == nil {
		var ret string
		return ret
	}
	return *o.ErrorName
}

// GetErrorNameOk returns a tuple with the ErrorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionSyntheticEvent) GetErrorNameOk() (*string, bool) {
	if o == nil || o.ErrorName == nil {
		return nil, false
	}
	return o.ErrorName, true
}

// HasErrorName returns a boolean if a field has been set.
func (o *UserSessionSyntheticEvent) HasErrorName() bool {
	if o != nil && o.ErrorName != nil {
		return true
	}

	return false
}

// SetErrorName gets a reference to the given string and assigns it to the ErrorName field.
func (o *UserSessionSyntheticEvent) SetErrorName(v string) {
	o.ErrorName = &v
}

func (o UserSessionSyntheticEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.SyntheticEventId != nil {
		toSerialize["syntheticEventId"] = o.SyntheticEventId
	}
	if o.SequenceNumber != nil {
		toSerialize["sequenceNumber"] = o.SequenceNumber
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.ErrorCode != nil {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if o.ErrorName != nil {
		toSerialize["errorName"] = o.ErrorName
	}
	return json.Marshal(toSerialize)
}

type NullableUserSessionSyntheticEvent struct {
	value *UserSessionSyntheticEvent
	isSet bool
}

func (v NullableUserSessionSyntheticEvent) Get() *UserSessionSyntheticEvent {
	return v.value
}

func (v *NullableUserSessionSyntheticEvent) Set(val *UserSessionSyntheticEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSessionSyntheticEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSessionSyntheticEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSessionSyntheticEvent(val *UserSessionSyntheticEvent) *NullableUserSessionSyntheticEvent {
	return &NullableUserSessionSyntheticEvent{value: val, isSet: true}
}

func (v NullableUserSessionSyntheticEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSessionSyntheticEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


