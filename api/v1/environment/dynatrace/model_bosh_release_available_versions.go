/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// BoshReleaseAvailableVersions A list of available OneAgent versions for BOSH release tarballs.
type BoshReleaseAvailableVersions struct {
	// A list of available OneAgent versions for BOSH release tarballs.
	AvailableVersions *[]string `json:"availableVersions,omitempty"`
}

// NewBoshReleaseAvailableVersions instantiates a new BoshReleaseAvailableVersions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoshReleaseAvailableVersions() *BoshReleaseAvailableVersions {
	this := BoshReleaseAvailableVersions{}
	return &this
}

// NewBoshReleaseAvailableVersionsWithDefaults instantiates a new BoshReleaseAvailableVersions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoshReleaseAvailableVersionsWithDefaults() *BoshReleaseAvailableVersions {
	this := BoshReleaseAvailableVersions{}
	return &this
}

// GetAvailableVersions returns the AvailableVersions field value if set, zero value otherwise.
func (o *BoshReleaseAvailableVersions) GetAvailableVersions() []string {
	if o == nil || o.AvailableVersions == nil {
		var ret []string
		return ret
	}
	return *o.AvailableVersions
}

// GetAvailableVersionsOk returns a tuple with the AvailableVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BoshReleaseAvailableVersions) GetAvailableVersionsOk() (*[]string, bool) {
	if o == nil || o.AvailableVersions == nil {
		return nil, false
	}
	return o.AvailableVersions, true
}

// HasAvailableVersions returns a boolean if a field has been set.
func (o *BoshReleaseAvailableVersions) HasAvailableVersions() bool {
	if o != nil && o.AvailableVersions != nil {
		return true
	}

	return false
}

// SetAvailableVersions gets a reference to the given []string and assigns it to the AvailableVersions field.
func (o *BoshReleaseAvailableVersions) SetAvailableVersions(v []string) {
	o.AvailableVersions = &v
}

func (o BoshReleaseAvailableVersions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AvailableVersions != nil {
		toSerialize["availableVersions"] = o.AvailableVersions
	}
	return json.Marshal(toSerialize)
}

type NullableBoshReleaseAvailableVersions struct {
	value *BoshReleaseAvailableVersions
	isSet bool
}

func (v NullableBoshReleaseAvailableVersions) Get() *BoshReleaseAvailableVersions {
	return v.value
}

func (v *NullableBoshReleaseAvailableVersions) Set(val *BoshReleaseAvailableVersions) {
	v.value = val
	v.isSet = true
}

func (v NullableBoshReleaseAvailableVersions) IsSet() bool {
	return v.isSet
}

func (v *NullableBoshReleaseAvailableVersions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoshReleaseAvailableVersions(val *BoshReleaseAvailableVersions) *NullableBoshReleaseAvailableVersions {
	return &NullableBoshReleaseAvailableVersions{value: val, isSet: true}
}

func (v NullableBoshReleaseAvailableVersions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoshReleaseAvailableVersions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


