/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TagWithSourceInfo Tag with source of a Dynatrace entity.
type TagWithSourceInfo struct {
	// The source of the tag, such as USER, RULE_BASED or AUTO
	Source *string `json:"source,omitempty"`
	// The origin of the tag, such as AWS or Cloud Foundry.    Custom tags use the `CONTEXTLESS` value.
	Context string `json:"context"`
	// The key of the tag.    Custom tags have the tag value here.
	Key string `json:"key"`
	// The value of the tag.    Not applicable to custom tags.
	Value *string `json:"value,omitempty"`
}

// NewTagWithSourceInfo instantiates a new TagWithSourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagWithSourceInfo(context string, key string, ) *TagWithSourceInfo {
	this := TagWithSourceInfo{}
	this.Context = context
	this.Key = key
	return &this
}

// NewTagWithSourceInfoWithDefaults instantiates a new TagWithSourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagWithSourceInfoWithDefaults() *TagWithSourceInfo {
	this := TagWithSourceInfo{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *TagWithSourceInfo) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagWithSourceInfo) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *TagWithSourceInfo) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *TagWithSourceInfo) SetSource(v string) {
	o.Source = &v
}

// GetContext returns the Context field value
func (o *TagWithSourceInfo) GetContext() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *TagWithSourceInfo) GetContextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *TagWithSourceInfo) SetContext(v string) {
	o.Context = v
}

// GetKey returns the Key field value
func (o *TagWithSourceInfo) GetKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *TagWithSourceInfo) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *TagWithSourceInfo) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TagWithSourceInfo) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagWithSourceInfo) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TagWithSourceInfo) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TagWithSourceInfo) SetValue(v string) {
	o.Value = &v
}

func (o TagWithSourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["context"] = o.Context
	}
	if true {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableTagWithSourceInfo struct {
	value *TagWithSourceInfo
	isSet bool
}

func (v NullableTagWithSourceInfo) Get() *TagWithSourceInfo {
	return v.value
}

func (v *NullableTagWithSourceInfo) Set(val *TagWithSourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTagWithSourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTagWithSourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagWithSourceInfo(val *TagWithSourceInfo) *NullableTagWithSourceInfo {
	return &NullableTagWithSourceInfo{value: val, isSet: true}
}

func (v NullableTagWithSourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagWithSourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


