/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// LocalOutagePolicy Local outage handling configuration.    Alert if **affectedLocations** of locations are unable to access the web application **consecutiveRuns** times consecutively.
type LocalOutagePolicy struct {
	// The number of affected locations to trigger an alert.
	AffectedLocations int32 `json:"affectedLocations"`
	// The number of consecutive fails to trigger an alert.
	ConsecutiveRuns int32 `json:"consecutiveRuns"`
}

// NewLocalOutagePolicy instantiates a new LocalOutagePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalOutagePolicy(affectedLocations int32, consecutiveRuns int32, ) *LocalOutagePolicy {
	this := LocalOutagePolicy{}
	this.AffectedLocations = affectedLocations
	this.ConsecutiveRuns = consecutiveRuns
	return &this
}

// NewLocalOutagePolicyWithDefaults instantiates a new LocalOutagePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalOutagePolicyWithDefaults() *LocalOutagePolicy {
	this := LocalOutagePolicy{}
	return &this
}

// GetAffectedLocations returns the AffectedLocations field value
func (o *LocalOutagePolicy) GetAffectedLocations() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.AffectedLocations
}

// GetAffectedLocationsOk returns a tuple with the AffectedLocations field value
// and a boolean to check if the value has been set.
func (o *LocalOutagePolicy) GetAffectedLocationsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AffectedLocations, true
}

// SetAffectedLocations sets field value
func (o *LocalOutagePolicy) SetAffectedLocations(v int32) {
	o.AffectedLocations = v
}

// GetConsecutiveRuns returns the ConsecutiveRuns field value
func (o *LocalOutagePolicy) GetConsecutiveRuns() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.ConsecutiveRuns
}

// GetConsecutiveRunsOk returns a tuple with the ConsecutiveRuns field value
// and a boolean to check if the value has been set.
func (o *LocalOutagePolicy) GetConsecutiveRunsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConsecutiveRuns, true
}

// SetConsecutiveRuns sets field value
func (o *LocalOutagePolicy) SetConsecutiveRuns(v int32) {
	o.ConsecutiveRuns = v
}

func (o LocalOutagePolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["affectedLocations"] = o.AffectedLocations
	}
	if true {
		toSerialize["consecutiveRuns"] = o.ConsecutiveRuns
	}
	return json.Marshal(toSerialize)
}

type NullableLocalOutagePolicy struct {
	value *LocalOutagePolicy
	isSet bool
}

func (v NullableLocalOutagePolicy) Get() *LocalOutagePolicy {
	return v.value
}

func (v *NullableLocalOutagePolicy) Set(val *LocalOutagePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalOutagePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalOutagePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalOutagePolicy(val *LocalOutagePolicy) *NullableLocalOutagePolicy {
	return &NullableLocalOutagePolicy{value: val, isSet: true}
}

func (v NullableLocalOutagePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalOutagePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


