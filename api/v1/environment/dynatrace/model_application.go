/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Application struct for Application
type Application struct {
	// The Dynatrace entity ID of the required entity.
	EntityId *string `json:"entityId,omitempty"`
	// The name of the Dynatrace entity as displayed in the UI.
	DisplayName *string `json:"displayName,omitempty"`
	// The customized name of the entity
	CustomizedName *string `json:"customizedName,omitempty"`
	// The discovered name of the entity
	DiscoveredName *string `json:"discoveredName,omitempty"`
	// The timestamp of when the entity was first detected, in UTC milliseconds
	FirstSeenTimestamp *int64 `json:"firstSeenTimestamp,omitempty"`
	// The timestamp of when the entity was last detected, in UTC milliseconds
	LastSeenTimestamp *int64 `json:"lastSeenTimestamp,omitempty"`
	// The list of entity tags.
	Tags *[]TagInfo `json:"tags,omitempty"`
	FromRelationships *ApplicationFromRelationships `json:"fromRelationships,omitempty"`
	ToRelationships *ApplicationToRelationships `json:"toRelationships,omitempty"`
	ApplicationType *string `json:"applicationType,omitempty"`
	RuleAppliedMatchType *string `json:"ruleAppliedMatchType,omitempty"`
	RuleAppliedPattern *string `json:"ruleAppliedPattern,omitempty"`
	ApplicationMatchTarget *string `json:"applicationMatchTarget,omitempty"`
	// The management zones that the entity is part of.
	ManagementZones *[]EntityShortRepresentation `json:"managementZones,omitempty"`
}

// NewApplication instantiates a new Application object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplication() *Application {
	this := Application{}
	return &this
}

// NewApplicationWithDefaults instantiates a new Application object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationWithDefaults() *Application {
	this := Application{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *Application) GetEntityId() string {
	if o == nil || o.EntityId == nil {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetEntityIdOk() (*string, bool) {
	if o == nil || o.EntityId == nil {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *Application) HasEntityId() bool {
	if o != nil && o.EntityId != nil {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *Application) SetEntityId(v string) {
	o.EntityId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Application) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Application) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Application) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetCustomizedName returns the CustomizedName field value if set, zero value otherwise.
func (o *Application) GetCustomizedName() string {
	if o == nil || o.CustomizedName == nil {
		var ret string
		return ret
	}
	return *o.CustomizedName
}

// GetCustomizedNameOk returns a tuple with the CustomizedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetCustomizedNameOk() (*string, bool) {
	if o == nil || o.CustomizedName == nil {
		return nil, false
	}
	return o.CustomizedName, true
}

// HasCustomizedName returns a boolean if a field has been set.
func (o *Application) HasCustomizedName() bool {
	if o != nil && o.CustomizedName != nil {
		return true
	}

	return false
}

// SetCustomizedName gets a reference to the given string and assigns it to the CustomizedName field.
func (o *Application) SetCustomizedName(v string) {
	o.CustomizedName = &v
}

// GetDiscoveredName returns the DiscoveredName field value if set, zero value otherwise.
func (o *Application) GetDiscoveredName() string {
	if o == nil || o.DiscoveredName == nil {
		var ret string
		return ret
	}
	return *o.DiscoveredName
}

// GetDiscoveredNameOk returns a tuple with the DiscoveredName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetDiscoveredNameOk() (*string, bool) {
	if o == nil || o.DiscoveredName == nil {
		return nil, false
	}
	return o.DiscoveredName, true
}

// HasDiscoveredName returns a boolean if a field has been set.
func (o *Application) HasDiscoveredName() bool {
	if o != nil && o.DiscoveredName != nil {
		return true
	}

	return false
}

// SetDiscoveredName gets a reference to the given string and assigns it to the DiscoveredName field.
func (o *Application) SetDiscoveredName(v string) {
	o.DiscoveredName = &v
}

// GetFirstSeenTimestamp returns the FirstSeenTimestamp field value if set, zero value otherwise.
func (o *Application) GetFirstSeenTimestamp() int64 {
	if o == nil || o.FirstSeenTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.FirstSeenTimestamp
}

// GetFirstSeenTimestampOk returns a tuple with the FirstSeenTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetFirstSeenTimestampOk() (*int64, bool) {
	if o == nil || o.FirstSeenTimestamp == nil {
		return nil, false
	}
	return o.FirstSeenTimestamp, true
}

// HasFirstSeenTimestamp returns a boolean if a field has been set.
func (o *Application) HasFirstSeenTimestamp() bool {
	if o != nil && o.FirstSeenTimestamp != nil {
		return true
	}

	return false
}

// SetFirstSeenTimestamp gets a reference to the given int64 and assigns it to the FirstSeenTimestamp field.
func (o *Application) SetFirstSeenTimestamp(v int64) {
	o.FirstSeenTimestamp = &v
}

// GetLastSeenTimestamp returns the LastSeenTimestamp field value if set, zero value otherwise.
func (o *Application) GetLastSeenTimestamp() int64 {
	if o == nil || o.LastSeenTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastSeenTimestamp
}

// GetLastSeenTimestampOk returns a tuple with the LastSeenTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetLastSeenTimestampOk() (*int64, bool) {
	if o == nil || o.LastSeenTimestamp == nil {
		return nil, false
	}
	return o.LastSeenTimestamp, true
}

// HasLastSeenTimestamp returns a boolean if a field has been set.
func (o *Application) HasLastSeenTimestamp() bool {
	if o != nil && o.LastSeenTimestamp != nil {
		return true
	}

	return false
}

// SetLastSeenTimestamp gets a reference to the given int64 and assigns it to the LastSeenTimestamp field.
func (o *Application) SetLastSeenTimestamp(v int64) {
	o.LastSeenTimestamp = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Application) GetTags() []TagInfo {
	if o == nil || o.Tags == nil {
		var ret []TagInfo
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetTagsOk() (*[]TagInfo, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Application) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagInfo and assigns it to the Tags field.
func (o *Application) SetTags(v []TagInfo) {
	o.Tags = &v
}

// GetFromRelationships returns the FromRelationships field value if set, zero value otherwise.
func (o *Application) GetFromRelationships() ApplicationFromRelationships {
	if o == nil || o.FromRelationships == nil {
		var ret ApplicationFromRelationships
		return ret
	}
	return *o.FromRelationships
}

// GetFromRelationshipsOk returns a tuple with the FromRelationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetFromRelationshipsOk() (*ApplicationFromRelationships, bool) {
	if o == nil || o.FromRelationships == nil {
		return nil, false
	}
	return o.FromRelationships, true
}

// HasFromRelationships returns a boolean if a field has been set.
func (o *Application) HasFromRelationships() bool {
	if o != nil && o.FromRelationships != nil {
		return true
	}

	return false
}

// SetFromRelationships gets a reference to the given ApplicationFromRelationships and assigns it to the FromRelationships field.
func (o *Application) SetFromRelationships(v ApplicationFromRelationships) {
	o.FromRelationships = &v
}

// GetToRelationships returns the ToRelationships field value if set, zero value otherwise.
func (o *Application) GetToRelationships() ApplicationToRelationships {
	if o == nil || o.ToRelationships == nil {
		var ret ApplicationToRelationships
		return ret
	}
	return *o.ToRelationships
}

// GetToRelationshipsOk returns a tuple with the ToRelationships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetToRelationshipsOk() (*ApplicationToRelationships, bool) {
	if o == nil || o.ToRelationships == nil {
		return nil, false
	}
	return o.ToRelationships, true
}

// HasToRelationships returns a boolean if a field has been set.
func (o *Application) HasToRelationships() bool {
	if o != nil && o.ToRelationships != nil {
		return true
	}

	return false
}

// SetToRelationships gets a reference to the given ApplicationToRelationships and assigns it to the ToRelationships field.
func (o *Application) SetToRelationships(v ApplicationToRelationships) {
	o.ToRelationships = &v
}

// GetApplicationType returns the ApplicationType field value if set, zero value otherwise.
func (o *Application) GetApplicationType() string {
	if o == nil || o.ApplicationType == nil {
		var ret string
		return ret
	}
	return *o.ApplicationType
}

// GetApplicationTypeOk returns a tuple with the ApplicationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetApplicationTypeOk() (*string, bool) {
	if o == nil || o.ApplicationType == nil {
		return nil, false
	}
	return o.ApplicationType, true
}

// HasApplicationType returns a boolean if a field has been set.
func (o *Application) HasApplicationType() bool {
	if o != nil && o.ApplicationType != nil {
		return true
	}

	return false
}

// SetApplicationType gets a reference to the given string and assigns it to the ApplicationType field.
func (o *Application) SetApplicationType(v string) {
	o.ApplicationType = &v
}

// GetRuleAppliedMatchType returns the RuleAppliedMatchType field value if set, zero value otherwise.
func (o *Application) GetRuleAppliedMatchType() string {
	if o == nil || o.RuleAppliedMatchType == nil {
		var ret string
		return ret
	}
	return *o.RuleAppliedMatchType
}

// GetRuleAppliedMatchTypeOk returns a tuple with the RuleAppliedMatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetRuleAppliedMatchTypeOk() (*string, bool) {
	if o == nil || o.RuleAppliedMatchType == nil {
		return nil, false
	}
	return o.RuleAppliedMatchType, true
}

// HasRuleAppliedMatchType returns a boolean if a field has been set.
func (o *Application) HasRuleAppliedMatchType() bool {
	if o != nil && o.RuleAppliedMatchType != nil {
		return true
	}

	return false
}

// SetRuleAppliedMatchType gets a reference to the given string and assigns it to the RuleAppliedMatchType field.
func (o *Application) SetRuleAppliedMatchType(v string) {
	o.RuleAppliedMatchType = &v
}

// GetRuleAppliedPattern returns the RuleAppliedPattern field value if set, zero value otherwise.
func (o *Application) GetRuleAppliedPattern() string {
	if o == nil || o.RuleAppliedPattern == nil {
		var ret string
		return ret
	}
	return *o.RuleAppliedPattern
}

// GetRuleAppliedPatternOk returns a tuple with the RuleAppliedPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetRuleAppliedPatternOk() (*string, bool) {
	if o == nil || o.RuleAppliedPattern == nil {
		return nil, false
	}
	return o.RuleAppliedPattern, true
}

// HasRuleAppliedPattern returns a boolean if a field has been set.
func (o *Application) HasRuleAppliedPattern() bool {
	if o != nil && o.RuleAppliedPattern != nil {
		return true
	}

	return false
}

// SetRuleAppliedPattern gets a reference to the given string and assigns it to the RuleAppliedPattern field.
func (o *Application) SetRuleAppliedPattern(v string) {
	o.RuleAppliedPattern = &v
}

// GetApplicationMatchTarget returns the ApplicationMatchTarget field value if set, zero value otherwise.
func (o *Application) GetApplicationMatchTarget() string {
	if o == nil || o.ApplicationMatchTarget == nil {
		var ret string
		return ret
	}
	return *o.ApplicationMatchTarget
}

// GetApplicationMatchTargetOk returns a tuple with the ApplicationMatchTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetApplicationMatchTargetOk() (*string, bool) {
	if o == nil || o.ApplicationMatchTarget == nil {
		return nil, false
	}
	return o.ApplicationMatchTarget, true
}

// HasApplicationMatchTarget returns a boolean if a field has been set.
func (o *Application) HasApplicationMatchTarget() bool {
	if o != nil && o.ApplicationMatchTarget != nil {
		return true
	}

	return false
}

// SetApplicationMatchTarget gets a reference to the given string and assigns it to the ApplicationMatchTarget field.
func (o *Application) SetApplicationMatchTarget(v string) {
	o.ApplicationMatchTarget = &v
}

// GetManagementZones returns the ManagementZones field value if set, zero value otherwise.
func (o *Application) GetManagementZones() []EntityShortRepresentation {
	if o == nil || o.ManagementZones == nil {
		var ret []EntityShortRepresentation
		return ret
	}
	return *o.ManagementZones
}

// GetManagementZonesOk returns a tuple with the ManagementZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Application) GetManagementZonesOk() (*[]EntityShortRepresentation, bool) {
	if o == nil || o.ManagementZones == nil {
		return nil, false
	}
	return o.ManagementZones, true
}

// HasManagementZones returns a boolean if a field has been set.
func (o *Application) HasManagementZones() bool {
	if o != nil && o.ManagementZones != nil {
		return true
	}

	return false
}

// SetManagementZones gets a reference to the given []EntityShortRepresentation and assigns it to the ManagementZones field.
func (o *Application) SetManagementZones(v []EntityShortRepresentation) {
	o.ManagementZones = &v
}

func (o Application) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId != nil {
		toSerialize["entityId"] = o.EntityId
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.CustomizedName != nil {
		toSerialize["customizedName"] = o.CustomizedName
	}
	if o.DiscoveredName != nil {
		toSerialize["discoveredName"] = o.DiscoveredName
	}
	if o.FirstSeenTimestamp != nil {
		toSerialize["firstSeenTimestamp"] = o.FirstSeenTimestamp
	}
	if o.LastSeenTimestamp != nil {
		toSerialize["lastSeenTimestamp"] = o.LastSeenTimestamp
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.FromRelationships != nil {
		toSerialize["fromRelationships"] = o.FromRelationships
	}
	if o.ToRelationships != nil {
		toSerialize["toRelationships"] = o.ToRelationships
	}
	if o.ApplicationType != nil {
		toSerialize["applicationType"] = o.ApplicationType
	}
	if o.RuleAppliedMatchType != nil {
		toSerialize["ruleAppliedMatchType"] = o.RuleAppliedMatchType
	}
	if o.RuleAppliedPattern != nil {
		toSerialize["ruleAppliedPattern"] = o.RuleAppliedPattern
	}
	if o.ApplicationMatchTarget != nil {
		toSerialize["applicationMatchTarget"] = o.ApplicationMatchTarget
	}
	if o.ManagementZones != nil {
		toSerialize["managementZones"] = o.ManagementZones
	}
	return json.Marshal(toSerialize)
}

type NullableApplication struct {
	value *Application
	isSet bool
}

func (v NullableApplication) Get() *Application {
	return v.value
}

func (v *NullableApplication) Set(val *Application) {
	v.value = val
	v.isSet = true
}

func (v NullableApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplication(val *Application) *NullableApplication {
	return &NullableApplication{value: val, isSet: true}
}

func (v NullableApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


