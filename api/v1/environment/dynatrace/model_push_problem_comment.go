/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// PushProblemComment A comment of a problem
type PushProblemComment struct {
	// A comment on the problem.
	Comment string `json:"comment"`
	// The author of the comment.
	User string `json:"user"`
	// The context of the comment. It can contain any additional information.
	Context *string `json:"context,omitempty"`
}

// NewPushProblemComment instantiates a new PushProblemComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPushProblemComment(comment string, user string, ) *PushProblemComment {
	this := PushProblemComment{}
	this.Comment = comment
	this.User = user
	return &this
}

// NewPushProblemCommentWithDefaults instantiates a new PushProblemComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPushProblemCommentWithDefaults() *PushProblemComment {
	this := PushProblemComment{}
	return &this
}

// GetComment returns the Comment field value
func (o *PushProblemComment) GetComment() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *PushProblemComment) GetCommentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *PushProblemComment) SetComment(v string) {
	o.Comment = v
}

// GetUser returns the User field value
func (o *PushProblemComment) GetUser() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *PushProblemComment) GetUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *PushProblemComment) SetUser(v string) {
	o.User = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *PushProblemComment) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushProblemComment) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *PushProblemComment) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *PushProblemComment) SetContext(v string) {
	o.Context = &v
}

func (o PushProblemComment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["comment"] = o.Comment
	}
	if true {
		toSerialize["user"] = o.User
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	return json.Marshal(toSerialize)
}

type NullablePushProblemComment struct {
	value *PushProblemComment
	isSet bool
}

func (v NullablePushProblemComment) Get() *PushProblemComment {
	return v.value
}

func (v *NullablePushProblemComment) Set(val *PushProblemComment) {
	v.value = val
	v.isSet = true
}

func (v NullablePushProblemComment) IsSet() bool {
	return v.isSet
}

func (v *NullablePushProblemComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePushProblemComment(val *PushProblemComment) *NullablePushProblemComment {
	return &NullablePushProblemComment{value: val, isSet: true}
}

func (v NullablePushProblemComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePushProblemComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


