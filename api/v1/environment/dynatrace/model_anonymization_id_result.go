/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AnonymizationIdResult struct for AnonymizationIdResult
type AnonymizationIdResult struct {
	// The ID of the newly created anonymization job.
	RequestId *string `json:"requestId,omitempty"`
}

// NewAnonymizationIdResult instantiates a new AnonymizationIdResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnonymizationIdResult() *AnonymizationIdResult {
	this := AnonymizationIdResult{}
	return &this
}

// NewAnonymizationIdResultWithDefaults instantiates a new AnonymizationIdResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnonymizationIdResultWithDefaults() *AnonymizationIdResult {
	this := AnonymizationIdResult{}
	return &this
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *AnonymizationIdResult) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnonymizationIdResult) GetRequestIdOk() (*string, bool) {
	if o == nil || o.RequestId == nil {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *AnonymizationIdResult) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *AnonymizationIdResult) SetRequestId(v string) {
	o.RequestId = &v
}

func (o AnonymizationIdResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RequestId != nil {
		toSerialize["requestId"] = o.RequestId
	}
	return json.Marshal(toSerialize)
}

type NullableAnonymizationIdResult struct {
	value *AnonymizationIdResult
	isSet bool
}

func (v NullableAnonymizationIdResult) Get() *AnonymizationIdResult {
	return v.value
}

func (v *NullableAnonymizationIdResult) Set(val *AnonymizationIdResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAnonymizationIdResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAnonymizationIdResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnonymizationIdResult(val *AnonymizationIdResult) *NullableAnonymizationIdResult {
	return &NullableAnonymizationIdResult{value: val, isSet: true}
}

func (v NullableAnonymizationIdResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnonymizationIdResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


