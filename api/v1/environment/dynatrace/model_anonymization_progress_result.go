/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AnonymizationProgressResult struct for AnonymizationProgressResult
type AnonymizationProgressResult struct {
	// The progress of the anonymization job, percent.   -1 if the job is waiting for execution.
	Progress *int32 `json:"progress,omitempty"`
}

// NewAnonymizationProgressResult instantiates a new AnonymizationProgressResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnonymizationProgressResult() *AnonymizationProgressResult {
	this := AnonymizationProgressResult{}
	return &this
}

// NewAnonymizationProgressResultWithDefaults instantiates a new AnonymizationProgressResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnonymizationProgressResultWithDefaults() *AnonymizationProgressResult {
	this := AnonymizationProgressResult{}
	return &this
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *AnonymizationProgressResult) GetProgress() int32 {
	if o == nil || o.Progress == nil {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnonymizationProgressResult) GetProgressOk() (*int32, bool) {
	if o == nil || o.Progress == nil {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *AnonymizationProgressResult) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *AnonymizationProgressResult) SetProgress(v int32) {
	o.Progress = &v
}

func (o AnonymizationProgressResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Progress != nil {
		toSerialize["progress"] = o.Progress
	}
	return json.Marshal(toSerialize)
}

type NullableAnonymizationProgressResult struct {
	value *AnonymizationProgressResult
	isSet bool
}

func (v NullableAnonymizationProgressResult) Get() *AnonymizationProgressResult {
	return v.value
}

func (v *NullableAnonymizationProgressResult) Set(val *AnonymizationProgressResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAnonymizationProgressResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAnonymizationProgressResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnonymizationProgressResult(val *AnonymizationProgressResult) *NullableAnonymizationProgressResult {
	return &NullableAnonymizationProgressResult{value: val, isSet: true}
}

func (v NullableAnonymizationProgressResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnonymizationProgressResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


