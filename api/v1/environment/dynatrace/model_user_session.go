/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UserSession A [user session](https://dt-url.net/xv183rb8), encompassing multiple user actions and additional information about a user's visit.
type UserSession struct {
	// The ID of the Dynatrace environment that captured the user session.   This field can not be queried via the User Session Query Language.
	TenantId *string `json:"tenantId,omitempty"`
	// The unique ID of the user session.
	UserSessionId *string `json:"userSessionId,omitempty"`
	// The timestamp of the first user action in the user session, in UTC milliseconds.
	StartTime *int64 `json:"startTime,omitempty"`
	// The timestamp of the last user action in the user session, in UTC milliseconds.
	EndTime *int64 `json:"endTime,omitempty"`
	// The duration of the user session, in milliseconds.    This is calculated as the amount of time between the start of the first user action and the end of the last user action.
	Duration *int64 `json:"duration,omitempty"`
	// The unique ID of the user that triggered the user session.
	InternalUserId *string `json:"internalUserId,omitempty"`
	// The type of the user. Indicates either a real human user (`REAL_USER`) or a robot (`ROBOT` or `SYNTHETIC`).
	UserType *string `json:"userType,omitempty"`
	// The reason for no session replay.
	ReasonForNoSessionReplay *string `json:"reasonForNoSessionReplay,omitempty"`
	// The type of the application used in the user session.
	ApplicationType *string `json:"applicationType,omitempty"`
	// The user session has (`true`) or doesn't have (`false`) a bounce.    A bounce means there is only one user action in the user session.
	Bounce *bool `json:"bounce,omitempty"`
	// The user is a first-time (`true`) or a returning user (`false`).
	NewUser *bool `json:"newUser,omitempty"`
	// The number of user actions in the user session.
	UserActionCount *int32 `json:"userActionCount,omitempty"`
	// The number of errors detected in the user session.
	TotalErrorCount *int32 `json:"totalErrorCount,omitempty"`
	// Count of the license credits
	TotalLicenseCreditCount *int32 `json:"totalLicenseCreditCount,omitempty"`
	// The number of conversion goals achieved by the user session.
	MatchingConversionGoalsCount *int32 `json:"matchingConversionGoalsCount,omitempty"`
	// A list of conversion goals achieved by the user session.    Additionally, you can define conversion goals for a single user action.
	MatchingConversionGoals *[]string `json:"matchingConversionGoals,omitempty"`
	// The IP address (IPv4 or IPv6) from which the user session originates.
	Ip *string `json:"ip,omitempty"`
	// The continent from which the user session originates (based on the IP address).
	Continent *string `json:"continent,omitempty"`
	// The country from which the user session originates (based on the IP address).
	Country *string `json:"country,omitempty"`
	// The region from which the user session originates (based on the IP address).
	Region *string `json:"region,omitempty"`
	// The city from which the user session originates (based on the IP address).
	City *string `json:"city,omitempty"`
	// The type of browser used for the user session.
	BrowserType *string `json:"browserType,omitempty"`
	// The family of the browser used for the user session.
	BrowserFamily *string `json:"browserFamily,omitempty"`
	// The version of the browser used for the user session.
	BrowserMajorVersion *string `json:"browserMajorVersion,omitempty"`
	// The type of operating system used for the user session.
	OsFamily *string `json:"osFamily,omitempty"`
	// The version of the operating system used for the user session.
	OsVersion *string `json:"osVersion,omitempty"`
	// The detected manufacturer of the device used for the user session.
	Manufacturer *string `json:"manufacturer,omitempty"`
	// The detected device used for the user session.
	Device *string `json:"device,omitempty"`
	// The user ID provided for the user session by session tagging.
	UserId *string `json:"userId,omitempty"`
	// The detected screen height of the device used for the user session.
	ScreenHeight *int32 `json:"screenHeight,omitempty"`
	// The detected screen width of the device used for the user session.
	ScreenWidth *int32 `json:"screenWidth,omitempty"`
	// The detected screen orientation of the device used on the device for the user session.
	ScreenOrientation *string `json:"screenOrientation,omitempty"`
	// The detected screen resolution of the device used for the user session.
	DisplayResolution *string `json:"displayResolution,omitempty"`
	// The user session includes (`true`) or doesn't include (`false`) a crash.
	HasCrash *bool `json:"hasCrash,omitempty"`
	// Indicates whether the user session has Session Replay.
	HasSessionReplay *bool `json:"hasSessionReplay,omitempty"`
	// The internet service provider from which the user session originates (based on the IP address).
	Isp *string `json:"isp,omitempty"`
	// Additional information about the client.   This field can not be queried via the user session query language. Use the **browserType** field instead.
	ClientType *string `json:"clientType,omitempty"`
	// Reports the id of the browser monitor
	BrowserMonitorId *string `json:"browserMonitorId,omitempty"`
	// Reports the name of the browser monitor
	BrowserMonitorName *string `json:"browserMonitorName,omitempty"`
	// A list of custom properties of the user session with string values.
	StringProperties *[]StringProperty `json:"stringProperties,omitempty"`
	// A list of custom properties of the user session with integer (short or long) values.
	LongProperties *[]LongProperty `json:"longProperties,omitempty"`
	// A list of custom properties of the user session with floating-point numerical values.
	DoubleProperties *[]DoubleProperty `json:"doubleProperties,omitempty"`
	// A list of custom properties of the user session with date values.
	DateProperties *[]DateProperty `json:"dateProperties,omitempty"`
	// A list of user actions recorded in the user session.
	UserActions *[]UserSessionUserAction `json:"userActions,omitempty"`
	// A list of additional events recorded in the user session.
	Events *[]UserSessionEvents `json:"events,omitempty"`
	// A list of errors recorded in the user session.
	Errors *[]UserSessionErrors `json:"errors,omitempty"`
	// A list of synthetic events recorded in the user session.
	SyntheticEvents *[]UserSessionSyntheticEvent `json:"syntheticEvents,omitempty"`
	// The version of the application where the user session has been recorded.    This information is provided by another integration, such as OpenKit.
	AppVersion *string `json:"appVersion,omitempty"`
	// The reason for the end of the user session.
	EndReason *string `json:"endReason,omitempty"`
	// The number of rage clicks detected in the user session.
	NumberOfRageClicks *int32 `json:"numberOfRageClicks,omitempty"`
	// The user experience score of the user session.
	UserExperienceScore *string `json:"userExperienceScore,omitempty"`
	// The carrier information of the mobile user session.
	Carrier *string `json:"carrier,omitempty"`
	// The network technology information of the mobile user session.
	NetworkTechnology *string `json:"networkTechnology,omitempty"`
	// The serialized connection type of the mobile user session.
	ConnectionType *string `json:"connectionType,omitempty"`
	// Epoch time when replay starts
	ReplayStart *int64 `json:"replayStart,omitempty"`
	// Epoch time when replay ends
	ReplayEnd *int64 `json:"replayEnd,omitempty"`
	// Client time offset in milliseconds
	ClientTimeOffset *int32 `json:"clientTimeOffset,omitempty"`
}

// NewUserSession instantiates a new UserSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSession() *UserSession {
	this := UserSession{}
	return &this
}

// NewUserSessionWithDefaults instantiates a new UserSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSessionWithDefaults() *UserSession {
	this := UserSession{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *UserSession) GetTenantId() string {
	if o == nil || o.TenantId == nil {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetTenantIdOk() (*string, bool) {
	if o == nil || o.TenantId == nil {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *UserSession) HasTenantId() bool {
	if o != nil && o.TenantId != nil {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *UserSession) SetTenantId(v string) {
	o.TenantId = &v
}

// GetUserSessionId returns the UserSessionId field value if set, zero value otherwise.
func (o *UserSession) GetUserSessionId() string {
	if o == nil || o.UserSessionId == nil {
		var ret string
		return ret
	}
	return *o.UserSessionId
}

// GetUserSessionIdOk returns a tuple with the UserSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetUserSessionIdOk() (*string, bool) {
	if o == nil || o.UserSessionId == nil {
		return nil, false
	}
	return o.UserSessionId, true
}

// HasUserSessionId returns a boolean if a field has been set.
func (o *UserSession) HasUserSessionId() bool {
	if o != nil && o.UserSessionId != nil {
		return true
	}

	return false
}

// SetUserSessionId gets a reference to the given string and assigns it to the UserSessionId field.
func (o *UserSession) SetUserSessionId(v string) {
	o.UserSessionId = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *UserSession) GetStartTime() int64 {
	if o == nil || o.StartTime == nil {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetStartTimeOk() (*int64, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *UserSession) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *UserSession) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *UserSession) GetEndTime() int64 {
	if o == nil || o.EndTime == nil {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetEndTimeOk() (*int64, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *UserSession) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *UserSession) SetEndTime(v int64) {
	o.EndTime = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *UserSession) GetDuration() int64 {
	if o == nil || o.Duration == nil {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetDurationOk() (*int64, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *UserSession) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *UserSession) SetDuration(v int64) {
	o.Duration = &v
}

// GetInternalUserId returns the InternalUserId field value if set, zero value otherwise.
func (o *UserSession) GetInternalUserId() string {
	if o == nil || o.InternalUserId == nil {
		var ret string
		return ret
	}
	return *o.InternalUserId
}

// GetInternalUserIdOk returns a tuple with the InternalUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetInternalUserIdOk() (*string, bool) {
	if o == nil || o.InternalUserId == nil {
		return nil, false
	}
	return o.InternalUserId, true
}

// HasInternalUserId returns a boolean if a field has been set.
func (o *UserSession) HasInternalUserId() bool {
	if o != nil && o.InternalUserId != nil {
		return true
	}

	return false
}

// SetInternalUserId gets a reference to the given string and assigns it to the InternalUserId field.
func (o *UserSession) SetInternalUserId(v string) {
	o.InternalUserId = &v
}

// GetUserType returns the UserType field value if set, zero value otherwise.
func (o *UserSession) GetUserType() string {
	if o == nil || o.UserType == nil {
		var ret string
		return ret
	}
	return *o.UserType
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetUserTypeOk() (*string, bool) {
	if o == nil || o.UserType == nil {
		return nil, false
	}
	return o.UserType, true
}

// HasUserType returns a boolean if a field has been set.
func (o *UserSession) HasUserType() bool {
	if o != nil && o.UserType != nil {
		return true
	}

	return false
}

// SetUserType gets a reference to the given string and assigns it to the UserType field.
func (o *UserSession) SetUserType(v string) {
	o.UserType = &v
}

// GetReasonForNoSessionReplay returns the ReasonForNoSessionReplay field value if set, zero value otherwise.
func (o *UserSession) GetReasonForNoSessionReplay() string {
	if o == nil || o.ReasonForNoSessionReplay == nil {
		var ret string
		return ret
	}
	return *o.ReasonForNoSessionReplay
}

// GetReasonForNoSessionReplayOk returns a tuple with the ReasonForNoSessionReplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetReasonForNoSessionReplayOk() (*string, bool) {
	if o == nil || o.ReasonForNoSessionReplay == nil {
		return nil, false
	}
	return o.ReasonForNoSessionReplay, true
}

// HasReasonForNoSessionReplay returns a boolean if a field has been set.
func (o *UserSession) HasReasonForNoSessionReplay() bool {
	if o != nil && o.ReasonForNoSessionReplay != nil {
		return true
	}

	return false
}

// SetReasonForNoSessionReplay gets a reference to the given string and assigns it to the ReasonForNoSessionReplay field.
func (o *UserSession) SetReasonForNoSessionReplay(v string) {
	o.ReasonForNoSessionReplay = &v
}

// GetApplicationType returns the ApplicationType field value if set, zero value otherwise.
func (o *UserSession) GetApplicationType() string {
	if o == nil || o.ApplicationType == nil {
		var ret string
		return ret
	}
	return *o.ApplicationType
}

// GetApplicationTypeOk returns a tuple with the ApplicationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetApplicationTypeOk() (*string, bool) {
	if o == nil || o.ApplicationType == nil {
		return nil, false
	}
	return o.ApplicationType, true
}

// HasApplicationType returns a boolean if a field has been set.
func (o *UserSession) HasApplicationType() bool {
	if o != nil && o.ApplicationType != nil {
		return true
	}

	return false
}

// SetApplicationType gets a reference to the given string and assigns it to the ApplicationType field.
func (o *UserSession) SetApplicationType(v string) {
	o.ApplicationType = &v
}

// GetBounce returns the Bounce field value if set, zero value otherwise.
func (o *UserSession) GetBounce() bool {
	if o == nil || o.Bounce == nil {
		var ret bool
		return ret
	}
	return *o.Bounce
}

// GetBounceOk returns a tuple with the Bounce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetBounceOk() (*bool, bool) {
	if o == nil || o.Bounce == nil {
		return nil, false
	}
	return o.Bounce, true
}

// HasBounce returns a boolean if a field has been set.
func (o *UserSession) HasBounce() bool {
	if o != nil && o.Bounce != nil {
		return true
	}

	return false
}

// SetBounce gets a reference to the given bool and assigns it to the Bounce field.
func (o *UserSession) SetBounce(v bool) {
	o.Bounce = &v
}

// GetNewUser returns the NewUser field value if set, zero value otherwise.
func (o *UserSession) GetNewUser() bool {
	if o == nil || o.NewUser == nil {
		var ret bool
		return ret
	}
	return *o.NewUser
}

// GetNewUserOk returns a tuple with the NewUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetNewUserOk() (*bool, bool) {
	if o == nil || o.NewUser == nil {
		return nil, false
	}
	return o.NewUser, true
}

// HasNewUser returns a boolean if a field has been set.
func (o *UserSession) HasNewUser() bool {
	if o != nil && o.NewUser != nil {
		return true
	}

	return false
}

// SetNewUser gets a reference to the given bool and assigns it to the NewUser field.
func (o *UserSession) SetNewUser(v bool) {
	o.NewUser = &v
}

// GetUserActionCount returns the UserActionCount field value if set, zero value otherwise.
func (o *UserSession) GetUserActionCount() int32 {
	if o == nil || o.UserActionCount == nil {
		var ret int32
		return ret
	}
	return *o.UserActionCount
}

// GetUserActionCountOk returns a tuple with the UserActionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetUserActionCountOk() (*int32, bool) {
	if o == nil || o.UserActionCount == nil {
		return nil, false
	}
	return o.UserActionCount, true
}

// HasUserActionCount returns a boolean if a field has been set.
func (o *UserSession) HasUserActionCount() bool {
	if o != nil && o.UserActionCount != nil {
		return true
	}

	return false
}

// SetUserActionCount gets a reference to the given int32 and assigns it to the UserActionCount field.
func (o *UserSession) SetUserActionCount(v int32) {
	o.UserActionCount = &v
}

// GetTotalErrorCount returns the TotalErrorCount field value if set, zero value otherwise.
func (o *UserSession) GetTotalErrorCount() int32 {
	if o == nil || o.TotalErrorCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalErrorCount
}

// GetTotalErrorCountOk returns a tuple with the TotalErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetTotalErrorCountOk() (*int32, bool) {
	if o == nil || o.TotalErrorCount == nil {
		return nil, false
	}
	return o.TotalErrorCount, true
}

// HasTotalErrorCount returns a boolean if a field has been set.
func (o *UserSession) HasTotalErrorCount() bool {
	if o != nil && o.TotalErrorCount != nil {
		return true
	}

	return false
}

// SetTotalErrorCount gets a reference to the given int32 and assigns it to the TotalErrorCount field.
func (o *UserSession) SetTotalErrorCount(v int32) {
	o.TotalErrorCount = &v
}

// GetTotalLicenseCreditCount returns the TotalLicenseCreditCount field value if set, zero value otherwise.
func (o *UserSession) GetTotalLicenseCreditCount() int32 {
	if o == nil || o.TotalLicenseCreditCount == nil {
		var ret int32
		return ret
	}
	return *o.TotalLicenseCreditCount
}

// GetTotalLicenseCreditCountOk returns a tuple with the TotalLicenseCreditCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetTotalLicenseCreditCountOk() (*int32, bool) {
	if o == nil || o.TotalLicenseCreditCount == nil {
		return nil, false
	}
	return o.TotalLicenseCreditCount, true
}

// HasTotalLicenseCreditCount returns a boolean if a field has been set.
func (o *UserSession) HasTotalLicenseCreditCount() bool {
	if o != nil && o.TotalLicenseCreditCount != nil {
		return true
	}

	return false
}

// SetTotalLicenseCreditCount gets a reference to the given int32 and assigns it to the TotalLicenseCreditCount field.
func (o *UserSession) SetTotalLicenseCreditCount(v int32) {
	o.TotalLicenseCreditCount = &v
}

// GetMatchingConversionGoalsCount returns the MatchingConversionGoalsCount field value if set, zero value otherwise.
func (o *UserSession) GetMatchingConversionGoalsCount() int32 {
	if o == nil || o.MatchingConversionGoalsCount == nil {
		var ret int32
		return ret
	}
	return *o.MatchingConversionGoalsCount
}

// GetMatchingConversionGoalsCountOk returns a tuple with the MatchingConversionGoalsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetMatchingConversionGoalsCountOk() (*int32, bool) {
	if o == nil || o.MatchingConversionGoalsCount == nil {
		return nil, false
	}
	return o.MatchingConversionGoalsCount, true
}

// HasMatchingConversionGoalsCount returns a boolean if a field has been set.
func (o *UserSession) HasMatchingConversionGoalsCount() bool {
	if o != nil && o.MatchingConversionGoalsCount != nil {
		return true
	}

	return false
}

// SetMatchingConversionGoalsCount gets a reference to the given int32 and assigns it to the MatchingConversionGoalsCount field.
func (o *UserSession) SetMatchingConversionGoalsCount(v int32) {
	o.MatchingConversionGoalsCount = &v
}

// GetMatchingConversionGoals returns the MatchingConversionGoals field value if set, zero value otherwise.
func (o *UserSession) GetMatchingConversionGoals() []string {
	if o == nil || o.MatchingConversionGoals == nil {
		var ret []string
		return ret
	}
	return *o.MatchingConversionGoals
}

// GetMatchingConversionGoalsOk returns a tuple with the MatchingConversionGoals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetMatchingConversionGoalsOk() (*[]string, bool) {
	if o == nil || o.MatchingConversionGoals == nil {
		return nil, false
	}
	return o.MatchingConversionGoals, true
}

// HasMatchingConversionGoals returns a boolean if a field has been set.
func (o *UserSession) HasMatchingConversionGoals() bool {
	if o != nil && o.MatchingConversionGoals != nil {
		return true
	}

	return false
}

// SetMatchingConversionGoals gets a reference to the given []string and assigns it to the MatchingConversionGoals field.
func (o *UserSession) SetMatchingConversionGoals(v []string) {
	o.MatchingConversionGoals = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *UserSession) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *UserSession) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *UserSession) SetIp(v string) {
	o.Ip = &v
}

// GetContinent returns the Continent field value if set, zero value otherwise.
func (o *UserSession) GetContinent() string {
	if o == nil || o.Continent == nil {
		var ret string
		return ret
	}
	return *o.Continent
}

// GetContinentOk returns a tuple with the Continent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetContinentOk() (*string, bool) {
	if o == nil || o.Continent == nil {
		return nil, false
	}
	return o.Continent, true
}

// HasContinent returns a boolean if a field has been set.
func (o *UserSession) HasContinent() bool {
	if o != nil && o.Continent != nil {
		return true
	}

	return false
}

// SetContinent gets a reference to the given string and assigns it to the Continent field.
func (o *UserSession) SetContinent(v string) {
	o.Continent = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *UserSession) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *UserSession) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *UserSession) SetCountry(v string) {
	o.Country = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *UserSession) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *UserSession) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *UserSession) SetRegion(v string) {
	o.Region = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *UserSession) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *UserSession) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *UserSession) SetCity(v string) {
	o.City = &v
}

// GetBrowserType returns the BrowserType field value if set, zero value otherwise.
func (o *UserSession) GetBrowserType() string {
	if o == nil || o.BrowserType == nil {
		var ret string
		return ret
	}
	return *o.BrowserType
}

// GetBrowserTypeOk returns a tuple with the BrowserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetBrowserTypeOk() (*string, bool) {
	if o == nil || o.BrowserType == nil {
		return nil, false
	}
	return o.BrowserType, true
}

// HasBrowserType returns a boolean if a field has been set.
func (o *UserSession) HasBrowserType() bool {
	if o != nil && o.BrowserType != nil {
		return true
	}

	return false
}

// SetBrowserType gets a reference to the given string and assigns it to the BrowserType field.
func (o *UserSession) SetBrowserType(v string) {
	o.BrowserType = &v
}

// GetBrowserFamily returns the BrowserFamily field value if set, zero value otherwise.
func (o *UserSession) GetBrowserFamily() string {
	if o == nil || o.BrowserFamily == nil {
		var ret string
		return ret
	}
	return *o.BrowserFamily
}

// GetBrowserFamilyOk returns a tuple with the BrowserFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetBrowserFamilyOk() (*string, bool) {
	if o == nil || o.BrowserFamily == nil {
		return nil, false
	}
	return o.BrowserFamily, true
}

// HasBrowserFamily returns a boolean if a field has been set.
func (o *UserSession) HasBrowserFamily() bool {
	if o != nil && o.BrowserFamily != nil {
		return true
	}

	return false
}

// SetBrowserFamily gets a reference to the given string and assigns it to the BrowserFamily field.
func (o *UserSession) SetBrowserFamily(v string) {
	o.BrowserFamily = &v
}

// GetBrowserMajorVersion returns the BrowserMajorVersion field value if set, zero value otherwise.
func (o *UserSession) GetBrowserMajorVersion() string {
	if o == nil || o.BrowserMajorVersion == nil {
		var ret string
		return ret
	}
	return *o.BrowserMajorVersion
}

// GetBrowserMajorVersionOk returns a tuple with the BrowserMajorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetBrowserMajorVersionOk() (*string, bool) {
	if o == nil || o.BrowserMajorVersion == nil {
		return nil, false
	}
	return o.BrowserMajorVersion, true
}

// HasBrowserMajorVersion returns a boolean if a field has been set.
func (o *UserSession) HasBrowserMajorVersion() bool {
	if o != nil && o.BrowserMajorVersion != nil {
		return true
	}

	return false
}

// SetBrowserMajorVersion gets a reference to the given string and assigns it to the BrowserMajorVersion field.
func (o *UserSession) SetBrowserMajorVersion(v string) {
	o.BrowserMajorVersion = &v
}

// GetOsFamily returns the OsFamily field value if set, zero value otherwise.
func (o *UserSession) GetOsFamily() string {
	if o == nil || o.OsFamily == nil {
		var ret string
		return ret
	}
	return *o.OsFamily
}

// GetOsFamilyOk returns a tuple with the OsFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetOsFamilyOk() (*string, bool) {
	if o == nil || o.OsFamily == nil {
		return nil, false
	}
	return o.OsFamily, true
}

// HasOsFamily returns a boolean if a field has been set.
func (o *UserSession) HasOsFamily() bool {
	if o != nil && o.OsFamily != nil {
		return true
	}

	return false
}

// SetOsFamily gets a reference to the given string and assigns it to the OsFamily field.
func (o *UserSession) SetOsFamily(v string) {
	o.OsFamily = &v
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise.
func (o *UserSession) GetOsVersion() string {
	if o == nil || o.OsVersion == nil {
		var ret string
		return ret
	}
	return *o.OsVersion
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetOsVersionOk() (*string, bool) {
	if o == nil || o.OsVersion == nil {
		return nil, false
	}
	return o.OsVersion, true
}

// HasOsVersion returns a boolean if a field has been set.
func (o *UserSession) HasOsVersion() bool {
	if o != nil && o.OsVersion != nil {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given string and assigns it to the OsVersion field.
func (o *UserSession) SetOsVersion(v string) {
	o.OsVersion = &v
}

// GetManufacturer returns the Manufacturer field value if set, zero value otherwise.
func (o *UserSession) GetManufacturer() string {
	if o == nil || o.Manufacturer == nil {
		var ret string
		return ret
	}
	return *o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetManufacturerOk() (*string, bool) {
	if o == nil || o.Manufacturer == nil {
		return nil, false
	}
	return o.Manufacturer, true
}

// HasManufacturer returns a boolean if a field has been set.
func (o *UserSession) HasManufacturer() bool {
	if o != nil && o.Manufacturer != nil {
		return true
	}

	return false
}

// SetManufacturer gets a reference to the given string and assigns it to the Manufacturer field.
func (o *UserSession) SetManufacturer(v string) {
	o.Manufacturer = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *UserSession) GetDevice() string {
	if o == nil || o.Device == nil {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetDeviceOk() (*string, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *UserSession) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *UserSession) SetDevice(v string) {
	o.Device = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserSession) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserSession) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserSession) SetUserId(v string) {
	o.UserId = &v
}

// GetScreenHeight returns the ScreenHeight field value if set, zero value otherwise.
func (o *UserSession) GetScreenHeight() int32 {
	if o == nil || o.ScreenHeight == nil {
		var ret int32
		return ret
	}
	return *o.ScreenHeight
}

// GetScreenHeightOk returns a tuple with the ScreenHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetScreenHeightOk() (*int32, bool) {
	if o == nil || o.ScreenHeight == nil {
		return nil, false
	}
	return o.ScreenHeight, true
}

// HasScreenHeight returns a boolean if a field has been set.
func (o *UserSession) HasScreenHeight() bool {
	if o != nil && o.ScreenHeight != nil {
		return true
	}

	return false
}

// SetScreenHeight gets a reference to the given int32 and assigns it to the ScreenHeight field.
func (o *UserSession) SetScreenHeight(v int32) {
	o.ScreenHeight = &v
}

// GetScreenWidth returns the ScreenWidth field value if set, zero value otherwise.
func (o *UserSession) GetScreenWidth() int32 {
	if o == nil || o.ScreenWidth == nil {
		var ret int32
		return ret
	}
	return *o.ScreenWidth
}

// GetScreenWidthOk returns a tuple with the ScreenWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetScreenWidthOk() (*int32, bool) {
	if o == nil || o.ScreenWidth == nil {
		return nil, false
	}
	return o.ScreenWidth, true
}

// HasScreenWidth returns a boolean if a field has been set.
func (o *UserSession) HasScreenWidth() bool {
	if o != nil && o.ScreenWidth != nil {
		return true
	}

	return false
}

// SetScreenWidth gets a reference to the given int32 and assigns it to the ScreenWidth field.
func (o *UserSession) SetScreenWidth(v int32) {
	o.ScreenWidth = &v
}

// GetScreenOrientation returns the ScreenOrientation field value if set, zero value otherwise.
func (o *UserSession) GetScreenOrientation() string {
	if o == nil || o.ScreenOrientation == nil {
		var ret string
		return ret
	}
	return *o.ScreenOrientation
}

// GetScreenOrientationOk returns a tuple with the ScreenOrientation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetScreenOrientationOk() (*string, bool) {
	if o == nil || o.ScreenOrientation == nil {
		return nil, false
	}
	return o.ScreenOrientation, true
}

// HasScreenOrientation returns a boolean if a field has been set.
func (o *UserSession) HasScreenOrientation() bool {
	if o != nil && o.ScreenOrientation != nil {
		return true
	}

	return false
}

// SetScreenOrientation gets a reference to the given string and assigns it to the ScreenOrientation field.
func (o *UserSession) SetScreenOrientation(v string) {
	o.ScreenOrientation = &v
}

// GetDisplayResolution returns the DisplayResolution field value if set, zero value otherwise.
func (o *UserSession) GetDisplayResolution() string {
	if o == nil || o.DisplayResolution == nil {
		var ret string
		return ret
	}
	return *o.DisplayResolution
}

// GetDisplayResolutionOk returns a tuple with the DisplayResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetDisplayResolutionOk() (*string, bool) {
	if o == nil || o.DisplayResolution == nil {
		return nil, false
	}
	return o.DisplayResolution, true
}

// HasDisplayResolution returns a boolean if a field has been set.
func (o *UserSession) HasDisplayResolution() bool {
	if o != nil && o.DisplayResolution != nil {
		return true
	}

	return false
}

// SetDisplayResolution gets a reference to the given string and assigns it to the DisplayResolution field.
func (o *UserSession) SetDisplayResolution(v string) {
	o.DisplayResolution = &v
}

// GetHasCrash returns the HasCrash field value if set, zero value otherwise.
func (o *UserSession) GetHasCrash() bool {
	if o == nil || o.HasCrash == nil {
		var ret bool
		return ret
	}
	return *o.HasCrash
}

// GetHasCrashOk returns a tuple with the HasCrash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetHasCrashOk() (*bool, bool) {
	if o == nil || o.HasCrash == nil {
		return nil, false
	}
	return o.HasCrash, true
}

// HasHasCrash returns a boolean if a field has been set.
func (o *UserSession) HasHasCrash() bool {
	if o != nil && o.HasCrash != nil {
		return true
	}

	return false
}

// SetHasCrash gets a reference to the given bool and assigns it to the HasCrash field.
func (o *UserSession) SetHasCrash(v bool) {
	o.HasCrash = &v
}

// GetHasSessionReplay returns the HasSessionReplay field value if set, zero value otherwise.
func (o *UserSession) GetHasSessionReplay() bool {
	if o == nil || o.HasSessionReplay == nil {
		var ret bool
		return ret
	}
	return *o.HasSessionReplay
}

// GetHasSessionReplayOk returns a tuple with the HasSessionReplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetHasSessionReplayOk() (*bool, bool) {
	if o == nil || o.HasSessionReplay == nil {
		return nil, false
	}
	return o.HasSessionReplay, true
}

// HasHasSessionReplay returns a boolean if a field has been set.
func (o *UserSession) HasHasSessionReplay() bool {
	if o != nil && o.HasSessionReplay != nil {
		return true
	}

	return false
}

// SetHasSessionReplay gets a reference to the given bool and assigns it to the HasSessionReplay field.
func (o *UserSession) SetHasSessionReplay(v bool) {
	o.HasSessionReplay = &v
}

// GetIsp returns the Isp field value if set, zero value otherwise.
func (o *UserSession) GetIsp() string {
	if o == nil || o.Isp == nil {
		var ret string
		return ret
	}
	return *o.Isp
}

// GetIspOk returns a tuple with the Isp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetIspOk() (*string, bool) {
	if o == nil || o.Isp == nil {
		return nil, false
	}
	return o.Isp, true
}

// HasIsp returns a boolean if a field has been set.
func (o *UserSession) HasIsp() bool {
	if o != nil && o.Isp != nil {
		return true
	}

	return false
}

// SetIsp gets a reference to the given string and assigns it to the Isp field.
func (o *UserSession) SetIsp(v string) {
	o.Isp = &v
}

// GetClientType returns the ClientType field value if set, zero value otherwise.
func (o *UserSession) GetClientType() string {
	if o == nil || o.ClientType == nil {
		var ret string
		return ret
	}
	return *o.ClientType
}

// GetClientTypeOk returns a tuple with the ClientType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetClientTypeOk() (*string, bool) {
	if o == nil || o.ClientType == nil {
		return nil, false
	}
	return o.ClientType, true
}

// HasClientType returns a boolean if a field has been set.
func (o *UserSession) HasClientType() bool {
	if o != nil && o.ClientType != nil {
		return true
	}

	return false
}

// SetClientType gets a reference to the given string and assigns it to the ClientType field.
func (o *UserSession) SetClientType(v string) {
	o.ClientType = &v
}

// GetBrowserMonitorId returns the BrowserMonitorId field value if set, zero value otherwise.
func (o *UserSession) GetBrowserMonitorId() string {
	if o == nil || o.BrowserMonitorId == nil {
		var ret string
		return ret
	}
	return *o.BrowserMonitorId
}

// GetBrowserMonitorIdOk returns a tuple with the BrowserMonitorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetBrowserMonitorIdOk() (*string, bool) {
	if o == nil || o.BrowserMonitorId == nil {
		return nil, false
	}
	return o.BrowserMonitorId, true
}

// HasBrowserMonitorId returns a boolean if a field has been set.
func (o *UserSession) HasBrowserMonitorId() bool {
	if o != nil && o.BrowserMonitorId != nil {
		return true
	}

	return false
}

// SetBrowserMonitorId gets a reference to the given string and assigns it to the BrowserMonitorId field.
func (o *UserSession) SetBrowserMonitorId(v string) {
	o.BrowserMonitorId = &v
}

// GetBrowserMonitorName returns the BrowserMonitorName field value if set, zero value otherwise.
func (o *UserSession) GetBrowserMonitorName() string {
	if o == nil || o.BrowserMonitorName == nil {
		var ret string
		return ret
	}
	return *o.BrowserMonitorName
}

// GetBrowserMonitorNameOk returns a tuple with the BrowserMonitorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetBrowserMonitorNameOk() (*string, bool) {
	if o == nil || o.BrowserMonitorName == nil {
		return nil, false
	}
	return o.BrowserMonitorName, true
}

// HasBrowserMonitorName returns a boolean if a field has been set.
func (o *UserSession) HasBrowserMonitorName() bool {
	if o != nil && o.BrowserMonitorName != nil {
		return true
	}

	return false
}

// SetBrowserMonitorName gets a reference to the given string and assigns it to the BrowserMonitorName field.
func (o *UserSession) SetBrowserMonitorName(v string) {
	o.BrowserMonitorName = &v
}

// GetStringProperties returns the StringProperties field value if set, zero value otherwise.
func (o *UserSession) GetStringProperties() []StringProperty {
	if o == nil || o.StringProperties == nil {
		var ret []StringProperty
		return ret
	}
	return *o.StringProperties
}

// GetStringPropertiesOk returns a tuple with the StringProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetStringPropertiesOk() (*[]StringProperty, bool) {
	if o == nil || o.StringProperties == nil {
		return nil, false
	}
	return o.StringProperties, true
}

// HasStringProperties returns a boolean if a field has been set.
func (o *UserSession) HasStringProperties() bool {
	if o != nil && o.StringProperties != nil {
		return true
	}

	return false
}

// SetStringProperties gets a reference to the given []StringProperty and assigns it to the StringProperties field.
func (o *UserSession) SetStringProperties(v []StringProperty) {
	o.StringProperties = &v
}

// GetLongProperties returns the LongProperties field value if set, zero value otherwise.
func (o *UserSession) GetLongProperties() []LongProperty {
	if o == nil || o.LongProperties == nil {
		var ret []LongProperty
		return ret
	}
	return *o.LongProperties
}

// GetLongPropertiesOk returns a tuple with the LongProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetLongPropertiesOk() (*[]LongProperty, bool) {
	if o == nil || o.LongProperties == nil {
		return nil, false
	}
	return o.LongProperties, true
}

// HasLongProperties returns a boolean if a field has been set.
func (o *UserSession) HasLongProperties() bool {
	if o != nil && o.LongProperties != nil {
		return true
	}

	return false
}

// SetLongProperties gets a reference to the given []LongProperty and assigns it to the LongProperties field.
func (o *UserSession) SetLongProperties(v []LongProperty) {
	o.LongProperties = &v
}

// GetDoubleProperties returns the DoubleProperties field value if set, zero value otherwise.
func (o *UserSession) GetDoubleProperties() []DoubleProperty {
	if o == nil || o.DoubleProperties == nil {
		var ret []DoubleProperty
		return ret
	}
	return *o.DoubleProperties
}

// GetDoublePropertiesOk returns a tuple with the DoubleProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetDoublePropertiesOk() (*[]DoubleProperty, bool) {
	if o == nil || o.DoubleProperties == nil {
		return nil, false
	}
	return o.DoubleProperties, true
}

// HasDoubleProperties returns a boolean if a field has been set.
func (o *UserSession) HasDoubleProperties() bool {
	if o != nil && o.DoubleProperties != nil {
		return true
	}

	return false
}

// SetDoubleProperties gets a reference to the given []DoubleProperty and assigns it to the DoubleProperties field.
func (o *UserSession) SetDoubleProperties(v []DoubleProperty) {
	o.DoubleProperties = &v
}

// GetDateProperties returns the DateProperties field value if set, zero value otherwise.
func (o *UserSession) GetDateProperties() []DateProperty {
	if o == nil || o.DateProperties == nil {
		var ret []DateProperty
		return ret
	}
	return *o.DateProperties
}

// GetDatePropertiesOk returns a tuple with the DateProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetDatePropertiesOk() (*[]DateProperty, bool) {
	if o == nil || o.DateProperties == nil {
		return nil, false
	}
	return o.DateProperties, true
}

// HasDateProperties returns a boolean if a field has been set.
func (o *UserSession) HasDateProperties() bool {
	if o != nil && o.DateProperties != nil {
		return true
	}

	return false
}

// SetDateProperties gets a reference to the given []DateProperty and assigns it to the DateProperties field.
func (o *UserSession) SetDateProperties(v []DateProperty) {
	o.DateProperties = &v
}

// GetUserActions returns the UserActions field value if set, zero value otherwise.
func (o *UserSession) GetUserActions() []UserSessionUserAction {
	if o == nil || o.UserActions == nil {
		var ret []UserSessionUserAction
		return ret
	}
	return *o.UserActions
}

// GetUserActionsOk returns a tuple with the UserActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetUserActionsOk() (*[]UserSessionUserAction, bool) {
	if o == nil || o.UserActions == nil {
		return nil, false
	}
	return o.UserActions, true
}

// HasUserActions returns a boolean if a field has been set.
func (o *UserSession) HasUserActions() bool {
	if o != nil && o.UserActions != nil {
		return true
	}

	return false
}

// SetUserActions gets a reference to the given []UserSessionUserAction and assigns it to the UserActions field.
func (o *UserSession) SetUserActions(v []UserSessionUserAction) {
	o.UserActions = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *UserSession) GetEvents() []UserSessionEvents {
	if o == nil || o.Events == nil {
		var ret []UserSessionEvents
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetEventsOk() (*[]UserSessionEvents, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *UserSession) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []UserSessionEvents and assigns it to the Events field.
func (o *UserSession) SetEvents(v []UserSessionEvents) {
	o.Events = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *UserSession) GetErrors() []UserSessionErrors {
	if o == nil || o.Errors == nil {
		var ret []UserSessionErrors
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetErrorsOk() (*[]UserSessionErrors, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *UserSession) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []UserSessionErrors and assigns it to the Errors field.
func (o *UserSession) SetErrors(v []UserSessionErrors) {
	o.Errors = &v
}

// GetSyntheticEvents returns the SyntheticEvents field value if set, zero value otherwise.
func (o *UserSession) GetSyntheticEvents() []UserSessionSyntheticEvent {
	if o == nil || o.SyntheticEvents == nil {
		var ret []UserSessionSyntheticEvent
		return ret
	}
	return *o.SyntheticEvents
}

// GetSyntheticEventsOk returns a tuple with the SyntheticEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetSyntheticEventsOk() (*[]UserSessionSyntheticEvent, bool) {
	if o == nil || o.SyntheticEvents == nil {
		return nil, false
	}
	return o.SyntheticEvents, true
}

// HasSyntheticEvents returns a boolean if a field has been set.
func (o *UserSession) HasSyntheticEvents() bool {
	if o != nil && o.SyntheticEvents != nil {
		return true
	}

	return false
}

// SetSyntheticEvents gets a reference to the given []UserSessionSyntheticEvent and assigns it to the SyntheticEvents field.
func (o *UserSession) SetSyntheticEvents(v []UserSessionSyntheticEvent) {
	o.SyntheticEvents = &v
}

// GetAppVersion returns the AppVersion field value if set, zero value otherwise.
func (o *UserSession) GetAppVersion() string {
	if o == nil || o.AppVersion == nil {
		var ret string
		return ret
	}
	return *o.AppVersion
}

// GetAppVersionOk returns a tuple with the AppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetAppVersionOk() (*string, bool) {
	if o == nil || o.AppVersion == nil {
		return nil, false
	}
	return o.AppVersion, true
}

// HasAppVersion returns a boolean if a field has been set.
func (o *UserSession) HasAppVersion() bool {
	if o != nil && o.AppVersion != nil {
		return true
	}

	return false
}

// SetAppVersion gets a reference to the given string and assigns it to the AppVersion field.
func (o *UserSession) SetAppVersion(v string) {
	o.AppVersion = &v
}

// GetEndReason returns the EndReason field value if set, zero value otherwise.
func (o *UserSession) GetEndReason() string {
	if o == nil || o.EndReason == nil {
		var ret string
		return ret
	}
	return *o.EndReason
}

// GetEndReasonOk returns a tuple with the EndReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetEndReasonOk() (*string, bool) {
	if o == nil || o.EndReason == nil {
		return nil, false
	}
	return o.EndReason, true
}

// HasEndReason returns a boolean if a field has been set.
func (o *UserSession) HasEndReason() bool {
	if o != nil && o.EndReason != nil {
		return true
	}

	return false
}

// SetEndReason gets a reference to the given string and assigns it to the EndReason field.
func (o *UserSession) SetEndReason(v string) {
	o.EndReason = &v
}

// GetNumberOfRageClicks returns the NumberOfRageClicks field value if set, zero value otherwise.
func (o *UserSession) GetNumberOfRageClicks() int32 {
	if o == nil || o.NumberOfRageClicks == nil {
		var ret int32
		return ret
	}
	return *o.NumberOfRageClicks
}

// GetNumberOfRageClicksOk returns a tuple with the NumberOfRageClicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetNumberOfRageClicksOk() (*int32, bool) {
	if o == nil || o.NumberOfRageClicks == nil {
		return nil, false
	}
	return o.NumberOfRageClicks, true
}

// HasNumberOfRageClicks returns a boolean if a field has been set.
func (o *UserSession) HasNumberOfRageClicks() bool {
	if o != nil && o.NumberOfRageClicks != nil {
		return true
	}

	return false
}

// SetNumberOfRageClicks gets a reference to the given int32 and assigns it to the NumberOfRageClicks field.
func (o *UserSession) SetNumberOfRageClicks(v int32) {
	o.NumberOfRageClicks = &v
}

// GetUserExperienceScore returns the UserExperienceScore field value if set, zero value otherwise.
func (o *UserSession) GetUserExperienceScore() string {
	if o == nil || o.UserExperienceScore == nil {
		var ret string
		return ret
	}
	return *o.UserExperienceScore
}

// GetUserExperienceScoreOk returns a tuple with the UserExperienceScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetUserExperienceScoreOk() (*string, bool) {
	if o == nil || o.UserExperienceScore == nil {
		return nil, false
	}
	return o.UserExperienceScore, true
}

// HasUserExperienceScore returns a boolean if a field has been set.
func (o *UserSession) HasUserExperienceScore() bool {
	if o != nil && o.UserExperienceScore != nil {
		return true
	}

	return false
}

// SetUserExperienceScore gets a reference to the given string and assigns it to the UserExperienceScore field.
func (o *UserSession) SetUserExperienceScore(v string) {
	o.UserExperienceScore = &v
}

// GetCarrier returns the Carrier field value if set, zero value otherwise.
func (o *UserSession) GetCarrier() string {
	if o == nil || o.Carrier == nil {
		var ret string
		return ret
	}
	return *o.Carrier
}

// GetCarrierOk returns a tuple with the Carrier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetCarrierOk() (*string, bool) {
	if o == nil || o.Carrier == nil {
		return nil, false
	}
	return o.Carrier, true
}

// HasCarrier returns a boolean if a field has been set.
func (o *UserSession) HasCarrier() bool {
	if o != nil && o.Carrier != nil {
		return true
	}

	return false
}

// SetCarrier gets a reference to the given string and assigns it to the Carrier field.
func (o *UserSession) SetCarrier(v string) {
	o.Carrier = &v
}

// GetNetworkTechnology returns the NetworkTechnology field value if set, zero value otherwise.
func (o *UserSession) GetNetworkTechnology() string {
	if o == nil || o.NetworkTechnology == nil {
		var ret string
		return ret
	}
	return *o.NetworkTechnology
}

// GetNetworkTechnologyOk returns a tuple with the NetworkTechnology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetNetworkTechnologyOk() (*string, bool) {
	if o == nil || o.NetworkTechnology == nil {
		return nil, false
	}
	return o.NetworkTechnology, true
}

// HasNetworkTechnology returns a boolean if a field has been set.
func (o *UserSession) HasNetworkTechnology() bool {
	if o != nil && o.NetworkTechnology != nil {
		return true
	}

	return false
}

// SetNetworkTechnology gets a reference to the given string and assigns it to the NetworkTechnology field.
func (o *UserSession) SetNetworkTechnology(v string) {
	o.NetworkTechnology = &v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *UserSession) GetConnectionType() string {
	if o == nil || o.ConnectionType == nil {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetConnectionTypeOk() (*string, bool) {
	if o == nil || o.ConnectionType == nil {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *UserSession) HasConnectionType() bool {
	if o != nil && o.ConnectionType != nil {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *UserSession) SetConnectionType(v string) {
	o.ConnectionType = &v
}

// GetReplayStart returns the ReplayStart field value if set, zero value otherwise.
func (o *UserSession) GetReplayStart() int64 {
	if o == nil || o.ReplayStart == nil {
		var ret int64
		return ret
	}
	return *o.ReplayStart
}

// GetReplayStartOk returns a tuple with the ReplayStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetReplayStartOk() (*int64, bool) {
	if o == nil || o.ReplayStart == nil {
		return nil, false
	}
	return o.ReplayStart, true
}

// HasReplayStart returns a boolean if a field has been set.
func (o *UserSession) HasReplayStart() bool {
	if o != nil && o.ReplayStart != nil {
		return true
	}

	return false
}

// SetReplayStart gets a reference to the given int64 and assigns it to the ReplayStart field.
func (o *UserSession) SetReplayStart(v int64) {
	o.ReplayStart = &v
}

// GetReplayEnd returns the ReplayEnd field value if set, zero value otherwise.
func (o *UserSession) GetReplayEnd() int64 {
	if o == nil || o.ReplayEnd == nil {
		var ret int64
		return ret
	}
	return *o.ReplayEnd
}

// GetReplayEndOk returns a tuple with the ReplayEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetReplayEndOk() (*int64, bool) {
	if o == nil || o.ReplayEnd == nil {
		return nil, false
	}
	return o.ReplayEnd, true
}

// HasReplayEnd returns a boolean if a field has been set.
func (o *UserSession) HasReplayEnd() bool {
	if o != nil && o.ReplayEnd != nil {
		return true
	}

	return false
}

// SetReplayEnd gets a reference to the given int64 and assigns it to the ReplayEnd field.
func (o *UserSession) SetReplayEnd(v int64) {
	o.ReplayEnd = &v
}

// GetClientTimeOffset returns the ClientTimeOffset field value if set, zero value otherwise.
func (o *UserSession) GetClientTimeOffset() int32 {
	if o == nil || o.ClientTimeOffset == nil {
		var ret int32
		return ret
	}
	return *o.ClientTimeOffset
}

// GetClientTimeOffsetOk returns a tuple with the ClientTimeOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetClientTimeOffsetOk() (*int32, bool) {
	if o == nil || o.ClientTimeOffset == nil {
		return nil, false
	}
	return o.ClientTimeOffset, true
}

// HasClientTimeOffset returns a boolean if a field has been set.
func (o *UserSession) HasClientTimeOffset() bool {
	if o != nil && o.ClientTimeOffset != nil {
		return true
	}

	return false
}

// SetClientTimeOffset gets a reference to the given int32 and assigns it to the ClientTimeOffset field.
func (o *UserSession) SetClientTimeOffset(v int32) {
	o.ClientTimeOffset = &v
}

func (o UserSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TenantId != nil {
		toSerialize["tenantId"] = o.TenantId
	}
	if o.UserSessionId != nil {
		toSerialize["userSessionId"] = o.UserSessionId
	}
	if o.StartTime != nil {
		toSerialize["startTime"] = o.StartTime
	}
	if o.EndTime != nil {
		toSerialize["endTime"] = o.EndTime
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.InternalUserId != nil {
		toSerialize["internalUserId"] = o.InternalUserId
	}
	if o.UserType != nil {
		toSerialize["userType"] = o.UserType
	}
	if o.ReasonForNoSessionReplay != nil {
		toSerialize["reasonForNoSessionReplay"] = o.ReasonForNoSessionReplay
	}
	if o.ApplicationType != nil {
		toSerialize["applicationType"] = o.ApplicationType
	}
	if o.Bounce != nil {
		toSerialize["bounce"] = o.Bounce
	}
	if o.NewUser != nil {
		toSerialize["newUser"] = o.NewUser
	}
	if o.UserActionCount != nil {
		toSerialize["userActionCount"] = o.UserActionCount
	}
	if o.TotalErrorCount != nil {
		toSerialize["totalErrorCount"] = o.TotalErrorCount
	}
	if o.TotalLicenseCreditCount != nil {
		toSerialize["totalLicenseCreditCount"] = o.TotalLicenseCreditCount
	}
	if o.MatchingConversionGoalsCount != nil {
		toSerialize["matchingConversionGoalsCount"] = o.MatchingConversionGoalsCount
	}
	if o.MatchingConversionGoals != nil {
		toSerialize["matchingConversionGoals"] = o.MatchingConversionGoals
	}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	if o.Continent != nil {
		toSerialize["continent"] = o.Continent
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.BrowserType != nil {
		toSerialize["browserType"] = o.BrowserType
	}
	if o.BrowserFamily != nil {
		toSerialize["browserFamily"] = o.BrowserFamily
	}
	if o.BrowserMajorVersion != nil {
		toSerialize["browserMajorVersion"] = o.BrowserMajorVersion
	}
	if o.OsFamily != nil {
		toSerialize["osFamily"] = o.OsFamily
	}
	if o.OsVersion != nil {
		toSerialize["osVersion"] = o.OsVersion
	}
	if o.Manufacturer != nil {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if o.Device != nil {
		toSerialize["device"] = o.Device
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.ScreenHeight != nil {
		toSerialize["screenHeight"] = o.ScreenHeight
	}
	if o.ScreenWidth != nil {
		toSerialize["screenWidth"] = o.ScreenWidth
	}
	if o.ScreenOrientation != nil {
		toSerialize["screenOrientation"] = o.ScreenOrientation
	}
	if o.DisplayResolution != nil {
		toSerialize["displayResolution"] = o.DisplayResolution
	}
	if o.HasCrash != nil {
		toSerialize["hasCrash"] = o.HasCrash
	}
	if o.HasSessionReplay != nil {
		toSerialize["hasSessionReplay"] = o.HasSessionReplay
	}
	if o.Isp != nil {
		toSerialize["isp"] = o.Isp
	}
	if o.ClientType != nil {
		toSerialize["clientType"] = o.ClientType
	}
	if o.BrowserMonitorId != nil {
		toSerialize["browserMonitorId"] = o.BrowserMonitorId
	}
	if o.BrowserMonitorName != nil {
		toSerialize["browserMonitorName"] = o.BrowserMonitorName
	}
	if o.StringProperties != nil {
		toSerialize["stringProperties"] = o.StringProperties
	}
	if o.LongProperties != nil {
		toSerialize["longProperties"] = o.LongProperties
	}
	if o.DoubleProperties != nil {
		toSerialize["doubleProperties"] = o.DoubleProperties
	}
	if o.DateProperties != nil {
		toSerialize["dateProperties"] = o.DateProperties
	}
	if o.UserActions != nil {
		toSerialize["userActions"] = o.UserActions
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.SyntheticEvents != nil {
		toSerialize["syntheticEvents"] = o.SyntheticEvents
	}
	if o.AppVersion != nil {
		toSerialize["appVersion"] = o.AppVersion
	}
	if o.EndReason != nil {
		toSerialize["endReason"] = o.EndReason
	}
	if o.NumberOfRageClicks != nil {
		toSerialize["numberOfRageClicks"] = o.NumberOfRageClicks
	}
	if o.UserExperienceScore != nil {
		toSerialize["userExperienceScore"] = o.UserExperienceScore
	}
	if o.Carrier != nil {
		toSerialize["carrier"] = o.Carrier
	}
	if o.NetworkTechnology != nil {
		toSerialize["networkTechnology"] = o.NetworkTechnology
	}
	if o.ConnectionType != nil {
		toSerialize["connectionType"] = o.ConnectionType
	}
	if o.ReplayStart != nil {
		toSerialize["replayStart"] = o.ReplayStart
	}
	if o.ReplayEnd != nil {
		toSerialize["replayEnd"] = o.ReplayEnd
	}
	if o.ClientTimeOffset != nil {
		toSerialize["clientTimeOffset"] = o.ClientTimeOffset
	}
	return json.Marshal(toSerialize)
}

type NullableUserSession struct {
	value *UserSession
	isSet bool
}

func (v NullableUserSession) Get() *UserSession {
	return v.value
}

func (v *NullableUserSession) Set(val *UserSession) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSession) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSession(val *UserSession) *NullableUserSession {
	return &NullableUserSession{value: val, isSet: true}
}

func (v NullableUserSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


