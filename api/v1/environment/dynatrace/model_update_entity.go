/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UpdateEntity A list of tags to be assigned to a Dynatrace entity.
type UpdateEntity struct {
	// A list of tags to be assigned to a Dynatrace entity.
	Tags []string `json:"tags"`
}

// NewUpdateEntity instantiates a new UpdateEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEntity(tags []string, ) *UpdateEntity {
	this := UpdateEntity{}
	this.Tags = tags
	return &this
}

// NewUpdateEntityWithDefaults instantiates a new UpdateEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEntityWithDefaults() *UpdateEntity {
	this := UpdateEntity{}
	return &this
}

// GetTags returns the Tags field value
func (o *UpdateEntity) GetTags() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *UpdateEntity) GetTagsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Tags, true
}

// SetTags sets field value
func (o *UpdateEntity) SetTags(v []string) {
	o.Tags = v
}

func (o UpdateEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateEntity struct {
	value *UpdateEntity
	isSet bool
}

func (v NullableUpdateEntity) Get() *UpdateEntity {
	return v.value
}

func (v *NullableUpdateEntity) Set(val *UpdateEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEntity(val *UpdateEntity) *NullableUpdateEntity {
	return &NullableUpdateEntity{value: val, isSet: true}
}

func (v NullableUpdateEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


