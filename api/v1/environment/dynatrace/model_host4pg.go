/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Host4pg The process group log on the host.
type Host4pg struct {
	// The entity ID of the host.
	HostId *string `json:"hostId,omitempty"`
	// The size of the PG log for the host, bytes.
	LogSize *int64 `json:"logSize,omitempty"`
	// The access to the log content is granted (true) or denied (false).
	ContentAccess *bool `json:"contentAccess,omitempty"`
	// The log is available (true) or not available (false) for analysis.
	AvailableForAnalysis *bool `json:"availableForAnalysis,omitempty"`
}

// NewHost4pg instantiates a new Host4pg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHost4pg() *Host4pg {
	this := Host4pg{}
	return &this
}

// NewHost4pgWithDefaults instantiates a new Host4pg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHost4pgWithDefaults() *Host4pg {
	this := Host4pg{}
	return &this
}

// GetHostId returns the HostId field value if set, zero value otherwise.
func (o *Host4pg) GetHostId() string {
	if o == nil || o.HostId == nil {
		var ret string
		return ret
	}
	return *o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host4pg) GetHostIdOk() (*string, bool) {
	if o == nil || o.HostId == nil {
		return nil, false
	}
	return o.HostId, true
}

// HasHostId returns a boolean if a field has been set.
func (o *Host4pg) HasHostId() bool {
	if o != nil && o.HostId != nil {
		return true
	}

	return false
}

// SetHostId gets a reference to the given string and assigns it to the HostId field.
func (o *Host4pg) SetHostId(v string) {
	o.HostId = &v
}

// GetLogSize returns the LogSize field value if set, zero value otherwise.
func (o *Host4pg) GetLogSize() int64 {
	if o == nil || o.LogSize == nil {
		var ret int64
		return ret
	}
	return *o.LogSize
}

// GetLogSizeOk returns a tuple with the LogSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host4pg) GetLogSizeOk() (*int64, bool) {
	if o == nil || o.LogSize == nil {
		return nil, false
	}
	return o.LogSize, true
}

// HasLogSize returns a boolean if a field has been set.
func (o *Host4pg) HasLogSize() bool {
	if o != nil && o.LogSize != nil {
		return true
	}

	return false
}

// SetLogSize gets a reference to the given int64 and assigns it to the LogSize field.
func (o *Host4pg) SetLogSize(v int64) {
	o.LogSize = &v
}

// GetContentAccess returns the ContentAccess field value if set, zero value otherwise.
func (o *Host4pg) GetContentAccess() bool {
	if o == nil || o.ContentAccess == nil {
		var ret bool
		return ret
	}
	return *o.ContentAccess
}

// GetContentAccessOk returns a tuple with the ContentAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host4pg) GetContentAccessOk() (*bool, bool) {
	if o == nil || o.ContentAccess == nil {
		return nil, false
	}
	return o.ContentAccess, true
}

// HasContentAccess returns a boolean if a field has been set.
func (o *Host4pg) HasContentAccess() bool {
	if o != nil && o.ContentAccess != nil {
		return true
	}

	return false
}

// SetContentAccess gets a reference to the given bool and assigns it to the ContentAccess field.
func (o *Host4pg) SetContentAccess(v bool) {
	o.ContentAccess = &v
}

// GetAvailableForAnalysis returns the AvailableForAnalysis field value if set, zero value otherwise.
func (o *Host4pg) GetAvailableForAnalysis() bool {
	if o == nil || o.AvailableForAnalysis == nil {
		var ret bool
		return ret
	}
	return *o.AvailableForAnalysis
}

// GetAvailableForAnalysisOk returns a tuple with the AvailableForAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Host4pg) GetAvailableForAnalysisOk() (*bool, bool) {
	if o == nil || o.AvailableForAnalysis == nil {
		return nil, false
	}
	return o.AvailableForAnalysis, true
}

// HasAvailableForAnalysis returns a boolean if a field has been set.
func (o *Host4pg) HasAvailableForAnalysis() bool {
	if o != nil && o.AvailableForAnalysis != nil {
		return true
	}

	return false
}

// SetAvailableForAnalysis gets a reference to the given bool and assigns it to the AvailableForAnalysis field.
func (o *Host4pg) SetAvailableForAnalysis(v bool) {
	o.AvailableForAnalysis = &v
}

func (o Host4pg) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HostId != nil {
		toSerialize["hostId"] = o.HostId
	}
	if o.LogSize != nil {
		toSerialize["logSize"] = o.LogSize
	}
	if o.ContentAccess != nil {
		toSerialize["contentAccess"] = o.ContentAccess
	}
	if o.AvailableForAnalysis != nil {
		toSerialize["availableForAnalysis"] = o.AvailableForAnalysis
	}
	return json.Marshal(toSerialize)
}

type NullableHost4pg struct {
	value *Host4pg
	isSet bool
}

func (v NullableHost4pg) Get() *Host4pg {
	return v.value
}

func (v *NullableHost4pg) Set(val *Host4pg) {
	v.value = val
	v.isSet = true
}

func (v NullableHost4pg) IsSet() bool {
	return v.isSet
}

func (v *NullableHost4pg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHost4pg(val *Host4pg) *NullableHost4pg {
	return &NullableHost4pg{value: val, isSet: true}
}

func (v NullableHost4pg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHost4pg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


