/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Problem The properties of a problem.
type Problem struct {
	// The ID of the problem.
	Id *string `json:"id,omitempty"`
	// The start timestamp of the problem, in UTC milliseconds.
	StartTime *int64 `json:"startTime,omitempty"`
	// The end timestamp of the problem, in UTC milliseconds.    Has the value `-1` if the problem is still open.
	EndTime *int64 `json:"endTime,omitempty"`
	// The name of the problem, displayed in the UI.
	DisplayName *string `json:"displayName,omitempty"`
	// The impact level of the problem. It shows what is affected by the problem: infrastructure, service, or application.
	ImpactLevel *string `json:"impactLevel,omitempty"`
	// The status of the problem.
	Status *string `json:"status,omitempty"`
	// The severity of the problem.
	SeverityLevel *string `json:"severityLevel,omitempty"`
	// The number of comments to the problem.
	CommentCount *int32 `json:"commentCount,omitempty"`
	// Tags of entities affected by the problem.
	TagsOfAffectedEntities *[]TagInfo `json:"tagsOfAffectedEntities,omitempty"`
	// The list of events related to the problem.
	RankedEvents *[]Event `json:"rankedEvents,omitempty"`
	// Provides impact information of the events in an aggregated form. For a more detailed impact analysis, see `rankedEvents`.
	RankedImpacts *[]EventRestImpact `json:"rankedImpacts,omitempty"`
	AffectedCounts *ProblemAffectedCounts `json:"affectedCounts,omitempty"`
	RecoveredCounts *ProblemRecoveredCounts `json:"recoveredCounts,omitempty"`
	// Indicates whether Dynatrace has found at least one possible root cause for the problem.
	HasRootCause *bool `json:"hasRootCause,omitempty"`
}

// NewProblem instantiates a new Problem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblem() *Problem {
	this := Problem{}
	return &this
}

// NewProblemWithDefaults instantiates a new Problem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemWithDefaults() *Problem {
	this := Problem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Problem) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Problem) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Problem) SetId(v string) {
	o.Id = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *Problem) GetStartTime() int64 {
	if o == nil || o.StartTime == nil {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetStartTimeOk() (*int64, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *Problem) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *Problem) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *Problem) GetEndTime() int64 {
	if o == nil || o.EndTime == nil {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetEndTimeOk() (*int64, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *Problem) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *Problem) SetEndTime(v int64) {
	o.EndTime = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Problem) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Problem) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Problem) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetImpactLevel returns the ImpactLevel field value if set, zero value otherwise.
func (o *Problem) GetImpactLevel() string {
	if o == nil || o.ImpactLevel == nil {
		var ret string
		return ret
	}
	return *o.ImpactLevel
}

// GetImpactLevelOk returns a tuple with the ImpactLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetImpactLevelOk() (*string, bool) {
	if o == nil || o.ImpactLevel == nil {
		return nil, false
	}
	return o.ImpactLevel, true
}

// HasImpactLevel returns a boolean if a field has been set.
func (o *Problem) HasImpactLevel() bool {
	if o != nil && o.ImpactLevel != nil {
		return true
	}

	return false
}

// SetImpactLevel gets a reference to the given string and assigns it to the ImpactLevel field.
func (o *Problem) SetImpactLevel(v string) {
	o.ImpactLevel = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Problem) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Problem) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Problem) SetStatus(v string) {
	o.Status = &v
}

// GetSeverityLevel returns the SeverityLevel field value if set, zero value otherwise.
func (o *Problem) GetSeverityLevel() string {
	if o == nil || o.SeverityLevel == nil {
		var ret string
		return ret
	}
	return *o.SeverityLevel
}

// GetSeverityLevelOk returns a tuple with the SeverityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetSeverityLevelOk() (*string, bool) {
	if o == nil || o.SeverityLevel == nil {
		return nil, false
	}
	return o.SeverityLevel, true
}

// HasSeverityLevel returns a boolean if a field has been set.
func (o *Problem) HasSeverityLevel() bool {
	if o != nil && o.SeverityLevel != nil {
		return true
	}

	return false
}

// SetSeverityLevel gets a reference to the given string and assigns it to the SeverityLevel field.
func (o *Problem) SetSeverityLevel(v string) {
	o.SeverityLevel = &v
}

// GetCommentCount returns the CommentCount field value if set, zero value otherwise.
func (o *Problem) GetCommentCount() int32 {
	if o == nil || o.CommentCount == nil {
		var ret int32
		return ret
	}
	return *o.CommentCount
}

// GetCommentCountOk returns a tuple with the CommentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetCommentCountOk() (*int32, bool) {
	if o == nil || o.CommentCount == nil {
		return nil, false
	}
	return o.CommentCount, true
}

// HasCommentCount returns a boolean if a field has been set.
func (o *Problem) HasCommentCount() bool {
	if o != nil && o.CommentCount != nil {
		return true
	}

	return false
}

// SetCommentCount gets a reference to the given int32 and assigns it to the CommentCount field.
func (o *Problem) SetCommentCount(v int32) {
	o.CommentCount = &v
}

// GetTagsOfAffectedEntities returns the TagsOfAffectedEntities field value if set, zero value otherwise.
func (o *Problem) GetTagsOfAffectedEntities() []TagInfo {
	if o == nil || o.TagsOfAffectedEntities == nil {
		var ret []TagInfo
		return ret
	}
	return *o.TagsOfAffectedEntities
}

// GetTagsOfAffectedEntitiesOk returns a tuple with the TagsOfAffectedEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetTagsOfAffectedEntitiesOk() (*[]TagInfo, bool) {
	if o == nil || o.TagsOfAffectedEntities == nil {
		return nil, false
	}
	return o.TagsOfAffectedEntities, true
}

// HasTagsOfAffectedEntities returns a boolean if a field has been set.
func (o *Problem) HasTagsOfAffectedEntities() bool {
	if o != nil && o.TagsOfAffectedEntities != nil {
		return true
	}

	return false
}

// SetTagsOfAffectedEntities gets a reference to the given []TagInfo and assigns it to the TagsOfAffectedEntities field.
func (o *Problem) SetTagsOfAffectedEntities(v []TagInfo) {
	o.TagsOfAffectedEntities = &v
}

// GetRankedEvents returns the RankedEvents field value if set, zero value otherwise.
func (o *Problem) GetRankedEvents() []Event {
	if o == nil || o.RankedEvents == nil {
		var ret []Event
		return ret
	}
	return *o.RankedEvents
}

// GetRankedEventsOk returns a tuple with the RankedEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetRankedEventsOk() (*[]Event, bool) {
	if o == nil || o.RankedEvents == nil {
		return nil, false
	}
	return o.RankedEvents, true
}

// HasRankedEvents returns a boolean if a field has been set.
func (o *Problem) HasRankedEvents() bool {
	if o != nil && o.RankedEvents != nil {
		return true
	}

	return false
}

// SetRankedEvents gets a reference to the given []Event and assigns it to the RankedEvents field.
func (o *Problem) SetRankedEvents(v []Event) {
	o.RankedEvents = &v
}

// GetRankedImpacts returns the RankedImpacts field value if set, zero value otherwise.
func (o *Problem) GetRankedImpacts() []EventRestImpact {
	if o == nil || o.RankedImpacts == nil {
		var ret []EventRestImpact
		return ret
	}
	return *o.RankedImpacts
}

// GetRankedImpactsOk returns a tuple with the RankedImpacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetRankedImpactsOk() (*[]EventRestImpact, bool) {
	if o == nil || o.RankedImpacts == nil {
		return nil, false
	}
	return o.RankedImpacts, true
}

// HasRankedImpacts returns a boolean if a field has been set.
func (o *Problem) HasRankedImpacts() bool {
	if o != nil && o.RankedImpacts != nil {
		return true
	}

	return false
}

// SetRankedImpacts gets a reference to the given []EventRestImpact and assigns it to the RankedImpacts field.
func (o *Problem) SetRankedImpacts(v []EventRestImpact) {
	o.RankedImpacts = &v
}

// GetAffectedCounts returns the AffectedCounts field value if set, zero value otherwise.
func (o *Problem) GetAffectedCounts() ProblemAffectedCounts {
	if o == nil || o.AffectedCounts == nil {
		var ret ProblemAffectedCounts
		return ret
	}
	return *o.AffectedCounts
}

// GetAffectedCountsOk returns a tuple with the AffectedCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetAffectedCountsOk() (*ProblemAffectedCounts, bool) {
	if o == nil || o.AffectedCounts == nil {
		return nil, false
	}
	return o.AffectedCounts, true
}

// HasAffectedCounts returns a boolean if a field has been set.
func (o *Problem) HasAffectedCounts() bool {
	if o != nil && o.AffectedCounts != nil {
		return true
	}

	return false
}

// SetAffectedCounts gets a reference to the given ProblemAffectedCounts and assigns it to the AffectedCounts field.
func (o *Problem) SetAffectedCounts(v ProblemAffectedCounts) {
	o.AffectedCounts = &v
}

// GetRecoveredCounts returns the RecoveredCounts field value if set, zero value otherwise.
func (o *Problem) GetRecoveredCounts() ProblemRecoveredCounts {
	if o == nil || o.RecoveredCounts == nil {
		var ret ProblemRecoveredCounts
		return ret
	}
	return *o.RecoveredCounts
}

// GetRecoveredCountsOk returns a tuple with the RecoveredCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetRecoveredCountsOk() (*ProblemRecoveredCounts, bool) {
	if o == nil || o.RecoveredCounts == nil {
		return nil, false
	}
	return o.RecoveredCounts, true
}

// HasRecoveredCounts returns a boolean if a field has been set.
func (o *Problem) HasRecoveredCounts() bool {
	if o != nil && o.RecoveredCounts != nil {
		return true
	}

	return false
}

// SetRecoveredCounts gets a reference to the given ProblemRecoveredCounts and assigns it to the RecoveredCounts field.
func (o *Problem) SetRecoveredCounts(v ProblemRecoveredCounts) {
	o.RecoveredCounts = &v
}

// GetHasRootCause returns the HasRootCause field value if set, zero value otherwise.
func (o *Problem) GetHasRootCause() bool {
	if o == nil || o.HasRootCause == nil {
		var ret bool
		return ret
	}
	return *o.HasRootCause
}

// GetHasRootCauseOk returns a tuple with the HasRootCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problem) GetHasRootCauseOk() (*bool, bool) {
	if o == nil || o.HasRootCause == nil {
		return nil, false
	}
	return o.HasRootCause, true
}

// HasHasRootCause returns a boolean if a field has been set.
func (o *Problem) HasHasRootCause() bool {
	if o != nil && o.HasRootCause != nil {
		return true
	}

	return false
}

// SetHasRootCause gets a reference to the given bool and assigns it to the HasRootCause field.
func (o *Problem) SetHasRootCause(v bool) {
	o.HasRootCause = &v
}

func (o Problem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.StartTime != nil {
		toSerialize["startTime"] = o.StartTime
	}
	if o.EndTime != nil {
		toSerialize["endTime"] = o.EndTime
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.ImpactLevel != nil {
		toSerialize["impactLevel"] = o.ImpactLevel
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.SeverityLevel != nil {
		toSerialize["severityLevel"] = o.SeverityLevel
	}
	if o.CommentCount != nil {
		toSerialize["commentCount"] = o.CommentCount
	}
	if o.TagsOfAffectedEntities != nil {
		toSerialize["tagsOfAffectedEntities"] = o.TagsOfAffectedEntities
	}
	if o.RankedEvents != nil {
		toSerialize["rankedEvents"] = o.RankedEvents
	}
	if o.RankedImpacts != nil {
		toSerialize["rankedImpacts"] = o.RankedImpacts
	}
	if o.AffectedCounts != nil {
		toSerialize["affectedCounts"] = o.AffectedCounts
	}
	if o.RecoveredCounts != nil {
		toSerialize["recoveredCounts"] = o.RecoveredCounts
	}
	if o.HasRootCause != nil {
		toSerialize["hasRootCause"] = o.HasRootCause
	}
	return json.Marshal(toSerialize)
}

type NullableProblem struct {
	value *Problem
	isSet bool
}

func (v NullableProblem) Get() *Problem {
	return v.value
}

func (v *NullableProblem) Set(val *Problem) {
	v.value = val
	v.isSet = true
}

func (v NullableProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblem(val *Problem) *NullableProblem {
	return &NullableProblem{value: val, isSet: true}
}

func (v NullableProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


