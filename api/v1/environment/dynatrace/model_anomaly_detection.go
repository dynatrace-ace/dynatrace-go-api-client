/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AnomalyDetection The anomaly detection configuration.
type AnomalyDetection struct {
	OutageHandling *OutageHandlingPolicy `json:"outageHandling,omitempty"`
	LoadingTimeThresholds *LoadingTimeThresholdsPolicyDto `json:"loadingTimeThresholds,omitempty"`
}

// NewAnomalyDetection instantiates a new AnomalyDetection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnomalyDetection() *AnomalyDetection {
	this := AnomalyDetection{}
	return &this
}

// NewAnomalyDetectionWithDefaults instantiates a new AnomalyDetection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnomalyDetectionWithDefaults() *AnomalyDetection {
	this := AnomalyDetection{}
	return &this
}

// GetOutageHandling returns the OutageHandling field value if set, zero value otherwise.
func (o *AnomalyDetection) GetOutageHandling() OutageHandlingPolicy {
	if o == nil || o.OutageHandling == nil {
		var ret OutageHandlingPolicy
		return ret
	}
	return *o.OutageHandling
}

// GetOutageHandlingOk returns a tuple with the OutageHandling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnomalyDetection) GetOutageHandlingOk() (*OutageHandlingPolicy, bool) {
	if o == nil || o.OutageHandling == nil {
		return nil, false
	}
	return o.OutageHandling, true
}

// HasOutageHandling returns a boolean if a field has been set.
func (o *AnomalyDetection) HasOutageHandling() bool {
	if o != nil && o.OutageHandling != nil {
		return true
	}

	return false
}

// SetOutageHandling gets a reference to the given OutageHandlingPolicy and assigns it to the OutageHandling field.
func (o *AnomalyDetection) SetOutageHandling(v OutageHandlingPolicy) {
	o.OutageHandling = &v
}

// GetLoadingTimeThresholds returns the LoadingTimeThresholds field value if set, zero value otherwise.
func (o *AnomalyDetection) GetLoadingTimeThresholds() LoadingTimeThresholdsPolicyDto {
	if o == nil || o.LoadingTimeThresholds == nil {
		var ret LoadingTimeThresholdsPolicyDto
		return ret
	}
	return *o.LoadingTimeThresholds
}

// GetLoadingTimeThresholdsOk returns a tuple with the LoadingTimeThresholds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnomalyDetection) GetLoadingTimeThresholdsOk() (*LoadingTimeThresholdsPolicyDto, bool) {
	if o == nil || o.LoadingTimeThresholds == nil {
		return nil, false
	}
	return o.LoadingTimeThresholds, true
}

// HasLoadingTimeThresholds returns a boolean if a field has been set.
func (o *AnomalyDetection) HasLoadingTimeThresholds() bool {
	if o != nil && o.LoadingTimeThresholds != nil {
		return true
	}

	return false
}

// SetLoadingTimeThresholds gets a reference to the given LoadingTimeThresholdsPolicyDto and assigns it to the LoadingTimeThresholds field.
func (o *AnomalyDetection) SetLoadingTimeThresholds(v LoadingTimeThresholdsPolicyDto) {
	o.LoadingTimeThresholds = &v
}

func (o AnomalyDetection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OutageHandling != nil {
		toSerialize["outageHandling"] = o.OutageHandling
	}
	if o.LoadingTimeThresholds != nil {
		toSerialize["loadingTimeThresholds"] = o.LoadingTimeThresholds
	}
	return json.Marshal(toSerialize)
}

type NullableAnomalyDetection struct {
	value *AnomalyDetection
	isSet bool
}

func (v NullableAnomalyDetection) Get() *AnomalyDetection {
	return v.value
}

func (v *NullableAnomalyDetection) Set(val *AnomalyDetection) {
	v.value = val
	v.isSet = true
}

func (v NullableAnomalyDetection) IsSet() bool {
	return v.isSet
}

func (v *NullableAnomalyDetection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnomalyDetection(val *AnomalyDetection) *NullableAnomalyDetection {
	return &NullableAnomalyDetection{value: val, isSet: true}
}

func (v NullableAnomalyDetection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnomalyDetection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


