/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// UserSessionsApiService UserSessionsApi service
type UserSessionsApiService service

type ApiGetDTAQLResultAsTableRequest struct {
	ctx _context.Context
	ApiService *UserSessionsApiService
	query *string
	startTimestamp *int64
	endTimestamp *int64
	offsetUTC *int32
	pageSize *int32
	pageOffset *int32
	addDeepLinkFields *bool
	explain *bool
}

func (r ApiGetDTAQLResultAsTableRequest) Query(query string) ApiGetDTAQLResultAsTableRequest {
	r.query = &query
	return r
}
func (r ApiGetDTAQLResultAsTableRequest) StartTimestamp(startTimestamp int64) ApiGetDTAQLResultAsTableRequest {
	r.startTimestamp = &startTimestamp
	return r
}
func (r ApiGetDTAQLResultAsTableRequest) EndTimestamp(endTimestamp int64) ApiGetDTAQLResultAsTableRequest {
	r.endTimestamp = &endTimestamp
	return r
}
func (r ApiGetDTAQLResultAsTableRequest) OffsetUTC(offsetUTC int32) ApiGetDTAQLResultAsTableRequest {
	r.offsetUTC = &offsetUTC
	return r
}
func (r ApiGetDTAQLResultAsTableRequest) PageSize(pageSize int32) ApiGetDTAQLResultAsTableRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGetDTAQLResultAsTableRequest) PageOffset(pageOffset int32) ApiGetDTAQLResultAsTableRequest {
	r.pageOffset = &pageOffset
	return r
}
func (r ApiGetDTAQLResultAsTableRequest) AddDeepLinkFields(addDeepLinkFields bool) ApiGetDTAQLResultAsTableRequest {
	r.addDeepLinkFields = &addDeepLinkFields
	return r
}
func (r ApiGetDTAQLResultAsTableRequest) Explain(explain bool) ApiGetDTAQLResultAsTableRequest {
	r.explain = &explain
	return r
}

func (r ApiGetDTAQLResultAsTableRequest) Execute() (DtaqlResultAsTable, *_nethttp.Response, error) {
	return r.ApiService.GetDTAQLResultAsTableExecute(r)
}

/*
 * GetDTAQLResultAsTable Returns the result of the query as a table structure
 * The result is a flat list of rows containing the requested columns.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetDTAQLResultAsTableRequest
 */
func (a *UserSessionsApiService) GetDTAQLResultAsTable(ctx _context.Context) ApiGetDTAQLResultAsTableRequest {
	return ApiGetDTAQLResultAsTableRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return DtaqlResultAsTable
 */
func (a *UserSessionsApiService) GetDTAQLResultAsTableExecute(r ApiGetDTAQLResultAsTableRequest) (DtaqlResultAsTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DtaqlResultAsTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserSessionsApiService.GetDTAQLResultAsTable")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userSessionQueryLanguage/table"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	if r.startTimestamp != nil {
		localVarQueryParams.Add("startTimestamp", parameterToString(*r.startTimestamp, ""))
	}
	if r.endTimestamp != nil {
		localVarQueryParams.Add("endTimestamp", parameterToString(*r.endTimestamp, ""))
	}
	if r.offsetUTC != nil {
		localVarQueryParams.Add("offsetUTC", parameterToString(*r.offsetUTC, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.pageOffset != nil {
		localVarQueryParams.Add("pageOffset", parameterToString(*r.pageOffset, ""))
	}
	if r.addDeepLinkFields != nil {
		localVarQueryParams.Add("addDeepLinkFields", parameterToString(*r.addDeepLinkFields, ""))
	}
	if r.explain != nil {
		localVarQueryParams.Add("explain", parameterToString(*r.explain, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDTAQLResultAsTreeRequest struct {
	ctx _context.Context
	ApiService *UserSessionsApiService
	query *string
	startTimestamp *int64
	endTimestamp *int64
	offsetUTC *int32
	addDeepLinkFields *bool
	explain *bool
}

func (r ApiGetDTAQLResultAsTreeRequest) Query(query string) ApiGetDTAQLResultAsTreeRequest {
	r.query = &query
	return r
}
func (r ApiGetDTAQLResultAsTreeRequest) StartTimestamp(startTimestamp int64) ApiGetDTAQLResultAsTreeRequest {
	r.startTimestamp = &startTimestamp
	return r
}
func (r ApiGetDTAQLResultAsTreeRequest) EndTimestamp(endTimestamp int64) ApiGetDTAQLResultAsTreeRequest {
	r.endTimestamp = &endTimestamp
	return r
}
func (r ApiGetDTAQLResultAsTreeRequest) OffsetUTC(offsetUTC int32) ApiGetDTAQLResultAsTreeRequest {
	r.offsetUTC = &offsetUTC
	return r
}
func (r ApiGetDTAQLResultAsTreeRequest) AddDeepLinkFields(addDeepLinkFields bool) ApiGetDTAQLResultAsTreeRequest {
	r.addDeepLinkFields = &addDeepLinkFields
	return r
}
func (r ApiGetDTAQLResultAsTreeRequest) Explain(explain bool) ApiGetDTAQLResultAsTreeRequest {
	r.explain = &explain
	return r
}

func (r ApiGetDTAQLResultAsTreeRequest) Execute() (DtaqlResultAsTree, *_nethttp.Response, error) {
	return r.ApiService.GetDTAQLResultAsTreeExecute(r)
}

/*
 * GetDTAQLResultAsTree Returns the result of the query as a tree structure
 * To get a proper tree structure, you need to specify grouping in the query.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetDTAQLResultAsTreeRequest
 */
func (a *UserSessionsApiService) GetDTAQLResultAsTree(ctx _context.Context) ApiGetDTAQLResultAsTreeRequest {
	return ApiGetDTAQLResultAsTreeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return DtaqlResultAsTree
 */
func (a *UserSessionsApiService) GetDTAQLResultAsTreeExecute(r ApiGetDTAQLResultAsTreeRequest) (DtaqlResultAsTree, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DtaqlResultAsTree
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserSessionsApiService.GetDTAQLResultAsTree")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/userSessionQueryLanguage/tree"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	if r.startTimestamp != nil {
		localVarQueryParams.Add("startTimestamp", parameterToString(*r.startTimestamp, ""))
	}
	if r.endTimestamp != nil {
		localVarQueryParams.Add("endTimestamp", parameterToString(*r.endTimestamp, ""))
	}
	if r.offsetUTC != nil {
		localVarQueryParams.Add("offsetUTC", parameterToString(*r.offsetUTC, ""))
	}
	if r.addDeepLinkFields != nil {
		localVarQueryParams.Add("addDeepLinkFields", parameterToString(*r.addDeepLinkFields, ""))
	}
	if r.explain != nil {
		localVarQueryParams.Add("explain", parameterToString(*r.explain, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
