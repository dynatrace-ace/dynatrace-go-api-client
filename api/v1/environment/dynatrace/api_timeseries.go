/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// TimeseriesApiService TimeseriesApi service
type TimeseriesApiService service

type ApiCreateCustomTimeseriesRequest struct {
	ctx _context.Context
	ApiService *TimeseriesApiService
	timeseriesIdentifier string
	timeseriesRegistrationMessage *TimeseriesRegistrationMessage
}

func (r ApiCreateCustomTimeseriesRequest) TimeseriesRegistrationMessage(timeseriesRegistrationMessage TimeseriesRegistrationMessage) ApiCreateCustomTimeseriesRequest {
	r.timeseriesRegistrationMessage = &timeseriesRegistrationMessage
	return r
}

func (r ApiCreateCustomTimeseriesRequest) Execute() (TimeseriesDefinition, *_nethttp.Response, error) {
	return r.ApiService.CreateCustomTimeseriesExecute(r)
}

/*
 * CreateCustomTimeseries Creates a new custom metric
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param timeseriesIdentifier The ID for the new metric. It must start with the `custom:` prefix.   You can use alphanumeric characters and the following punctuation marks: periods (`.`), hyphens (`-`), and commas (`,`). A number cannot follow a punctuation mark.   If you use the ID of an existing metric the respective parameters will be updated.   The length of ID is limited to **512 characters**.
 * @return ApiCreateCustomTimeseriesRequest
 */
func (a *TimeseriesApiService) CreateCustomTimeseries(ctx _context.Context, timeseriesIdentifier string) ApiCreateCustomTimeseriesRequest {
	return ApiCreateCustomTimeseriesRequest{
		ApiService: a,
		ctx: ctx,
		timeseriesIdentifier: timeseriesIdentifier,
	}
}

/*
 * Execute executes the request
 * @return TimeseriesDefinition
 */
func (a *TimeseriesApiService) CreateCustomTimeseriesExecute(r ApiCreateCustomTimeseriesRequest) (TimeseriesDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimeseriesDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeseriesApiService.CreateCustomTimeseries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/timeseries/{timeseriesIdentifier}"
	localVarPath = strings.Replace(localVarPath, "{"+"timeseriesIdentifier"+"}", _neturl.PathEscape(parameterToString(r.timeseriesIdentifier, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.timeseriesRegistrationMessage
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCustomTimeseriesRequest struct {
	ctx _context.Context
	ApiService *TimeseriesApiService
	timeseriesIdentifier string
}


func (r ApiDeleteCustomTimeseriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteCustomTimeseriesExecute(r)
}

/*
 * DeleteCustomTimeseries Deletes the specified custom metric
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param timeseriesIdentifier The ID of the metric to delete.
 * @return ApiDeleteCustomTimeseriesRequest
 */
func (a *TimeseriesApiService) DeleteCustomTimeseries(ctx _context.Context, timeseriesIdentifier string) ApiDeleteCustomTimeseriesRequest {
	return ApiDeleteCustomTimeseriesRequest{
		ApiService: a,
		ctx: ctx,
		timeseriesIdentifier: timeseriesIdentifier,
	}
}

/*
 * Execute executes the request
 */
func (a *TimeseriesApiService) DeleteCustomTimeseriesExecute(r ApiDeleteCustomTimeseriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeseriesApiService.DeleteCustomTimeseries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/timeseries/{timeseriesIdentifier}"
	localVarPath = strings.Replace(localVarPath, "{"+"timeseriesIdentifier"+"}", _neturl.PathEscape(parameterToString(r.timeseriesIdentifier, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllTimeseriesDefinitionsRequest struct {
	ctx _context.Context
	ApiService *TimeseriesApiService
	source *string
	detailedSource *string
}

func (r ApiGetAllTimeseriesDefinitionsRequest) Source(source string) ApiGetAllTimeseriesDefinitionsRequest {
	r.source = &source
	return r
}
func (r ApiGetAllTimeseriesDefinitionsRequest) DetailedSource(detailedSource string) ApiGetAllTimeseriesDefinitionsRequest {
	r.detailedSource = &detailedSource
	return r
}

func (r ApiGetAllTimeseriesDefinitionsRequest) Execute() ([]TimeseriesDefinition, *_nethttp.Response, error) {
	return r.ApiService.GetAllTimeseriesDefinitionsExecute(r)
}

/*
 * GetAllTimeseriesDefinitions Lists all metric definitions, with the parameters of each metric
 * You can specify filtering parameters to return only matched metrics. If no parameters are specified, the call will list all the defined metrics.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetAllTimeseriesDefinitionsRequest
 */
func (a *TimeseriesApiService) GetAllTimeseriesDefinitions(ctx _context.Context) ApiGetAllTimeseriesDefinitionsRequest {
	return ApiGetAllTimeseriesDefinitionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return []TimeseriesDefinition
 */
func (a *TimeseriesApiService) GetAllTimeseriesDefinitionsExecute(r ApiGetAllTimeseriesDefinitionsRequest) ([]TimeseriesDefinition, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []TimeseriesDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeseriesApiService.GetAllTimeseriesDefinitions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/timeseries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.source != nil {
		localVarQueryParams.Add("source", parameterToString(*r.source, ""))
	}
	if r.detailedSource != nil {
		localVarQueryParams.Add("detailedSource", parameterToString(*r.detailedSource, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadTimeseriesComplexRequest struct {
	ctx _context.Context
	ApiService *TimeseriesApiService
	timeseriesIdentifier string
	timeseriesQueryMessage *TimeseriesQueryMessage
}

func (r ApiReadTimeseriesComplexRequest) TimeseriesQueryMessage(timeseriesQueryMessage TimeseriesQueryMessage) ApiReadTimeseriesComplexRequest {
	r.timeseriesQueryMessage = &timeseriesQueryMessage
	return r
}

func (r ApiReadTimeseriesComplexRequest) Execute() (TimeseriesQueryResultWrapper, *_nethttp.Response, error) {
	return r.ApiService.ReadTimeseriesComplexExecute(r)
}

/*
 * ReadTimeseriesComplex Lists all available metric data points, matching the specified parameters
 * Provides advanced filtering possibilities, comparing to the `GET /timeseries/{metricIdentifier}` request.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param timeseriesIdentifier The case-sensitive ID of the timeseries from which you want to read parameters and data points.
 * @return ApiReadTimeseriesComplexRequest
 */
func (a *TimeseriesApiService) ReadTimeseriesComplex(ctx _context.Context, timeseriesIdentifier string) ApiReadTimeseriesComplexRequest {
	return ApiReadTimeseriesComplexRequest{
		ApiService: a,
		ctx: ctx,
		timeseriesIdentifier: timeseriesIdentifier,
	}
}

/*
 * Execute executes the request
 * @return TimeseriesQueryResultWrapper
 */
func (a *TimeseriesApiService) ReadTimeseriesComplexExecute(r ApiReadTimeseriesComplexRequest) (TimeseriesQueryResultWrapper, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimeseriesQueryResultWrapper
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeseriesApiService.ReadTimeseriesComplex")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/timeseries/{timeseriesIdentifier}"
	localVarPath = strings.Replace(localVarPath, "{"+"timeseriesIdentifier"+"}", _neturl.PathEscape(parameterToString(r.timeseriesIdentifier, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.timeseriesQueryMessage
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadTimeseriesDataRequest struct {
	ctx _context.Context
	ApiService *TimeseriesApiService
	timeseriesIdentifier string
	includeData *bool
	aggregationType *string
	startTimestamp *int64
	endTimestamp *int64
	predict *bool
	relativeTime *string
	queryMode *string
	entity *[]string
	tag *[]string
	percentile *int32
	includeParentIds *bool
	considerMaintenanceWindowsForAvailability *bool
}

func (r ApiReadTimeseriesDataRequest) IncludeData(includeData bool) ApiReadTimeseriesDataRequest {
	r.includeData = &includeData
	return r
}
func (r ApiReadTimeseriesDataRequest) AggregationType(aggregationType string) ApiReadTimeseriesDataRequest {
	r.aggregationType = &aggregationType
	return r
}
func (r ApiReadTimeseriesDataRequest) StartTimestamp(startTimestamp int64) ApiReadTimeseriesDataRequest {
	r.startTimestamp = &startTimestamp
	return r
}
func (r ApiReadTimeseriesDataRequest) EndTimestamp(endTimestamp int64) ApiReadTimeseriesDataRequest {
	r.endTimestamp = &endTimestamp
	return r
}
func (r ApiReadTimeseriesDataRequest) Predict(predict bool) ApiReadTimeseriesDataRequest {
	r.predict = &predict
	return r
}
func (r ApiReadTimeseriesDataRequest) RelativeTime(relativeTime string) ApiReadTimeseriesDataRequest {
	r.relativeTime = &relativeTime
	return r
}
func (r ApiReadTimeseriesDataRequest) QueryMode(queryMode string) ApiReadTimeseriesDataRequest {
	r.queryMode = &queryMode
	return r
}
func (r ApiReadTimeseriesDataRequest) Entity(entity []string) ApiReadTimeseriesDataRequest {
	r.entity = &entity
	return r
}
func (r ApiReadTimeseriesDataRequest) Tag(tag []string) ApiReadTimeseriesDataRequest {
	r.tag = &tag
	return r
}
func (r ApiReadTimeseriesDataRequest) Percentile(percentile int32) ApiReadTimeseriesDataRequest {
	r.percentile = &percentile
	return r
}
func (r ApiReadTimeseriesDataRequest) IncludeParentIds(includeParentIds bool) ApiReadTimeseriesDataRequest {
	r.includeParentIds = &includeParentIds
	return r
}
func (r ApiReadTimeseriesDataRequest) ConsiderMaintenanceWindowsForAvailability(considerMaintenanceWindowsForAvailability bool) ApiReadTimeseriesDataRequest {
	r.considerMaintenanceWindowsForAvailability = &considerMaintenanceWindowsForAvailability
	return r
}

func (r ApiReadTimeseriesDataRequest) Execute() (TimeseriesQueryResult, *_nethttp.Response, error) {
	return r.ApiService.ReadTimeseriesDataExecute(r)
}

/*
 * ReadTimeseriesData Gets the parameters of the specified metric and, optionally, its data points
 * To obtain data points, set **includeData** to `true`. 

You can obtain either data points or the scalar result of the specified timeseries, depending on the **queryMode**. 

To obtain data points, you must specify the timeframe, either as **relativeTime** or as a combination of **startTimestamp** and **endTimestamp**. 

You must also provide the **aggregationType**, supported by the metric.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param timeseriesIdentifier The case-sensitive ID of the timeseries, from which you want to read parameters and data points.
 * @return ApiReadTimeseriesDataRequest
 */
func (a *TimeseriesApiService) ReadTimeseriesData(ctx _context.Context, timeseriesIdentifier string) ApiReadTimeseriesDataRequest {
	return ApiReadTimeseriesDataRequest{
		ApiService: a,
		ctx: ctx,
		timeseriesIdentifier: timeseriesIdentifier,
	}
}

/*
 * Execute executes the request
 * @return TimeseriesQueryResult
 */
func (a *TimeseriesApiService) ReadTimeseriesDataExecute(r ApiReadTimeseriesDataRequest) (TimeseriesQueryResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TimeseriesQueryResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeseriesApiService.ReadTimeseriesData")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/timeseries/{timeseriesIdentifier}"
	localVarPath = strings.Replace(localVarPath, "{"+"timeseriesIdentifier"+"}", _neturl.PathEscape(parameterToString(r.timeseriesIdentifier, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.includeData != nil {
		localVarQueryParams.Add("includeData", parameterToString(*r.includeData, ""))
	}
	if r.aggregationType != nil {
		localVarQueryParams.Add("aggregationType", parameterToString(*r.aggregationType, ""))
	}
	if r.startTimestamp != nil {
		localVarQueryParams.Add("startTimestamp", parameterToString(*r.startTimestamp, ""))
	}
	if r.endTimestamp != nil {
		localVarQueryParams.Add("endTimestamp", parameterToString(*r.endTimestamp, ""))
	}
	if r.predict != nil {
		localVarQueryParams.Add("predict", parameterToString(*r.predict, ""))
	}
	if r.relativeTime != nil {
		localVarQueryParams.Add("relativeTime", parameterToString(*r.relativeTime, ""))
	}
	if r.queryMode != nil {
		localVarQueryParams.Add("queryMode", parameterToString(*r.queryMode, ""))
	}
	if r.entity != nil {
		t := *r.entity
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("entity", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("entity", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.percentile != nil {
		localVarQueryParams.Add("percentile", parameterToString(*r.percentile, ""))
	}
	if r.includeParentIds != nil {
		localVarQueryParams.Add("includeParentIds", parameterToString(*r.includeParentIds, ""))
	}
	if r.considerMaintenanceWindowsForAvailability != nil {
		localVarQueryParams.Add("considerMaintenanceWindowsForAvailability", parameterToString(*r.considerMaintenanceWindowsForAvailability, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
