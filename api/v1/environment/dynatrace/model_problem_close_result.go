/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ProblemCloseResult The result of closing a problem.
type ProblemCloseResult struct {
	// The ID of the problem.
	ProblemId *string `json:"problemId,omitempty"`
	Comment *ProblemComment `json:"comment,omitempty"`
	// The timestamp when the closure was triggered.
	CloseTimestamp *int64 `json:"closeTimestamp,omitempty"`
	// The problem is in process of closing (`true`) or closed (`false`).
	Closing *bool `json:"closing,omitempty"`
}

// NewProblemCloseResult instantiates a new ProblemCloseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemCloseResult() *ProblemCloseResult {
	this := ProblemCloseResult{}
	return &this
}

// NewProblemCloseResultWithDefaults instantiates a new ProblemCloseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemCloseResultWithDefaults() *ProblemCloseResult {
	this := ProblemCloseResult{}
	return &this
}

// GetProblemId returns the ProblemId field value if set, zero value otherwise.
func (o *ProblemCloseResult) GetProblemId() string {
	if o == nil || o.ProblemId == nil {
		var ret string
		return ret
	}
	return *o.ProblemId
}

// GetProblemIdOk returns a tuple with the ProblemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemCloseResult) GetProblemIdOk() (*string, bool) {
	if o == nil || o.ProblemId == nil {
		return nil, false
	}
	return o.ProblemId, true
}

// HasProblemId returns a boolean if a field has been set.
func (o *ProblemCloseResult) HasProblemId() bool {
	if o != nil && o.ProblemId != nil {
		return true
	}

	return false
}

// SetProblemId gets a reference to the given string and assigns it to the ProblemId field.
func (o *ProblemCloseResult) SetProblemId(v string) {
	o.ProblemId = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ProblemCloseResult) GetComment() ProblemComment {
	if o == nil || o.Comment == nil {
		var ret ProblemComment
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemCloseResult) GetCommentOk() (*ProblemComment, bool) {
	if o == nil || o.Comment == nil {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ProblemCloseResult) HasComment() bool {
	if o != nil && o.Comment != nil {
		return true
	}

	return false
}

// SetComment gets a reference to the given ProblemComment and assigns it to the Comment field.
func (o *ProblemCloseResult) SetComment(v ProblemComment) {
	o.Comment = &v
}

// GetCloseTimestamp returns the CloseTimestamp field value if set, zero value otherwise.
func (o *ProblemCloseResult) GetCloseTimestamp() int64 {
	if o == nil || o.CloseTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.CloseTimestamp
}

// GetCloseTimestampOk returns a tuple with the CloseTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemCloseResult) GetCloseTimestampOk() (*int64, bool) {
	if o == nil || o.CloseTimestamp == nil {
		return nil, false
	}
	return o.CloseTimestamp, true
}

// HasCloseTimestamp returns a boolean if a field has been set.
func (o *ProblemCloseResult) HasCloseTimestamp() bool {
	if o != nil && o.CloseTimestamp != nil {
		return true
	}

	return false
}

// SetCloseTimestamp gets a reference to the given int64 and assigns it to the CloseTimestamp field.
func (o *ProblemCloseResult) SetCloseTimestamp(v int64) {
	o.CloseTimestamp = &v
}

// GetClosing returns the Closing field value if set, zero value otherwise.
func (o *ProblemCloseResult) GetClosing() bool {
	if o == nil || o.Closing == nil {
		var ret bool
		return ret
	}
	return *o.Closing
}

// GetClosingOk returns a tuple with the Closing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemCloseResult) GetClosingOk() (*bool, bool) {
	if o == nil || o.Closing == nil {
		return nil, false
	}
	return o.Closing, true
}

// HasClosing returns a boolean if a field has been set.
func (o *ProblemCloseResult) HasClosing() bool {
	if o != nil && o.Closing != nil {
		return true
	}

	return false
}

// SetClosing gets a reference to the given bool and assigns it to the Closing field.
func (o *ProblemCloseResult) SetClosing(v bool) {
	o.Closing = &v
}

func (o ProblemCloseResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProblemId != nil {
		toSerialize["problemId"] = o.ProblemId
	}
	if o.Comment != nil {
		toSerialize["comment"] = o.Comment
	}
	if o.CloseTimestamp != nil {
		toSerialize["closeTimestamp"] = o.CloseTimestamp
	}
	if o.Closing != nil {
		toSerialize["closing"] = o.Closing
	}
	return json.Marshal(toSerialize)
}

type NullableProblemCloseResult struct {
	value *ProblemCloseResult
	isSet bool
}

func (v NullableProblemCloseResult) Get() *ProblemCloseResult {
	return v.value
}

func (v *NullableProblemCloseResult) Set(val *ProblemCloseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemCloseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemCloseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemCloseResult(val *ProblemCloseResult) *NullableProblemCloseResult {
	return &NullableProblemCloseResult{value: val, isSet: true}
}

func (v NullableProblemCloseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemCloseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


