/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// LogMonitoringProcessGroupsApiService LogMonitoringProcessGroupsApi service
type LogMonitoringProcessGroupsApiService service

type ApiProcessGroupLogJobDeleteRequest struct {
	ctx _context.Context
	ApiService *LogMonitoringProcessGroupsApiService
	pgId string
	jobId string
}


func (r ApiProcessGroupLogJobDeleteRequest) Execute() (LogJobDeleteResult, *_nethttp.Response, error) {
	return r.ApiService.ProcessGroupLogJobDeleteExecute(r)
}

/*
 * ProcessGroupLogJobDelete Deletes or cancels the specified log analysis job
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pgId The Dynatrace entity ID of the required process group.
 * @param jobId The ID of the log analysis job to be deleted.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request.
 * @return ApiProcessGroupLogJobDeleteRequest
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogJobDelete(ctx _context.Context, pgId string, jobId string) ApiProcessGroupLogJobDeleteRequest {
	return ApiProcessGroupLogJobDeleteRequest{
		ApiService: a,
		ctx: ctx,
		pgId: pgId,
		jobId: jobId,
	}
}

/*
 * Execute executes the request
 * @return LogJobDeleteResult
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogJobDeleteExecute(r ApiProcessGroupLogJobDeleteRequest) (LogJobDeleteResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LogJobDeleteResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringProcessGroupsApiService.ProcessGroupLogJobDelete")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/process-groups/{pgId}/logs/jobs/{jobId}"
	localVarPath = strings.Replace(localVarPath, "{"+"pgId"+"}", _neturl.PathEscape(parameterToString(r.pgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", _neturl.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProcessGroupLogJobRecordsRequest struct {
	ctx _context.Context
	ApiService *LogMonitoringProcessGroupsApiService
	pgId string
	jobId string
	scrollToken *string
	pageSize *int32
}

func (r ApiProcessGroupLogJobRecordsRequest) ScrollToken(scrollToken string) ApiProcessGroupLogJobRecordsRequest {
	r.scrollToken = &scrollToken
	return r
}
func (r ApiProcessGroupLogJobRecordsRequest) PageSize(pageSize int32) ApiProcessGroupLogJobRecordsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiProcessGroupLogJobRecordsRequest) Execute() (LogJobRecordsResult, *_nethttp.Response, error) {
	return r.ApiService.ProcessGroupLogJobRecordsExecute(r)
}

/*
 * ProcessGroupLogJobRecords Gets the content of the analyzed log
 * Results are available only when the status of the analysis job for this log is `READY`. To check the job status, use the [GET analysis job status](https://dt-url.net/wve3r83) request. 

Long results split into several pages. By default, a page contains 100 results. You can change this value with the **pageSize** query parameter, up to 10,000.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pgId The Dynatrace entity ID of the required process group.
 * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request.
 * @return ApiProcessGroupLogJobRecordsRequest
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogJobRecords(ctx _context.Context, pgId string, jobId string) ApiProcessGroupLogJobRecordsRequest {
	return ApiProcessGroupLogJobRecordsRequest{
		ApiService: a,
		ctx: ctx,
		pgId: pgId,
		jobId: jobId,
	}
}

/*
 * Execute executes the request
 * @return LogJobRecordsResult
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogJobRecordsExecute(r ApiProcessGroupLogJobRecordsRequest) (LogJobRecordsResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LogJobRecordsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringProcessGroupsApiService.ProcessGroupLogJobRecords")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/process-groups/{pgId}/logs/jobs/{jobId}/records"
	localVarPath = strings.Replace(localVarPath, "{"+"pgId"+"}", _neturl.PathEscape(parameterToString(r.pgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", _neturl.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.scrollToken != nil {
		localVarQueryParams.Add("scrollToken", parameterToString(*r.scrollToken, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProcessGroupLogJobRecordsFilteredRequest struct {
	ctx _context.Context
	ApiService *LogMonitoringProcessGroupsApiService
	pgId string
	jobId string
	scrollToken *string
	pageSize *int32
	filterLogContent *FilterLogContent
}

func (r ApiProcessGroupLogJobRecordsFilteredRequest) ScrollToken(scrollToken string) ApiProcessGroupLogJobRecordsFilteredRequest {
	r.scrollToken = &scrollToken
	return r
}
func (r ApiProcessGroupLogJobRecordsFilteredRequest) PageSize(pageSize int32) ApiProcessGroupLogJobRecordsFilteredRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiProcessGroupLogJobRecordsFilteredRequest) FilterLogContent(filterLogContent FilterLogContent) ApiProcessGroupLogJobRecordsFilteredRequest {
	r.filterLogContent = &filterLogContent
	return r
}

func (r ApiProcessGroupLogJobRecordsFilteredRequest) Execute() (LogJobRecordsResult, *_nethttp.Response, error) {
	return r.ApiService.ProcessGroupLogJobRecordsFilteredExecute(r)
}

/*
 * ProcessGroupLogJobRecordsFiltered Gets the content of the analyzed log
 * Results are available only when the status of the analysis job for this log is `READY`. To check the job status, use the [GET analysis job status](https://dt-url.net/wve3r83) request. 

Long results split into several pages. By default, a page contains 100 results. You can change this value with the **pageSize** query parameter, up to 10,000.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pgId The Dynatrace entity ID of the required process group.
 * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request.
 * @return ApiProcessGroupLogJobRecordsFilteredRequest
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogJobRecordsFiltered(ctx _context.Context, pgId string, jobId string) ApiProcessGroupLogJobRecordsFilteredRequest {
	return ApiProcessGroupLogJobRecordsFilteredRequest{
		ApiService: a,
		ctx: ctx,
		pgId: pgId,
		jobId: jobId,
	}
}

/*
 * Execute executes the request
 * @return LogJobRecordsResult
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogJobRecordsFilteredExecute(r ApiProcessGroupLogJobRecordsFilteredRequest) (LogJobRecordsResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LogJobRecordsResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringProcessGroupsApiService.ProcessGroupLogJobRecordsFiltered")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/process-groups/{pgId}/logs/jobs/{jobId}/records"
	localVarPath = strings.Replace(localVarPath, "{"+"pgId"+"}", _neturl.PathEscape(parameterToString(r.pgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", _neturl.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.scrollToken != nil {
		localVarQueryParams.Add("scrollToken", parameterToString(*r.scrollToken, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.filterLogContent
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProcessGroupLogJobRecordsTopRequest struct {
	ctx _context.Context
	ApiService *LogMonitoringProcessGroupsApiService
	pgId string
	jobId string
	filterTopLogRecords *FilterTopLogRecords
}

func (r ApiProcessGroupLogJobRecordsTopRequest) FilterTopLogRecords(filterTopLogRecords FilterTopLogRecords) ApiProcessGroupLogJobRecordsTopRequest {
	r.filterTopLogRecords = &filterTopLogRecords
	return r
}

func (r ApiProcessGroupLogJobRecordsTopRequest) Execute() (LogJobRecordsTopValuesRestResult, *_nethttp.Response, error) {
	return r.ApiService.ProcessGroupLogJobRecordsTopExecute(r)
}

/*
 * ProcessGroupLogJobRecordsTop Gets the top values of fields present in the content of the analyzed log
 * Results are available only when the status of the analysis job for this log is `READY`. To check the job status, use the [GET analysis job status](https://dt-url.net/usg3rbv) request.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pgId The Dynatrace entity ID of the required process group.
 * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request.
 * @return ApiProcessGroupLogJobRecordsTopRequest
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogJobRecordsTop(ctx _context.Context, pgId string, jobId string) ApiProcessGroupLogJobRecordsTopRequest {
	return ApiProcessGroupLogJobRecordsTopRequest{
		ApiService: a,
		ctx: ctx,
		pgId: pgId,
		jobId: jobId,
	}
}

/*
 * Execute executes the request
 * @return LogJobRecordsTopValuesRestResult
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogJobRecordsTopExecute(r ApiProcessGroupLogJobRecordsTopRequest) (LogJobRecordsTopValuesRestResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LogJobRecordsTopValuesRestResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringProcessGroupsApiService.ProcessGroupLogJobRecordsTop")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/process-groups/{pgId}/logs/jobs/{jobId}/records/top"
	localVarPath = strings.Replace(localVarPath, "{"+"pgId"+"}", _neturl.PathEscape(parameterToString(r.pgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", _neturl.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.filterTopLogRecords
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProcessGroupLogJobStartRequest struct {
	ctx _context.Context
	ApiService *LogMonitoringProcessGroupsApiService
	pgId string
	logPath string
	hostFilter *string
	query *string
	startTimestamp *int64
	endTimestamp *int64
	extractFields *ExtractFields
}

func (r ApiProcessGroupLogJobStartRequest) HostFilter(hostFilter string) ApiProcessGroupLogJobStartRequest {
	r.hostFilter = &hostFilter
	return r
}
func (r ApiProcessGroupLogJobStartRequest) Query(query string) ApiProcessGroupLogJobStartRequest {
	r.query = &query
	return r
}
func (r ApiProcessGroupLogJobStartRequest) StartTimestamp(startTimestamp int64) ApiProcessGroupLogJobStartRequest {
	r.startTimestamp = &startTimestamp
	return r
}
func (r ApiProcessGroupLogJobStartRequest) EndTimestamp(endTimestamp int64) ApiProcessGroupLogJobStartRequest {
	r.endTimestamp = &endTimestamp
	return r
}
func (r ApiProcessGroupLogJobStartRequest) ExtractFields(extractFields ExtractFields) ApiProcessGroupLogJobStartRequest {
	r.extractFields = &extractFields
	return r
}

func (r ApiProcessGroupLogJobStartRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ProcessGroupLogJobStartExecute(r)
}

/*
 * ProcessGroupLogJobStart Starts analysis job for the specified process group log
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pgId The Dynatrace entity ID of the required process group.
 * @param logPath The full pathname of the log.
 * @return ApiProcessGroupLogJobStartRequest
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogJobStart(ctx _context.Context, pgId string, logPath string) ApiProcessGroupLogJobStartRequest {
	return ApiProcessGroupLogJobStartRequest{
		ApiService: a,
		ctx: ctx,
		pgId: pgId,
		logPath: logPath,
	}
}

/*
 * Execute executes the request
 * @return string
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogJobStartExecute(r ApiProcessGroupLogJobStartRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringProcessGroupsApiService.ProcessGroupLogJobStart")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/process-groups/{pgId}/logs/{logPath}"
	localVarPath = strings.Replace(localVarPath, "{"+"pgId"+"}", _neturl.PathEscape(parameterToString(r.pgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"logPath"+"}", _neturl.PathEscape(parameterToString(r.logPath, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.hostFilter != nil {
		localVarQueryParams.Add("hostFilter", parameterToString(*r.hostFilter, ""))
	}
	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	if r.startTimestamp != nil {
		localVarQueryParams.Add("startTimestamp", parameterToString(*r.startTimestamp, ""))
	}
	if r.endTimestamp != nil {
		localVarQueryParams.Add("endTimestamp", parameterToString(*r.endTimestamp, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.extractFields
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProcessGroupLogJobStatusRequest struct {
	ctx _context.Context
	ApiService *LogMonitoringProcessGroupsApiService
	pgId string
	jobId string
}


func (r ApiProcessGroupLogJobStatusRequest) Execute() (LogJobStatusResult, *_nethttp.Response, error) {
	return r.ApiService.ProcessGroupLogJobStatusExecute(r)
}

/*
 * ProcessGroupLogJobStatus Gets status of the specified log analysis job
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pgId The Dynatrace entity ID of the required process group.
 * @param jobId The ID of the required log analysis job.    You can retrieve it from the response of the [POST analysis job](https://dt-url.net/c2m3rxl) request.
 * @return ApiProcessGroupLogJobStatusRequest
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogJobStatus(ctx _context.Context, pgId string, jobId string) ApiProcessGroupLogJobStatusRequest {
	return ApiProcessGroupLogJobStatusRequest{
		ApiService: a,
		ctx: ctx,
		pgId: pgId,
		jobId: jobId,
	}
}

/*
 * Execute executes the request
 * @return LogJobStatusResult
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogJobStatusExecute(r ApiProcessGroupLogJobStatusRequest) (LogJobStatusResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LogJobStatusResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringProcessGroupsApiService.ProcessGroupLogJobStatus")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/process-groups/{pgId}/logs/jobs/{jobId}"
	localVarPath = strings.Replace(localVarPath, "{"+"pgId"+"}", _neturl.PathEscape(parameterToString(r.pgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", _neturl.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProcessGroupLogListRequest struct {
	ctx _context.Context
	ApiService *LogMonitoringProcessGroupsApiService
	pgId string
}


func (r ApiProcessGroupLogListRequest) Execute() (LogList4pgResult, *_nethttp.Response, error) {
	return r.ApiService.ProcessGroupLogListExecute(r)
}

/*
 * ProcessGroupLogList Lists all the available logs of the specified process group
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param pgId The entity ID of the process group.
 * @return ApiProcessGroupLogListRequest
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogList(ctx _context.Context, pgId string) ApiProcessGroupLogListRequest {
	return ApiProcessGroupLogListRequest{
		ApiService: a,
		ctx: ctx,
		pgId: pgId,
	}
}

/*
 * Execute executes the request
 * @return LogList4pgResult
 */
func (a *LogMonitoringProcessGroupsApiService) ProcessGroupLogListExecute(r ApiProcessGroupLogListRequest) (LogList4pgResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LogList4pgResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LogMonitoringProcessGroupsApiService.ProcessGroupLogList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entity/infrastructure/process-groups/{pgId}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"pgId"+"}", _neturl.PathEscape(parameterToString(r.pgId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
