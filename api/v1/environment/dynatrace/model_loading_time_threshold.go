/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// LoadingTimeThreshold The performance threshold rule.
type LoadingTimeThreshold struct {
	// The type of the threshold: total loading time or action loading time.
	Type string `json:"type"`
	// Notify if monitor takes longer than *X* milliseconds to load.
	ValueMs int32 `json:"valueMs"`
	// Specify the request to which an ACTION threshold applies.
	RequestIndex *int32 `json:"requestIndex,omitempty"`
	// Specify the event to which an ACTION threshold applies.
	EventIndex *int32 `json:"eventIndex,omitempty"`
}

// NewLoadingTimeThreshold instantiates a new LoadingTimeThreshold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadingTimeThreshold(type_ string, valueMs int32, ) *LoadingTimeThreshold {
	this := LoadingTimeThreshold{}
	this.Type = type_
	this.ValueMs = valueMs
	return &this
}

// NewLoadingTimeThresholdWithDefaults instantiates a new LoadingTimeThreshold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadingTimeThresholdWithDefaults() *LoadingTimeThreshold {
	this := LoadingTimeThreshold{}
	return &this
}

// GetType returns the Type field value
func (o *LoadingTimeThreshold) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LoadingTimeThreshold) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LoadingTimeThreshold) SetType(v string) {
	o.Type = v
}

// GetValueMs returns the ValueMs field value
func (o *LoadingTimeThreshold) GetValueMs() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.ValueMs
}

// GetValueMsOk returns a tuple with the ValueMs field value
// and a boolean to check if the value has been set.
func (o *LoadingTimeThreshold) GetValueMsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ValueMs, true
}

// SetValueMs sets field value
func (o *LoadingTimeThreshold) SetValueMs(v int32) {
	o.ValueMs = v
}

// GetRequestIndex returns the RequestIndex field value if set, zero value otherwise.
func (o *LoadingTimeThreshold) GetRequestIndex() int32 {
	if o == nil || o.RequestIndex == nil {
		var ret int32
		return ret
	}
	return *o.RequestIndex
}

// GetRequestIndexOk returns a tuple with the RequestIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadingTimeThreshold) GetRequestIndexOk() (*int32, bool) {
	if o == nil || o.RequestIndex == nil {
		return nil, false
	}
	return o.RequestIndex, true
}

// HasRequestIndex returns a boolean if a field has been set.
func (o *LoadingTimeThreshold) HasRequestIndex() bool {
	if o != nil && o.RequestIndex != nil {
		return true
	}

	return false
}

// SetRequestIndex gets a reference to the given int32 and assigns it to the RequestIndex field.
func (o *LoadingTimeThreshold) SetRequestIndex(v int32) {
	o.RequestIndex = &v
}

// GetEventIndex returns the EventIndex field value if set, zero value otherwise.
func (o *LoadingTimeThreshold) GetEventIndex() int32 {
	if o == nil || o.EventIndex == nil {
		var ret int32
		return ret
	}
	return *o.EventIndex
}

// GetEventIndexOk returns a tuple with the EventIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadingTimeThreshold) GetEventIndexOk() (*int32, bool) {
	if o == nil || o.EventIndex == nil {
		return nil, false
	}
	return o.EventIndex, true
}

// HasEventIndex returns a boolean if a field has been set.
func (o *LoadingTimeThreshold) HasEventIndex() bool {
	if o != nil && o.EventIndex != nil {
		return true
	}

	return false
}

// SetEventIndex gets a reference to the given int32 and assigns it to the EventIndex field.
func (o *LoadingTimeThreshold) SetEventIndex(v int32) {
	o.EventIndex = &v
}

func (o LoadingTimeThreshold) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["valueMs"] = o.ValueMs
	}
	if o.RequestIndex != nil {
		toSerialize["requestIndex"] = o.RequestIndex
	}
	if o.EventIndex != nil {
		toSerialize["eventIndex"] = o.EventIndex
	}
	return json.Marshal(toSerialize)
}

type NullableLoadingTimeThreshold struct {
	value *LoadingTimeThreshold
	isSet bool
}

func (v NullableLoadingTimeThreshold) Get() *LoadingTimeThreshold {
	return v.value
}

func (v *NullableLoadingTimeThreshold) Set(val *LoadingTimeThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadingTimeThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadingTimeThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadingTimeThreshold(val *LoadingTimeThreshold) *NullableLoadingTimeThreshold {
	return &NullableLoadingTimeThreshold{value: val, isSet: true}
}

func (v NullableLoadingTimeThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadingTimeThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


