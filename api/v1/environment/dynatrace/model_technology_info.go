/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TechnologyInfo struct for TechnologyInfo
type TechnologyInfo struct {
	Type *string `json:"type,omitempty"`
	Edition *string `json:"edition,omitempty"`
	Version *string `json:"version,omitempty"`
}

// NewTechnologyInfo instantiates a new TechnologyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTechnologyInfo() *TechnologyInfo {
	this := TechnologyInfo{}
	return &this
}

// NewTechnologyInfoWithDefaults instantiates a new TechnologyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTechnologyInfoWithDefaults() *TechnologyInfo {
	this := TechnologyInfo{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TechnologyInfo) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnologyInfo) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TechnologyInfo) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TechnologyInfo) SetType(v string) {
	o.Type = &v
}

// GetEdition returns the Edition field value if set, zero value otherwise.
func (o *TechnologyInfo) GetEdition() string {
	if o == nil || o.Edition == nil {
		var ret string
		return ret
	}
	return *o.Edition
}

// GetEditionOk returns a tuple with the Edition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnologyInfo) GetEditionOk() (*string, bool) {
	if o == nil || o.Edition == nil {
		return nil, false
	}
	return o.Edition, true
}

// HasEdition returns a boolean if a field has been set.
func (o *TechnologyInfo) HasEdition() bool {
	if o != nil && o.Edition != nil {
		return true
	}

	return false
}

// SetEdition gets a reference to the given string and assigns it to the Edition field.
func (o *TechnologyInfo) SetEdition(v string) {
	o.Edition = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *TechnologyInfo) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TechnologyInfo) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *TechnologyInfo) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *TechnologyInfo) SetVersion(v string) {
	o.Version = &v
}

func (o TechnologyInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Edition != nil {
		toSerialize["edition"] = o.Edition
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableTechnologyInfo struct {
	value *TechnologyInfo
	isSet bool
}

func (v NullableTechnologyInfo) Get() *TechnologyInfo {
	return v.value
}

func (v *NullableTechnologyInfo) Set(val *TechnologyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTechnologyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTechnologyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTechnologyInfo(val *TechnologyInfo) *NullableTechnologyInfo {
	return &NullableTechnologyInfo{value: val, isSet: true}
}

func (v NullableTechnologyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTechnologyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


