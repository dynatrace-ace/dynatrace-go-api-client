/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Monitors A list of synthetic monitors
type Monitors struct {
	// The list of synthetic monitors.
	Monitors []MonitorCollectionElement `json:"monitors"`
}

// NewMonitors instantiates a new Monitors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitors(monitors []MonitorCollectionElement) *Monitors {
	this := Monitors{}
	this.Monitors = monitors
	return &this
}

// NewMonitorsWithDefaults instantiates a new Monitors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorsWithDefaults() *Monitors {
	this := Monitors{}
	return &this
}

// GetMonitors returns the Monitors field value
func (o *Monitors) GetMonitors() []MonitorCollectionElement {
	if o == nil {
		var ret []MonitorCollectionElement
		return ret
	}

	return o.Monitors
}

// GetMonitorsOk returns a tuple with the Monitors field value
// and a boolean to check if the value has been set.
func (o *Monitors) GetMonitorsOk() (*[]MonitorCollectionElement, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Monitors, true
}

// SetMonitors sets field value
func (o *Monitors) SetMonitors(v []MonitorCollectionElement) {
	o.Monitors = v
}

func (o Monitors) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["monitors"] = o.Monitors
	}
	return json.Marshal(toSerialize)
}

type NullableMonitors struct {
	value *Monitors
	isSet bool
}

func (v NullableMonitors) Get() *Monitors {
	return v.value
}

func (v *NullableMonitors) Set(val *Monitors) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitors) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitors(val *Monitors) *NullableMonitors {
	return &NullableMonitors{value: val, isSet: true}
}

func (v NullableMonitors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


