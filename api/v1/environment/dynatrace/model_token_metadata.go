/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TokenMetadata Metadata of a token.
type TokenMetadata struct {
	// The ID of the token.
	Id *string `json:"id,omitempty"`
	// The name of the token.
	Name *string `json:"name,omitempty"`
	// The owner of the token.
	UserId *string `json:"userId,omitempty"`
	// Revocation status of the token. Revoked tokens are disabled.
	Revoked *bool `json:"revoked,omitempty"`
	// The creation time as a unix timestamp in milliseconds.
	Created *int64 `json:"created,omitempty"`
	// The expiration time as a unix timestamp in milliseconds.
	Expires *int64 `json:"expires,omitempty"`
	// The unix timestamp in milliseconds when the token was last used.
	LastUse *int64 `json:"lastUse,omitempty"`
	// The list of permissions, assigned to the token.
	Scopes *[]string `json:"scopes,omitempty"`
	// Specifies if the token is a personal access token. Personal access tokens are tied to the permissions of their owner.
	PersonalAccessToken *bool `json:"personalAccessToken,omitempty"`
}

// NewTokenMetadata instantiates a new TokenMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenMetadata() *TokenMetadata {
	this := TokenMetadata{}
	return &this
}

// NewTokenMetadataWithDefaults instantiates a new TokenMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenMetadataWithDefaults() *TokenMetadata {
	this := TokenMetadata{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TokenMetadata) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TokenMetadata) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TokenMetadata) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TokenMetadata) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TokenMetadata) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TokenMetadata) SetName(v string) {
	o.Name = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *TokenMetadata) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *TokenMetadata) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *TokenMetadata) SetUserId(v string) {
	o.UserId = &v
}

// GetRevoked returns the Revoked field value if set, zero value otherwise.
func (o *TokenMetadata) GetRevoked() bool {
	if o == nil || o.Revoked == nil {
		var ret bool
		return ret
	}
	return *o.Revoked
}

// GetRevokedOk returns a tuple with the Revoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetRevokedOk() (*bool, bool) {
	if o == nil || o.Revoked == nil {
		return nil, false
	}
	return o.Revoked, true
}

// HasRevoked returns a boolean if a field has been set.
func (o *TokenMetadata) HasRevoked() bool {
	if o != nil && o.Revoked != nil {
		return true
	}

	return false
}

// SetRevoked gets a reference to the given bool and assigns it to the Revoked field.
func (o *TokenMetadata) SetRevoked(v bool) {
	o.Revoked = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TokenMetadata) GetCreated() int64 {
	if o == nil || o.Created == nil {
		var ret int64
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetCreatedOk() (*int64, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TokenMetadata) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int64 and assigns it to the Created field.
func (o *TokenMetadata) SetCreated(v int64) {
	o.Created = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *TokenMetadata) GetExpires() int64 {
	if o == nil || o.Expires == nil {
		var ret int64
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetExpiresOk() (*int64, bool) {
	if o == nil || o.Expires == nil {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *TokenMetadata) HasExpires() bool {
	if o != nil && o.Expires != nil {
		return true
	}

	return false
}

// SetExpires gets a reference to the given int64 and assigns it to the Expires field.
func (o *TokenMetadata) SetExpires(v int64) {
	o.Expires = &v
}

// GetLastUse returns the LastUse field value if set, zero value otherwise.
func (o *TokenMetadata) GetLastUse() int64 {
	if o == nil || o.LastUse == nil {
		var ret int64
		return ret
	}
	return *o.LastUse
}

// GetLastUseOk returns a tuple with the LastUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetLastUseOk() (*int64, bool) {
	if o == nil || o.LastUse == nil {
		return nil, false
	}
	return o.LastUse, true
}

// HasLastUse returns a boolean if a field has been set.
func (o *TokenMetadata) HasLastUse() bool {
	if o != nil && o.LastUse != nil {
		return true
	}

	return false
}

// SetLastUse gets a reference to the given int64 and assigns it to the LastUse field.
func (o *TokenMetadata) SetLastUse(v int64) {
	o.LastUse = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *TokenMetadata) GetScopes() []string {
	if o == nil || o.Scopes == nil {
		var ret []string
		return ret
	}
	return *o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetScopesOk() (*[]string, bool) {
	if o == nil || o.Scopes == nil {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *TokenMetadata) HasScopes() bool {
	if o != nil && o.Scopes != nil {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *TokenMetadata) SetScopes(v []string) {
	o.Scopes = &v
}

// GetPersonalAccessToken returns the PersonalAccessToken field value if set, zero value otherwise.
func (o *TokenMetadata) GetPersonalAccessToken() bool {
	if o == nil || o.PersonalAccessToken == nil {
		var ret bool
		return ret
	}
	return *o.PersonalAccessToken
}

// GetPersonalAccessTokenOk returns a tuple with the PersonalAccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMetadata) GetPersonalAccessTokenOk() (*bool, bool) {
	if o == nil || o.PersonalAccessToken == nil {
		return nil, false
	}
	return o.PersonalAccessToken, true
}

// HasPersonalAccessToken returns a boolean if a field has been set.
func (o *TokenMetadata) HasPersonalAccessToken() bool {
	if o != nil && o.PersonalAccessToken != nil {
		return true
	}

	return false
}

// SetPersonalAccessToken gets a reference to the given bool and assigns it to the PersonalAccessToken field.
func (o *TokenMetadata) SetPersonalAccessToken(v bool) {
	o.PersonalAccessToken = &v
}

func (o TokenMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.Revoked != nil {
		toSerialize["revoked"] = o.Revoked
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Expires != nil {
		toSerialize["expires"] = o.Expires
	}
	if o.LastUse != nil {
		toSerialize["lastUse"] = o.LastUse
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if o.PersonalAccessToken != nil {
		toSerialize["personalAccessToken"] = o.PersonalAccessToken
	}
	return json.Marshal(toSerialize)
}

type NullableTokenMetadata struct {
	value *TokenMetadata
	isSet bool
}

func (v NullableTokenMetadata) Get() *TokenMetadata {
	return v.value
}

func (v *NullableTokenMetadata) Set(val *TokenMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenMetadata(val *TokenMetadata) *NullableTokenMetadata {
	return &NullableTokenMetadata{value: val, isSet: true}
}

func (v NullableTokenMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


