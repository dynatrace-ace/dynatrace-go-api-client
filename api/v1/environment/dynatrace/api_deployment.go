/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// DeploymentApiService DeploymentApi service
type DeploymentApiService service

type ApiDownloadAgentInstallerWithVersionRequest struct {
	ctx _context.Context
	ApiService *DeploymentApiService
	osType string
	installerType string
	version string
	ifNoneMatch *string
	flavor *string
	arch *string
	bitness *string
	include *[]string
	skipMetadata *bool
}

func (r ApiDownloadAgentInstallerWithVersionRequest) IfNoneMatch(ifNoneMatch string) ApiDownloadAgentInstallerWithVersionRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}
func (r ApiDownloadAgentInstallerWithVersionRequest) Flavor(flavor string) ApiDownloadAgentInstallerWithVersionRequest {
	r.flavor = &flavor
	return r
}
func (r ApiDownloadAgentInstallerWithVersionRequest) Arch(arch string) ApiDownloadAgentInstallerWithVersionRequest {
	r.arch = &arch
	return r
}
func (r ApiDownloadAgentInstallerWithVersionRequest) Bitness(bitness string) ApiDownloadAgentInstallerWithVersionRequest {
	r.bitness = &bitness
	return r
}
func (r ApiDownloadAgentInstallerWithVersionRequest) Include(include []string) ApiDownloadAgentInstallerWithVersionRequest {
	r.include = &include
	return r
}
func (r ApiDownloadAgentInstallerWithVersionRequest) SkipMetadata(skipMetadata bool) ApiDownloadAgentInstallerWithVersionRequest {
	r.skipMetadata = &skipMetadata
	return r
}

func (r ApiDownloadAgentInstallerWithVersionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DownloadAgentInstallerWithVersionExecute(r)
}

/*
 * DownloadAgentInstallerWithVersion Downloads OneAgent installer of the specified version
 * For the `paas` or `paas-sh` installer types you can get a configuring installer, by passing additional parameters.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param osType The operating system of the installer.
 * @param installerType The type of the installer:   * `default`: Self-extracting installer for manual installation. Downloads an `.exe` file for Windows or an `.sh` file for Unix.  * `default-unattended`: Self-extracting installer for unattended installation. Windows only. Downloads a `.zip` archive, containing the `.msi` installer and the batch file. This option is deprecated with OneAgent version 1.173  * `paas`: Code modules installer. Downloads a `*.zip` archive, containing the `manifest.json` file with meta information or a `.jar` file for z/OS.  * `paas-sh`: Code modules installer. Downloads a self-extracting shell script with the embedded `tar.gz` archive.
 * @param version The required version of the OneAgent in `1.155.275.20181112-084458` format.   You can retrieve the list of available versions with the [**GET available versions of OneAgent**](https://dt-url.net/fo23rb5) call.
 * @return ApiDownloadAgentInstallerWithVersionRequest
 */
func (a *DeploymentApiService) DownloadAgentInstallerWithVersion(ctx _context.Context, osType string, installerType string, version string) ApiDownloadAgentInstallerWithVersionRequest {
	return ApiDownloadAgentInstallerWithVersionRequest{
		ApiService: a,
		ctx: ctx,
		osType: osType,
		installerType: installerType,
		version: version,
	}
}

/*
 * Execute executes the request
 */
func (a *DeploymentApiService) DownloadAgentInstallerWithVersionExecute(r ApiDownloadAgentInstallerWithVersionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentApiService.DownloadAgentInstallerWithVersion")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/installer/agent/{osType}/{installerType}/version/{version}"
	localVarPath = strings.Replace(localVarPath, "{"+"osType"+"}", _neturl.PathEscape(parameterToString(r.osType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"installerType"+"}", _neturl.PathEscape(parameterToString(r.installerType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", _neturl.PathEscape(parameterToString(r.version, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.flavor != nil {
		localVarQueryParams.Add("flavor", parameterToString(*r.flavor, ""))
	}
	if r.arch != nil {
		localVarQueryParams.Add("arch", parameterToString(*r.arch, ""))
	}
	if r.bitness != nil {
		localVarQueryParams.Add("bitness", parameterToString(*r.bitness, ""))
	}
	if r.include != nil {
		t := *r.include
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("include", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("include", parameterToString(t, "multi"))
		}
	}
	if r.skipMetadata != nil {
		localVarQueryParams.Add("skipMetadata", parameterToString(*r.skipMetadata, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifNoneMatch != nil {
		localVarHeaderParams["If-None-Match"] = parameterToString(*r.ifNoneMatch, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDownloadBoshReleaseWithVersionRequest struct {
	ctx _context.Context
	ApiService *DeploymentApiService
	osType string
	version string
	skipMetadata *bool
}

func (r ApiDownloadBoshReleaseWithVersionRequest) SkipMetadata(skipMetadata bool) ApiDownloadBoshReleaseWithVersionRequest {
	r.skipMetadata = &skipMetadata
	return r
}

func (r ApiDownloadBoshReleaseWithVersionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DownloadBoshReleaseWithVersionExecute(r)
}

/*
 * DownloadBoshReleaseWithVersion Downloads BOSH release tarballs of the specified version, OneAgent included
 * For SaaS, the call is executed on an Environment ActiveGate. Be sure to use the base of an ActiveGate, **not** the environment.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param osType The operating system of the installer.
 * @param version The required version of the OneAgent in the `1.155.275.20181112-084458` format.   You can retrieve the list of available versions with the [**GET available versions of BOSH tarballs**](https://dt-url.net/j703kdn) call.
 * @return ApiDownloadBoshReleaseWithVersionRequest
 */
func (a *DeploymentApiService) DownloadBoshReleaseWithVersion(ctx _context.Context, osType string, version string) ApiDownloadBoshReleaseWithVersionRequest {
	return ApiDownloadBoshReleaseWithVersionRequest{
		ApiService: a,
		ctx: ctx,
		osType: osType,
		version: version,
	}
}

/*
 * Execute executes the request
 */
func (a *DeploymentApiService) DownloadBoshReleaseWithVersionExecute(r ApiDownloadBoshReleaseWithVersionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentApiService.DownloadBoshReleaseWithVersion")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/boshrelease/agent/{osType}/version/{version}"
	localVarPath = strings.Replace(localVarPath, "{"+"osType"+"}", _neturl.PathEscape(parameterToString(r.osType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", _neturl.PathEscape(parameterToString(r.version, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.skipMetadata != nil {
		localVarQueryParams.Add("skipMetadata", parameterToString(*r.skipMetadata, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDownloadGatewayInstallerWithVersionRequest struct {
	ctx _context.Context
	ApiService *DeploymentApiService
	osType string
	version string
	ifNoneMatch *string
}

func (r ApiDownloadGatewayInstallerWithVersionRequest) IfNoneMatch(ifNoneMatch string) ApiDownloadGatewayInstallerWithVersionRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

func (r ApiDownloadGatewayInstallerWithVersionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DownloadGatewayInstallerWithVersionExecute(r)
}

/*
 * DownloadGatewayInstallerWithVersion Downloads the ActiveGate installer, compatible with the specified **OneAgent** version
 *  The request downloads the ActiveGate installer of the version, compatible with the provided OneAgent version. This version might be different from the specified OneAgent version.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param osType The operating system of the installer.
 * @param version The required version of the **OneAgent** installer, in `1.155.275.20181112-084458` format.     The request returns the ActiveGate installer of the version, compatible with the provided OneAgent version.   You can retrieve the list of available versions with the [**GET available versions of ActiveGate**](https://dt-url.net/kh43rha) call.
 * @return ApiDownloadGatewayInstallerWithVersionRequest
 */
func (a *DeploymentApiService) DownloadGatewayInstallerWithVersion(ctx _context.Context, osType string, version string) ApiDownloadGatewayInstallerWithVersionRequest {
	return ApiDownloadGatewayInstallerWithVersionRequest{
		ApiService: a,
		ctx: ctx,
		osType: osType,
		version: version,
	}
}

/*
 * Execute executes the request
 */
func (a *DeploymentApiService) DownloadGatewayInstallerWithVersionExecute(r ApiDownloadGatewayInstallerWithVersionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentApiService.DownloadGatewayInstallerWithVersion")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/installer/gateway/{osType}/version/{version}"
	localVarPath = strings.Replace(localVarPath, "{"+"osType"+"}", _neturl.PathEscape(parameterToString(r.osType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", _neturl.PathEscape(parameterToString(r.version, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifNoneMatch != nil {
		localVarHeaderParams["If-None-Match"] = parameterToString(*r.ifNoneMatch, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDownloadLatestAgentInstallerRequest struct {
	ctx _context.Context
	ApiService *DeploymentApiService
	osType string
	installerType string
	ifNoneMatch *string
	flavor *string
	arch *string
	bitness *string
	include *[]string
	skipMetadata *bool
}

func (r ApiDownloadLatestAgentInstallerRequest) IfNoneMatch(ifNoneMatch string) ApiDownloadLatestAgentInstallerRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}
func (r ApiDownloadLatestAgentInstallerRequest) Flavor(flavor string) ApiDownloadLatestAgentInstallerRequest {
	r.flavor = &flavor
	return r
}
func (r ApiDownloadLatestAgentInstallerRequest) Arch(arch string) ApiDownloadLatestAgentInstallerRequest {
	r.arch = &arch
	return r
}
func (r ApiDownloadLatestAgentInstallerRequest) Bitness(bitness string) ApiDownloadLatestAgentInstallerRequest {
	r.bitness = &bitness
	return r
}
func (r ApiDownloadLatestAgentInstallerRequest) Include(include []string) ApiDownloadLatestAgentInstallerRequest {
	r.include = &include
	return r
}
func (r ApiDownloadLatestAgentInstallerRequest) SkipMetadata(skipMetadata bool) ApiDownloadLatestAgentInstallerRequest {
	r.skipMetadata = &skipMetadata
	return r
}

func (r ApiDownloadLatestAgentInstallerRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DownloadLatestAgentInstallerExecute(r)
}

/*
 * DownloadLatestAgentInstaller Downloads the latest OneAgent installer
 * For the `paas` or `paas-sh` installer types you can get a configuring installer, by passing additional parameters.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param osType The operating system of the installer.
 * @param installerType The type of the installer:   * `default`: Self-extracting installer for manual installation. Downloads an `.exe` file for Windows or an `.sh` file for Unix.  * `default-unattended`: Self-extracting installer for unattended installation. Windows only. Downloads a `.zip` archive, containing the `.msi` installer and the batch file. This option is deprecated with OneAgent version 1.173  * `paas`: Code modules installer. Downloads a `*.zip` archive, containing the `manifest.json` file with meta information or a `.jar` file for z/OS.  * `paas-sh`: Code modules installer. Downloads a self-extracting shell script with the embedded `tar.gz` archive.
 * @return ApiDownloadLatestAgentInstallerRequest
 */
func (a *DeploymentApiService) DownloadLatestAgentInstaller(ctx _context.Context, osType string, installerType string) ApiDownloadLatestAgentInstallerRequest {
	return ApiDownloadLatestAgentInstallerRequest{
		ApiService: a,
		ctx: ctx,
		osType: osType,
		installerType: installerType,
	}
}

/*
 * Execute executes the request
 */
func (a *DeploymentApiService) DownloadLatestAgentInstallerExecute(r ApiDownloadLatestAgentInstallerRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentApiService.DownloadLatestAgentInstaller")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/installer/agent/{osType}/{installerType}/latest"
	localVarPath = strings.Replace(localVarPath, "{"+"osType"+"}", _neturl.PathEscape(parameterToString(r.osType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"installerType"+"}", _neturl.PathEscape(parameterToString(r.installerType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.flavor != nil {
		localVarQueryParams.Add("flavor", parameterToString(*r.flavor, ""))
	}
	if r.arch != nil {
		localVarQueryParams.Add("arch", parameterToString(*r.arch, ""))
	}
	if r.bitness != nil {
		localVarQueryParams.Add("bitness", parameterToString(*r.bitness, ""))
	}
	if r.include != nil {
		t := *r.include
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("include", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("include", parameterToString(t, "multi"))
		}
	}
	if r.skipMetadata != nil {
		localVarQueryParams.Add("skipMetadata", parameterToString(*r.skipMetadata, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifNoneMatch != nil {
		localVarHeaderParams["If-None-Match"] = parameterToString(*r.ifNoneMatch, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDownloadLatestGatewayInstallerRequest struct {
	ctx _context.Context
	ApiService *DeploymentApiService
	osType string
	ifNoneMatch *string
}

func (r ApiDownloadLatestGatewayInstallerRequest) IfNoneMatch(ifNoneMatch string) ApiDownloadLatestGatewayInstallerRequest {
	r.ifNoneMatch = &ifNoneMatch
	return r
}

func (r ApiDownloadLatestGatewayInstallerRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DownloadLatestGatewayInstallerExecute(r)
}

/*
 * DownloadLatestGatewayInstaller Downloads the configured standard ActiveGate installer of the latest version for the specified OS
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param osType The operating system of the installer.
 * @return ApiDownloadLatestGatewayInstallerRequest
 */
func (a *DeploymentApiService) DownloadLatestGatewayInstaller(ctx _context.Context, osType string) ApiDownloadLatestGatewayInstallerRequest {
	return ApiDownloadLatestGatewayInstallerRequest{
		ApiService: a,
		ctx: ctx,
		osType: osType,
	}
}

/*
 * Execute executes the request
 */
func (a *DeploymentApiService) DownloadLatestGatewayInstallerExecute(r ApiDownloadLatestGatewayInstallerRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentApiService.DownloadLatestGatewayInstaller")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/installer/gateway/{osType}/latest"
	localVarPath = strings.Replace(localVarPath, "{"+"osType"+"}", _neturl.PathEscape(parameterToString(r.osType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifNoneMatch != nil {
		localVarHeaderParams["If-None-Match"] = parameterToString(*r.ifNoneMatch, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetActiveGateInstallerAvailableVersionsRequest struct {
	ctx _context.Context
	ApiService *DeploymentApiService
	osType string
}


func (r ApiGetActiveGateInstallerAvailableVersionsRequest) Execute() (ActiveGateInstallerVersions, *_nethttp.Response, error) {
	return r.ApiService.GetActiveGateInstallerAvailableVersionsExecute(r)
}

/*
 * GetActiveGateInstallerAvailableVersions Lists all available versions of ActiveGate installer | maturity=EARLY_ADOPTER
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param osType The operating system of the installer.
 * @return ApiGetActiveGateInstallerAvailableVersionsRequest
 */
func (a *DeploymentApiService) GetActiveGateInstallerAvailableVersions(ctx _context.Context, osType string) ApiGetActiveGateInstallerAvailableVersionsRequest {
	return ApiGetActiveGateInstallerAvailableVersionsRequest{
		ApiService: a,
		ctx: ctx,
		osType: osType,
	}
}

/*
 * Execute executes the request
 * @return ActiveGateInstallerVersions
 */
func (a *DeploymentApiService) GetActiveGateInstallerAvailableVersionsExecute(r ApiGetActiveGateInstallerAvailableVersionsRequest) (ActiveGateInstallerVersions, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ActiveGateInstallerVersions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentApiService.GetActiveGateInstallerAvailableVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/installer/gateway/versions/{osType}"
	localVarPath = strings.Replace(localVarPath, "{"+"osType"+"}", _neturl.PathEscape(parameterToString(r.osType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAgentInstallerAvailableVersionsRequest struct {
	ctx _context.Context
	ApiService *DeploymentApiService
	osType string
	installerType string
	flavor *string
	arch *string
}

func (r ApiGetAgentInstallerAvailableVersionsRequest) Flavor(flavor string) ApiGetAgentInstallerAvailableVersionsRequest {
	r.flavor = &flavor
	return r
}
func (r ApiGetAgentInstallerAvailableVersionsRequest) Arch(arch string) ApiGetAgentInstallerAvailableVersionsRequest {
	r.arch = &arch
	return r
}

func (r ApiGetAgentInstallerAvailableVersionsRequest) Execute() (AgentInstallerVersions, *_nethttp.Response, error) {
	return r.ApiService.GetAgentInstallerAvailableVersionsExecute(r)
}

/*
 * GetAgentInstallerAvailableVersions Lists all available versions of OneAgent installer
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param osType The operating system of the installer.
 * @param installerType The type of the installer:   * `default`: Self-extracting installer for manual installation. Downloads an `.exe` file for Windows or an `.sh` file for Unix.  * `default-unattended`: Self-extracting installer for unattended installation. Windows only. Downloads a `.zip` archive, containing the `.msi` installer and the batch file. This option is deprecated with OneAgent version 1.173  * `paas`: Code modules installer. Downloads a `*.zip` archive, containing the `manifest.json` file with meta information or a `.jar` file for z/OS.  * `paas-sh`: Code modules installer. Downloads a self-extracting shell script with the embedded `tar.gz` archive.
 * @return ApiGetAgentInstallerAvailableVersionsRequest
 */
func (a *DeploymentApiService) GetAgentInstallerAvailableVersions(ctx _context.Context, osType string, installerType string) ApiGetAgentInstallerAvailableVersionsRequest {
	return ApiGetAgentInstallerAvailableVersionsRequest{
		ApiService: a,
		ctx: ctx,
		osType: osType,
		installerType: installerType,
	}
}

/*
 * Execute executes the request
 * @return AgentInstallerVersions
 */
func (a *DeploymentApiService) GetAgentInstallerAvailableVersionsExecute(r ApiGetAgentInstallerAvailableVersionsRequest) (AgentInstallerVersions, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AgentInstallerVersions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentApiService.GetAgentInstallerAvailableVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/installer/agent/versions/{osType}/{installerType}"
	localVarPath = strings.Replace(localVarPath, "{"+"osType"+"}", _neturl.PathEscape(parameterToString(r.osType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"installerType"+"}", _neturl.PathEscape(parameterToString(r.installerType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.flavor != nil {
		localVarQueryParams.Add("flavor", parameterToString(*r.flavor, ""))
	}
	if r.arch != nil {
		localVarQueryParams.Add("arch", parameterToString(*r.arch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAgentInstallerConnectionInfoRequest struct {
	ctx _context.Context
	ApiService *DeploymentApiService
}


func (r ApiGetAgentInstallerConnectionInfoRequest) Execute() (ConnectionInfo, *_nethttp.Response, error) {
	return r.ApiService.GetAgentInstallerConnectionInfoExecute(r)
}

/*
 * GetAgentInstallerConnectionInfo Gets the connectivity information for OneAgent
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetAgentInstallerConnectionInfoRequest
 */
func (a *DeploymentApiService) GetAgentInstallerConnectionInfo(ctx _context.Context) ApiGetAgentInstallerConnectionInfoRequest {
	return ApiGetAgentInstallerConnectionInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ConnectionInfo
 */
func (a *DeploymentApiService) GetAgentInstallerConnectionInfoExecute(r ApiGetAgentInstallerConnectionInfoRequest) (ConnectionInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectionInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentApiService.GetAgentInstallerConnectionInfo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/installer/agent/connectioninfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAgentInstallerConnectionInfoEndpointsRequest struct {
	ctx _context.Context
	ApiService *DeploymentApiService
	networkZone *string
}

func (r ApiGetAgentInstallerConnectionInfoEndpointsRequest) NetworkZone(networkZone string) ApiGetAgentInstallerConnectionInfoEndpointsRequest {
	r.networkZone = &networkZone
	return r
}

func (r ApiGetAgentInstallerConnectionInfoEndpointsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.GetAgentInstallerConnectionInfoEndpointsExecute(r)
}

/*
 * GetAgentInstallerConnectionInfoEndpoints Gets the list of the ActiveGate-Endpoints to be used for Agents ordered by networkzone-priorities. | maturity=EARLY_ADOPTER
 * Highest priority first, separated by a semicolon.If no network zone provided the default zone is used. Responds with 404 if network zone is not known.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetAgentInstallerConnectionInfoEndpointsRequest
 */
func (a *DeploymentApiService) GetAgentInstallerConnectionInfoEndpoints(ctx _context.Context) ApiGetAgentInstallerConnectionInfoEndpointsRequest {
	return ApiGetAgentInstallerConnectionInfoEndpointsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *DeploymentApiService) GetAgentInstallerConnectionInfoEndpointsExecute(r ApiGetAgentInstallerConnectionInfoEndpointsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentApiService.GetAgentInstallerConnectionInfoEndpoints")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/installer/agent/connectioninfo/endpoints"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.networkZone != nil {
		localVarQueryParams.Add("networkZone", parameterToString(*r.networkZone, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAgentInstallerMetaInfoRequest struct {
	ctx _context.Context
	ApiService *DeploymentApiService
	osType string
	installerType string
	flavor *string
	arch *string
	bitness *string
}

func (r ApiGetAgentInstallerMetaInfoRequest) Flavor(flavor string) ApiGetAgentInstallerMetaInfoRequest {
	r.flavor = &flavor
	return r
}
func (r ApiGetAgentInstallerMetaInfoRequest) Arch(arch string) ApiGetAgentInstallerMetaInfoRequest {
	r.arch = &arch
	return r
}
func (r ApiGetAgentInstallerMetaInfoRequest) Bitness(bitness string) ApiGetAgentInstallerMetaInfoRequest {
	r.bitness = &bitness
	return r
}

func (r ApiGetAgentInstallerMetaInfoRequest) Execute() (InstallerMetaInfoDto, *_nethttp.Response, error) {
	return r.ApiService.GetAgentInstallerMetaInfoExecute(r)
}

/*
 * GetAgentInstallerMetaInfo Gets the latest available version of the OneAgent installer of the specified type
 * Returns the OneAgent version of the installer of the specified type. 

Non-required parameters are only applicable to the `paas` and `paas-sh` installer types.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param osType The operating system of the installer.
 * @param installerType The type of the installer:   * `default`: Self-extracting installer for manual installation. Downloads an `.exe` file for Windows or an `.sh` file for Unix.  * `default-unattended`: Self-extracting installer for unattended installation. Windows only. Downloads a `.zip` archive, containing the `.msi` installer and the batch file. This option is deprecated with OneAgent version 1.173  * `paas`: Code modules installer. Downloads a `*.zip` archive, containing the `manifest.json` file with meta information or a `.jar` file for z/OS.  * `paas-sh`: Code modules installer. Downloads a self-extracting shell script with the embedded `tar.gz` archive.
 * @return ApiGetAgentInstallerMetaInfoRequest
 */
func (a *DeploymentApiService) GetAgentInstallerMetaInfo(ctx _context.Context, osType string, installerType string) ApiGetAgentInstallerMetaInfoRequest {
	return ApiGetAgentInstallerMetaInfoRequest{
		ApiService: a,
		ctx: ctx,
		osType: osType,
		installerType: installerType,
	}
}

/*
 * Execute executes the request
 * @return InstallerMetaInfoDto
 */
func (a *DeploymentApiService) GetAgentInstallerMetaInfoExecute(r ApiGetAgentInstallerMetaInfoRequest) (InstallerMetaInfoDto, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InstallerMetaInfoDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentApiService.GetAgentInstallerMetaInfo")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/installer/agent/{osType}/{installerType}/latest/metainfo"
	localVarPath = strings.Replace(localVarPath, "{"+"osType"+"}", _neturl.PathEscape(parameterToString(r.osType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"installerType"+"}", _neturl.PathEscape(parameterToString(r.installerType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.flavor != nil {
		localVarQueryParams.Add("flavor", parameterToString(*r.flavor, ""))
	}
	if r.arch != nil {
		localVarQueryParams.Add("arch", parameterToString(*r.arch, ""))
	}
	if r.bitness != nil {
		localVarQueryParams.Add("bitness", parameterToString(*r.bitness, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBoshReleaseAvailableVersionsRequest struct {
	ctx _context.Context
	ApiService *DeploymentApiService
	osType string
}


func (r ApiGetBoshReleaseAvailableVersionsRequest) Execute() (BoshReleaseAvailableVersions, *_nethttp.Response, error) {
	return r.ApiService.GetBoshReleaseAvailableVersionsExecute(r)
}

/*
 * GetBoshReleaseAvailableVersions Gets the list of available OneAgent versions for BOSH release tarballs
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param osType The operating system of the installer.
 * @return ApiGetBoshReleaseAvailableVersionsRequest
 */
func (a *DeploymentApiService) GetBoshReleaseAvailableVersions(ctx _context.Context, osType string) ApiGetBoshReleaseAvailableVersionsRequest {
	return ApiGetBoshReleaseAvailableVersionsRequest{
		ApiService: a,
		ctx: ctx,
		osType: osType,
	}
}

/*
 * Execute executes the request
 * @return BoshReleaseAvailableVersions
 */
func (a *DeploymentApiService) GetBoshReleaseAvailableVersionsExecute(r ApiGetBoshReleaseAvailableVersionsRequest) (BoshReleaseAvailableVersions, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BoshReleaseAvailableVersions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentApiService.GetBoshReleaseAvailableVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/boshrelease/versions/{osType}"
	localVarPath = strings.Replace(localVarPath, "{"+"osType"+"}", _neturl.PathEscape(parameterToString(r.osType, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBoshReleaseChecksumRequest struct {
	ctx _context.Context
	ApiService *DeploymentApiService
	osType string
	version string
	skipMetadata *bool
}

func (r ApiGetBoshReleaseChecksumRequest) SkipMetadata(skipMetadata bool) ApiGetBoshReleaseChecksumRequest {
	r.skipMetadata = &skipMetadata
	return r
}

func (r ApiGetBoshReleaseChecksumRequest) Execute() (BoshReleaseChecksum, *_nethttp.Response, error) {
	return r.ApiService.GetBoshReleaseChecksumExecute(r)
}

/*
 * GetBoshReleaseChecksum Gets the checksum of the specified BOSH release tarbell
 * The checksum is the sha256 hash of the installer file. 

Result is not stable if **skipMetadata** is set to `false`.

For SaaS only works on environment ActiveGates version 1.176 or higher
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param osType The operating system of the installer.
 * @param version The required version of the OneAgent in the `1.155.275.20181112-084458` format.   You can retrieve the list of available versions with the [**GET available versions of BOSH tarballs**](https://dt-url.net/j703kdn) call.
 * @return ApiGetBoshReleaseChecksumRequest
 */
func (a *DeploymentApiService) GetBoshReleaseChecksum(ctx _context.Context, osType string, version string) ApiGetBoshReleaseChecksumRequest {
	return ApiGetBoshReleaseChecksumRequest{
		ApiService: a,
		ctx: ctx,
		osType: osType,
		version: version,
	}
}

/*
 * Execute executes the request
 * @return BoshReleaseChecksum
 */
func (a *DeploymentApiService) GetBoshReleaseChecksumExecute(r ApiGetBoshReleaseChecksumRequest) (BoshReleaseChecksum, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  BoshReleaseChecksum
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeploymentApiService.GetBoshReleaseChecksum")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deployment/boshrelease/agent/{osType}/version/{version}/checksum"
	localVarPath = strings.Replace(localVarPath, "{"+"osType"+"}", _neturl.PathEscape(parameterToString(r.osType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", _neturl.PathEscape(parameterToString(r.version, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.skipMetadata != nil {
		localVarQueryParams.Add("skipMetadata", parameterToString(*r.skipMetadata, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
