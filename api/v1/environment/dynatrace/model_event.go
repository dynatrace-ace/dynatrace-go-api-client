/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Event The properties of an event.
type Event struct {
	// The timestamp of the event detection, in UTC milliseconds.
	StartTime *int64 `json:"startTime,omitempty"`
	// The timestamp of the event closure, in UTC milliseconds.   Has the `-1` value if the event is still open.
	EndTime *int64 `json:"endTime,omitempty"`
	// The ID of the affected Dynatrace entity.
	EntityId *string `json:"entityId,omitempty"`
	// The name of the affected Dynatrace entity.
	EntityName *string `json:"entityName,omitempty"`
	// The severity of the event.
	SeverityLevel *string `json:"severityLevel,omitempty"`
	// The impact level of the event. It shows what is affected by the problem: infrastructure, service, or application.
	ImpactLevel *string `json:"impactLevel,omitempty"`
	// The type of the event.
	EventType *string `json:"eventType,omitempty"`
	// The id of the resource the event occurred on.
	ResourceId *string `json:"resourceId,omitempty"`
	// The name of the resource the event occurred on.
	ResourceName *string `json:"resourceName,omitempty"`
	// The status of the event.
	Status *string `json:"status,omitempty"`
	// Additional data on the event severity.
	Severities *[]EventSeverity `json:"severities,omitempty"`
	// Indicates if the event is the root cause of a problem.
	IsRootCause *bool `json:"isRootCause,omitempty"`
	DeploymentProject *string `json:"deploymentProject,omitempty"`
	CpuLimitInMHz *int32 `json:"cpuLimitInMHz,omitempty"`
	DeploymentParamAdded *string `json:"deploymentParamAdded,omitempty"`
	AffectedPrivateSyntheticLocations *[]string `json:"affectedPrivateSyntheticLocations,omitempty"`
	// For events with event type `MONITORING_UNAVAILABLE`, it may be that the event is occurring on the entire Dynatrace cluster. If this is true, it could be that there are problems on the Dynatrace side.
	IsClusterWide *bool `json:"isClusterWide,omitempty"`
	Source *string `json:"source,omitempty"`
	EffectiveEntity *string `json:"effectiveEntity,omitempty"`
	OperatingSystem *string `json:"operatingSystem,omitempty"`
	Artifact *string `json:"artifact,omitempty"`
	CpuLoad *float32 `json:"cpuLoad,omitempty"`
	AffectedRequestsPerMinute *float32 `json:"affectedRequestsPerMinute,omitempty"`
	AnnotationDescription *string `json:"annotationDescription,omitempty"`
	Browser *string `json:"browser,omitempty"`
	AffectedSyntheticLocations *[]string `json:"affectedSyntheticLocations,omitempty"`
	DeploymentName *string `json:"deploymentName,omitempty"`
	DeploymentParamRemoved *string `json:"deploymentParamRemoved,omitempty"`
	CorrelationId *string `json:"correlationId,omitempty"`
	UserDefined50thPercentileThreshold *float32 `json:"userDefined50thPercentileThreshold,omitempty"`
	// If the event type is one of the synthetic event types then we may have information about the error type. The names of those are returned in this field.
	SyntheticErrorType *[]string `json:"syntheticErrorType,omitempty"`
	ServiceMethodGroup *string `json:"serviceMethodGroup,omitempty"`
	ReferenceResponseTime90thPercentile *float32 `json:"referenceResponseTime90thPercentile,omitempty"`
	UserAction *string `json:"userAction,omitempty"`
	MinimumProcessGroupInstanceCountThreshold *int32 `json:"minimumProcessGroupInstanceCountThreshold,omitempty"`
	ReferenceResponseTime50thPercentile *float32 `json:"referenceResponseTime50thPercentile,omitempty"`
	Original *string `json:"original,omitempty"`
	UserDefined90thPercentileThreshold *float32 `json:"userDefined90thPercentileThreshold,omitempty"`
	DeploymentVersion *string `json:"deploymentVersion,omitempty"`
	AnnotationType *string `json:"annotationType,omitempty"`
	// If the event type is one of the synthetic event types then we may have information on which synthetic actions are affected by the event. The names of those are returned in this field.
	AffectedSyntheticActions *[]string `json:"affectedSyntheticActions,omitempty"`
	AffectedUserActionsPerMinute *float32 `json:"affectedUserActionsPerMinute,omitempty"`
	ActiveMaintenanceWindows *[]EntityShortRepresentation `json:"activeMaintenanceWindows,omitempty"`
	MobileAppVersion *string `json:"mobileAppVersion,omitempty"`
	UserDefinedFailureRateThreshold *float32 `json:"userDefinedFailureRateThreshold,omitempty"`
	Percentile *string `json:"percentile,omitempty"`
	CustomProperties *map[string]string `json:"customProperties,omitempty"`
	RemediationAction *string `json:"remediationAction,omitempty"`
	Service *string `json:"service,omitempty"`
	CiBackLink *string `json:"ciBackLink,omitempty"`
	Geolocation *string `json:"geolocation,omitempty"`
	ServiceMethod *string `json:"serviceMethod,omitempty"`
	Changed *string `json:"changed,omitempty"`
}

// NewEvent instantiates a new Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvent() *Event {
	this := Event{}
	return &this
}

// NewEventWithDefaults instantiates a new Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWithDefaults() *Event {
	this := Event{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *Event) GetStartTime() int64 {
	if o == nil || o.StartTime == nil {
		var ret int64
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetStartTimeOk() (*int64, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *Event) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int64 and assigns it to the StartTime field.
func (o *Event) SetStartTime(v int64) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *Event) GetEndTime() int64 {
	if o == nil || o.EndTime == nil {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetEndTimeOk() (*int64, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *Event) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *Event) SetEndTime(v int64) {
	o.EndTime = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *Event) GetEntityId() string {
	if o == nil || o.EntityId == nil {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetEntityIdOk() (*string, bool) {
	if o == nil || o.EntityId == nil {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *Event) HasEntityId() bool {
	if o != nil && o.EntityId != nil {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *Event) SetEntityId(v string) {
	o.EntityId = &v
}

// GetEntityName returns the EntityName field value if set, zero value otherwise.
func (o *Event) GetEntityName() string {
	if o == nil || o.EntityName == nil {
		var ret string
		return ret
	}
	return *o.EntityName
}

// GetEntityNameOk returns a tuple with the EntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetEntityNameOk() (*string, bool) {
	if o == nil || o.EntityName == nil {
		return nil, false
	}
	return o.EntityName, true
}

// HasEntityName returns a boolean if a field has been set.
func (o *Event) HasEntityName() bool {
	if o != nil && o.EntityName != nil {
		return true
	}

	return false
}

// SetEntityName gets a reference to the given string and assigns it to the EntityName field.
func (o *Event) SetEntityName(v string) {
	o.EntityName = &v
}

// GetSeverityLevel returns the SeverityLevel field value if set, zero value otherwise.
func (o *Event) GetSeverityLevel() string {
	if o == nil || o.SeverityLevel == nil {
		var ret string
		return ret
	}
	return *o.SeverityLevel
}

// GetSeverityLevelOk returns a tuple with the SeverityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetSeverityLevelOk() (*string, bool) {
	if o == nil || o.SeverityLevel == nil {
		return nil, false
	}
	return o.SeverityLevel, true
}

// HasSeverityLevel returns a boolean if a field has been set.
func (o *Event) HasSeverityLevel() bool {
	if o != nil && o.SeverityLevel != nil {
		return true
	}

	return false
}

// SetSeverityLevel gets a reference to the given string and assigns it to the SeverityLevel field.
func (o *Event) SetSeverityLevel(v string) {
	o.SeverityLevel = &v
}

// GetImpactLevel returns the ImpactLevel field value if set, zero value otherwise.
func (o *Event) GetImpactLevel() string {
	if o == nil || o.ImpactLevel == nil {
		var ret string
		return ret
	}
	return *o.ImpactLevel
}

// GetImpactLevelOk returns a tuple with the ImpactLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetImpactLevelOk() (*string, bool) {
	if o == nil || o.ImpactLevel == nil {
		return nil, false
	}
	return o.ImpactLevel, true
}

// HasImpactLevel returns a boolean if a field has been set.
func (o *Event) HasImpactLevel() bool {
	if o != nil && o.ImpactLevel != nil {
		return true
	}

	return false
}

// SetImpactLevel gets a reference to the given string and assigns it to the ImpactLevel field.
func (o *Event) SetImpactLevel(v string) {
	o.ImpactLevel = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *Event) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *Event) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *Event) SetEventType(v string) {
	o.EventType = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *Event) GetResourceId() string {
	if o == nil || o.ResourceId == nil {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetResourceIdOk() (*string, bool) {
	if o == nil || o.ResourceId == nil {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *Event) HasResourceId() bool {
	if o != nil && o.ResourceId != nil {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *Event) SetResourceId(v string) {
	o.ResourceId = &v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise.
func (o *Event) GetResourceName() string {
	if o == nil || o.ResourceName == nil {
		var ret string
		return ret
	}
	return *o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetResourceNameOk() (*string, bool) {
	if o == nil || o.ResourceName == nil {
		return nil, false
	}
	return o.ResourceName, true
}

// HasResourceName returns a boolean if a field has been set.
func (o *Event) HasResourceName() bool {
	if o != nil && o.ResourceName != nil {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given string and assigns it to the ResourceName field.
func (o *Event) SetResourceName(v string) {
	o.ResourceName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Event) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Event) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Event) SetStatus(v string) {
	o.Status = &v
}

// GetSeverities returns the Severities field value if set, zero value otherwise.
func (o *Event) GetSeverities() []EventSeverity {
	if o == nil || o.Severities == nil {
		var ret []EventSeverity
		return ret
	}
	return *o.Severities
}

// GetSeveritiesOk returns a tuple with the Severities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetSeveritiesOk() (*[]EventSeverity, bool) {
	if o == nil || o.Severities == nil {
		return nil, false
	}
	return o.Severities, true
}

// HasSeverities returns a boolean if a field has been set.
func (o *Event) HasSeverities() bool {
	if o != nil && o.Severities != nil {
		return true
	}

	return false
}

// SetSeverities gets a reference to the given []EventSeverity and assigns it to the Severities field.
func (o *Event) SetSeverities(v []EventSeverity) {
	o.Severities = &v
}

// GetIsRootCause returns the IsRootCause field value if set, zero value otherwise.
func (o *Event) GetIsRootCause() bool {
	if o == nil || o.IsRootCause == nil {
		var ret bool
		return ret
	}
	return *o.IsRootCause
}

// GetIsRootCauseOk returns a tuple with the IsRootCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetIsRootCauseOk() (*bool, bool) {
	if o == nil || o.IsRootCause == nil {
		return nil, false
	}
	return o.IsRootCause, true
}

// HasIsRootCause returns a boolean if a field has been set.
func (o *Event) HasIsRootCause() bool {
	if o != nil && o.IsRootCause != nil {
		return true
	}

	return false
}

// SetIsRootCause gets a reference to the given bool and assigns it to the IsRootCause field.
func (o *Event) SetIsRootCause(v bool) {
	o.IsRootCause = &v
}

// GetDeploymentProject returns the DeploymentProject field value if set, zero value otherwise.
func (o *Event) GetDeploymentProject() string {
	if o == nil || o.DeploymentProject == nil {
		var ret string
		return ret
	}
	return *o.DeploymentProject
}

// GetDeploymentProjectOk returns a tuple with the DeploymentProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetDeploymentProjectOk() (*string, bool) {
	if o == nil || o.DeploymentProject == nil {
		return nil, false
	}
	return o.DeploymentProject, true
}

// HasDeploymentProject returns a boolean if a field has been set.
func (o *Event) HasDeploymentProject() bool {
	if o != nil && o.DeploymentProject != nil {
		return true
	}

	return false
}

// SetDeploymentProject gets a reference to the given string and assigns it to the DeploymentProject field.
func (o *Event) SetDeploymentProject(v string) {
	o.DeploymentProject = &v
}

// GetCpuLimitInMHz returns the CpuLimitInMHz field value if set, zero value otherwise.
func (o *Event) GetCpuLimitInMHz() int32 {
	if o == nil || o.CpuLimitInMHz == nil {
		var ret int32
		return ret
	}
	return *o.CpuLimitInMHz
}

// GetCpuLimitInMHzOk returns a tuple with the CpuLimitInMHz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetCpuLimitInMHzOk() (*int32, bool) {
	if o == nil || o.CpuLimitInMHz == nil {
		return nil, false
	}
	return o.CpuLimitInMHz, true
}

// HasCpuLimitInMHz returns a boolean if a field has been set.
func (o *Event) HasCpuLimitInMHz() bool {
	if o != nil && o.CpuLimitInMHz != nil {
		return true
	}

	return false
}

// SetCpuLimitInMHz gets a reference to the given int32 and assigns it to the CpuLimitInMHz field.
func (o *Event) SetCpuLimitInMHz(v int32) {
	o.CpuLimitInMHz = &v
}

// GetDeploymentParamAdded returns the DeploymentParamAdded field value if set, zero value otherwise.
func (o *Event) GetDeploymentParamAdded() string {
	if o == nil || o.DeploymentParamAdded == nil {
		var ret string
		return ret
	}
	return *o.DeploymentParamAdded
}

// GetDeploymentParamAddedOk returns a tuple with the DeploymentParamAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetDeploymentParamAddedOk() (*string, bool) {
	if o == nil || o.DeploymentParamAdded == nil {
		return nil, false
	}
	return o.DeploymentParamAdded, true
}

// HasDeploymentParamAdded returns a boolean if a field has been set.
func (o *Event) HasDeploymentParamAdded() bool {
	if o != nil && o.DeploymentParamAdded != nil {
		return true
	}

	return false
}

// SetDeploymentParamAdded gets a reference to the given string and assigns it to the DeploymentParamAdded field.
func (o *Event) SetDeploymentParamAdded(v string) {
	o.DeploymentParamAdded = &v
}

// GetAffectedPrivateSyntheticLocations returns the AffectedPrivateSyntheticLocations field value if set, zero value otherwise.
func (o *Event) GetAffectedPrivateSyntheticLocations() []string {
	if o == nil || o.AffectedPrivateSyntheticLocations == nil {
		var ret []string
		return ret
	}
	return *o.AffectedPrivateSyntheticLocations
}

// GetAffectedPrivateSyntheticLocationsOk returns a tuple with the AffectedPrivateSyntheticLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetAffectedPrivateSyntheticLocationsOk() (*[]string, bool) {
	if o == nil || o.AffectedPrivateSyntheticLocations == nil {
		return nil, false
	}
	return o.AffectedPrivateSyntheticLocations, true
}

// HasAffectedPrivateSyntheticLocations returns a boolean if a field has been set.
func (o *Event) HasAffectedPrivateSyntheticLocations() bool {
	if o != nil && o.AffectedPrivateSyntheticLocations != nil {
		return true
	}

	return false
}

// SetAffectedPrivateSyntheticLocations gets a reference to the given []string and assigns it to the AffectedPrivateSyntheticLocations field.
func (o *Event) SetAffectedPrivateSyntheticLocations(v []string) {
	o.AffectedPrivateSyntheticLocations = &v
}

// GetIsClusterWide returns the IsClusterWide field value if set, zero value otherwise.
func (o *Event) GetIsClusterWide() bool {
	if o == nil || o.IsClusterWide == nil {
		var ret bool
		return ret
	}
	return *o.IsClusterWide
}

// GetIsClusterWideOk returns a tuple with the IsClusterWide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetIsClusterWideOk() (*bool, bool) {
	if o == nil || o.IsClusterWide == nil {
		return nil, false
	}
	return o.IsClusterWide, true
}

// HasIsClusterWide returns a boolean if a field has been set.
func (o *Event) HasIsClusterWide() bool {
	if o != nil && o.IsClusterWide != nil {
		return true
	}

	return false
}

// SetIsClusterWide gets a reference to the given bool and assigns it to the IsClusterWide field.
func (o *Event) SetIsClusterWide(v bool) {
	o.IsClusterWide = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Event) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Event) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *Event) SetSource(v string) {
	o.Source = &v
}

// GetEffectiveEntity returns the EffectiveEntity field value if set, zero value otherwise.
func (o *Event) GetEffectiveEntity() string {
	if o == nil || o.EffectiveEntity == nil {
		var ret string
		return ret
	}
	return *o.EffectiveEntity
}

// GetEffectiveEntityOk returns a tuple with the EffectiveEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetEffectiveEntityOk() (*string, bool) {
	if o == nil || o.EffectiveEntity == nil {
		return nil, false
	}
	return o.EffectiveEntity, true
}

// HasEffectiveEntity returns a boolean if a field has been set.
func (o *Event) HasEffectiveEntity() bool {
	if o != nil && o.EffectiveEntity != nil {
		return true
	}

	return false
}

// SetEffectiveEntity gets a reference to the given string and assigns it to the EffectiveEntity field.
func (o *Event) SetEffectiveEntity(v string) {
	o.EffectiveEntity = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *Event) GetOperatingSystem() string {
	if o == nil || o.OperatingSystem == nil {
		var ret string
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetOperatingSystemOk() (*string, bool) {
	if o == nil || o.OperatingSystem == nil {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *Event) HasOperatingSystem() bool {
	if o != nil && o.OperatingSystem != nil {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given string and assigns it to the OperatingSystem field.
func (o *Event) SetOperatingSystem(v string) {
	o.OperatingSystem = &v
}

// GetArtifact returns the Artifact field value if set, zero value otherwise.
func (o *Event) GetArtifact() string {
	if o == nil || o.Artifact == nil {
		var ret string
		return ret
	}
	return *o.Artifact
}

// GetArtifactOk returns a tuple with the Artifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetArtifactOk() (*string, bool) {
	if o == nil || o.Artifact == nil {
		return nil, false
	}
	return o.Artifact, true
}

// HasArtifact returns a boolean if a field has been set.
func (o *Event) HasArtifact() bool {
	if o != nil && o.Artifact != nil {
		return true
	}

	return false
}

// SetArtifact gets a reference to the given string and assigns it to the Artifact field.
func (o *Event) SetArtifact(v string) {
	o.Artifact = &v
}

// GetCpuLoad returns the CpuLoad field value if set, zero value otherwise.
func (o *Event) GetCpuLoad() float32 {
	if o == nil || o.CpuLoad == nil {
		var ret float32
		return ret
	}
	return *o.CpuLoad
}

// GetCpuLoadOk returns a tuple with the CpuLoad field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetCpuLoadOk() (*float32, bool) {
	if o == nil || o.CpuLoad == nil {
		return nil, false
	}
	return o.CpuLoad, true
}

// HasCpuLoad returns a boolean if a field has been set.
func (o *Event) HasCpuLoad() bool {
	if o != nil && o.CpuLoad != nil {
		return true
	}

	return false
}

// SetCpuLoad gets a reference to the given float32 and assigns it to the CpuLoad field.
func (o *Event) SetCpuLoad(v float32) {
	o.CpuLoad = &v
}

// GetAffectedRequestsPerMinute returns the AffectedRequestsPerMinute field value if set, zero value otherwise.
func (o *Event) GetAffectedRequestsPerMinute() float32 {
	if o == nil || o.AffectedRequestsPerMinute == nil {
		var ret float32
		return ret
	}
	return *o.AffectedRequestsPerMinute
}

// GetAffectedRequestsPerMinuteOk returns a tuple with the AffectedRequestsPerMinute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetAffectedRequestsPerMinuteOk() (*float32, bool) {
	if o == nil || o.AffectedRequestsPerMinute == nil {
		return nil, false
	}
	return o.AffectedRequestsPerMinute, true
}

// HasAffectedRequestsPerMinute returns a boolean if a field has been set.
func (o *Event) HasAffectedRequestsPerMinute() bool {
	if o != nil && o.AffectedRequestsPerMinute != nil {
		return true
	}

	return false
}

// SetAffectedRequestsPerMinute gets a reference to the given float32 and assigns it to the AffectedRequestsPerMinute field.
func (o *Event) SetAffectedRequestsPerMinute(v float32) {
	o.AffectedRequestsPerMinute = &v
}

// GetAnnotationDescription returns the AnnotationDescription field value if set, zero value otherwise.
func (o *Event) GetAnnotationDescription() string {
	if o == nil || o.AnnotationDescription == nil {
		var ret string
		return ret
	}
	return *o.AnnotationDescription
}

// GetAnnotationDescriptionOk returns a tuple with the AnnotationDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetAnnotationDescriptionOk() (*string, bool) {
	if o == nil || o.AnnotationDescription == nil {
		return nil, false
	}
	return o.AnnotationDescription, true
}

// HasAnnotationDescription returns a boolean if a field has been set.
func (o *Event) HasAnnotationDescription() bool {
	if o != nil && o.AnnotationDescription != nil {
		return true
	}

	return false
}

// SetAnnotationDescription gets a reference to the given string and assigns it to the AnnotationDescription field.
func (o *Event) SetAnnotationDescription(v string) {
	o.AnnotationDescription = &v
}

// GetBrowser returns the Browser field value if set, zero value otherwise.
func (o *Event) GetBrowser() string {
	if o == nil || o.Browser == nil {
		var ret string
		return ret
	}
	return *o.Browser
}

// GetBrowserOk returns a tuple with the Browser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetBrowserOk() (*string, bool) {
	if o == nil || o.Browser == nil {
		return nil, false
	}
	return o.Browser, true
}

// HasBrowser returns a boolean if a field has been set.
func (o *Event) HasBrowser() bool {
	if o != nil && o.Browser != nil {
		return true
	}

	return false
}

// SetBrowser gets a reference to the given string and assigns it to the Browser field.
func (o *Event) SetBrowser(v string) {
	o.Browser = &v
}

// GetAffectedSyntheticLocations returns the AffectedSyntheticLocations field value if set, zero value otherwise.
func (o *Event) GetAffectedSyntheticLocations() []string {
	if o == nil || o.AffectedSyntheticLocations == nil {
		var ret []string
		return ret
	}
	return *o.AffectedSyntheticLocations
}

// GetAffectedSyntheticLocationsOk returns a tuple with the AffectedSyntheticLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetAffectedSyntheticLocationsOk() (*[]string, bool) {
	if o == nil || o.AffectedSyntheticLocations == nil {
		return nil, false
	}
	return o.AffectedSyntheticLocations, true
}

// HasAffectedSyntheticLocations returns a boolean if a field has been set.
func (o *Event) HasAffectedSyntheticLocations() bool {
	if o != nil && o.AffectedSyntheticLocations != nil {
		return true
	}

	return false
}

// SetAffectedSyntheticLocations gets a reference to the given []string and assigns it to the AffectedSyntheticLocations field.
func (o *Event) SetAffectedSyntheticLocations(v []string) {
	o.AffectedSyntheticLocations = &v
}

// GetDeploymentName returns the DeploymentName field value if set, zero value otherwise.
func (o *Event) GetDeploymentName() string {
	if o == nil || o.DeploymentName == nil {
		var ret string
		return ret
	}
	return *o.DeploymentName
}

// GetDeploymentNameOk returns a tuple with the DeploymentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetDeploymentNameOk() (*string, bool) {
	if o == nil || o.DeploymentName == nil {
		return nil, false
	}
	return o.DeploymentName, true
}

// HasDeploymentName returns a boolean if a field has been set.
func (o *Event) HasDeploymentName() bool {
	if o != nil && o.DeploymentName != nil {
		return true
	}

	return false
}

// SetDeploymentName gets a reference to the given string and assigns it to the DeploymentName field.
func (o *Event) SetDeploymentName(v string) {
	o.DeploymentName = &v
}

// GetDeploymentParamRemoved returns the DeploymentParamRemoved field value if set, zero value otherwise.
func (o *Event) GetDeploymentParamRemoved() string {
	if o == nil || o.DeploymentParamRemoved == nil {
		var ret string
		return ret
	}
	return *o.DeploymentParamRemoved
}

// GetDeploymentParamRemovedOk returns a tuple with the DeploymentParamRemoved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetDeploymentParamRemovedOk() (*string, bool) {
	if o == nil || o.DeploymentParamRemoved == nil {
		return nil, false
	}
	return o.DeploymentParamRemoved, true
}

// HasDeploymentParamRemoved returns a boolean if a field has been set.
func (o *Event) HasDeploymentParamRemoved() bool {
	if o != nil && o.DeploymentParamRemoved != nil {
		return true
	}

	return false
}

// SetDeploymentParamRemoved gets a reference to the given string and assigns it to the DeploymentParamRemoved field.
func (o *Event) SetDeploymentParamRemoved(v string) {
	o.DeploymentParamRemoved = &v
}

// GetCorrelationId returns the CorrelationId field value if set, zero value otherwise.
func (o *Event) GetCorrelationId() string {
	if o == nil || o.CorrelationId == nil {
		var ret string
		return ret
	}
	return *o.CorrelationId
}

// GetCorrelationIdOk returns a tuple with the CorrelationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetCorrelationIdOk() (*string, bool) {
	if o == nil || o.CorrelationId == nil {
		return nil, false
	}
	return o.CorrelationId, true
}

// HasCorrelationId returns a boolean if a field has been set.
func (o *Event) HasCorrelationId() bool {
	if o != nil && o.CorrelationId != nil {
		return true
	}

	return false
}

// SetCorrelationId gets a reference to the given string and assigns it to the CorrelationId field.
func (o *Event) SetCorrelationId(v string) {
	o.CorrelationId = &v
}

// GetUserDefined50thPercentileThreshold returns the UserDefined50thPercentileThreshold field value if set, zero value otherwise.
func (o *Event) GetUserDefined50thPercentileThreshold() float32 {
	if o == nil || o.UserDefined50thPercentileThreshold == nil {
		var ret float32
		return ret
	}
	return *o.UserDefined50thPercentileThreshold
}

// GetUserDefined50thPercentileThresholdOk returns a tuple with the UserDefined50thPercentileThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetUserDefined50thPercentileThresholdOk() (*float32, bool) {
	if o == nil || o.UserDefined50thPercentileThreshold == nil {
		return nil, false
	}
	return o.UserDefined50thPercentileThreshold, true
}

// HasUserDefined50thPercentileThreshold returns a boolean if a field has been set.
func (o *Event) HasUserDefined50thPercentileThreshold() bool {
	if o != nil && o.UserDefined50thPercentileThreshold != nil {
		return true
	}

	return false
}

// SetUserDefined50thPercentileThreshold gets a reference to the given float32 and assigns it to the UserDefined50thPercentileThreshold field.
func (o *Event) SetUserDefined50thPercentileThreshold(v float32) {
	o.UserDefined50thPercentileThreshold = &v
}

// GetSyntheticErrorType returns the SyntheticErrorType field value if set, zero value otherwise.
func (o *Event) GetSyntheticErrorType() []string {
	if o == nil || o.SyntheticErrorType == nil {
		var ret []string
		return ret
	}
	return *o.SyntheticErrorType
}

// GetSyntheticErrorTypeOk returns a tuple with the SyntheticErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetSyntheticErrorTypeOk() (*[]string, bool) {
	if o == nil || o.SyntheticErrorType == nil {
		return nil, false
	}
	return o.SyntheticErrorType, true
}

// HasSyntheticErrorType returns a boolean if a field has been set.
func (o *Event) HasSyntheticErrorType() bool {
	if o != nil && o.SyntheticErrorType != nil {
		return true
	}

	return false
}

// SetSyntheticErrorType gets a reference to the given []string and assigns it to the SyntheticErrorType field.
func (o *Event) SetSyntheticErrorType(v []string) {
	o.SyntheticErrorType = &v
}

// GetServiceMethodGroup returns the ServiceMethodGroup field value if set, zero value otherwise.
func (o *Event) GetServiceMethodGroup() string {
	if o == nil || o.ServiceMethodGroup == nil {
		var ret string
		return ret
	}
	return *o.ServiceMethodGroup
}

// GetServiceMethodGroupOk returns a tuple with the ServiceMethodGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetServiceMethodGroupOk() (*string, bool) {
	if o == nil || o.ServiceMethodGroup == nil {
		return nil, false
	}
	return o.ServiceMethodGroup, true
}

// HasServiceMethodGroup returns a boolean if a field has been set.
func (o *Event) HasServiceMethodGroup() bool {
	if o != nil && o.ServiceMethodGroup != nil {
		return true
	}

	return false
}

// SetServiceMethodGroup gets a reference to the given string and assigns it to the ServiceMethodGroup field.
func (o *Event) SetServiceMethodGroup(v string) {
	o.ServiceMethodGroup = &v
}

// GetReferenceResponseTime90thPercentile returns the ReferenceResponseTime90thPercentile field value if set, zero value otherwise.
func (o *Event) GetReferenceResponseTime90thPercentile() float32 {
	if o == nil || o.ReferenceResponseTime90thPercentile == nil {
		var ret float32
		return ret
	}
	return *o.ReferenceResponseTime90thPercentile
}

// GetReferenceResponseTime90thPercentileOk returns a tuple with the ReferenceResponseTime90thPercentile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetReferenceResponseTime90thPercentileOk() (*float32, bool) {
	if o == nil || o.ReferenceResponseTime90thPercentile == nil {
		return nil, false
	}
	return o.ReferenceResponseTime90thPercentile, true
}

// HasReferenceResponseTime90thPercentile returns a boolean if a field has been set.
func (o *Event) HasReferenceResponseTime90thPercentile() bool {
	if o != nil && o.ReferenceResponseTime90thPercentile != nil {
		return true
	}

	return false
}

// SetReferenceResponseTime90thPercentile gets a reference to the given float32 and assigns it to the ReferenceResponseTime90thPercentile field.
func (o *Event) SetReferenceResponseTime90thPercentile(v float32) {
	o.ReferenceResponseTime90thPercentile = &v
}

// GetUserAction returns the UserAction field value if set, zero value otherwise.
func (o *Event) GetUserAction() string {
	if o == nil || o.UserAction == nil {
		var ret string
		return ret
	}
	return *o.UserAction
}

// GetUserActionOk returns a tuple with the UserAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetUserActionOk() (*string, bool) {
	if o == nil || o.UserAction == nil {
		return nil, false
	}
	return o.UserAction, true
}

// HasUserAction returns a boolean if a field has been set.
func (o *Event) HasUserAction() bool {
	if o != nil && o.UserAction != nil {
		return true
	}

	return false
}

// SetUserAction gets a reference to the given string and assigns it to the UserAction field.
func (o *Event) SetUserAction(v string) {
	o.UserAction = &v
}

// GetMinimumProcessGroupInstanceCountThreshold returns the MinimumProcessGroupInstanceCountThreshold field value if set, zero value otherwise.
func (o *Event) GetMinimumProcessGroupInstanceCountThreshold() int32 {
	if o == nil || o.MinimumProcessGroupInstanceCountThreshold == nil {
		var ret int32
		return ret
	}
	return *o.MinimumProcessGroupInstanceCountThreshold
}

// GetMinimumProcessGroupInstanceCountThresholdOk returns a tuple with the MinimumProcessGroupInstanceCountThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetMinimumProcessGroupInstanceCountThresholdOk() (*int32, bool) {
	if o == nil || o.MinimumProcessGroupInstanceCountThreshold == nil {
		return nil, false
	}
	return o.MinimumProcessGroupInstanceCountThreshold, true
}

// HasMinimumProcessGroupInstanceCountThreshold returns a boolean if a field has been set.
func (o *Event) HasMinimumProcessGroupInstanceCountThreshold() bool {
	if o != nil && o.MinimumProcessGroupInstanceCountThreshold != nil {
		return true
	}

	return false
}

// SetMinimumProcessGroupInstanceCountThreshold gets a reference to the given int32 and assigns it to the MinimumProcessGroupInstanceCountThreshold field.
func (o *Event) SetMinimumProcessGroupInstanceCountThreshold(v int32) {
	o.MinimumProcessGroupInstanceCountThreshold = &v
}

// GetReferenceResponseTime50thPercentile returns the ReferenceResponseTime50thPercentile field value if set, zero value otherwise.
func (o *Event) GetReferenceResponseTime50thPercentile() float32 {
	if o == nil || o.ReferenceResponseTime50thPercentile == nil {
		var ret float32
		return ret
	}
	return *o.ReferenceResponseTime50thPercentile
}

// GetReferenceResponseTime50thPercentileOk returns a tuple with the ReferenceResponseTime50thPercentile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetReferenceResponseTime50thPercentileOk() (*float32, bool) {
	if o == nil || o.ReferenceResponseTime50thPercentile == nil {
		return nil, false
	}
	return o.ReferenceResponseTime50thPercentile, true
}

// HasReferenceResponseTime50thPercentile returns a boolean if a field has been set.
func (o *Event) HasReferenceResponseTime50thPercentile() bool {
	if o != nil && o.ReferenceResponseTime50thPercentile != nil {
		return true
	}

	return false
}

// SetReferenceResponseTime50thPercentile gets a reference to the given float32 and assigns it to the ReferenceResponseTime50thPercentile field.
func (o *Event) SetReferenceResponseTime50thPercentile(v float32) {
	o.ReferenceResponseTime50thPercentile = &v
}

// GetOriginal returns the Original field value if set, zero value otherwise.
func (o *Event) GetOriginal() string {
	if o == nil || o.Original == nil {
		var ret string
		return ret
	}
	return *o.Original
}

// GetOriginalOk returns a tuple with the Original field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetOriginalOk() (*string, bool) {
	if o == nil || o.Original == nil {
		return nil, false
	}
	return o.Original, true
}

// HasOriginal returns a boolean if a field has been set.
func (o *Event) HasOriginal() bool {
	if o != nil && o.Original != nil {
		return true
	}

	return false
}

// SetOriginal gets a reference to the given string and assigns it to the Original field.
func (o *Event) SetOriginal(v string) {
	o.Original = &v
}

// GetUserDefined90thPercentileThreshold returns the UserDefined90thPercentileThreshold field value if set, zero value otherwise.
func (o *Event) GetUserDefined90thPercentileThreshold() float32 {
	if o == nil || o.UserDefined90thPercentileThreshold == nil {
		var ret float32
		return ret
	}
	return *o.UserDefined90thPercentileThreshold
}

// GetUserDefined90thPercentileThresholdOk returns a tuple with the UserDefined90thPercentileThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetUserDefined90thPercentileThresholdOk() (*float32, bool) {
	if o == nil || o.UserDefined90thPercentileThreshold == nil {
		return nil, false
	}
	return o.UserDefined90thPercentileThreshold, true
}

// HasUserDefined90thPercentileThreshold returns a boolean if a field has been set.
func (o *Event) HasUserDefined90thPercentileThreshold() bool {
	if o != nil && o.UserDefined90thPercentileThreshold != nil {
		return true
	}

	return false
}

// SetUserDefined90thPercentileThreshold gets a reference to the given float32 and assigns it to the UserDefined90thPercentileThreshold field.
func (o *Event) SetUserDefined90thPercentileThreshold(v float32) {
	o.UserDefined90thPercentileThreshold = &v
}

// GetDeploymentVersion returns the DeploymentVersion field value if set, zero value otherwise.
func (o *Event) GetDeploymentVersion() string {
	if o == nil || o.DeploymentVersion == nil {
		var ret string
		return ret
	}
	return *o.DeploymentVersion
}

// GetDeploymentVersionOk returns a tuple with the DeploymentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetDeploymentVersionOk() (*string, bool) {
	if o == nil || o.DeploymentVersion == nil {
		return nil, false
	}
	return o.DeploymentVersion, true
}

// HasDeploymentVersion returns a boolean if a field has been set.
func (o *Event) HasDeploymentVersion() bool {
	if o != nil && o.DeploymentVersion != nil {
		return true
	}

	return false
}

// SetDeploymentVersion gets a reference to the given string and assigns it to the DeploymentVersion field.
func (o *Event) SetDeploymentVersion(v string) {
	o.DeploymentVersion = &v
}

// GetAnnotationType returns the AnnotationType field value if set, zero value otherwise.
func (o *Event) GetAnnotationType() string {
	if o == nil || o.AnnotationType == nil {
		var ret string
		return ret
	}
	return *o.AnnotationType
}

// GetAnnotationTypeOk returns a tuple with the AnnotationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetAnnotationTypeOk() (*string, bool) {
	if o == nil || o.AnnotationType == nil {
		return nil, false
	}
	return o.AnnotationType, true
}

// HasAnnotationType returns a boolean if a field has been set.
func (o *Event) HasAnnotationType() bool {
	if o != nil && o.AnnotationType != nil {
		return true
	}

	return false
}

// SetAnnotationType gets a reference to the given string and assigns it to the AnnotationType field.
func (o *Event) SetAnnotationType(v string) {
	o.AnnotationType = &v
}

// GetAffectedSyntheticActions returns the AffectedSyntheticActions field value if set, zero value otherwise.
func (o *Event) GetAffectedSyntheticActions() []string {
	if o == nil || o.AffectedSyntheticActions == nil {
		var ret []string
		return ret
	}
	return *o.AffectedSyntheticActions
}

// GetAffectedSyntheticActionsOk returns a tuple with the AffectedSyntheticActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetAffectedSyntheticActionsOk() (*[]string, bool) {
	if o == nil || o.AffectedSyntheticActions == nil {
		return nil, false
	}
	return o.AffectedSyntheticActions, true
}

// HasAffectedSyntheticActions returns a boolean if a field has been set.
func (o *Event) HasAffectedSyntheticActions() bool {
	if o != nil && o.AffectedSyntheticActions != nil {
		return true
	}

	return false
}

// SetAffectedSyntheticActions gets a reference to the given []string and assigns it to the AffectedSyntheticActions field.
func (o *Event) SetAffectedSyntheticActions(v []string) {
	o.AffectedSyntheticActions = &v
}

// GetAffectedUserActionsPerMinute returns the AffectedUserActionsPerMinute field value if set, zero value otherwise.
func (o *Event) GetAffectedUserActionsPerMinute() float32 {
	if o == nil || o.AffectedUserActionsPerMinute == nil {
		var ret float32
		return ret
	}
	return *o.AffectedUserActionsPerMinute
}

// GetAffectedUserActionsPerMinuteOk returns a tuple with the AffectedUserActionsPerMinute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetAffectedUserActionsPerMinuteOk() (*float32, bool) {
	if o == nil || o.AffectedUserActionsPerMinute == nil {
		return nil, false
	}
	return o.AffectedUserActionsPerMinute, true
}

// HasAffectedUserActionsPerMinute returns a boolean if a field has been set.
func (o *Event) HasAffectedUserActionsPerMinute() bool {
	if o != nil && o.AffectedUserActionsPerMinute != nil {
		return true
	}

	return false
}

// SetAffectedUserActionsPerMinute gets a reference to the given float32 and assigns it to the AffectedUserActionsPerMinute field.
func (o *Event) SetAffectedUserActionsPerMinute(v float32) {
	o.AffectedUserActionsPerMinute = &v
}

// GetActiveMaintenanceWindows returns the ActiveMaintenanceWindows field value if set, zero value otherwise.
func (o *Event) GetActiveMaintenanceWindows() []EntityShortRepresentation {
	if o == nil || o.ActiveMaintenanceWindows == nil {
		var ret []EntityShortRepresentation
		return ret
	}
	return *o.ActiveMaintenanceWindows
}

// GetActiveMaintenanceWindowsOk returns a tuple with the ActiveMaintenanceWindows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetActiveMaintenanceWindowsOk() (*[]EntityShortRepresentation, bool) {
	if o == nil || o.ActiveMaintenanceWindows == nil {
		return nil, false
	}
	return o.ActiveMaintenanceWindows, true
}

// HasActiveMaintenanceWindows returns a boolean if a field has been set.
func (o *Event) HasActiveMaintenanceWindows() bool {
	if o != nil && o.ActiveMaintenanceWindows != nil {
		return true
	}

	return false
}

// SetActiveMaintenanceWindows gets a reference to the given []EntityShortRepresentation and assigns it to the ActiveMaintenanceWindows field.
func (o *Event) SetActiveMaintenanceWindows(v []EntityShortRepresentation) {
	o.ActiveMaintenanceWindows = &v
}

// GetMobileAppVersion returns the MobileAppVersion field value if set, zero value otherwise.
func (o *Event) GetMobileAppVersion() string {
	if o == nil || o.MobileAppVersion == nil {
		var ret string
		return ret
	}
	return *o.MobileAppVersion
}

// GetMobileAppVersionOk returns a tuple with the MobileAppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetMobileAppVersionOk() (*string, bool) {
	if o == nil || o.MobileAppVersion == nil {
		return nil, false
	}
	return o.MobileAppVersion, true
}

// HasMobileAppVersion returns a boolean if a field has been set.
func (o *Event) HasMobileAppVersion() bool {
	if o != nil && o.MobileAppVersion != nil {
		return true
	}

	return false
}

// SetMobileAppVersion gets a reference to the given string and assigns it to the MobileAppVersion field.
func (o *Event) SetMobileAppVersion(v string) {
	o.MobileAppVersion = &v
}

// GetUserDefinedFailureRateThreshold returns the UserDefinedFailureRateThreshold field value if set, zero value otherwise.
func (o *Event) GetUserDefinedFailureRateThreshold() float32 {
	if o == nil || o.UserDefinedFailureRateThreshold == nil {
		var ret float32
		return ret
	}
	return *o.UserDefinedFailureRateThreshold
}

// GetUserDefinedFailureRateThresholdOk returns a tuple with the UserDefinedFailureRateThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetUserDefinedFailureRateThresholdOk() (*float32, bool) {
	if o == nil || o.UserDefinedFailureRateThreshold == nil {
		return nil, false
	}
	return o.UserDefinedFailureRateThreshold, true
}

// HasUserDefinedFailureRateThreshold returns a boolean if a field has been set.
func (o *Event) HasUserDefinedFailureRateThreshold() bool {
	if o != nil && o.UserDefinedFailureRateThreshold != nil {
		return true
	}

	return false
}

// SetUserDefinedFailureRateThreshold gets a reference to the given float32 and assigns it to the UserDefinedFailureRateThreshold field.
func (o *Event) SetUserDefinedFailureRateThreshold(v float32) {
	o.UserDefinedFailureRateThreshold = &v
}

// GetPercentile returns the Percentile field value if set, zero value otherwise.
func (o *Event) GetPercentile() string {
	if o == nil || o.Percentile == nil {
		var ret string
		return ret
	}
	return *o.Percentile
}

// GetPercentileOk returns a tuple with the Percentile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetPercentileOk() (*string, bool) {
	if o == nil || o.Percentile == nil {
		return nil, false
	}
	return o.Percentile, true
}

// HasPercentile returns a boolean if a field has been set.
func (o *Event) HasPercentile() bool {
	if o != nil && o.Percentile != nil {
		return true
	}

	return false
}

// SetPercentile gets a reference to the given string and assigns it to the Percentile field.
func (o *Event) SetPercentile(v string) {
	o.Percentile = &v
}

// GetCustomProperties returns the CustomProperties field value if set, zero value otherwise.
func (o *Event) GetCustomProperties() map[string]string {
	if o == nil || o.CustomProperties == nil {
		var ret map[string]string
		return ret
	}
	return *o.CustomProperties
}

// GetCustomPropertiesOk returns a tuple with the CustomProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetCustomPropertiesOk() (*map[string]string, bool) {
	if o == nil || o.CustomProperties == nil {
		return nil, false
	}
	return o.CustomProperties, true
}

// HasCustomProperties returns a boolean if a field has been set.
func (o *Event) HasCustomProperties() bool {
	if o != nil && o.CustomProperties != nil {
		return true
	}

	return false
}

// SetCustomProperties gets a reference to the given map[string]string and assigns it to the CustomProperties field.
func (o *Event) SetCustomProperties(v map[string]string) {
	o.CustomProperties = &v
}

// GetRemediationAction returns the RemediationAction field value if set, zero value otherwise.
func (o *Event) GetRemediationAction() string {
	if o == nil || o.RemediationAction == nil {
		var ret string
		return ret
	}
	return *o.RemediationAction
}

// GetRemediationActionOk returns a tuple with the RemediationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetRemediationActionOk() (*string, bool) {
	if o == nil || o.RemediationAction == nil {
		return nil, false
	}
	return o.RemediationAction, true
}

// HasRemediationAction returns a boolean if a field has been set.
func (o *Event) HasRemediationAction() bool {
	if o != nil && o.RemediationAction != nil {
		return true
	}

	return false
}

// SetRemediationAction gets a reference to the given string and assigns it to the RemediationAction field.
func (o *Event) SetRemediationAction(v string) {
	o.RemediationAction = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *Event) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *Event) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *Event) SetService(v string) {
	o.Service = &v
}

// GetCiBackLink returns the CiBackLink field value if set, zero value otherwise.
func (o *Event) GetCiBackLink() string {
	if o == nil || o.CiBackLink == nil {
		var ret string
		return ret
	}
	return *o.CiBackLink
}

// GetCiBackLinkOk returns a tuple with the CiBackLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetCiBackLinkOk() (*string, bool) {
	if o == nil || o.CiBackLink == nil {
		return nil, false
	}
	return o.CiBackLink, true
}

// HasCiBackLink returns a boolean if a field has been set.
func (o *Event) HasCiBackLink() bool {
	if o != nil && o.CiBackLink != nil {
		return true
	}

	return false
}

// SetCiBackLink gets a reference to the given string and assigns it to the CiBackLink field.
func (o *Event) SetCiBackLink(v string) {
	o.CiBackLink = &v
}

// GetGeolocation returns the Geolocation field value if set, zero value otherwise.
func (o *Event) GetGeolocation() string {
	if o == nil || o.Geolocation == nil {
		var ret string
		return ret
	}
	return *o.Geolocation
}

// GetGeolocationOk returns a tuple with the Geolocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetGeolocationOk() (*string, bool) {
	if o == nil || o.Geolocation == nil {
		return nil, false
	}
	return o.Geolocation, true
}

// HasGeolocation returns a boolean if a field has been set.
func (o *Event) HasGeolocation() bool {
	if o != nil && o.Geolocation != nil {
		return true
	}

	return false
}

// SetGeolocation gets a reference to the given string and assigns it to the Geolocation field.
func (o *Event) SetGeolocation(v string) {
	o.Geolocation = &v
}

// GetServiceMethod returns the ServiceMethod field value if set, zero value otherwise.
func (o *Event) GetServiceMethod() string {
	if o == nil || o.ServiceMethod == nil {
		var ret string
		return ret
	}
	return *o.ServiceMethod
}

// GetServiceMethodOk returns a tuple with the ServiceMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetServiceMethodOk() (*string, bool) {
	if o == nil || o.ServiceMethod == nil {
		return nil, false
	}
	return o.ServiceMethod, true
}

// HasServiceMethod returns a boolean if a field has been set.
func (o *Event) HasServiceMethod() bool {
	if o != nil && o.ServiceMethod != nil {
		return true
	}

	return false
}

// SetServiceMethod gets a reference to the given string and assigns it to the ServiceMethod field.
func (o *Event) SetServiceMethod(v string) {
	o.ServiceMethod = &v
}

// GetChanged returns the Changed field value if set, zero value otherwise.
func (o *Event) GetChanged() string {
	if o == nil || o.Changed == nil {
		var ret string
		return ret
	}
	return *o.Changed
}

// GetChangedOk returns a tuple with the Changed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetChangedOk() (*string, bool) {
	if o == nil || o.Changed == nil {
		return nil, false
	}
	return o.Changed, true
}

// HasChanged returns a boolean if a field has been set.
func (o *Event) HasChanged() bool {
	if o != nil && o.Changed != nil {
		return true
	}

	return false
}

// SetChanged gets a reference to the given string and assigns it to the Changed field.
func (o *Event) SetChanged(v string) {
	o.Changed = &v
}

func (o Event) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartTime != nil {
		toSerialize["startTime"] = o.StartTime
	}
	if o.EndTime != nil {
		toSerialize["endTime"] = o.EndTime
	}
	if o.EntityId != nil {
		toSerialize["entityId"] = o.EntityId
	}
	if o.EntityName != nil {
		toSerialize["entityName"] = o.EntityName
	}
	if o.SeverityLevel != nil {
		toSerialize["severityLevel"] = o.SeverityLevel
	}
	if o.ImpactLevel != nil {
		toSerialize["impactLevel"] = o.ImpactLevel
	}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	if o.ResourceId != nil {
		toSerialize["resourceId"] = o.ResourceId
	}
	if o.ResourceName != nil {
		toSerialize["resourceName"] = o.ResourceName
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Severities != nil {
		toSerialize["severities"] = o.Severities
	}
	if o.IsRootCause != nil {
		toSerialize["isRootCause"] = o.IsRootCause
	}
	if o.DeploymentProject != nil {
		toSerialize["deploymentProject"] = o.DeploymentProject
	}
	if o.CpuLimitInMHz != nil {
		toSerialize["cpuLimitInMHz"] = o.CpuLimitInMHz
	}
	if o.DeploymentParamAdded != nil {
		toSerialize["deploymentParamAdded"] = o.DeploymentParamAdded
	}
	if o.AffectedPrivateSyntheticLocations != nil {
		toSerialize["affectedPrivateSyntheticLocations"] = o.AffectedPrivateSyntheticLocations
	}
	if o.IsClusterWide != nil {
		toSerialize["isClusterWide"] = o.IsClusterWide
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.EffectiveEntity != nil {
		toSerialize["effectiveEntity"] = o.EffectiveEntity
	}
	if o.OperatingSystem != nil {
		toSerialize["operatingSystem"] = o.OperatingSystem
	}
	if o.Artifact != nil {
		toSerialize["artifact"] = o.Artifact
	}
	if o.CpuLoad != nil {
		toSerialize["cpuLoad"] = o.CpuLoad
	}
	if o.AffectedRequestsPerMinute != nil {
		toSerialize["affectedRequestsPerMinute"] = o.AffectedRequestsPerMinute
	}
	if o.AnnotationDescription != nil {
		toSerialize["annotationDescription"] = o.AnnotationDescription
	}
	if o.Browser != nil {
		toSerialize["browser"] = o.Browser
	}
	if o.AffectedSyntheticLocations != nil {
		toSerialize["affectedSyntheticLocations"] = o.AffectedSyntheticLocations
	}
	if o.DeploymentName != nil {
		toSerialize["deploymentName"] = o.DeploymentName
	}
	if o.DeploymentParamRemoved != nil {
		toSerialize["deploymentParamRemoved"] = o.DeploymentParamRemoved
	}
	if o.CorrelationId != nil {
		toSerialize["correlationId"] = o.CorrelationId
	}
	if o.UserDefined50thPercentileThreshold != nil {
		toSerialize["userDefined50thPercentileThreshold"] = o.UserDefined50thPercentileThreshold
	}
	if o.SyntheticErrorType != nil {
		toSerialize["syntheticErrorType"] = o.SyntheticErrorType
	}
	if o.ServiceMethodGroup != nil {
		toSerialize["serviceMethodGroup"] = o.ServiceMethodGroup
	}
	if o.ReferenceResponseTime90thPercentile != nil {
		toSerialize["referenceResponseTime90thPercentile"] = o.ReferenceResponseTime90thPercentile
	}
	if o.UserAction != nil {
		toSerialize["userAction"] = o.UserAction
	}
	if o.MinimumProcessGroupInstanceCountThreshold != nil {
		toSerialize["minimumProcessGroupInstanceCountThreshold"] = o.MinimumProcessGroupInstanceCountThreshold
	}
	if o.ReferenceResponseTime50thPercentile != nil {
		toSerialize["referenceResponseTime50thPercentile"] = o.ReferenceResponseTime50thPercentile
	}
	if o.Original != nil {
		toSerialize["original"] = o.Original
	}
	if o.UserDefined90thPercentileThreshold != nil {
		toSerialize["userDefined90thPercentileThreshold"] = o.UserDefined90thPercentileThreshold
	}
	if o.DeploymentVersion != nil {
		toSerialize["deploymentVersion"] = o.DeploymentVersion
	}
	if o.AnnotationType != nil {
		toSerialize["annotationType"] = o.AnnotationType
	}
	if o.AffectedSyntheticActions != nil {
		toSerialize["affectedSyntheticActions"] = o.AffectedSyntheticActions
	}
	if o.AffectedUserActionsPerMinute != nil {
		toSerialize["affectedUserActionsPerMinute"] = o.AffectedUserActionsPerMinute
	}
	if o.ActiveMaintenanceWindows != nil {
		toSerialize["activeMaintenanceWindows"] = o.ActiveMaintenanceWindows
	}
	if o.MobileAppVersion != nil {
		toSerialize["mobileAppVersion"] = o.MobileAppVersion
	}
	if o.UserDefinedFailureRateThreshold != nil {
		toSerialize["userDefinedFailureRateThreshold"] = o.UserDefinedFailureRateThreshold
	}
	if o.Percentile != nil {
		toSerialize["percentile"] = o.Percentile
	}
	if o.CustomProperties != nil {
		toSerialize["customProperties"] = o.CustomProperties
	}
	if o.RemediationAction != nil {
		toSerialize["remediationAction"] = o.RemediationAction
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.CiBackLink != nil {
		toSerialize["ciBackLink"] = o.CiBackLink
	}
	if o.Geolocation != nil {
		toSerialize["geolocation"] = o.Geolocation
	}
	if o.ServiceMethod != nil {
		toSerialize["serviceMethod"] = o.ServiceMethod
	}
	if o.Changed != nil {
		toSerialize["changed"] = o.Changed
	}
	return json.Marshal(toSerialize)
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


