/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TimeseriesQueryMessage Filtering parameters for a timeseries query.
type TimeseriesQueryMessage struct {
	// The case-sensitive ID of the metric, where you want to read data points.   You can execute a GET timeseries request, to obtain the list of available metrics.
	TimeseriesId *string `json:"timeseriesId,omitempty"`
	// The aggregation type for the resulting data points.   If the requested metric doesn't support the specified aggregation, the request will result in an error.
	AggregationType *string `json:"aggregationType,omitempty"`
	// The start timestamp of the timeframe, in UTC milliseconds.
	StartTimestamp *int64 `json:"startTimestamp,omitempty"`
	// The start timestamp of the timeframe, in UTC milliseconds.   If later than the current time, Dynatrace automatically uses current time instead.   The timeframe must not exceed 6 months.
	EndTimestamp *int64 `json:"endTimestamp,omitempty"`
	// The flag to predict future data points.
	Predict *bool `json:"predict,omitempty"`
	// The relative timeframe, back from the current time.
	RelativeTime *string `json:"relativeTime,omitempty"`
	// Defines the type of result that the call should return. Valid result modes are:  `series`: returns all the data points of the metric in the specified timeframe.  `total`: returns one scalar value for the specified timeframe.   By default, the `series` mode is used.
	QueryMode *string `json:"queryMode,omitempty"`
	// Filters requested data points by entities which should deliver them. You can specify several entities at once.   Allowed values are Dynatrace entity IDs.   If the selected entity doesn't support the requested metric, the request will result in an error.
	Entities *[]string `json:"entities,omitempty"`
	// Filters requiested data points by entity which should deliver them. Only data from entities with the specified tag is delivered.   You can specify several tags in the following format: `tags=tag1&tags=tag2`. The entity has to match *all* the specified tags.   In case of key-value tags, such as imported AWS or CloudFoundry tags use following format: `[context]key:value`.
	Tags *[]string `json:"tags,omitempty"`
	// A filter is an object, containing map of filter keys and its values. Valid filter keys are:   `processType`: Filters by process type. See Process types for allowed values. `osType`: Filters by operating system. See OS types for allowed values. `serviceType`: Filters by service type. See Service types for allowed values. `technology`: Filters by technology type. See Technology types for allowed values. `webServiceName`: Filters by web service name. `webServiceNamespace`: Filters by the web service namespace. `host`: Filters by entity ID of the host, for example HOST-007.
	Filters *map[string]string `json:"filters,omitempty"`
	// Specifies which percentile of the selected response time metric should be delivered.  Only applicable to the `PERCENTILE` aggregation type.   Valid values for percentile are between 1 and 99.   Please keep in mind that percentile export is only possible for response-time based metrics such as application and service response times.
	Percentile *int32 `json:"percentile,omitempty"`
	// Specifies whether the results should exposes dimension mappings between parent entities and their children.  For instance: SERVICE-0000000000000001, SERVICE_METHOD-0000000000000001
	IncludeParentIds *bool `json:"includeParentIds,omitempty"`
	// Exclude (`true`) or include (`false`) data points from any [maintenance window](https://dt-url.net/b2123rg0), defined in your environment.
	ConsiderMaintenanceWindowsForAvailability *bool `json:"considerMaintenanceWindowsForAvailability,omitempty"`
}

// NewTimeseriesQueryMessage instantiates a new TimeseriesQueryMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeseriesQueryMessage() *TimeseriesQueryMessage {
	this := TimeseriesQueryMessage{}
	return &this
}

// NewTimeseriesQueryMessageWithDefaults instantiates a new TimeseriesQueryMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeseriesQueryMessageWithDefaults() *TimeseriesQueryMessage {
	this := TimeseriesQueryMessage{}
	return &this
}

// GetTimeseriesId returns the TimeseriesId field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetTimeseriesId() string {
	if o == nil || o.TimeseriesId == nil {
		var ret string
		return ret
	}
	return *o.TimeseriesId
}

// GetTimeseriesIdOk returns a tuple with the TimeseriesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetTimeseriesIdOk() (*string, bool) {
	if o == nil || o.TimeseriesId == nil {
		return nil, false
	}
	return o.TimeseriesId, true
}

// HasTimeseriesId returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasTimeseriesId() bool {
	if o != nil && o.TimeseriesId != nil {
		return true
	}

	return false
}

// SetTimeseriesId gets a reference to the given string and assigns it to the TimeseriesId field.
func (o *TimeseriesQueryMessage) SetTimeseriesId(v string) {
	o.TimeseriesId = &v
}

// GetAggregationType returns the AggregationType field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetAggregationType() string {
	if o == nil || o.AggregationType == nil {
		var ret string
		return ret
	}
	return *o.AggregationType
}

// GetAggregationTypeOk returns a tuple with the AggregationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetAggregationTypeOk() (*string, bool) {
	if o == nil || o.AggregationType == nil {
		return nil, false
	}
	return o.AggregationType, true
}

// HasAggregationType returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasAggregationType() bool {
	if o != nil && o.AggregationType != nil {
		return true
	}

	return false
}

// SetAggregationType gets a reference to the given string and assigns it to the AggregationType field.
func (o *TimeseriesQueryMessage) SetAggregationType(v string) {
	o.AggregationType = &v
}

// GetStartTimestamp returns the StartTimestamp field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetStartTimestamp() int64 {
	if o == nil || o.StartTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetStartTimestampOk() (*int64, bool) {
	if o == nil || o.StartTimestamp == nil {
		return nil, false
	}
	return o.StartTimestamp, true
}

// HasStartTimestamp returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasStartTimestamp() bool {
	if o != nil && o.StartTimestamp != nil {
		return true
	}

	return false
}

// SetStartTimestamp gets a reference to the given int64 and assigns it to the StartTimestamp field.
func (o *TimeseriesQueryMessage) SetStartTimestamp(v int64) {
	o.StartTimestamp = &v
}

// GetEndTimestamp returns the EndTimestamp field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetEndTimestamp() int64 {
	if o == nil || o.EndTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.EndTimestamp
}

// GetEndTimestampOk returns a tuple with the EndTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetEndTimestampOk() (*int64, bool) {
	if o == nil || o.EndTimestamp == nil {
		return nil, false
	}
	return o.EndTimestamp, true
}

// HasEndTimestamp returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasEndTimestamp() bool {
	if o != nil && o.EndTimestamp != nil {
		return true
	}

	return false
}

// SetEndTimestamp gets a reference to the given int64 and assigns it to the EndTimestamp field.
func (o *TimeseriesQueryMessage) SetEndTimestamp(v int64) {
	o.EndTimestamp = &v
}

// GetPredict returns the Predict field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetPredict() bool {
	if o == nil || o.Predict == nil {
		var ret bool
		return ret
	}
	return *o.Predict
}

// GetPredictOk returns a tuple with the Predict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetPredictOk() (*bool, bool) {
	if o == nil || o.Predict == nil {
		return nil, false
	}
	return o.Predict, true
}

// HasPredict returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasPredict() bool {
	if o != nil && o.Predict != nil {
		return true
	}

	return false
}

// SetPredict gets a reference to the given bool and assigns it to the Predict field.
func (o *TimeseriesQueryMessage) SetPredict(v bool) {
	o.Predict = &v
}

// GetRelativeTime returns the RelativeTime field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetRelativeTime() string {
	if o == nil || o.RelativeTime == nil {
		var ret string
		return ret
	}
	return *o.RelativeTime
}

// GetRelativeTimeOk returns a tuple with the RelativeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetRelativeTimeOk() (*string, bool) {
	if o == nil || o.RelativeTime == nil {
		return nil, false
	}
	return o.RelativeTime, true
}

// HasRelativeTime returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasRelativeTime() bool {
	if o != nil && o.RelativeTime != nil {
		return true
	}

	return false
}

// SetRelativeTime gets a reference to the given string and assigns it to the RelativeTime field.
func (o *TimeseriesQueryMessage) SetRelativeTime(v string) {
	o.RelativeTime = &v
}

// GetQueryMode returns the QueryMode field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetQueryMode() string {
	if o == nil || o.QueryMode == nil {
		var ret string
		return ret
	}
	return *o.QueryMode
}

// GetQueryModeOk returns a tuple with the QueryMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetQueryModeOk() (*string, bool) {
	if o == nil || o.QueryMode == nil {
		return nil, false
	}
	return o.QueryMode, true
}

// HasQueryMode returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasQueryMode() bool {
	if o != nil && o.QueryMode != nil {
		return true
	}

	return false
}

// SetQueryMode gets a reference to the given string and assigns it to the QueryMode field.
func (o *TimeseriesQueryMessage) SetQueryMode(v string) {
	o.QueryMode = &v
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetEntities() []string {
	if o == nil || o.Entities == nil {
		var ret []string
		return ret
	}
	return *o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetEntitiesOk() (*[]string, bool) {
	if o == nil || o.Entities == nil {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasEntities() bool {
	if o != nil && o.Entities != nil {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []string and assigns it to the Entities field.
func (o *TimeseriesQueryMessage) SetEntities(v []string) {
	o.Entities = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *TimeseriesQueryMessage) SetTags(v []string) {
	o.Tags = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetFilters() map[string]string {
	if o == nil || o.Filters == nil {
		var ret map[string]string
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetFiltersOk() (*map[string]string, bool) {
	if o == nil || o.Filters == nil {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasFilters() bool {
	if o != nil && o.Filters != nil {
		return true
	}

	return false
}

// SetFilters gets a reference to the given map[string]string and assigns it to the Filters field.
func (o *TimeseriesQueryMessage) SetFilters(v map[string]string) {
	o.Filters = &v
}

// GetPercentile returns the Percentile field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetPercentile() int32 {
	if o == nil || o.Percentile == nil {
		var ret int32
		return ret
	}
	return *o.Percentile
}

// GetPercentileOk returns a tuple with the Percentile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetPercentileOk() (*int32, bool) {
	if o == nil || o.Percentile == nil {
		return nil, false
	}
	return o.Percentile, true
}

// HasPercentile returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasPercentile() bool {
	if o != nil && o.Percentile != nil {
		return true
	}

	return false
}

// SetPercentile gets a reference to the given int32 and assigns it to the Percentile field.
func (o *TimeseriesQueryMessage) SetPercentile(v int32) {
	o.Percentile = &v
}

// GetIncludeParentIds returns the IncludeParentIds field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetIncludeParentIds() bool {
	if o == nil || o.IncludeParentIds == nil {
		var ret bool
		return ret
	}
	return *o.IncludeParentIds
}

// GetIncludeParentIdsOk returns a tuple with the IncludeParentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetIncludeParentIdsOk() (*bool, bool) {
	if o == nil || o.IncludeParentIds == nil {
		return nil, false
	}
	return o.IncludeParentIds, true
}

// HasIncludeParentIds returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasIncludeParentIds() bool {
	if o != nil && o.IncludeParentIds != nil {
		return true
	}

	return false
}

// SetIncludeParentIds gets a reference to the given bool and assigns it to the IncludeParentIds field.
func (o *TimeseriesQueryMessage) SetIncludeParentIds(v bool) {
	o.IncludeParentIds = &v
}

// GetConsiderMaintenanceWindowsForAvailability returns the ConsiderMaintenanceWindowsForAvailability field value if set, zero value otherwise.
func (o *TimeseriesQueryMessage) GetConsiderMaintenanceWindowsForAvailability() bool {
	if o == nil || o.ConsiderMaintenanceWindowsForAvailability == nil {
		var ret bool
		return ret
	}
	return *o.ConsiderMaintenanceWindowsForAvailability
}

// GetConsiderMaintenanceWindowsForAvailabilityOk returns a tuple with the ConsiderMaintenanceWindowsForAvailability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeseriesQueryMessage) GetConsiderMaintenanceWindowsForAvailabilityOk() (*bool, bool) {
	if o == nil || o.ConsiderMaintenanceWindowsForAvailability == nil {
		return nil, false
	}
	return o.ConsiderMaintenanceWindowsForAvailability, true
}

// HasConsiderMaintenanceWindowsForAvailability returns a boolean if a field has been set.
func (o *TimeseriesQueryMessage) HasConsiderMaintenanceWindowsForAvailability() bool {
	if o != nil && o.ConsiderMaintenanceWindowsForAvailability != nil {
		return true
	}

	return false
}

// SetConsiderMaintenanceWindowsForAvailability gets a reference to the given bool and assigns it to the ConsiderMaintenanceWindowsForAvailability field.
func (o *TimeseriesQueryMessage) SetConsiderMaintenanceWindowsForAvailability(v bool) {
	o.ConsiderMaintenanceWindowsForAvailability = &v
}

func (o TimeseriesQueryMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TimeseriesId != nil {
		toSerialize["timeseriesId"] = o.TimeseriesId
	}
	if o.AggregationType != nil {
		toSerialize["aggregationType"] = o.AggregationType
	}
	if o.StartTimestamp != nil {
		toSerialize["startTimestamp"] = o.StartTimestamp
	}
	if o.EndTimestamp != nil {
		toSerialize["endTimestamp"] = o.EndTimestamp
	}
	if o.Predict != nil {
		toSerialize["predict"] = o.Predict
	}
	if o.RelativeTime != nil {
		toSerialize["relativeTime"] = o.RelativeTime
	}
	if o.QueryMode != nil {
		toSerialize["queryMode"] = o.QueryMode
	}
	if o.Entities != nil {
		toSerialize["entities"] = o.Entities
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Filters != nil {
		toSerialize["filters"] = o.Filters
	}
	if o.Percentile != nil {
		toSerialize["percentile"] = o.Percentile
	}
	if o.IncludeParentIds != nil {
		toSerialize["includeParentIds"] = o.IncludeParentIds
	}
	if o.ConsiderMaintenanceWindowsForAvailability != nil {
		toSerialize["considerMaintenanceWindowsForAvailability"] = o.ConsiderMaintenanceWindowsForAvailability
	}
	return json.Marshal(toSerialize)
}

type NullableTimeseriesQueryMessage struct {
	value *TimeseriesQueryMessage
	isSet bool
}

func (v NullableTimeseriesQueryMessage) Get() *TimeseriesQueryMessage {
	return v.value
}

func (v *NullableTimeseriesQueryMessage) Set(val *TimeseriesQueryMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeseriesQueryMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeseriesQueryMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeseriesQueryMessage(val *TimeseriesQueryMessage) *NullableTimeseriesQueryMessage {
	return &NullableTimeseriesQueryMessage{value: val, isSet: true}
}

func (v NullableTimeseriesQueryMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeseriesQueryMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


