/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EntityTimeseriesData Information about a metric and its data points.
type EntityTimeseriesData struct {
	// The ID of the metric, where you want to post data points.
	TimeseriesId string `json:"timeseriesId"`
	// Dimensions of the data points you're posting.   The key of the metric dimension must be defined earlier in the metric definition.
	Dimensions *map[string]string `json:"dimensions,omitempty"`
	// List of data points.   Each data point is an array, containing the timestamp and the value.   Timestamp is UTC milliseconds reported as a number, for example: `1520523365557`.   You have the guaranteed timeframe of **30 minutes** into the past.   A custom metric must be registered **before** you can report a metric value. Therefore, the timestamp for reporting a value must be after the registration time of the metric.
	DataPoints [][]float32 `json:"dataPoints"`
}

// NewEntityTimeseriesData instantiates a new EntityTimeseriesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityTimeseriesData(timeseriesId string, dataPoints [][]float32, ) *EntityTimeseriesData {
	this := EntityTimeseriesData{}
	this.TimeseriesId = timeseriesId
	this.DataPoints = dataPoints
	return &this
}

// NewEntityTimeseriesDataWithDefaults instantiates a new EntityTimeseriesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityTimeseriesDataWithDefaults() *EntityTimeseriesData {
	this := EntityTimeseriesData{}
	return &this
}

// GetTimeseriesId returns the TimeseriesId field value
func (o *EntityTimeseriesData) GetTimeseriesId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.TimeseriesId
}

// GetTimeseriesIdOk returns a tuple with the TimeseriesId field value
// and a boolean to check if the value has been set.
func (o *EntityTimeseriesData) GetTimeseriesIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TimeseriesId, true
}

// SetTimeseriesId sets field value
func (o *EntityTimeseriesData) SetTimeseriesId(v string) {
	o.TimeseriesId = v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *EntityTimeseriesData) GetDimensions() map[string]string {
	if o == nil || o.Dimensions == nil {
		var ret map[string]string
		return ret
	}
	return *o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTimeseriesData) GetDimensionsOk() (*map[string]string, bool) {
	if o == nil || o.Dimensions == nil {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *EntityTimeseriesData) HasDimensions() bool {
	if o != nil && o.Dimensions != nil {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given map[string]string and assigns it to the Dimensions field.
func (o *EntityTimeseriesData) SetDimensions(v map[string]string) {
	o.Dimensions = &v
}

// GetDataPoints returns the DataPoints field value
func (o *EntityTimeseriesData) GetDataPoints() [][]float32 {
	if o == nil  {
		var ret [][]float32
		return ret
	}

	return o.DataPoints
}

// GetDataPointsOk returns a tuple with the DataPoints field value
// and a boolean to check if the value has been set.
func (o *EntityTimeseriesData) GetDataPointsOk() (*[][]float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DataPoints, true
}

// SetDataPoints sets field value
func (o *EntityTimeseriesData) SetDataPoints(v [][]float32) {
	o.DataPoints = v
}

func (o EntityTimeseriesData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timeseriesId"] = o.TimeseriesId
	}
	if o.Dimensions != nil {
		toSerialize["dimensions"] = o.Dimensions
	}
	if true {
		toSerialize["dataPoints"] = o.DataPoints
	}
	return json.Marshal(toSerialize)
}

type NullableEntityTimeseriesData struct {
	value *EntityTimeseriesData
	isSet bool
}

func (v NullableEntityTimeseriesData) Get() *EntityTimeseriesData {
	return v.value
}

func (v *NullableEntityTimeseriesData) Set(val *EntityTimeseriesData) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityTimeseriesData) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityTimeseriesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityTimeseriesData(val *EntityTimeseriesData) *NullableEntityTimeseriesData {
	return &NullableEntityTimeseriesData{value: val, isSet: true}
}

func (v NullableEntityTimeseriesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityTimeseriesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


