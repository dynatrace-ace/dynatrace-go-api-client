/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// LogList4hostResult OS logs available on the host.
type LogList4hostResult struct {
	// The access to the log content is granted (`true`) or denied (`false`).
	ContentAccess *bool `json:"contentAccess,omitempty"`
	// The list of available OS logs.
	Logs *[]Log4host `json:"logs,omitempty"`
}

// NewLogList4hostResult instantiates a new LogList4hostResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogList4hostResult() *LogList4hostResult {
	this := LogList4hostResult{}
	return &this
}

// NewLogList4hostResultWithDefaults instantiates a new LogList4hostResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogList4hostResultWithDefaults() *LogList4hostResult {
	this := LogList4hostResult{}
	return &this
}

// GetContentAccess returns the ContentAccess field value if set, zero value otherwise.
func (o *LogList4hostResult) GetContentAccess() bool {
	if o == nil || o.ContentAccess == nil {
		var ret bool
		return ret
	}
	return *o.ContentAccess
}

// GetContentAccessOk returns a tuple with the ContentAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogList4hostResult) GetContentAccessOk() (*bool, bool) {
	if o == nil || o.ContentAccess == nil {
		return nil, false
	}
	return o.ContentAccess, true
}

// HasContentAccess returns a boolean if a field has been set.
func (o *LogList4hostResult) HasContentAccess() bool {
	if o != nil && o.ContentAccess != nil {
		return true
	}

	return false
}

// SetContentAccess gets a reference to the given bool and assigns it to the ContentAccess field.
func (o *LogList4hostResult) SetContentAccess(v bool) {
	o.ContentAccess = &v
}

// GetLogs returns the Logs field value if set, zero value otherwise.
func (o *LogList4hostResult) GetLogs() []Log4host {
	if o == nil || o.Logs == nil {
		var ret []Log4host
		return ret
	}
	return *o.Logs
}

// GetLogsOk returns a tuple with the Logs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogList4hostResult) GetLogsOk() (*[]Log4host, bool) {
	if o == nil || o.Logs == nil {
		return nil, false
	}
	return o.Logs, true
}

// HasLogs returns a boolean if a field has been set.
func (o *LogList4hostResult) HasLogs() bool {
	if o != nil && o.Logs != nil {
		return true
	}

	return false
}

// SetLogs gets a reference to the given []Log4host and assigns it to the Logs field.
func (o *LogList4hostResult) SetLogs(v []Log4host) {
	o.Logs = &v
}

func (o LogList4hostResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContentAccess != nil {
		toSerialize["contentAccess"] = o.ContentAccess
	}
	if o.Logs != nil {
		toSerialize["logs"] = o.Logs
	}
	return json.Marshal(toSerialize)
}

type NullableLogList4hostResult struct {
	value *LogList4hostResult
	isSet bool
}

func (v NullableLogList4hostResult) Get() *LogList4hostResult {
	return v.value
}

func (v *NullableLogList4hostResult) Set(val *LogList4hostResult) {
	v.value = val
	v.isSet = true
}

func (v NullableLogList4hostResult) IsSet() bool {
	return v.isSet
}

func (v *NullableLogList4hostResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogList4hostResult(val *LogList4hostResult) *NullableLogList4hostResult {
	return &NullableLogList4hostResult{value: val, isSet: true}
}

func (v NullableLogList4hostResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogList4hostResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


