/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MaintenanceWindow Parameters of the maintenance window.
type MaintenanceWindow struct {
	// The ID of the maintenance window.
	Id *string `json:"id,omitempty"`
	// The type of the maintenance: planned or unplanned.
	Type string `json:"type"`
	// A short description of the maintenance purpose.
	Description *string `json:"description,omitempty"`
	// Alerting during maintenance is enabled (`false`) or disabled (`true`).
	SuppressAlerts *bool `json:"suppressAlerts,omitempty"`
	// Problem detection during maintenance is enabled (`false`) or disabled (`true`).
	SuppressProblems *bool `json:"suppressProblems,omitempty"`
	Scope *MaintenanceWindowScope `json:"scope,omitempty"`
	Schedule MaintenanceWindowSchedule `json:"schedule"`
}

// NewMaintenanceWindow instantiates a new MaintenanceWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMaintenanceWindow(type_ string, schedule MaintenanceWindowSchedule) *MaintenanceWindow {
	this := MaintenanceWindow{}
	this.Type = type_
	this.Schedule = schedule
	return &this
}

// NewMaintenanceWindowWithDefaults instantiates a new MaintenanceWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMaintenanceWindowWithDefaults() *MaintenanceWindow {
	this := MaintenanceWindow{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MaintenanceWindow) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintenanceWindow) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MaintenanceWindow) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MaintenanceWindow) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value
func (o *MaintenanceWindow) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MaintenanceWindow) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MaintenanceWindow) SetType(v string) {
	o.Type = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *MaintenanceWindow) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintenanceWindow) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *MaintenanceWindow) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *MaintenanceWindow) SetDescription(v string) {
	o.Description = &v
}

// GetSuppressAlerts returns the SuppressAlerts field value if set, zero value otherwise.
func (o *MaintenanceWindow) GetSuppressAlerts() bool {
	if o == nil || o.SuppressAlerts == nil {
		var ret bool
		return ret
	}
	return *o.SuppressAlerts
}

// GetSuppressAlertsOk returns a tuple with the SuppressAlerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintenanceWindow) GetSuppressAlertsOk() (*bool, bool) {
	if o == nil || o.SuppressAlerts == nil {
		return nil, false
	}
	return o.SuppressAlerts, true
}

// HasSuppressAlerts returns a boolean if a field has been set.
func (o *MaintenanceWindow) HasSuppressAlerts() bool {
	if o != nil && o.SuppressAlerts != nil {
		return true
	}

	return false
}

// SetSuppressAlerts gets a reference to the given bool and assigns it to the SuppressAlerts field.
func (o *MaintenanceWindow) SetSuppressAlerts(v bool) {
	o.SuppressAlerts = &v
}

// GetSuppressProblems returns the SuppressProblems field value if set, zero value otherwise.
func (o *MaintenanceWindow) GetSuppressProblems() bool {
	if o == nil || o.SuppressProblems == nil {
		var ret bool
		return ret
	}
	return *o.SuppressProblems
}

// GetSuppressProblemsOk returns a tuple with the SuppressProblems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintenanceWindow) GetSuppressProblemsOk() (*bool, bool) {
	if o == nil || o.SuppressProblems == nil {
		return nil, false
	}
	return o.SuppressProblems, true
}

// HasSuppressProblems returns a boolean if a field has been set.
func (o *MaintenanceWindow) HasSuppressProblems() bool {
	if o != nil && o.SuppressProblems != nil {
		return true
	}

	return false
}

// SetSuppressProblems gets a reference to the given bool and assigns it to the SuppressProblems field.
func (o *MaintenanceWindow) SetSuppressProblems(v bool) {
	o.SuppressProblems = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *MaintenanceWindow) GetScope() MaintenanceWindowScope {
	if o == nil || o.Scope == nil {
		var ret MaintenanceWindowScope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaintenanceWindow) GetScopeOk() (*MaintenanceWindowScope, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *MaintenanceWindow) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given MaintenanceWindowScope and assigns it to the Scope field.
func (o *MaintenanceWindow) SetScope(v MaintenanceWindowScope) {
	o.Scope = &v
}

// GetSchedule returns the Schedule field value
func (o *MaintenanceWindow) GetSchedule() MaintenanceWindowSchedule {
	if o == nil {
		var ret MaintenanceWindowSchedule
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *MaintenanceWindow) GetScheduleOk() (*MaintenanceWindowSchedule, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *MaintenanceWindow) SetSchedule(v MaintenanceWindowSchedule) {
	o.Schedule = v
}

func (o MaintenanceWindow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.SuppressAlerts != nil {
		toSerialize["suppressAlerts"] = o.SuppressAlerts
	}
	if o.SuppressProblems != nil {
		toSerialize["suppressProblems"] = o.SuppressProblems
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if true {
		toSerialize["schedule"] = o.Schedule
	}
	return json.Marshal(toSerialize)
}

type NullableMaintenanceWindow struct {
	value *MaintenanceWindow
	isSet bool
}

func (v NullableMaintenanceWindow) Get() *MaintenanceWindow {
	return v.value
}

func (v *NullableMaintenanceWindow) Set(val *MaintenanceWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableMaintenanceWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableMaintenanceWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaintenanceWindow(val *MaintenanceWindow) *NullableMaintenanceWindow {
	return &NullableMaintenanceWindow{value: val, isSet: true}
}

func (v NullableMaintenanceWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaintenanceWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


