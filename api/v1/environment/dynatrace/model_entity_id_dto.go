/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EntityIdDto A DTO for entity ID.
type EntityIdDto struct {
	// Entity ID to be transferred
	EntityId string `json:"entityId"`
}

// NewEntityIdDto instantiates a new EntityIdDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityIdDto(entityId string, ) *EntityIdDto {
	this := EntityIdDto{}
	this.EntityId = entityId
	return &this
}

// NewEntityIdDtoWithDefaults instantiates a new EntityIdDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityIdDtoWithDefaults() *EntityIdDto {
	this := EntityIdDto{}
	return &this
}

// GetEntityId returns the EntityId field value
func (o *EntityIdDto) GetEntityId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *EntityIdDto) GetEntityIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *EntityIdDto) SetEntityId(v string) {
	o.EntityId = v
}

func (o EntityIdDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entityId"] = o.EntityId
	}
	return json.Marshal(toSerialize)
}

type NullableEntityIdDto struct {
	value *EntityIdDto
	isSet bool
}

func (v NullableEntityIdDto) Get() *EntityIdDto {
	return v.value
}

func (v *NullableEntityIdDto) Set(val *EntityIdDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityIdDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityIdDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityIdDto(val *EntityIdDto) *NullableEntityIdDto {
	return &NullableEntityIdDto{value: val, isSet: true}
}

func (v NullableEntityIdDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityIdDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


