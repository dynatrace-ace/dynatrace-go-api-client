/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
	"time"
)

// DateProperty A custom property of the user-action with a date value.
type DateProperty struct {
	// The custom key of the property.
	Key *string `json:"key,omitempty"`
	// The date value of the property.
	Value *time.Time `json:"value,omitempty"`
}

// NewDateProperty instantiates a new DateProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateProperty() *DateProperty {
	this := DateProperty{}
	return &this
}

// NewDatePropertyWithDefaults instantiates a new DateProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatePropertyWithDefaults() *DateProperty {
	this := DateProperty{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *DateProperty) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateProperty) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *DateProperty) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *DateProperty) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DateProperty) GetValue() time.Time {
	if o == nil || o.Value == nil {
		var ret time.Time
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateProperty) GetValueOk() (*time.Time, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DateProperty) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given time.Time and assigns it to the Value field.
func (o *DateProperty) SetValue(v time.Time) {
	o.Value = &v
}

func (o DateProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableDateProperty struct {
	value *DateProperty
	isSet bool
}

func (v NullableDateProperty) Get() *DateProperty {
	return v.value
}

func (v *NullableDateProperty) Set(val *DateProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableDateProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableDateProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateProperty(val *DateProperty) *NullableDateProperty {
	return &NullableDateProperty{value: val, isSet: true}
}

func (v NullableDateProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


