/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// PushEventAttachRules The set of rules defining Dynatrace entities to be associated with the event.  You can specify tags to dynamically match Dynatrace entities or IDs of specific entities.  At least one entity ID or tag is required.
type PushEventAttachRules struct {
	// A list of entity IDs to which the event should be attached.
	EntityIds *[]string `json:"entityIds,omitempty"`
	// A set of matching rules to dynamically pick up entities based on tags.   Only entities seen within the last **24 hours** are taken into account for tag-based matching rules.
	TagRule *[]TagMatchRule `json:"tagRule,omitempty"`
}

// NewPushEventAttachRules instantiates a new PushEventAttachRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPushEventAttachRules() *PushEventAttachRules {
	this := PushEventAttachRules{}
	return &this
}

// NewPushEventAttachRulesWithDefaults instantiates a new PushEventAttachRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPushEventAttachRulesWithDefaults() *PushEventAttachRules {
	this := PushEventAttachRules{}
	return &this
}

// GetEntityIds returns the EntityIds field value if set, zero value otherwise.
func (o *PushEventAttachRules) GetEntityIds() []string {
	if o == nil || o.EntityIds == nil {
		var ret []string
		return ret
	}
	return *o.EntityIds
}

// GetEntityIdsOk returns a tuple with the EntityIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushEventAttachRules) GetEntityIdsOk() (*[]string, bool) {
	if o == nil || o.EntityIds == nil {
		return nil, false
	}
	return o.EntityIds, true
}

// HasEntityIds returns a boolean if a field has been set.
func (o *PushEventAttachRules) HasEntityIds() bool {
	if o != nil && o.EntityIds != nil {
		return true
	}

	return false
}

// SetEntityIds gets a reference to the given []string and assigns it to the EntityIds field.
func (o *PushEventAttachRules) SetEntityIds(v []string) {
	o.EntityIds = &v
}

// GetTagRule returns the TagRule field value if set, zero value otherwise.
func (o *PushEventAttachRules) GetTagRule() []TagMatchRule {
	if o == nil || o.TagRule == nil {
		var ret []TagMatchRule
		return ret
	}
	return *o.TagRule
}

// GetTagRuleOk returns a tuple with the TagRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PushEventAttachRules) GetTagRuleOk() (*[]TagMatchRule, bool) {
	if o == nil || o.TagRule == nil {
		return nil, false
	}
	return o.TagRule, true
}

// HasTagRule returns a boolean if a field has been set.
func (o *PushEventAttachRules) HasTagRule() bool {
	if o != nil && o.TagRule != nil {
		return true
	}

	return false
}

// SetTagRule gets a reference to the given []TagMatchRule and assigns it to the TagRule field.
func (o *PushEventAttachRules) SetTagRule(v []TagMatchRule) {
	o.TagRule = &v
}

func (o PushEventAttachRules) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityIds != nil {
		toSerialize["entityIds"] = o.EntityIds
	}
	if o.TagRule != nil {
		toSerialize["tagRule"] = o.TagRule
	}
	return json.Marshal(toSerialize)
}

type NullablePushEventAttachRules struct {
	value *PushEventAttachRules
	isSet bool
}

func (v NullablePushEventAttachRules) Get() *PushEventAttachRules {
	return v.value
}

func (v *NullablePushEventAttachRules) Set(val *PushEventAttachRules) {
	v.value = val
	v.isSet = true
}

func (v NullablePushEventAttachRules) IsSet() bool {
	return v.isSet
}

func (v *NullablePushEventAttachRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePushEventAttachRules(val *PushEventAttachRules) *NullablePushEventAttachRules {
	return &NullablePushEventAttachRules{value: val, isSet: true}
}

func (v NullablePushEventAttachRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePushEventAttachRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


