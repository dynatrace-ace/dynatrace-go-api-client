/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SyntheticMonitorStepResult The result of the individual step of a synthetic monitor.
type SyntheticMonitorStepResult struct {
	// ID of the step. It is unique within the test definition.
	Id int64 `json:"id"`
	// The timestamp of text step execution, UTC milliseconds.
	StartTimestamp int64 `json:"startTimestamp"`
	// The response time of the step, in milliseconds.    Absent when no meaningful response time is available (as may be the case for certain error conditions such as a misconfigured step script).
	ResponseTimeMillis *int64 `json:"responseTimeMillis,omitempty"`
	Error *SyntheticMonitorError `json:"error,omitempty"`
}

// NewSyntheticMonitorStepResult instantiates a new SyntheticMonitorStepResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticMonitorStepResult(id int64, startTimestamp int64, ) *SyntheticMonitorStepResult {
	this := SyntheticMonitorStepResult{}
	this.Id = id
	this.StartTimestamp = startTimestamp
	return &this
}

// NewSyntheticMonitorStepResultWithDefaults instantiates a new SyntheticMonitorStepResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticMonitorStepResultWithDefaults() *SyntheticMonitorStepResult {
	this := SyntheticMonitorStepResult{}
	return &this
}

// GetId returns the Id field value
func (o *SyntheticMonitorStepResult) GetId() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitorStepResult) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SyntheticMonitorStepResult) SetId(v int64) {
	o.Id = v
}

// GetStartTimestamp returns the StartTimestamp field value
func (o *SyntheticMonitorStepResult) GetStartTimestamp() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.StartTimestamp
}

// GetStartTimestampOk returns a tuple with the StartTimestamp field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitorStepResult) GetStartTimestampOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartTimestamp, true
}

// SetStartTimestamp sets field value
func (o *SyntheticMonitorStepResult) SetStartTimestamp(v int64) {
	o.StartTimestamp = v
}

// GetResponseTimeMillis returns the ResponseTimeMillis field value if set, zero value otherwise.
func (o *SyntheticMonitorStepResult) GetResponseTimeMillis() int64 {
	if o == nil || o.ResponseTimeMillis == nil {
		var ret int64
		return ret
	}
	return *o.ResponseTimeMillis
}

// GetResponseTimeMillisOk returns a tuple with the ResponseTimeMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticMonitorStepResult) GetResponseTimeMillisOk() (*int64, bool) {
	if o == nil || o.ResponseTimeMillis == nil {
		return nil, false
	}
	return o.ResponseTimeMillis, true
}

// HasResponseTimeMillis returns a boolean if a field has been set.
func (o *SyntheticMonitorStepResult) HasResponseTimeMillis() bool {
	if o != nil && o.ResponseTimeMillis != nil {
		return true
	}

	return false
}

// SetResponseTimeMillis gets a reference to the given int64 and assigns it to the ResponseTimeMillis field.
func (o *SyntheticMonitorStepResult) SetResponseTimeMillis(v int64) {
	o.ResponseTimeMillis = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SyntheticMonitorStepResult) GetError() SyntheticMonitorError {
	if o == nil || o.Error == nil {
		var ret SyntheticMonitorError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticMonitorStepResult) GetErrorOk() (*SyntheticMonitorError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SyntheticMonitorStepResult) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given SyntheticMonitorError and assigns it to the Error field.
func (o *SyntheticMonitorStepResult) SetError(v SyntheticMonitorError) {
	o.Error = &v
}

func (o SyntheticMonitorStepResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["startTimestamp"] = o.StartTimestamp
	}
	if o.ResponseTimeMillis != nil {
		toSerialize["responseTimeMillis"] = o.ResponseTimeMillis
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticMonitorStepResult struct {
	value *SyntheticMonitorStepResult
	isSet bool
}

func (v NullableSyntheticMonitorStepResult) Get() *SyntheticMonitorStepResult {
	return v.value
}

func (v *NullableSyntheticMonitorStepResult) Set(val *SyntheticMonitorStepResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticMonitorStepResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticMonitorStepResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticMonitorStepResult(val *SyntheticMonitorStepResult) *NullableSyntheticMonitorStepResult {
	return &NullableSyntheticMonitorStepResult{value: val, isSet: true}
}

func (v NullableSyntheticMonitorStepResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticMonitorStepResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


