/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SyntheticMonitor The synthetic monitor. This is a base object, the exact type depends on the value of the `type` field.
type SyntheticMonitor struct {
	// The entity ID of the monitor.
	EntityId string `json:"entityId"`
	// The name of the monitor.
	Name string `json:"name"`
	// The frequency of the monitor, in minutes.    You can use one of the following values: `5`, `10`, `15`, `30`, and `60`.
	FrequencyMin int32 `json:"frequencyMin"`
	// The monitor is enabled (`true`) or disabled (`false`).
	Enabled bool `json:"enabled"`
	// Defines the actual set of fields depending on the value. See one of the following objects:   * `BROWSER` -> BrowserSyntheticMonitor  * `HTTP` -> HttpSyntheticMonitor  
	Type string `json:"type"`
	// The origin of a monitor
	CreatedFrom string `json:"createdFrom"`
	// The script of a [browser](https://dt-url.net/9c103rda) or HTTP monitor.
	Script map[string]interface{} `json:"script"`
	// A list of locations from which the monitor is executed.    To specify a location, use its entity ID.
	Locations []string `json:"locations"`
	AnomalyDetection *AnomalyDetection `json:"anomalyDetection,omitempty"`
	// A set of tags assigned to the monitor.
	Tags []TagWithSourceInfo `json:"tags"`
	// A set of management zones to which the monitor belongs to.
	ManagementZones []ManagementZoneDto `json:"managementZones"`
	// A set of automatically assigned applications.
	AutomaticallyAssignedApps []string `json:"automaticallyAssignedApps"`
	// A set of manually assigned applications.
	ManuallyAssignedApps []string `json:"manuallyAssignedApps"`
}

// NewSyntheticMonitor instantiates a new SyntheticMonitor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticMonitor(entityId string, name string, frequencyMin int32, enabled bool, type_ string, createdFrom string, script map[string]interface{}, locations []string, tags []TagWithSourceInfo, managementZones []ManagementZoneDto, automaticallyAssignedApps []string, manuallyAssignedApps []string) *SyntheticMonitor {
	this := SyntheticMonitor{}
	this.EntityId = entityId
	this.Name = name
	this.FrequencyMin = frequencyMin
	this.Enabled = enabled
	this.Type = type_
	this.CreatedFrom = createdFrom
	this.Script = script
	this.Locations = locations
	this.Tags = tags
	this.ManagementZones = managementZones
	this.AutomaticallyAssignedApps = automaticallyAssignedApps
	this.ManuallyAssignedApps = manuallyAssignedApps
	return &this
}

// NewSyntheticMonitorWithDefaults instantiates a new SyntheticMonitor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticMonitorWithDefaults() *SyntheticMonitor {
	this := SyntheticMonitor{}
	return &this
}

// GetEntityId returns the EntityId field value
func (o *SyntheticMonitor) GetEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetEntityIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *SyntheticMonitor) SetEntityId(v string) {
	o.EntityId = v
}

// GetName returns the Name field value
func (o *SyntheticMonitor) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SyntheticMonitor) SetName(v string) {
	o.Name = v
}

// GetFrequencyMin returns the FrequencyMin field value
func (o *SyntheticMonitor) GetFrequencyMin() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FrequencyMin
}

// GetFrequencyMinOk returns a tuple with the FrequencyMin field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetFrequencyMinOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FrequencyMin, true
}

// SetFrequencyMin sets field value
func (o *SyntheticMonitor) SetFrequencyMin(v int32) {
	o.FrequencyMin = v
}

// GetEnabled returns the Enabled field value
func (o *SyntheticMonitor) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *SyntheticMonitor) SetEnabled(v bool) {
	o.Enabled = v
}

// GetType returns the Type field value
func (o *SyntheticMonitor) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SyntheticMonitor) SetType(v string) {
	o.Type = v
}

// GetCreatedFrom returns the CreatedFrom field value
func (o *SyntheticMonitor) GetCreatedFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedFrom
}

// GetCreatedFromOk returns a tuple with the CreatedFrom field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetCreatedFromOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedFrom, true
}

// SetCreatedFrom sets field value
func (o *SyntheticMonitor) SetCreatedFrom(v string) {
	o.CreatedFrom = v
}

// GetScript returns the Script field value
func (o *SyntheticMonitor) GetScript() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Script
}

// GetScriptOk returns a tuple with the Script field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetScriptOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Script, true
}

// SetScript sets field value
func (o *SyntheticMonitor) SetScript(v map[string]interface{}) {
	o.Script = v
}

// GetLocations returns the Locations field value
func (o *SyntheticMonitor) GetLocations() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetLocationsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Locations, true
}

// SetLocations sets field value
func (o *SyntheticMonitor) SetLocations(v []string) {
	o.Locations = v
}

// GetAnomalyDetection returns the AnomalyDetection field value if set, zero value otherwise.
func (o *SyntheticMonitor) GetAnomalyDetection() AnomalyDetection {
	if o == nil || o.AnomalyDetection == nil {
		var ret AnomalyDetection
		return ret
	}
	return *o.AnomalyDetection
}

// GetAnomalyDetectionOk returns a tuple with the AnomalyDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetAnomalyDetectionOk() (*AnomalyDetection, bool) {
	if o == nil || o.AnomalyDetection == nil {
		return nil, false
	}
	return o.AnomalyDetection, true
}

// HasAnomalyDetection returns a boolean if a field has been set.
func (o *SyntheticMonitor) HasAnomalyDetection() bool {
	if o != nil && o.AnomalyDetection != nil {
		return true
	}

	return false
}

// SetAnomalyDetection gets a reference to the given AnomalyDetection and assigns it to the AnomalyDetection field.
func (o *SyntheticMonitor) SetAnomalyDetection(v AnomalyDetection) {
	o.AnomalyDetection = &v
}

// GetTags returns the Tags field value
func (o *SyntheticMonitor) GetTags() []TagWithSourceInfo {
	if o == nil {
		var ret []TagWithSourceInfo
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetTagsOk() (*[]TagWithSourceInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Tags, true
}

// SetTags sets field value
func (o *SyntheticMonitor) SetTags(v []TagWithSourceInfo) {
	o.Tags = v
}

// GetManagementZones returns the ManagementZones field value
func (o *SyntheticMonitor) GetManagementZones() []ManagementZoneDto {
	if o == nil {
		var ret []ManagementZoneDto
		return ret
	}

	return o.ManagementZones
}

// GetManagementZonesOk returns a tuple with the ManagementZones field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetManagementZonesOk() (*[]ManagementZoneDto, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ManagementZones, true
}

// SetManagementZones sets field value
func (o *SyntheticMonitor) SetManagementZones(v []ManagementZoneDto) {
	o.ManagementZones = v
}

// GetAutomaticallyAssignedApps returns the AutomaticallyAssignedApps field value
func (o *SyntheticMonitor) GetAutomaticallyAssignedApps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AutomaticallyAssignedApps
}

// GetAutomaticallyAssignedAppsOk returns a tuple with the AutomaticallyAssignedApps field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetAutomaticallyAssignedAppsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AutomaticallyAssignedApps, true
}

// SetAutomaticallyAssignedApps sets field value
func (o *SyntheticMonitor) SetAutomaticallyAssignedApps(v []string) {
	o.AutomaticallyAssignedApps = v
}

// GetManuallyAssignedApps returns the ManuallyAssignedApps field value
func (o *SyntheticMonitor) GetManuallyAssignedApps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ManuallyAssignedApps
}

// GetManuallyAssignedAppsOk returns a tuple with the ManuallyAssignedApps field value
// and a boolean to check if the value has been set.
func (o *SyntheticMonitor) GetManuallyAssignedAppsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ManuallyAssignedApps, true
}

// SetManuallyAssignedApps sets field value
func (o *SyntheticMonitor) SetManuallyAssignedApps(v []string) {
	o.ManuallyAssignedApps = v
}

func (o SyntheticMonitor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entityId"] = o.EntityId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["frequencyMin"] = o.FrequencyMin
	}
	if true {
		toSerialize["enabled"] = o.Enabled
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["createdFrom"] = o.CreatedFrom
	}
	if true {
		toSerialize["script"] = o.Script
	}
	if true {
		toSerialize["locations"] = o.Locations
	}
	if o.AnomalyDetection != nil {
		toSerialize["anomalyDetection"] = o.AnomalyDetection
	}
	if true {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["managementZones"] = o.ManagementZones
	}
	if true {
		toSerialize["automaticallyAssignedApps"] = o.AutomaticallyAssignedApps
	}
	if true {
		toSerialize["manuallyAssignedApps"] = o.ManuallyAssignedApps
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticMonitor struct {
	value *SyntheticMonitor
	isSet bool
}

func (v NullableSyntheticMonitor) Get() *SyntheticMonitor {
	return v.value
}

func (v *NullableSyntheticMonitor) Set(val *SyntheticMonitor) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticMonitor) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticMonitor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticMonitor(val *SyntheticMonitor) *NullableSyntheticMonitor {
	return &NullableSyntheticMonitor{value: val, isSet: true}
}

func (v NullableSyntheticMonitor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticMonitor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


