/*
 * Dynatrace Environment API
 *
 * Documentation of the Dynatrace Environment API v1. To read about use cases and examples, refer to the [help page](https://dt-url.net/xc03k3c).  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ModuleInstance An instance of the OneAgent code module.
type ModuleInstance struct {
	// The name of the instance.
	InstanceName *string `json:"instanceName,omitempty"`
	// The version of the code module.
	ModuleVersion *string `json:"moduleVersion,omitempty"`
	// The code module version is faulty (`true`) or not (`false`).
	FaultyVersion *bool `json:"faultyVersion,omitempty"`
	// The code module instance is active (`true`) or inactive (`false`).
	Active *bool `json:"active,omitempty"`
}

// NewModuleInstance instantiates a new ModuleInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModuleInstance() *ModuleInstance {
	this := ModuleInstance{}
	return &this
}

// NewModuleInstanceWithDefaults instantiates a new ModuleInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModuleInstanceWithDefaults() *ModuleInstance {
	this := ModuleInstance{}
	return &this
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise.
func (o *ModuleInstance) GetInstanceName() string {
	if o == nil || o.InstanceName == nil {
		var ret string
		return ret
	}
	return *o.InstanceName
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModuleInstance) GetInstanceNameOk() (*string, bool) {
	if o == nil || o.InstanceName == nil {
		return nil, false
	}
	return o.InstanceName, true
}

// HasInstanceName returns a boolean if a field has been set.
func (o *ModuleInstance) HasInstanceName() bool {
	if o != nil && o.InstanceName != nil {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given string and assigns it to the InstanceName field.
func (o *ModuleInstance) SetInstanceName(v string) {
	o.InstanceName = &v
}

// GetModuleVersion returns the ModuleVersion field value if set, zero value otherwise.
func (o *ModuleInstance) GetModuleVersion() string {
	if o == nil || o.ModuleVersion == nil {
		var ret string
		return ret
	}
	return *o.ModuleVersion
}

// GetModuleVersionOk returns a tuple with the ModuleVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModuleInstance) GetModuleVersionOk() (*string, bool) {
	if o == nil || o.ModuleVersion == nil {
		return nil, false
	}
	return o.ModuleVersion, true
}

// HasModuleVersion returns a boolean if a field has been set.
func (o *ModuleInstance) HasModuleVersion() bool {
	if o != nil && o.ModuleVersion != nil {
		return true
	}

	return false
}

// SetModuleVersion gets a reference to the given string and assigns it to the ModuleVersion field.
func (o *ModuleInstance) SetModuleVersion(v string) {
	o.ModuleVersion = &v
}

// GetFaultyVersion returns the FaultyVersion field value if set, zero value otherwise.
func (o *ModuleInstance) GetFaultyVersion() bool {
	if o == nil || o.FaultyVersion == nil {
		var ret bool
		return ret
	}
	return *o.FaultyVersion
}

// GetFaultyVersionOk returns a tuple with the FaultyVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModuleInstance) GetFaultyVersionOk() (*bool, bool) {
	if o == nil || o.FaultyVersion == nil {
		return nil, false
	}
	return o.FaultyVersion, true
}

// HasFaultyVersion returns a boolean if a field has been set.
func (o *ModuleInstance) HasFaultyVersion() bool {
	if o != nil && o.FaultyVersion != nil {
		return true
	}

	return false
}

// SetFaultyVersion gets a reference to the given bool and assigns it to the FaultyVersion field.
func (o *ModuleInstance) SetFaultyVersion(v bool) {
	o.FaultyVersion = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *ModuleInstance) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModuleInstance) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *ModuleInstance) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *ModuleInstance) SetActive(v bool) {
	o.Active = &v
}

func (o ModuleInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InstanceName != nil {
		toSerialize["instanceName"] = o.InstanceName
	}
	if o.ModuleVersion != nil {
		toSerialize["moduleVersion"] = o.ModuleVersion
	}
	if o.FaultyVersion != nil {
		toSerialize["faultyVersion"] = o.FaultyVersion
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	return json.Marshal(toSerialize)
}

type NullableModuleInstance struct {
	value *ModuleInstance
	isSet bool
}

func (v NullableModuleInstance) Get() *ModuleInstance {
	return v.value
}

func (v *NullableModuleInstance) Set(val *ModuleInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableModuleInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableModuleInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModuleInstance(val *ModuleInstance) *NullableModuleInstance {
	return &NullableModuleInstance{value: val, isSet: true}
}

func (v NullableModuleInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModuleInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


