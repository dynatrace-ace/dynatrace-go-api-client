/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Precondition A precondition for visibility of a property.
type Precondition struct {
	// A list of child preconditions to be evaluated.   Only applicable to properties of the `AND` and `OR` types.
	Preconditions *[]Precondition `json:"preconditions,omitempty"`
	// The expected value of the property.   Only applicable to properties of the `EQUALS` type.
	ExpectedValue *map[string]interface{} `json:"expectedValue,omitempty"`
	// A list of valid values of the property.   Only applicable to properties of the `IN` type.
	ExpectedValues *[]map[string]interface{} `json:"expectedValues,omitempty"`
	Precondition *Precondition `json:"precondition,omitempty"`
	// The property to be evaluated.
	Property *string `json:"property,omitempty"`
	// The type of the precondition.
	Type *string `json:"type,omitempty"`
}

// NewPrecondition instantiates a new Precondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrecondition() *Precondition {
	this := Precondition{}
	return &this
}

// NewPreconditionWithDefaults instantiates a new Precondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreconditionWithDefaults() *Precondition {
	this := Precondition{}
	return &this
}

// GetPreconditions returns the Preconditions field value if set, zero value otherwise.
func (o *Precondition) GetPreconditions() []Precondition {
	if o == nil || o.Preconditions == nil {
		var ret []Precondition
		return ret
	}
	return *o.Preconditions
}

// GetPreconditionsOk returns a tuple with the Preconditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Precondition) GetPreconditionsOk() (*[]Precondition, bool) {
	if o == nil || o.Preconditions == nil {
		return nil, false
	}
	return o.Preconditions, true
}

// HasPreconditions returns a boolean if a field has been set.
func (o *Precondition) HasPreconditions() bool {
	if o != nil && o.Preconditions != nil {
		return true
	}

	return false
}

// SetPreconditions gets a reference to the given []Precondition and assigns it to the Preconditions field.
func (o *Precondition) SetPreconditions(v []Precondition) {
	o.Preconditions = &v
}

// GetExpectedValue returns the ExpectedValue field value if set, zero value otherwise.
func (o *Precondition) GetExpectedValue() map[string]interface{} {
	if o == nil || o.ExpectedValue == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ExpectedValue
}

// GetExpectedValueOk returns a tuple with the ExpectedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Precondition) GetExpectedValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.ExpectedValue == nil {
		return nil, false
	}
	return o.ExpectedValue, true
}

// HasExpectedValue returns a boolean if a field has been set.
func (o *Precondition) HasExpectedValue() bool {
	if o != nil && o.ExpectedValue != nil {
		return true
	}

	return false
}

// SetExpectedValue gets a reference to the given map[string]interface{} and assigns it to the ExpectedValue field.
func (o *Precondition) SetExpectedValue(v map[string]interface{}) {
	o.ExpectedValue = &v
}

// GetExpectedValues returns the ExpectedValues field value if set, zero value otherwise.
func (o *Precondition) GetExpectedValues() []map[string]interface{} {
	if o == nil || o.ExpectedValues == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.ExpectedValues
}

// GetExpectedValuesOk returns a tuple with the ExpectedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Precondition) GetExpectedValuesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.ExpectedValues == nil {
		return nil, false
	}
	return o.ExpectedValues, true
}

// HasExpectedValues returns a boolean if a field has been set.
func (o *Precondition) HasExpectedValues() bool {
	if o != nil && o.ExpectedValues != nil {
		return true
	}

	return false
}

// SetExpectedValues gets a reference to the given []map[string]interface{} and assigns it to the ExpectedValues field.
func (o *Precondition) SetExpectedValues(v []map[string]interface{}) {
	o.ExpectedValues = &v
}

// GetPrecondition returns the Precondition field value if set, zero value otherwise.
func (o *Precondition) GetPrecondition() Precondition {
	if o == nil || o.Precondition == nil {
		var ret Precondition
		return ret
	}
	return *o.Precondition
}

// GetPreconditionOk returns a tuple with the Precondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Precondition) GetPreconditionOk() (*Precondition, bool) {
	if o == nil || o.Precondition == nil {
		return nil, false
	}
	return o.Precondition, true
}

// HasPrecondition returns a boolean if a field has been set.
func (o *Precondition) HasPrecondition() bool {
	if o != nil && o.Precondition != nil {
		return true
	}

	return false
}

// SetPrecondition gets a reference to the given Precondition and assigns it to the Precondition field.
func (o *Precondition) SetPrecondition(v Precondition) {
	o.Precondition = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *Precondition) GetProperty() string {
	if o == nil || o.Property == nil {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Precondition) GetPropertyOk() (*string, bool) {
	if o == nil || o.Property == nil {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *Precondition) HasProperty() bool {
	if o != nil && o.Property != nil {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *Precondition) SetProperty(v string) {
	o.Property = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Precondition) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Precondition) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Precondition) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Precondition) SetType(v string) {
	o.Type = &v
}

func (o Precondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Preconditions != nil {
		toSerialize["preconditions"] = o.Preconditions
	}
	if o.ExpectedValue != nil {
		toSerialize["expectedValue"] = o.ExpectedValue
	}
	if o.ExpectedValues != nil {
		toSerialize["expectedValues"] = o.ExpectedValues
	}
	if o.Precondition != nil {
		toSerialize["precondition"] = o.Precondition
	}
	if o.Property != nil {
		toSerialize["property"] = o.Property
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePrecondition struct {
	value *Precondition
	isSet bool
}

func (v NullablePrecondition) Get() *Precondition {
	return v.value
}

func (v *NullablePrecondition) Set(val *Precondition) {
	v.value = val
	v.isSet = true
}

func (v NullablePrecondition) IsSet() bool {
	return v.isSet
}

func (v *NullablePrecondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrecondition(val *Precondition) *NullablePrecondition {
	return &NullablePrecondition{value: val, isSet: true}
}

func (v NullablePrecondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrecondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


