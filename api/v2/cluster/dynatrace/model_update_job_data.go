/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UpdateJobData struct for UpdateJobData
type UpdateJobData struct {
	Environments *[]string `json:"environments,omitempty"`
	JobState *string `json:"jobState,omitempty"`
	UpdateMethod *string `json:"updateMethod,omitempty"`
	UpdateType *string `json:"updateType,omitempty"`
	AgType *string `json:"agType,omitempty"`
	StartVersion *string `json:"startVersion,omitempty"`
	Cancelable *bool `json:"cancelable,omitempty"`
	JobId *string `json:"jobId,omitempty"`
	Timestamp *int64 `json:"timestamp,omitempty"`
	Duration *int64 `json:"duration,omitempty"`
	TargetVersion *string `json:"targetVersion,omitempty"`
	Error *string `json:"error,omitempty"`
}

// NewUpdateJobData instantiates a new UpdateJobData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateJobData() *UpdateJobData {
	this := UpdateJobData{}
	return &this
}

// NewUpdateJobDataWithDefaults instantiates a new UpdateJobData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateJobDataWithDefaults() *UpdateJobData {
	this := UpdateJobData{}
	return &this
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *UpdateJobData) GetEnvironments() []string {
	if o == nil || o.Environments == nil {
		var ret []string
		return ret
	}
	return *o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobData) GetEnvironmentsOk() (*[]string, bool) {
	if o == nil || o.Environments == nil {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *UpdateJobData) HasEnvironments() bool {
	if o != nil && o.Environments != nil {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *UpdateJobData) SetEnvironments(v []string) {
	o.Environments = &v
}

// GetJobState returns the JobState field value if set, zero value otherwise.
func (o *UpdateJobData) GetJobState() string {
	if o == nil || o.JobState == nil {
		var ret string
		return ret
	}
	return *o.JobState
}

// GetJobStateOk returns a tuple with the JobState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobData) GetJobStateOk() (*string, bool) {
	if o == nil || o.JobState == nil {
		return nil, false
	}
	return o.JobState, true
}

// HasJobState returns a boolean if a field has been set.
func (o *UpdateJobData) HasJobState() bool {
	if o != nil && o.JobState != nil {
		return true
	}

	return false
}

// SetJobState gets a reference to the given string and assigns it to the JobState field.
func (o *UpdateJobData) SetJobState(v string) {
	o.JobState = &v
}

// GetUpdateMethod returns the UpdateMethod field value if set, zero value otherwise.
func (o *UpdateJobData) GetUpdateMethod() string {
	if o == nil || o.UpdateMethod == nil {
		var ret string
		return ret
	}
	return *o.UpdateMethod
}

// GetUpdateMethodOk returns a tuple with the UpdateMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobData) GetUpdateMethodOk() (*string, bool) {
	if o == nil || o.UpdateMethod == nil {
		return nil, false
	}
	return o.UpdateMethod, true
}

// HasUpdateMethod returns a boolean if a field has been set.
func (o *UpdateJobData) HasUpdateMethod() bool {
	if o != nil && o.UpdateMethod != nil {
		return true
	}

	return false
}

// SetUpdateMethod gets a reference to the given string and assigns it to the UpdateMethod field.
func (o *UpdateJobData) SetUpdateMethod(v string) {
	o.UpdateMethod = &v
}

// GetUpdateType returns the UpdateType field value if set, zero value otherwise.
func (o *UpdateJobData) GetUpdateType() string {
	if o == nil || o.UpdateType == nil {
		var ret string
		return ret
	}
	return *o.UpdateType
}

// GetUpdateTypeOk returns a tuple with the UpdateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobData) GetUpdateTypeOk() (*string, bool) {
	if o == nil || o.UpdateType == nil {
		return nil, false
	}
	return o.UpdateType, true
}

// HasUpdateType returns a boolean if a field has been set.
func (o *UpdateJobData) HasUpdateType() bool {
	if o != nil && o.UpdateType != nil {
		return true
	}

	return false
}

// SetUpdateType gets a reference to the given string and assigns it to the UpdateType field.
func (o *UpdateJobData) SetUpdateType(v string) {
	o.UpdateType = &v
}

// GetAgType returns the AgType field value if set, zero value otherwise.
func (o *UpdateJobData) GetAgType() string {
	if o == nil || o.AgType == nil {
		var ret string
		return ret
	}
	return *o.AgType
}

// GetAgTypeOk returns a tuple with the AgType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobData) GetAgTypeOk() (*string, bool) {
	if o == nil || o.AgType == nil {
		return nil, false
	}
	return o.AgType, true
}

// HasAgType returns a boolean if a field has been set.
func (o *UpdateJobData) HasAgType() bool {
	if o != nil && o.AgType != nil {
		return true
	}

	return false
}

// SetAgType gets a reference to the given string and assigns it to the AgType field.
func (o *UpdateJobData) SetAgType(v string) {
	o.AgType = &v
}

// GetStartVersion returns the StartVersion field value if set, zero value otherwise.
func (o *UpdateJobData) GetStartVersion() string {
	if o == nil || o.StartVersion == nil {
		var ret string
		return ret
	}
	return *o.StartVersion
}

// GetStartVersionOk returns a tuple with the StartVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobData) GetStartVersionOk() (*string, bool) {
	if o == nil || o.StartVersion == nil {
		return nil, false
	}
	return o.StartVersion, true
}

// HasStartVersion returns a boolean if a field has been set.
func (o *UpdateJobData) HasStartVersion() bool {
	if o != nil && o.StartVersion != nil {
		return true
	}

	return false
}

// SetStartVersion gets a reference to the given string and assigns it to the StartVersion field.
func (o *UpdateJobData) SetStartVersion(v string) {
	o.StartVersion = &v
}

// GetCancelable returns the Cancelable field value if set, zero value otherwise.
func (o *UpdateJobData) GetCancelable() bool {
	if o == nil || o.Cancelable == nil {
		var ret bool
		return ret
	}
	return *o.Cancelable
}

// GetCancelableOk returns a tuple with the Cancelable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobData) GetCancelableOk() (*bool, bool) {
	if o == nil || o.Cancelable == nil {
		return nil, false
	}
	return o.Cancelable, true
}

// HasCancelable returns a boolean if a field has been set.
func (o *UpdateJobData) HasCancelable() bool {
	if o != nil && o.Cancelable != nil {
		return true
	}

	return false
}

// SetCancelable gets a reference to the given bool and assigns it to the Cancelable field.
func (o *UpdateJobData) SetCancelable(v bool) {
	o.Cancelable = &v
}

// GetJobId returns the JobId field value if set, zero value otherwise.
func (o *UpdateJobData) GetJobId() string {
	if o == nil || o.JobId == nil {
		var ret string
		return ret
	}
	return *o.JobId
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobData) GetJobIdOk() (*string, bool) {
	if o == nil || o.JobId == nil {
		return nil, false
	}
	return o.JobId, true
}

// HasJobId returns a boolean if a field has been set.
func (o *UpdateJobData) HasJobId() bool {
	if o != nil && o.JobId != nil {
		return true
	}

	return false
}

// SetJobId gets a reference to the given string and assigns it to the JobId field.
func (o *UpdateJobData) SetJobId(v string) {
	o.JobId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *UpdateJobData) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobData) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UpdateJobData) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *UpdateJobData) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *UpdateJobData) GetDuration() int64 {
	if o == nil || o.Duration == nil {
		var ret int64
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobData) GetDurationOk() (*int64, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *UpdateJobData) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int64 and assigns it to the Duration field.
func (o *UpdateJobData) SetDuration(v int64) {
	o.Duration = &v
}

// GetTargetVersion returns the TargetVersion field value if set, zero value otherwise.
func (o *UpdateJobData) GetTargetVersion() string {
	if o == nil || o.TargetVersion == nil {
		var ret string
		return ret
	}
	return *o.TargetVersion
}

// GetTargetVersionOk returns a tuple with the TargetVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobData) GetTargetVersionOk() (*string, bool) {
	if o == nil || o.TargetVersion == nil {
		return nil, false
	}
	return o.TargetVersion, true
}

// HasTargetVersion returns a boolean if a field has been set.
func (o *UpdateJobData) HasTargetVersion() bool {
	if o != nil && o.TargetVersion != nil {
		return true
	}

	return false
}

// SetTargetVersion gets a reference to the given string and assigns it to the TargetVersion field.
func (o *UpdateJobData) SetTargetVersion(v string) {
	o.TargetVersion = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *UpdateJobData) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobData) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *UpdateJobData) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *UpdateJobData) SetError(v string) {
	o.Error = &v
}

func (o UpdateJobData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environments != nil {
		toSerialize["environments"] = o.Environments
	}
	if o.JobState != nil {
		toSerialize["jobState"] = o.JobState
	}
	if o.UpdateMethod != nil {
		toSerialize["updateMethod"] = o.UpdateMethod
	}
	if o.UpdateType != nil {
		toSerialize["updateType"] = o.UpdateType
	}
	if o.AgType != nil {
		toSerialize["agType"] = o.AgType
	}
	if o.StartVersion != nil {
		toSerialize["startVersion"] = o.StartVersion
	}
	if o.Cancelable != nil {
		toSerialize["cancelable"] = o.Cancelable
	}
	if o.JobId != nil {
		toSerialize["jobId"] = o.JobId
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	if o.TargetVersion != nil {
		toSerialize["targetVersion"] = o.TargetVersion
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateJobData struct {
	value *UpdateJobData
	isSet bool
}

func (v NullableUpdateJobData) Get() *UpdateJobData {
	return v.value
}

func (v *NullableUpdateJobData) Set(val *UpdateJobData) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateJobData) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateJobData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateJobData(val *UpdateJobData) *NullableUpdateJobData {
	return &NullableUpdateJobData{value: val, isSet: true}
}

func (v NullableUpdateJobData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateJobData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


