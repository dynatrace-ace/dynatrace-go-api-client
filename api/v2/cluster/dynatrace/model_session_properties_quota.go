/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SessionPropertiesQuota User session properties consumption information on environment level.
type SessionPropertiesQuota struct {
	// Monthly environment consumption. Resets each calendar month.
	ConsumedThisMonth *float64 `json:"consumedThisMonth,omitempty"`
	// Yearly environment consumption. Resets each year on license creation date anniversary.
	ConsumedThisYear *float64 `json:"consumedThisYear,omitempty"`
}

// NewSessionPropertiesQuota instantiates a new SessionPropertiesQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionPropertiesQuota() *SessionPropertiesQuota {
	this := SessionPropertiesQuota{}
	return &this
}

// NewSessionPropertiesQuotaWithDefaults instantiates a new SessionPropertiesQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionPropertiesQuotaWithDefaults() *SessionPropertiesQuota {
	this := SessionPropertiesQuota{}
	return &this
}

// GetConsumedThisMonth returns the ConsumedThisMonth field value if set, zero value otherwise.
func (o *SessionPropertiesQuota) GetConsumedThisMonth() float64 {
	if o == nil || o.ConsumedThisMonth == nil {
		var ret float64
		return ret
	}
	return *o.ConsumedThisMonth
}

// GetConsumedThisMonthOk returns a tuple with the ConsumedThisMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionPropertiesQuota) GetConsumedThisMonthOk() (*float64, bool) {
	if o == nil || o.ConsumedThisMonth == nil {
		return nil, false
	}
	return o.ConsumedThisMonth, true
}

// HasConsumedThisMonth returns a boolean if a field has been set.
func (o *SessionPropertiesQuota) HasConsumedThisMonth() bool {
	if o != nil && o.ConsumedThisMonth != nil {
		return true
	}

	return false
}

// SetConsumedThisMonth gets a reference to the given float64 and assigns it to the ConsumedThisMonth field.
func (o *SessionPropertiesQuota) SetConsumedThisMonth(v float64) {
	o.ConsumedThisMonth = &v
}

// GetConsumedThisYear returns the ConsumedThisYear field value if set, zero value otherwise.
func (o *SessionPropertiesQuota) GetConsumedThisYear() float64 {
	if o == nil || o.ConsumedThisYear == nil {
		var ret float64
		return ret
	}
	return *o.ConsumedThisYear
}

// GetConsumedThisYearOk returns a tuple with the ConsumedThisYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionPropertiesQuota) GetConsumedThisYearOk() (*float64, bool) {
	if o == nil || o.ConsumedThisYear == nil {
		return nil, false
	}
	return o.ConsumedThisYear, true
}

// HasConsumedThisYear returns a boolean if a field has been set.
func (o *SessionPropertiesQuota) HasConsumedThisYear() bool {
	if o != nil && o.ConsumedThisYear != nil {
		return true
	}

	return false
}

// SetConsumedThisYear gets a reference to the given float64 and assigns it to the ConsumedThisYear field.
func (o *SessionPropertiesQuota) SetConsumedThisYear(v float64) {
	o.ConsumedThisYear = &v
}

func (o SessionPropertiesQuota) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConsumedThisMonth != nil {
		toSerialize["consumedThisMonth"] = o.ConsumedThisMonth
	}
	if o.ConsumedThisYear != nil {
		toSerialize["consumedThisYear"] = o.ConsumedThisYear
	}
	return json.Marshal(toSerialize)
}

type NullableSessionPropertiesQuota struct {
	value *SessionPropertiesQuota
	isSet bool
}

func (v NullableSessionPropertiesQuota) Get() *SessionPropertiesQuota {
	return v.value
}

func (v *NullableSessionPropertiesQuota) Set(val *SessionPropertiesQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionPropertiesQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionPropertiesQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionPropertiesQuota(val *SessionPropertiesQuota) *NullableSessionPropertiesQuota {
	return &NullableSessionPropertiesQuota{value: val, isSet: true}
}

func (v NullableSessionPropertiesQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionPropertiesQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


