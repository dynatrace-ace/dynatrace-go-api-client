/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UserSession Managed user session instance
type UserSession struct {
	// User id
	UserId string `json:"userId"`
	// Node on which user session exists
	NodeId int32 `json:"nodeId"`
	// User session id
	SessionId string `json:"sessionId"`
	// User session creation timestamp
	CreationTime int64 `json:"creationTime"`
	// Timestamp when session was recently accessed
	LastAccessedTimestamp *int64 `json:"lastAccessedTimestamp,omitempty"`
	// UUID of tenant to which user has logged in (or cluster UUID if user has logged in to CMC)
	TenantUuid string `json:"tenantUuid"`
	// The way user has logged in
	LoginType string `json:"loginType"`
	// Device on which user has logged in
	Device *string `json:"device,omitempty"`
	// IP from which has logged in
	Ip *string `json:"ip,omitempty"`
}

// NewUserSession instantiates a new UserSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSession(userId string, nodeId int32, sessionId string, creationTime int64, tenantUuid string, loginType string) *UserSession {
	this := UserSession{}
	this.UserId = userId
	this.NodeId = nodeId
	this.SessionId = sessionId
	this.CreationTime = creationTime
	this.TenantUuid = tenantUuid
	this.LoginType = loginType
	return &this
}

// NewUserSessionWithDefaults instantiates a new UserSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSessionWithDefaults() *UserSession {
	this := UserSession{}
	return &this
}

// GetUserId returns the UserId field value
func (o *UserSession) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserSession) GetUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserSession) SetUserId(v string) {
	o.UserId = v
}

// GetNodeId returns the NodeId field value
func (o *UserSession) GetNodeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *UserSession) GetNodeIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *UserSession) SetNodeId(v int32) {
	o.NodeId = v
}

// GetSessionId returns the SessionId field value
func (o *UserSession) GetSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value
// and a boolean to check if the value has been set.
func (o *UserSession) GetSessionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SessionId, true
}

// SetSessionId sets field value
func (o *UserSession) SetSessionId(v string) {
	o.SessionId = v
}

// GetCreationTime returns the CreationTime field value
func (o *UserSession) GetCreationTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value
// and a boolean to check if the value has been set.
func (o *UserSession) GetCreationTimeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreationTime, true
}

// SetCreationTime sets field value
func (o *UserSession) SetCreationTime(v int64) {
	o.CreationTime = v
}

// GetLastAccessedTimestamp returns the LastAccessedTimestamp field value if set, zero value otherwise.
func (o *UserSession) GetLastAccessedTimestamp() int64 {
	if o == nil || o.LastAccessedTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastAccessedTimestamp
}

// GetLastAccessedTimestampOk returns a tuple with the LastAccessedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetLastAccessedTimestampOk() (*int64, bool) {
	if o == nil || o.LastAccessedTimestamp == nil {
		return nil, false
	}
	return o.LastAccessedTimestamp, true
}

// HasLastAccessedTimestamp returns a boolean if a field has been set.
func (o *UserSession) HasLastAccessedTimestamp() bool {
	if o != nil && o.LastAccessedTimestamp != nil {
		return true
	}

	return false
}

// SetLastAccessedTimestamp gets a reference to the given int64 and assigns it to the LastAccessedTimestamp field.
func (o *UserSession) SetLastAccessedTimestamp(v int64) {
	o.LastAccessedTimestamp = &v
}

// GetTenantUuid returns the TenantUuid field value
func (o *UserSession) GetTenantUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TenantUuid
}

// GetTenantUuidOk returns a tuple with the TenantUuid field value
// and a boolean to check if the value has been set.
func (o *UserSession) GetTenantUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TenantUuid, true
}

// SetTenantUuid sets field value
func (o *UserSession) SetTenantUuid(v string) {
	o.TenantUuid = v
}

// GetLoginType returns the LoginType field value
func (o *UserSession) GetLoginType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoginType
}

// GetLoginTypeOk returns a tuple with the LoginType field value
// and a boolean to check if the value has been set.
func (o *UserSession) GetLoginTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LoginType, true
}

// SetLoginType sets field value
func (o *UserSession) SetLoginType(v string) {
	o.LoginType = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *UserSession) GetDevice() string {
	if o == nil || o.Device == nil {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetDeviceOk() (*string, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *UserSession) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *UserSession) SetDevice(v string) {
	o.Device = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *UserSession) GetIp() string {
	if o == nil || o.Ip == nil {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetIpOk() (*string, bool) {
	if o == nil || o.Ip == nil {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *UserSession) HasIp() bool {
	if o != nil && o.Ip != nil {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *UserSession) SetIp(v string) {
	o.Ip = &v
}

func (o UserSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["userId"] = o.UserId
	}
	if true {
		toSerialize["nodeId"] = o.NodeId
	}
	if true {
		toSerialize["sessionId"] = o.SessionId
	}
	if true {
		toSerialize["creationTime"] = o.CreationTime
	}
	if o.LastAccessedTimestamp != nil {
		toSerialize["lastAccessedTimestamp"] = o.LastAccessedTimestamp
	}
	if true {
		toSerialize["tenantUuid"] = o.TenantUuid
	}
	if true {
		toSerialize["loginType"] = o.LoginType
	}
	if o.Device != nil {
		toSerialize["device"] = o.Device
	}
	if o.Ip != nil {
		toSerialize["ip"] = o.Ip
	}
	return json.Marshal(toSerialize)
}

type NullableUserSession struct {
	value *UserSession
	isSet bool
}

func (v NullableUserSession) Get() *UserSession {
	return v.value
}

func (v *NullableUserSession) Set(val *UserSession) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSession) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSession(val *UserSession) *NullableUserSession {
	return &NullableUserSession{value: val, isSet: true}
}

func (v NullableUserSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


