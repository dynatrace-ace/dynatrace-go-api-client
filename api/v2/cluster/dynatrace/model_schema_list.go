/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SchemaList The list of available settings schemas.
type SchemaList struct {
	// A list of settings schemas.
	Items *[]SchemaStub `json:"items,omitempty"`
	// The number of schemas in the list.
	TotalCount *int64 `json:"totalCount,omitempty"`
}

// NewSchemaList instantiates a new SchemaList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaList() *SchemaList {
	this := SchemaList{}
	return &this
}

// NewSchemaListWithDefaults instantiates a new SchemaList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaListWithDefaults() *SchemaList {
	this := SchemaList{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *SchemaList) GetItems() []SchemaStub {
	if o == nil || o.Items == nil {
		var ret []SchemaStub
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaList) GetItemsOk() (*[]SchemaStub, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *SchemaList) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []SchemaStub and assigns it to the Items field.
func (o *SchemaList) SetItems(v []SchemaStub) {
	o.Items = &v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *SchemaList) GetTotalCount() int64 {
	if o == nil || o.TotalCount == nil {
		var ret int64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaList) GetTotalCountOk() (*int64, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *SchemaList) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int64 and assigns it to the TotalCount field.
func (o *SchemaList) SetTotalCount(v int64) {
	o.TotalCount = &v
}

func (o SchemaList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.TotalCount != nil {
		toSerialize["totalCount"] = o.TotalCount
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaList struct {
	value *SchemaList
	isSet bool
}

func (v NullableSchemaList) Get() *SchemaList {
	return v.value
}

func (v *NullableSchemaList) Set(val *SchemaList) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaList) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaList(val *SchemaList) *NullableSchemaList {
	return &NullableSchemaList{value: val, isSet: true}
}

func (v NullableSchemaList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


