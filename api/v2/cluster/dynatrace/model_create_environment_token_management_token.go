/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CreateEnvironmentTokenManagementToken struct for CreateEnvironmentTokenManagementToken
type CreateEnvironmentTokenManagementToken struct {
	// The name of the token.
	Name string `json:"name"`
	ExpiresIn *Duration `json:"expiresIn,omitempty"`
}

// NewCreateEnvironmentTokenManagementToken instantiates a new CreateEnvironmentTokenManagementToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEnvironmentTokenManagementToken(name string) *CreateEnvironmentTokenManagementToken {
	this := CreateEnvironmentTokenManagementToken{}
	this.Name = name
	return &this
}

// NewCreateEnvironmentTokenManagementTokenWithDefaults instantiates a new CreateEnvironmentTokenManagementToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEnvironmentTokenManagementTokenWithDefaults() *CreateEnvironmentTokenManagementToken {
	this := CreateEnvironmentTokenManagementToken{}
	return &this
}

// GetName returns the Name field value
func (o *CreateEnvironmentTokenManagementToken) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentTokenManagementToken) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateEnvironmentTokenManagementToken) SetName(v string) {
	o.Name = v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *CreateEnvironmentTokenManagementToken) GetExpiresIn() Duration {
	if o == nil || o.ExpiresIn == nil {
		var ret Duration
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEnvironmentTokenManagementToken) GetExpiresInOk() (*Duration, bool) {
	if o == nil || o.ExpiresIn == nil {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *CreateEnvironmentTokenManagementToken) HasExpiresIn() bool {
	if o != nil && o.ExpiresIn != nil {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given Duration and assigns it to the ExpiresIn field.
func (o *CreateEnvironmentTokenManagementToken) SetExpiresIn(v Duration) {
	o.ExpiresIn = &v
}

func (o CreateEnvironmentTokenManagementToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ExpiresIn != nil {
		toSerialize["expiresIn"] = o.ExpiresIn
	}
	return json.Marshal(toSerialize)
}

type NullableCreateEnvironmentTokenManagementToken struct {
	value *CreateEnvironmentTokenManagementToken
	isSet bool
}

func (v NullableCreateEnvironmentTokenManagementToken) Get() *CreateEnvironmentTokenManagementToken {
	return v.value
}

func (v *NullableCreateEnvironmentTokenManagementToken) Set(val *CreateEnvironmentTokenManagementToken) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEnvironmentTokenManagementToken) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEnvironmentTokenManagementToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEnvironmentTokenManagementToken(val *CreateEnvironmentTokenManagementToken) *NullableCreateEnvironmentTokenManagementToken {
	return &NullableCreateEnvironmentTokenManagementToken{value: val, isSet: true}
}

func (v NullableCreateEnvironmentTokenManagementToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEnvironmentTokenManagementToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


