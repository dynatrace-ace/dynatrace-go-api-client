/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UpdateJobList A list of update jobs of the ActiveGate.
type UpdateJobList struct {
	// The ID of the ActiveGate.
	AgId *string `json:"agId,omitempty"`
	// A list of update jobs of the ActiveGate.
	UpdateJobs *[]UpdateJobData `json:"updateJobs,omitempty"`
}

// NewUpdateJobList instantiates a new UpdateJobList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateJobList() *UpdateJobList {
	this := UpdateJobList{}
	return &this
}

// NewUpdateJobListWithDefaults instantiates a new UpdateJobList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateJobListWithDefaults() *UpdateJobList {
	this := UpdateJobList{}
	return &this
}

// GetAgId returns the AgId field value if set, zero value otherwise.
func (o *UpdateJobList) GetAgId() string {
	if o == nil || o.AgId == nil {
		var ret string
		return ret
	}
	return *o.AgId
}

// GetAgIdOk returns a tuple with the AgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobList) GetAgIdOk() (*string, bool) {
	if o == nil || o.AgId == nil {
		return nil, false
	}
	return o.AgId, true
}

// HasAgId returns a boolean if a field has been set.
func (o *UpdateJobList) HasAgId() bool {
	if o != nil && o.AgId != nil {
		return true
	}

	return false
}

// SetAgId gets a reference to the given string and assigns it to the AgId field.
func (o *UpdateJobList) SetAgId(v string) {
	o.AgId = &v
}

// GetUpdateJobs returns the UpdateJobs field value if set, zero value otherwise.
func (o *UpdateJobList) GetUpdateJobs() []UpdateJobData {
	if o == nil || o.UpdateJobs == nil {
		var ret []UpdateJobData
		return ret
	}
	return *o.UpdateJobs
}

// GetUpdateJobsOk returns a tuple with the UpdateJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobList) GetUpdateJobsOk() (*[]UpdateJobData, bool) {
	if o == nil || o.UpdateJobs == nil {
		return nil, false
	}
	return o.UpdateJobs, true
}

// HasUpdateJobs returns a boolean if a field has been set.
func (o *UpdateJobList) HasUpdateJobs() bool {
	if o != nil && o.UpdateJobs != nil {
		return true
	}

	return false
}

// SetUpdateJobs gets a reference to the given []UpdateJobData and assigns it to the UpdateJobs field.
func (o *UpdateJobList) SetUpdateJobs(v []UpdateJobData) {
	o.UpdateJobs = &v
}

func (o UpdateJobList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AgId != nil {
		toSerialize["agId"] = o.AgId
	}
	if o.UpdateJobs != nil {
		toSerialize["updateJobs"] = o.UpdateJobs
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateJobList struct {
	value *UpdateJobList
	isSet bool
}

func (v NullableUpdateJobList) Get() *UpdateJobList {
	return v.value
}

func (v *NullableUpdateJobList) Set(val *UpdateJobList) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateJobList) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateJobList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateJobList(val *UpdateJobList) *NullableUpdateJobList {
	return &NullableUpdateJobList{value: val, isSet: true}
}

func (v NullableUpdateJobList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateJobList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


