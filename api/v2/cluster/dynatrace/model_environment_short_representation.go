/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EnvironmentShortRepresentation The short representation of an environment.
type EnvironmentShortRepresentation struct {
	// The ID of the Dynatrace entity.
	Id string `json:"id"`
	// The name of the Dynatrace entity.
	Name *string `json:"name,omitempty"`
	// A short description of the Dynatrace entity.
	Description *string `json:"description,omitempty"`
	// A token with the 'Token management' permission. Can be used to within the newly created environment to create other tokens for configuring this environment. This value is only set if an environment was created with the query parameter 'createToken=true'.
	TokenManagementToken *string `json:"tokenManagementToken,omitempty"`
}

// NewEnvironmentShortRepresentation instantiates a new EnvironmentShortRepresentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentShortRepresentation(id string) *EnvironmentShortRepresentation {
	this := EnvironmentShortRepresentation{}
	this.Id = id
	return &this
}

// NewEnvironmentShortRepresentationWithDefaults instantiates a new EnvironmentShortRepresentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentShortRepresentationWithDefaults() *EnvironmentShortRepresentation {
	this := EnvironmentShortRepresentation{}
	return &this
}

// GetId returns the Id field value
func (o *EnvironmentShortRepresentation) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EnvironmentShortRepresentation) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EnvironmentShortRepresentation) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvironmentShortRepresentation) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentShortRepresentation) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvironmentShortRepresentation) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvironmentShortRepresentation) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EnvironmentShortRepresentation) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentShortRepresentation) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EnvironmentShortRepresentation) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EnvironmentShortRepresentation) SetDescription(v string) {
	o.Description = &v
}

// GetTokenManagementToken returns the TokenManagementToken field value if set, zero value otherwise.
func (o *EnvironmentShortRepresentation) GetTokenManagementToken() string {
	if o == nil || o.TokenManagementToken == nil {
		var ret string
		return ret
	}
	return *o.TokenManagementToken
}

// GetTokenManagementTokenOk returns a tuple with the TokenManagementToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentShortRepresentation) GetTokenManagementTokenOk() (*string, bool) {
	if o == nil || o.TokenManagementToken == nil {
		return nil, false
	}
	return o.TokenManagementToken, true
}

// HasTokenManagementToken returns a boolean if a field has been set.
func (o *EnvironmentShortRepresentation) HasTokenManagementToken() bool {
	if o != nil && o.TokenManagementToken != nil {
		return true
	}

	return false
}

// SetTokenManagementToken gets a reference to the given string and assigns it to the TokenManagementToken field.
func (o *EnvironmentShortRepresentation) SetTokenManagementToken(v string) {
	o.TokenManagementToken = &v
}

func (o EnvironmentShortRepresentation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.TokenManagementToken != nil {
		toSerialize["tokenManagementToken"] = o.TokenManagementToken
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentShortRepresentation struct {
	value *EnvironmentShortRepresentation
	isSet bool
}

func (v NullableEnvironmentShortRepresentation) Get() *EnvironmentShortRepresentation {
	return v.value
}

func (v *NullableEnvironmentShortRepresentation) Set(val *EnvironmentShortRepresentation) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentShortRepresentation) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentShortRepresentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentShortRepresentation(val *EnvironmentShortRepresentation) *NullableEnvironmentShortRepresentation {
	return &NullableEnvironmentShortRepresentation{value: val, isSet: true}
}

func (v NullableEnvironmentShortRepresentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentShortRepresentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


