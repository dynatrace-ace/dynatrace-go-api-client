/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
	"time"
)

// DownloadsDto struct for DownloadsDto
type DownloadsDto struct {
	Type *string `json:"type,omitempty"`
	DownloadCount *int32 `json:"downloadCount,omitempty"`
	Version *string `json:"version,omitempty"`
	FirstDownloadTime *time.Time `json:"firstDownloadTime,omitempty"`
}

// NewDownloadsDto instantiates a new DownloadsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDownloadsDto() *DownloadsDto {
	this := DownloadsDto{}
	return &this
}

// NewDownloadsDtoWithDefaults instantiates a new DownloadsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDownloadsDtoWithDefaults() *DownloadsDto {
	this := DownloadsDto{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DownloadsDto) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadsDto) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DownloadsDto) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DownloadsDto) SetType(v string) {
	o.Type = &v
}

// GetDownloadCount returns the DownloadCount field value if set, zero value otherwise.
func (o *DownloadsDto) GetDownloadCount() int32 {
	if o == nil || o.DownloadCount == nil {
		var ret int32
		return ret
	}
	return *o.DownloadCount
}

// GetDownloadCountOk returns a tuple with the DownloadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadsDto) GetDownloadCountOk() (*int32, bool) {
	if o == nil || o.DownloadCount == nil {
		return nil, false
	}
	return o.DownloadCount, true
}

// HasDownloadCount returns a boolean if a field has been set.
func (o *DownloadsDto) HasDownloadCount() bool {
	if o != nil && o.DownloadCount != nil {
		return true
	}

	return false
}

// SetDownloadCount gets a reference to the given int32 and assigns it to the DownloadCount field.
func (o *DownloadsDto) SetDownloadCount(v int32) {
	o.DownloadCount = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DownloadsDto) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadsDto) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DownloadsDto) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DownloadsDto) SetVersion(v string) {
	o.Version = &v
}

// GetFirstDownloadTime returns the FirstDownloadTime field value if set, zero value otherwise.
func (o *DownloadsDto) GetFirstDownloadTime() time.Time {
	if o == nil || o.FirstDownloadTime == nil {
		var ret time.Time
		return ret
	}
	return *o.FirstDownloadTime
}

// GetFirstDownloadTimeOk returns a tuple with the FirstDownloadTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadsDto) GetFirstDownloadTimeOk() (*time.Time, bool) {
	if o == nil || o.FirstDownloadTime == nil {
		return nil, false
	}
	return o.FirstDownloadTime, true
}

// HasFirstDownloadTime returns a boolean if a field has been set.
func (o *DownloadsDto) HasFirstDownloadTime() bool {
	if o != nil && o.FirstDownloadTime != nil {
		return true
	}

	return false
}

// SetFirstDownloadTime gets a reference to the given time.Time and assigns it to the FirstDownloadTime field.
func (o *DownloadsDto) SetFirstDownloadTime(v time.Time) {
	o.FirstDownloadTime = &v
}

func (o DownloadsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.DownloadCount != nil {
		toSerialize["downloadCount"] = o.DownloadCount
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.FirstDownloadTime != nil {
		toSerialize["firstDownloadTime"] = o.FirstDownloadTime
	}
	return json.Marshal(toSerialize)
}

type NullableDownloadsDto struct {
	value *DownloadsDto
	isSet bool
}

func (v NullableDownloadsDto) Get() *DownloadsDto {
	return v.value
}

func (v *NullableDownloadsDto) Set(val *DownloadsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDownloadsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDownloadsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDownloadsDto(val *DownloadsDto) *NullableDownloadsDto {
	return &NullableDownloadsDto{value: val, isSet: true}
}

func (v NullableDownloadsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDownloadsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


