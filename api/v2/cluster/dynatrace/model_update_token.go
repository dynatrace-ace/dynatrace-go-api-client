/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UpdateToken struct for UpdateToken
type UpdateToken struct {
	// The token is revoked (`true`) or active (`false`).
	Revoked *bool `json:"revoked,omitempty"`
	// The name of the token.
	Name *string `json:"name,omitempty"`
	// The list of permissions assigned to the token.   Apart from the new permissions, you need to submit the existing permissions you want to keep, too. Any existing permission, missing in the payload, is revoked.  * `DiagnosticExport`: DiagnosticExport.  * `ControlManagement`: ControlManagement.  * `UnattendedInstall`: UnattendedInstall.  * `ServiceProviderAPI`: Service Provider API.  * `ExternalSyntheticIntegration`: Create and read synthetic monitors, locations, and nodes.  * `ClusterTokenManagement`: Cluster token management.  * `ReadSyntheticData`: Read synthetic monitors, locations, and nodes.  * `Nodekeeper`: Nodekeeper access for node management.  * `EnvironmentTokenManagement`: \"Token Management\" Token creation for existing environments.  * `settings.read`: Read settings.  * `settings.write`: Write settings.  * `apiTokens.read`: Read API tokens.  * `apiTokens.write`: Write API tokens.  
	Scopes *[]string `json:"scopes,omitempty"`
}

// NewUpdateToken instantiates a new UpdateToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateToken() *UpdateToken {
	this := UpdateToken{}
	return &this
}

// NewUpdateTokenWithDefaults instantiates a new UpdateToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateTokenWithDefaults() *UpdateToken {
	this := UpdateToken{}
	return &this
}

// GetRevoked returns the Revoked field value if set, zero value otherwise.
func (o *UpdateToken) GetRevoked() bool {
	if o == nil || o.Revoked == nil {
		var ret bool
		return ret
	}
	return *o.Revoked
}

// GetRevokedOk returns a tuple with the Revoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateToken) GetRevokedOk() (*bool, bool) {
	if o == nil || o.Revoked == nil {
		return nil, false
	}
	return o.Revoked, true
}

// HasRevoked returns a boolean if a field has been set.
func (o *UpdateToken) HasRevoked() bool {
	if o != nil && o.Revoked != nil {
		return true
	}

	return false
}

// SetRevoked gets a reference to the given bool and assigns it to the Revoked field.
func (o *UpdateToken) SetRevoked(v bool) {
	o.Revoked = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateToken) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateToken) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateToken) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateToken) SetName(v string) {
	o.Name = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *UpdateToken) GetScopes() []string {
	if o == nil || o.Scopes == nil {
		var ret []string
		return ret
	}
	return *o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateToken) GetScopesOk() (*[]string, bool) {
	if o == nil || o.Scopes == nil {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *UpdateToken) HasScopes() bool {
	if o != nil && o.Scopes != nil {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *UpdateToken) SetScopes(v []string) {
	o.Scopes = &v
}

func (o UpdateToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Revoked != nil {
		toSerialize["revoked"] = o.Revoked
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateToken struct {
	value *UpdateToken
	isSet bool
}

func (v NullableUpdateToken) Get() *UpdateToken {
	return v.value
}

func (v *NullableUpdateToken) Set(val *UpdateToken) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateToken) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateToken(val *UpdateToken) *NullableUpdateToken {
	return &NullableUpdateToken{value: val, isSet: true}
}

func (v NullableUpdateToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


