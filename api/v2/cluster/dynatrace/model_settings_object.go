/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SettingsObject A settings object.
type SettingsObject struct {
	// The update token of the object. You can use it to detect simultaneous modifications by different users.   It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn't any change between the retrieval and the update.   If omitted on update/deletion, the operation overrides the current value or deletes it without any checks.
	UpdateToken *string `json:"updateToken,omitempty"`
	// The version of the schema on which the object is based.
	SchemaVersion *string `json:"schemaVersion,omitempty"`
	// The user (identified by a user ID or a public token ID) who performed that most recent modification.
	Author *string `json:"author,omitempty"`
	// The timestamp of the last modification.
	Modified *int64 `json:"modified,omitempty"`
	// The scope that the object targets.
	Scope *string `json:"scope,omitempty"`
	// The schema on which the object is based.
	SchemaId *string `json:"schemaId,omitempty"`
	// A short summary of settings.
	Summary *string `json:"summary,omitempty"`
	// The ID of the settings object.
	ObjectId *string `json:"objectId,omitempty"`
	// The timestamp of the creation.
	Created *int64 `json:"created,omitempty"`
	// The value of the setting.    It defines the actual values of settings' parameters.   The actual content depends on the object's schema.
	Value *map[string]interface{} `json:"value,omitempty"`
}

// NewSettingsObject instantiates a new SettingsObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsObject() *SettingsObject {
	this := SettingsObject{}
	return &this
}

// NewSettingsObjectWithDefaults instantiates a new SettingsObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsObjectWithDefaults() *SettingsObject {
	this := SettingsObject{}
	return &this
}

// GetUpdateToken returns the UpdateToken field value if set, zero value otherwise.
func (o *SettingsObject) GetUpdateToken() string {
	if o == nil || o.UpdateToken == nil {
		var ret string
		return ret
	}
	return *o.UpdateToken
}

// GetUpdateTokenOk returns a tuple with the UpdateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObject) GetUpdateTokenOk() (*string, bool) {
	if o == nil || o.UpdateToken == nil {
		return nil, false
	}
	return o.UpdateToken, true
}

// HasUpdateToken returns a boolean if a field has been set.
func (o *SettingsObject) HasUpdateToken() bool {
	if o != nil && o.UpdateToken != nil {
		return true
	}

	return false
}

// SetUpdateToken gets a reference to the given string and assigns it to the UpdateToken field.
func (o *SettingsObject) SetUpdateToken(v string) {
	o.UpdateToken = &v
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *SettingsObject) GetSchemaVersion() string {
	if o == nil || o.SchemaVersion == nil {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObject) GetSchemaVersionOk() (*string, bool) {
	if o == nil || o.SchemaVersion == nil {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *SettingsObject) HasSchemaVersion() bool {
	if o != nil && o.SchemaVersion != nil {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *SettingsObject) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *SettingsObject) GetAuthor() string {
	if o == nil || o.Author == nil {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObject) GetAuthorOk() (*string, bool) {
	if o == nil || o.Author == nil {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *SettingsObject) HasAuthor() bool {
	if o != nil && o.Author != nil {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *SettingsObject) SetAuthor(v string) {
	o.Author = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *SettingsObject) GetModified() int64 {
	if o == nil || o.Modified == nil {
		var ret int64
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObject) GetModifiedOk() (*int64, bool) {
	if o == nil || o.Modified == nil {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *SettingsObject) HasModified() bool {
	if o != nil && o.Modified != nil {
		return true
	}

	return false
}

// SetModified gets a reference to the given int64 and assigns it to the Modified field.
func (o *SettingsObject) SetModified(v int64) {
	o.Modified = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *SettingsObject) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObject) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *SettingsObject) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *SettingsObject) SetScope(v string) {
	o.Scope = &v
}

// GetSchemaId returns the SchemaId field value if set, zero value otherwise.
func (o *SettingsObject) GetSchemaId() string {
	if o == nil || o.SchemaId == nil {
		var ret string
		return ret
	}
	return *o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObject) GetSchemaIdOk() (*string, bool) {
	if o == nil || o.SchemaId == nil {
		return nil, false
	}
	return o.SchemaId, true
}

// HasSchemaId returns a boolean if a field has been set.
func (o *SettingsObject) HasSchemaId() bool {
	if o != nil && o.SchemaId != nil {
		return true
	}

	return false
}

// SetSchemaId gets a reference to the given string and assigns it to the SchemaId field.
func (o *SettingsObject) SetSchemaId(v string) {
	o.SchemaId = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *SettingsObject) GetSummary() string {
	if o == nil || o.Summary == nil {
		var ret string
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObject) GetSummaryOk() (*string, bool) {
	if o == nil || o.Summary == nil {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *SettingsObject) HasSummary() bool {
	if o != nil && o.Summary != nil {
		return true
	}

	return false
}

// SetSummary gets a reference to the given string and assigns it to the Summary field.
func (o *SettingsObject) SetSummary(v string) {
	o.Summary = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *SettingsObject) GetObjectId() string {
	if o == nil || o.ObjectId == nil {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObject) GetObjectIdOk() (*string, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *SettingsObject) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *SettingsObject) SetObjectId(v string) {
	o.ObjectId = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *SettingsObject) GetCreated() int64 {
	if o == nil || o.Created == nil {
		var ret int64
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObject) GetCreatedOk() (*int64, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *SettingsObject) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int64 and assigns it to the Created field.
func (o *SettingsObject) SetCreated(v int64) {
	o.Created = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *SettingsObject) GetValue() map[string]interface{} {
	if o == nil || o.Value == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObject) GetValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *SettingsObject) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *SettingsObject) SetValue(v map[string]interface{}) {
	o.Value = &v
}

func (o SettingsObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UpdateToken != nil {
		toSerialize["updateToken"] = o.UpdateToken
	}
	if o.SchemaVersion != nil {
		toSerialize["schemaVersion"] = o.SchemaVersion
	}
	if o.Author != nil {
		toSerialize["author"] = o.Author
	}
	if o.Modified != nil {
		toSerialize["modified"] = o.Modified
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.SchemaId != nil {
		toSerialize["schemaId"] = o.SchemaId
	}
	if o.Summary != nil {
		toSerialize["summary"] = o.Summary
	}
	if o.ObjectId != nil {
		toSerialize["objectId"] = o.ObjectId
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableSettingsObject struct {
	value *SettingsObject
	isSet bool
}

func (v NullableSettingsObject) Get() *SettingsObject {
	return v.value
}

func (v *NullableSettingsObject) Set(val *SettingsObject) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsObject) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsObject(val *SettingsObject) *NullableSettingsObject {
	return &NullableSettingsObject{value: val, isSet: true}
}

func (v NullableSettingsObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


