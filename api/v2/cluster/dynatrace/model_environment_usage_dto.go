/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EnvironmentUsageDto struct for EnvironmentUsageDto
type EnvironmentUsageDto struct {
	EnvironmentUuid *string `json:"environmentUuid,omitempty"`
	Visits *int64 `json:"visits,omitempty"`
	MobileSessions *int64 `json:"mobileSessions,omitempty"`
	TotalRUMUserPropertiesUsed *int64 `json:"totalRUMUserPropertiesUsed,omitempty"`
	NewProblems *int64 `json:"newProblems,omitempty"`
	HostUsages *[]HostUsageDto `json:"hostUsages,omitempty"`
	Downloads *[]DownloadsDto `json:"downloads,omitempty"`
	SyntheticUsages *[]SyntheticUsageDto `json:"syntheticUsages,omitempty"`
	SyntheticBillingUsage *[]SyntheticBillingUsageDto `json:"syntheticBillingUsage,omitempty"`
	CustomMetrics *[]CustomMetricDto `json:"customMetrics,omitempty"`
	DavisDataUnits *[]DavisDataUnitsUsageDto `json:"davisDataUnits,omitempty"`
	Trial *bool `json:"trial,omitempty"`
	InternalUse *bool `json:"internalUse,omitempty"`
	HighAvailabilityCluster *bool `json:"highAvailabilityCluster,omitempty"`
	LogStorageUsageBytes *int64 `json:"logStorageUsageBytes,omitempty"`
	LogUploadVolumeBytes *int64 `json:"logUploadVolumeBytes,omitempty"`
	SessionReplays *int64 `json:"sessionReplays,omitempty"`
	MobileSessionReplays *int64 `json:"mobileSessionReplays,omitempty"`
}

// NewEnvironmentUsageDto instantiates a new EnvironmentUsageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentUsageDto() *EnvironmentUsageDto {
	this := EnvironmentUsageDto{}
	return &this
}

// NewEnvironmentUsageDtoWithDefaults instantiates a new EnvironmentUsageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentUsageDtoWithDefaults() *EnvironmentUsageDto {
	this := EnvironmentUsageDto{}
	return &this
}

// GetEnvironmentUuid returns the EnvironmentUuid field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetEnvironmentUuid() string {
	if o == nil || o.EnvironmentUuid == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentUuid
}

// GetEnvironmentUuidOk returns a tuple with the EnvironmentUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetEnvironmentUuidOk() (*string, bool) {
	if o == nil || o.EnvironmentUuid == nil {
		return nil, false
	}
	return o.EnvironmentUuid, true
}

// HasEnvironmentUuid returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasEnvironmentUuid() bool {
	if o != nil && o.EnvironmentUuid != nil {
		return true
	}

	return false
}

// SetEnvironmentUuid gets a reference to the given string and assigns it to the EnvironmentUuid field.
func (o *EnvironmentUsageDto) SetEnvironmentUuid(v string) {
	o.EnvironmentUuid = &v
}

// GetVisits returns the Visits field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetVisits() int64 {
	if o == nil || o.Visits == nil {
		var ret int64
		return ret
	}
	return *o.Visits
}

// GetVisitsOk returns a tuple with the Visits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetVisitsOk() (*int64, bool) {
	if o == nil || o.Visits == nil {
		return nil, false
	}
	return o.Visits, true
}

// HasVisits returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasVisits() bool {
	if o != nil && o.Visits != nil {
		return true
	}

	return false
}

// SetVisits gets a reference to the given int64 and assigns it to the Visits field.
func (o *EnvironmentUsageDto) SetVisits(v int64) {
	o.Visits = &v
}

// GetMobileSessions returns the MobileSessions field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetMobileSessions() int64 {
	if o == nil || o.MobileSessions == nil {
		var ret int64
		return ret
	}
	return *o.MobileSessions
}

// GetMobileSessionsOk returns a tuple with the MobileSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetMobileSessionsOk() (*int64, bool) {
	if o == nil || o.MobileSessions == nil {
		return nil, false
	}
	return o.MobileSessions, true
}

// HasMobileSessions returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasMobileSessions() bool {
	if o != nil && o.MobileSessions != nil {
		return true
	}

	return false
}

// SetMobileSessions gets a reference to the given int64 and assigns it to the MobileSessions field.
func (o *EnvironmentUsageDto) SetMobileSessions(v int64) {
	o.MobileSessions = &v
}

// GetTotalRUMUserPropertiesUsed returns the TotalRUMUserPropertiesUsed field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetTotalRUMUserPropertiesUsed() int64 {
	if o == nil || o.TotalRUMUserPropertiesUsed == nil {
		var ret int64
		return ret
	}
	return *o.TotalRUMUserPropertiesUsed
}

// GetTotalRUMUserPropertiesUsedOk returns a tuple with the TotalRUMUserPropertiesUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetTotalRUMUserPropertiesUsedOk() (*int64, bool) {
	if o == nil || o.TotalRUMUserPropertiesUsed == nil {
		return nil, false
	}
	return o.TotalRUMUserPropertiesUsed, true
}

// HasTotalRUMUserPropertiesUsed returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasTotalRUMUserPropertiesUsed() bool {
	if o != nil && o.TotalRUMUserPropertiesUsed != nil {
		return true
	}

	return false
}

// SetTotalRUMUserPropertiesUsed gets a reference to the given int64 and assigns it to the TotalRUMUserPropertiesUsed field.
func (o *EnvironmentUsageDto) SetTotalRUMUserPropertiesUsed(v int64) {
	o.TotalRUMUserPropertiesUsed = &v
}

// GetNewProblems returns the NewProblems field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetNewProblems() int64 {
	if o == nil || o.NewProblems == nil {
		var ret int64
		return ret
	}
	return *o.NewProblems
}

// GetNewProblemsOk returns a tuple with the NewProblems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetNewProblemsOk() (*int64, bool) {
	if o == nil || o.NewProblems == nil {
		return nil, false
	}
	return o.NewProblems, true
}

// HasNewProblems returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasNewProblems() bool {
	if o != nil && o.NewProblems != nil {
		return true
	}

	return false
}

// SetNewProblems gets a reference to the given int64 and assigns it to the NewProblems field.
func (o *EnvironmentUsageDto) SetNewProblems(v int64) {
	o.NewProblems = &v
}

// GetHostUsages returns the HostUsages field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetHostUsages() []HostUsageDto {
	if o == nil || o.HostUsages == nil {
		var ret []HostUsageDto
		return ret
	}
	return *o.HostUsages
}

// GetHostUsagesOk returns a tuple with the HostUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetHostUsagesOk() (*[]HostUsageDto, bool) {
	if o == nil || o.HostUsages == nil {
		return nil, false
	}
	return o.HostUsages, true
}

// HasHostUsages returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasHostUsages() bool {
	if o != nil && o.HostUsages != nil {
		return true
	}

	return false
}

// SetHostUsages gets a reference to the given []HostUsageDto and assigns it to the HostUsages field.
func (o *EnvironmentUsageDto) SetHostUsages(v []HostUsageDto) {
	o.HostUsages = &v
}

// GetDownloads returns the Downloads field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetDownloads() []DownloadsDto {
	if o == nil || o.Downloads == nil {
		var ret []DownloadsDto
		return ret
	}
	return *o.Downloads
}

// GetDownloadsOk returns a tuple with the Downloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetDownloadsOk() (*[]DownloadsDto, bool) {
	if o == nil || o.Downloads == nil {
		return nil, false
	}
	return o.Downloads, true
}

// HasDownloads returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasDownloads() bool {
	if o != nil && o.Downloads != nil {
		return true
	}

	return false
}

// SetDownloads gets a reference to the given []DownloadsDto and assigns it to the Downloads field.
func (o *EnvironmentUsageDto) SetDownloads(v []DownloadsDto) {
	o.Downloads = &v
}

// GetSyntheticUsages returns the SyntheticUsages field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetSyntheticUsages() []SyntheticUsageDto {
	if o == nil || o.SyntheticUsages == nil {
		var ret []SyntheticUsageDto
		return ret
	}
	return *o.SyntheticUsages
}

// GetSyntheticUsagesOk returns a tuple with the SyntheticUsages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetSyntheticUsagesOk() (*[]SyntheticUsageDto, bool) {
	if o == nil || o.SyntheticUsages == nil {
		return nil, false
	}
	return o.SyntheticUsages, true
}

// HasSyntheticUsages returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasSyntheticUsages() bool {
	if o != nil && o.SyntheticUsages != nil {
		return true
	}

	return false
}

// SetSyntheticUsages gets a reference to the given []SyntheticUsageDto and assigns it to the SyntheticUsages field.
func (o *EnvironmentUsageDto) SetSyntheticUsages(v []SyntheticUsageDto) {
	o.SyntheticUsages = &v
}

// GetSyntheticBillingUsage returns the SyntheticBillingUsage field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetSyntheticBillingUsage() []SyntheticBillingUsageDto {
	if o == nil || o.SyntheticBillingUsage == nil {
		var ret []SyntheticBillingUsageDto
		return ret
	}
	return *o.SyntheticBillingUsage
}

// GetSyntheticBillingUsageOk returns a tuple with the SyntheticBillingUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetSyntheticBillingUsageOk() (*[]SyntheticBillingUsageDto, bool) {
	if o == nil || o.SyntheticBillingUsage == nil {
		return nil, false
	}
	return o.SyntheticBillingUsage, true
}

// HasSyntheticBillingUsage returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasSyntheticBillingUsage() bool {
	if o != nil && o.SyntheticBillingUsage != nil {
		return true
	}

	return false
}

// SetSyntheticBillingUsage gets a reference to the given []SyntheticBillingUsageDto and assigns it to the SyntheticBillingUsage field.
func (o *EnvironmentUsageDto) SetSyntheticBillingUsage(v []SyntheticBillingUsageDto) {
	o.SyntheticBillingUsage = &v
}

// GetCustomMetrics returns the CustomMetrics field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetCustomMetrics() []CustomMetricDto {
	if o == nil || o.CustomMetrics == nil {
		var ret []CustomMetricDto
		return ret
	}
	return *o.CustomMetrics
}

// GetCustomMetricsOk returns a tuple with the CustomMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetCustomMetricsOk() (*[]CustomMetricDto, bool) {
	if o == nil || o.CustomMetrics == nil {
		return nil, false
	}
	return o.CustomMetrics, true
}

// HasCustomMetrics returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasCustomMetrics() bool {
	if o != nil && o.CustomMetrics != nil {
		return true
	}

	return false
}

// SetCustomMetrics gets a reference to the given []CustomMetricDto and assigns it to the CustomMetrics field.
func (o *EnvironmentUsageDto) SetCustomMetrics(v []CustomMetricDto) {
	o.CustomMetrics = &v
}

// GetDavisDataUnits returns the DavisDataUnits field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetDavisDataUnits() []DavisDataUnitsUsageDto {
	if o == nil || o.DavisDataUnits == nil {
		var ret []DavisDataUnitsUsageDto
		return ret
	}
	return *o.DavisDataUnits
}

// GetDavisDataUnitsOk returns a tuple with the DavisDataUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetDavisDataUnitsOk() (*[]DavisDataUnitsUsageDto, bool) {
	if o == nil || o.DavisDataUnits == nil {
		return nil, false
	}
	return o.DavisDataUnits, true
}

// HasDavisDataUnits returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasDavisDataUnits() bool {
	if o != nil && o.DavisDataUnits != nil {
		return true
	}

	return false
}

// SetDavisDataUnits gets a reference to the given []DavisDataUnitsUsageDto and assigns it to the DavisDataUnits field.
func (o *EnvironmentUsageDto) SetDavisDataUnits(v []DavisDataUnitsUsageDto) {
	o.DavisDataUnits = &v
}

// GetTrial returns the Trial field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetTrial() bool {
	if o == nil || o.Trial == nil {
		var ret bool
		return ret
	}
	return *o.Trial
}

// GetTrialOk returns a tuple with the Trial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetTrialOk() (*bool, bool) {
	if o == nil || o.Trial == nil {
		return nil, false
	}
	return o.Trial, true
}

// HasTrial returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasTrial() bool {
	if o != nil && o.Trial != nil {
		return true
	}

	return false
}

// SetTrial gets a reference to the given bool and assigns it to the Trial field.
func (o *EnvironmentUsageDto) SetTrial(v bool) {
	o.Trial = &v
}

// GetInternalUse returns the InternalUse field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetInternalUse() bool {
	if o == nil || o.InternalUse == nil {
		var ret bool
		return ret
	}
	return *o.InternalUse
}

// GetInternalUseOk returns a tuple with the InternalUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetInternalUseOk() (*bool, bool) {
	if o == nil || o.InternalUse == nil {
		return nil, false
	}
	return o.InternalUse, true
}

// HasInternalUse returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasInternalUse() bool {
	if o != nil && o.InternalUse != nil {
		return true
	}

	return false
}

// SetInternalUse gets a reference to the given bool and assigns it to the InternalUse field.
func (o *EnvironmentUsageDto) SetInternalUse(v bool) {
	o.InternalUse = &v
}

// GetHighAvailabilityCluster returns the HighAvailabilityCluster field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetHighAvailabilityCluster() bool {
	if o == nil || o.HighAvailabilityCluster == nil {
		var ret bool
		return ret
	}
	return *o.HighAvailabilityCluster
}

// GetHighAvailabilityClusterOk returns a tuple with the HighAvailabilityCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetHighAvailabilityClusterOk() (*bool, bool) {
	if o == nil || o.HighAvailabilityCluster == nil {
		return nil, false
	}
	return o.HighAvailabilityCluster, true
}

// HasHighAvailabilityCluster returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasHighAvailabilityCluster() bool {
	if o != nil && o.HighAvailabilityCluster != nil {
		return true
	}

	return false
}

// SetHighAvailabilityCluster gets a reference to the given bool and assigns it to the HighAvailabilityCluster field.
func (o *EnvironmentUsageDto) SetHighAvailabilityCluster(v bool) {
	o.HighAvailabilityCluster = &v
}

// GetLogStorageUsageBytes returns the LogStorageUsageBytes field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetLogStorageUsageBytes() int64 {
	if o == nil || o.LogStorageUsageBytes == nil {
		var ret int64
		return ret
	}
	return *o.LogStorageUsageBytes
}

// GetLogStorageUsageBytesOk returns a tuple with the LogStorageUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetLogStorageUsageBytesOk() (*int64, bool) {
	if o == nil || o.LogStorageUsageBytes == nil {
		return nil, false
	}
	return o.LogStorageUsageBytes, true
}

// HasLogStorageUsageBytes returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasLogStorageUsageBytes() bool {
	if o != nil && o.LogStorageUsageBytes != nil {
		return true
	}

	return false
}

// SetLogStorageUsageBytes gets a reference to the given int64 and assigns it to the LogStorageUsageBytes field.
func (o *EnvironmentUsageDto) SetLogStorageUsageBytes(v int64) {
	o.LogStorageUsageBytes = &v
}

// GetLogUploadVolumeBytes returns the LogUploadVolumeBytes field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetLogUploadVolumeBytes() int64 {
	if o == nil || o.LogUploadVolumeBytes == nil {
		var ret int64
		return ret
	}
	return *o.LogUploadVolumeBytes
}

// GetLogUploadVolumeBytesOk returns a tuple with the LogUploadVolumeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetLogUploadVolumeBytesOk() (*int64, bool) {
	if o == nil || o.LogUploadVolumeBytes == nil {
		return nil, false
	}
	return o.LogUploadVolumeBytes, true
}

// HasLogUploadVolumeBytes returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasLogUploadVolumeBytes() bool {
	if o != nil && o.LogUploadVolumeBytes != nil {
		return true
	}

	return false
}

// SetLogUploadVolumeBytes gets a reference to the given int64 and assigns it to the LogUploadVolumeBytes field.
func (o *EnvironmentUsageDto) SetLogUploadVolumeBytes(v int64) {
	o.LogUploadVolumeBytes = &v
}

// GetSessionReplays returns the SessionReplays field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetSessionReplays() int64 {
	if o == nil || o.SessionReplays == nil {
		var ret int64
		return ret
	}
	return *o.SessionReplays
}

// GetSessionReplaysOk returns a tuple with the SessionReplays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetSessionReplaysOk() (*int64, bool) {
	if o == nil || o.SessionReplays == nil {
		return nil, false
	}
	return o.SessionReplays, true
}

// HasSessionReplays returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasSessionReplays() bool {
	if o != nil && o.SessionReplays != nil {
		return true
	}

	return false
}

// SetSessionReplays gets a reference to the given int64 and assigns it to the SessionReplays field.
func (o *EnvironmentUsageDto) SetSessionReplays(v int64) {
	o.SessionReplays = &v
}

// GetMobileSessionReplays returns the MobileSessionReplays field value if set, zero value otherwise.
func (o *EnvironmentUsageDto) GetMobileSessionReplays() int64 {
	if o == nil || o.MobileSessionReplays == nil {
		var ret int64
		return ret
	}
	return *o.MobileSessionReplays
}

// GetMobileSessionReplaysOk returns a tuple with the MobileSessionReplays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentUsageDto) GetMobileSessionReplaysOk() (*int64, bool) {
	if o == nil || o.MobileSessionReplays == nil {
		return nil, false
	}
	return o.MobileSessionReplays, true
}

// HasMobileSessionReplays returns a boolean if a field has been set.
func (o *EnvironmentUsageDto) HasMobileSessionReplays() bool {
	if o != nil && o.MobileSessionReplays != nil {
		return true
	}

	return false
}

// SetMobileSessionReplays gets a reference to the given int64 and assigns it to the MobileSessionReplays field.
func (o *EnvironmentUsageDto) SetMobileSessionReplays(v int64) {
	o.MobileSessionReplays = &v
}

func (o EnvironmentUsageDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnvironmentUuid != nil {
		toSerialize["environmentUuid"] = o.EnvironmentUuid
	}
	if o.Visits != nil {
		toSerialize["visits"] = o.Visits
	}
	if o.MobileSessions != nil {
		toSerialize["mobileSessions"] = o.MobileSessions
	}
	if o.TotalRUMUserPropertiesUsed != nil {
		toSerialize["totalRUMUserPropertiesUsed"] = o.TotalRUMUserPropertiesUsed
	}
	if o.NewProblems != nil {
		toSerialize["newProblems"] = o.NewProblems
	}
	if o.HostUsages != nil {
		toSerialize["hostUsages"] = o.HostUsages
	}
	if o.Downloads != nil {
		toSerialize["downloads"] = o.Downloads
	}
	if o.SyntheticUsages != nil {
		toSerialize["syntheticUsages"] = o.SyntheticUsages
	}
	if o.SyntheticBillingUsage != nil {
		toSerialize["syntheticBillingUsage"] = o.SyntheticBillingUsage
	}
	if o.CustomMetrics != nil {
		toSerialize["customMetrics"] = o.CustomMetrics
	}
	if o.DavisDataUnits != nil {
		toSerialize["davisDataUnits"] = o.DavisDataUnits
	}
	if o.Trial != nil {
		toSerialize["trial"] = o.Trial
	}
	if o.InternalUse != nil {
		toSerialize["internalUse"] = o.InternalUse
	}
	if o.HighAvailabilityCluster != nil {
		toSerialize["highAvailabilityCluster"] = o.HighAvailabilityCluster
	}
	if o.LogStorageUsageBytes != nil {
		toSerialize["logStorageUsageBytes"] = o.LogStorageUsageBytes
	}
	if o.LogUploadVolumeBytes != nil {
		toSerialize["logUploadVolumeBytes"] = o.LogUploadVolumeBytes
	}
	if o.SessionReplays != nil {
		toSerialize["sessionReplays"] = o.SessionReplays
	}
	if o.MobileSessionReplays != nil {
		toSerialize["mobileSessionReplays"] = o.MobileSessionReplays
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentUsageDto struct {
	value *EnvironmentUsageDto
	isSet bool
}

func (v NullableEnvironmentUsageDto) Get() *EnvironmentUsageDto {
	return v.value
}

func (v *NullableEnvironmentUsageDto) Set(val *EnvironmentUsageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentUsageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentUsageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentUsageDto(val *EnvironmentUsageDto) *NullableEnvironmentUsageDto {
	return &NullableEnvironmentUsageDto{value: val, isSet: true}
}

func (v NullableEnvironmentUsageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentUsageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


