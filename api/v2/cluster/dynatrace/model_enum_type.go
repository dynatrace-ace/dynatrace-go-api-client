/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EnumType Definition of an enum property.
type EnumType struct {
	// A list of allowed values of the enum.
	Items *[]EnumValue `json:"items,omitempty"`
	// An existing Java enum class that holds the allowed values of the enum.
	EnumClass *string `json:"enumClass,omitempty"`
	// An extended description and/or links to documentation.
	Documentation *string `json:"documentation,omitempty"`
	// A short description of the property.
	Description *string `json:"description,omitempty"`
	// The display name of the property.
	DisplayName *string `json:"displayName,omitempty"`
}

// NewEnumType instantiates a new EnumType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnumType() *EnumType {
	this := EnumType{}
	return &this
}

// NewEnumTypeWithDefaults instantiates a new EnumType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnumTypeWithDefaults() *EnumType {
	this := EnumType{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *EnumType) GetItems() []EnumValue {
	if o == nil || o.Items == nil {
		var ret []EnumValue
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumType) GetItemsOk() (*[]EnumValue, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *EnumType) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []EnumValue and assigns it to the Items field.
func (o *EnumType) SetItems(v []EnumValue) {
	o.Items = &v
}

// GetEnumClass returns the EnumClass field value if set, zero value otherwise.
func (o *EnumType) GetEnumClass() string {
	if o == nil || o.EnumClass == nil {
		var ret string
		return ret
	}
	return *o.EnumClass
}

// GetEnumClassOk returns a tuple with the EnumClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumType) GetEnumClassOk() (*string, bool) {
	if o == nil || o.EnumClass == nil {
		return nil, false
	}
	return o.EnumClass, true
}

// HasEnumClass returns a boolean if a field has been set.
func (o *EnumType) HasEnumClass() bool {
	if o != nil && o.EnumClass != nil {
		return true
	}

	return false
}

// SetEnumClass gets a reference to the given string and assigns it to the EnumClass field.
func (o *EnumType) SetEnumClass(v string) {
	o.EnumClass = &v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *EnumType) GetDocumentation() string {
	if o == nil || o.Documentation == nil {
		var ret string
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumType) GetDocumentationOk() (*string, bool) {
	if o == nil || o.Documentation == nil {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *EnumType) HasDocumentation() bool {
	if o != nil && o.Documentation != nil {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given string and assigns it to the Documentation field.
func (o *EnumType) SetDocumentation(v string) {
	o.Documentation = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EnumType) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumType) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EnumType) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EnumType) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *EnumType) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumType) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EnumType) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *EnumType) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o EnumType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.EnumClass != nil {
		toSerialize["enumClass"] = o.EnumClass
	}
	if o.Documentation != nil {
		toSerialize["documentation"] = o.Documentation
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	return json.Marshal(toSerialize)
}

type NullableEnumType struct {
	value *EnumType
	isSet bool
}

func (v NullableEnumType) Get() *EnumType {
	return v.value
}

func (v *NullableEnumType) Set(val *EnumType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumType(val *EnumType) *NullableEnumType {
	return &NullableEnumType{value: val, isSet: true}
}

func (v NullableEnumType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


