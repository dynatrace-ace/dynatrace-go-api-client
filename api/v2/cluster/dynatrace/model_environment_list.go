/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EnvironmentList A list of environments.
type EnvironmentList struct {
	// The total number of entries in the result.
	TotalCount int64 `json:"totalCount"`
	// The number of entries per page.
	PageSize *int32 `json:"pageSize,omitempty"`
	// The cursor for the next page of results. Has the value of `null` on the last page.   Use it in the **nextPageKey** query parameter to obtain subsequent pages of the result.
	NextPageKey *string `json:"nextPageKey,omitempty"`
	// The list of environments.
	Environments []Environment `json:"environments"`
}

// NewEnvironmentList instantiates a new EnvironmentList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentList(totalCount int64, environments []Environment) *EnvironmentList {
	this := EnvironmentList{}
	this.TotalCount = totalCount
	this.Environments = environments
	return &this
}

// NewEnvironmentListWithDefaults instantiates a new EnvironmentList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentListWithDefaults() *EnvironmentList {
	this := EnvironmentList{}
	return &this
}

// GetTotalCount returns the TotalCount field value
func (o *EnvironmentList) GetTotalCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *EnvironmentList) GetTotalCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *EnvironmentList) SetTotalCount(v int64) {
	o.TotalCount = v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *EnvironmentList) GetPageSize() int32 {
	if o == nil || o.PageSize == nil {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentList) GetPageSizeOk() (*int32, bool) {
	if o == nil || o.PageSize == nil {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *EnvironmentList) HasPageSize() bool {
	if o != nil && o.PageSize != nil {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *EnvironmentList) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetNextPageKey returns the NextPageKey field value if set, zero value otherwise.
func (o *EnvironmentList) GetNextPageKey() string {
	if o == nil || o.NextPageKey == nil {
		var ret string
		return ret
	}
	return *o.NextPageKey
}

// GetNextPageKeyOk returns a tuple with the NextPageKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentList) GetNextPageKeyOk() (*string, bool) {
	if o == nil || o.NextPageKey == nil {
		return nil, false
	}
	return o.NextPageKey, true
}

// HasNextPageKey returns a boolean if a field has been set.
func (o *EnvironmentList) HasNextPageKey() bool {
	if o != nil && o.NextPageKey != nil {
		return true
	}

	return false
}

// SetNextPageKey gets a reference to the given string and assigns it to the NextPageKey field.
func (o *EnvironmentList) SetNextPageKey(v string) {
	o.NextPageKey = &v
}

// GetEnvironments returns the Environments field value
func (o *EnvironmentList) GetEnvironments() []Environment {
	if o == nil {
		var ret []Environment
		return ret
	}

	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value
// and a boolean to check if the value has been set.
func (o *EnvironmentList) GetEnvironmentsOk() (*[]Environment, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Environments, true
}

// SetEnvironments sets field value
func (o *EnvironmentList) SetEnvironments(v []Environment) {
	o.Environments = v
}

func (o EnvironmentList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["totalCount"] = o.TotalCount
	}
	if o.PageSize != nil {
		toSerialize["pageSize"] = o.PageSize
	}
	if o.NextPageKey != nil {
		toSerialize["nextPageKey"] = o.NextPageKey
	}
	if true {
		toSerialize["environments"] = o.Environments
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentList struct {
	value *EnvironmentList
	isSet bool
}

func (v NullableEnvironmentList) Get() *EnvironmentList {
	return v.value
}

func (v *NullableEnvironmentList) Set(val *EnvironmentList) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentList) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentList(val *EnvironmentList) *NullableEnvironmentList {
	return &NullableEnvironmentList{value: val, isSet: true}
}

func (v NullableEnvironmentList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


