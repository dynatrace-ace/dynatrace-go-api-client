/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EnvironmentQuotas Environment level consumption and quotas information. Only returned if includeConsumptionInfo or includeUncachedConsumptionInfo param is true. If skipped when editing via PUT method then already set quotas will remain.
type EnvironmentQuotas struct {
	HostUnits *HostUnitQuota `json:"hostUnits,omitempty"`
	DemUnits *DemUnitsQuota `json:"demUnits,omitempty"`
	UserSessions *UserSessionsQuota `json:"userSessions,omitempty"`
	SessionProperties *SessionPropertiesQuota `json:"sessionProperties,omitempty"`
	SyntheticMonitors *SyntheticQuota `json:"syntheticMonitors,omitempty"`
	CustomMetrics *CustomMetricsQuota `json:"customMetrics,omitempty"`
	DavisDataUnits *DavisDataUnitsQuota `json:"davisDataUnits,omitempty"`
	LogMonitoring *LogMonitoringQuota `json:"logMonitoring,omitempty"`
}

// NewEnvironmentQuotas instantiates a new EnvironmentQuotas object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentQuotas() *EnvironmentQuotas {
	this := EnvironmentQuotas{}
	return &this
}

// NewEnvironmentQuotasWithDefaults instantiates a new EnvironmentQuotas object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentQuotasWithDefaults() *EnvironmentQuotas {
	this := EnvironmentQuotas{}
	return &this
}

// GetHostUnits returns the HostUnits field value if set, zero value otherwise.
func (o *EnvironmentQuotas) GetHostUnits() HostUnitQuota {
	if o == nil || o.HostUnits == nil {
		var ret HostUnitQuota
		return ret
	}
	return *o.HostUnits
}

// GetHostUnitsOk returns a tuple with the HostUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentQuotas) GetHostUnitsOk() (*HostUnitQuota, bool) {
	if o == nil || o.HostUnits == nil {
		return nil, false
	}
	return o.HostUnits, true
}

// HasHostUnits returns a boolean if a field has been set.
func (o *EnvironmentQuotas) HasHostUnits() bool {
	if o != nil && o.HostUnits != nil {
		return true
	}

	return false
}

// SetHostUnits gets a reference to the given HostUnitQuota and assigns it to the HostUnits field.
func (o *EnvironmentQuotas) SetHostUnits(v HostUnitQuota) {
	o.HostUnits = &v
}

// GetDemUnits returns the DemUnits field value if set, zero value otherwise.
func (o *EnvironmentQuotas) GetDemUnits() DemUnitsQuota {
	if o == nil || o.DemUnits == nil {
		var ret DemUnitsQuota
		return ret
	}
	return *o.DemUnits
}

// GetDemUnitsOk returns a tuple with the DemUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentQuotas) GetDemUnitsOk() (*DemUnitsQuota, bool) {
	if o == nil || o.DemUnits == nil {
		return nil, false
	}
	return o.DemUnits, true
}

// HasDemUnits returns a boolean if a field has been set.
func (o *EnvironmentQuotas) HasDemUnits() bool {
	if o != nil && o.DemUnits != nil {
		return true
	}

	return false
}

// SetDemUnits gets a reference to the given DemUnitsQuota and assigns it to the DemUnits field.
func (o *EnvironmentQuotas) SetDemUnits(v DemUnitsQuota) {
	o.DemUnits = &v
}

// GetUserSessions returns the UserSessions field value if set, zero value otherwise.
func (o *EnvironmentQuotas) GetUserSessions() UserSessionsQuota {
	if o == nil || o.UserSessions == nil {
		var ret UserSessionsQuota
		return ret
	}
	return *o.UserSessions
}

// GetUserSessionsOk returns a tuple with the UserSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentQuotas) GetUserSessionsOk() (*UserSessionsQuota, bool) {
	if o == nil || o.UserSessions == nil {
		return nil, false
	}
	return o.UserSessions, true
}

// HasUserSessions returns a boolean if a field has been set.
func (o *EnvironmentQuotas) HasUserSessions() bool {
	if o != nil && o.UserSessions != nil {
		return true
	}

	return false
}

// SetUserSessions gets a reference to the given UserSessionsQuota and assigns it to the UserSessions field.
func (o *EnvironmentQuotas) SetUserSessions(v UserSessionsQuota) {
	o.UserSessions = &v
}

// GetSessionProperties returns the SessionProperties field value if set, zero value otherwise.
func (o *EnvironmentQuotas) GetSessionProperties() SessionPropertiesQuota {
	if o == nil || o.SessionProperties == nil {
		var ret SessionPropertiesQuota
		return ret
	}
	return *o.SessionProperties
}

// GetSessionPropertiesOk returns a tuple with the SessionProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentQuotas) GetSessionPropertiesOk() (*SessionPropertiesQuota, bool) {
	if o == nil || o.SessionProperties == nil {
		return nil, false
	}
	return o.SessionProperties, true
}

// HasSessionProperties returns a boolean if a field has been set.
func (o *EnvironmentQuotas) HasSessionProperties() bool {
	if o != nil && o.SessionProperties != nil {
		return true
	}

	return false
}

// SetSessionProperties gets a reference to the given SessionPropertiesQuota and assigns it to the SessionProperties field.
func (o *EnvironmentQuotas) SetSessionProperties(v SessionPropertiesQuota) {
	o.SessionProperties = &v
}

// GetSyntheticMonitors returns the SyntheticMonitors field value if set, zero value otherwise.
func (o *EnvironmentQuotas) GetSyntheticMonitors() SyntheticQuota {
	if o == nil || o.SyntheticMonitors == nil {
		var ret SyntheticQuota
		return ret
	}
	return *o.SyntheticMonitors
}

// GetSyntheticMonitorsOk returns a tuple with the SyntheticMonitors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentQuotas) GetSyntheticMonitorsOk() (*SyntheticQuota, bool) {
	if o == nil || o.SyntheticMonitors == nil {
		return nil, false
	}
	return o.SyntheticMonitors, true
}

// HasSyntheticMonitors returns a boolean if a field has been set.
func (o *EnvironmentQuotas) HasSyntheticMonitors() bool {
	if o != nil && o.SyntheticMonitors != nil {
		return true
	}

	return false
}

// SetSyntheticMonitors gets a reference to the given SyntheticQuota and assigns it to the SyntheticMonitors field.
func (o *EnvironmentQuotas) SetSyntheticMonitors(v SyntheticQuota) {
	o.SyntheticMonitors = &v
}

// GetCustomMetrics returns the CustomMetrics field value if set, zero value otherwise.
func (o *EnvironmentQuotas) GetCustomMetrics() CustomMetricsQuota {
	if o == nil || o.CustomMetrics == nil {
		var ret CustomMetricsQuota
		return ret
	}
	return *o.CustomMetrics
}

// GetCustomMetricsOk returns a tuple with the CustomMetrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentQuotas) GetCustomMetricsOk() (*CustomMetricsQuota, bool) {
	if o == nil || o.CustomMetrics == nil {
		return nil, false
	}
	return o.CustomMetrics, true
}

// HasCustomMetrics returns a boolean if a field has been set.
func (o *EnvironmentQuotas) HasCustomMetrics() bool {
	if o != nil && o.CustomMetrics != nil {
		return true
	}

	return false
}

// SetCustomMetrics gets a reference to the given CustomMetricsQuota and assigns it to the CustomMetrics field.
func (o *EnvironmentQuotas) SetCustomMetrics(v CustomMetricsQuota) {
	o.CustomMetrics = &v
}

// GetDavisDataUnits returns the DavisDataUnits field value if set, zero value otherwise.
func (o *EnvironmentQuotas) GetDavisDataUnits() DavisDataUnitsQuota {
	if o == nil || o.DavisDataUnits == nil {
		var ret DavisDataUnitsQuota
		return ret
	}
	return *o.DavisDataUnits
}

// GetDavisDataUnitsOk returns a tuple with the DavisDataUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentQuotas) GetDavisDataUnitsOk() (*DavisDataUnitsQuota, bool) {
	if o == nil || o.DavisDataUnits == nil {
		return nil, false
	}
	return o.DavisDataUnits, true
}

// HasDavisDataUnits returns a boolean if a field has been set.
func (o *EnvironmentQuotas) HasDavisDataUnits() bool {
	if o != nil && o.DavisDataUnits != nil {
		return true
	}

	return false
}

// SetDavisDataUnits gets a reference to the given DavisDataUnitsQuota and assigns it to the DavisDataUnits field.
func (o *EnvironmentQuotas) SetDavisDataUnits(v DavisDataUnitsQuota) {
	o.DavisDataUnits = &v
}

// GetLogMonitoring returns the LogMonitoring field value if set, zero value otherwise.
func (o *EnvironmentQuotas) GetLogMonitoring() LogMonitoringQuota {
	if o == nil || o.LogMonitoring == nil {
		var ret LogMonitoringQuota
		return ret
	}
	return *o.LogMonitoring
}

// GetLogMonitoringOk returns a tuple with the LogMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentQuotas) GetLogMonitoringOk() (*LogMonitoringQuota, bool) {
	if o == nil || o.LogMonitoring == nil {
		return nil, false
	}
	return o.LogMonitoring, true
}

// HasLogMonitoring returns a boolean if a field has been set.
func (o *EnvironmentQuotas) HasLogMonitoring() bool {
	if o != nil && o.LogMonitoring != nil {
		return true
	}

	return false
}

// SetLogMonitoring gets a reference to the given LogMonitoringQuota and assigns it to the LogMonitoring field.
func (o *EnvironmentQuotas) SetLogMonitoring(v LogMonitoringQuota) {
	o.LogMonitoring = &v
}

func (o EnvironmentQuotas) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HostUnits != nil {
		toSerialize["hostUnits"] = o.HostUnits
	}
	if o.DemUnits != nil {
		toSerialize["demUnits"] = o.DemUnits
	}
	if o.UserSessions != nil {
		toSerialize["userSessions"] = o.UserSessions
	}
	if o.SessionProperties != nil {
		toSerialize["sessionProperties"] = o.SessionProperties
	}
	if o.SyntheticMonitors != nil {
		toSerialize["syntheticMonitors"] = o.SyntheticMonitors
	}
	if o.CustomMetrics != nil {
		toSerialize["customMetrics"] = o.CustomMetrics
	}
	if o.DavisDataUnits != nil {
		toSerialize["davisDataUnits"] = o.DavisDataUnits
	}
	if o.LogMonitoring != nil {
		toSerialize["logMonitoring"] = o.LogMonitoring
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentQuotas struct {
	value *EnvironmentQuotas
	isSet bool
}

func (v NullableEnvironmentQuotas) Get() *EnvironmentQuotas {
	return v.value
}

func (v *NullableEnvironmentQuotas) Set(val *EnvironmentQuotas) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentQuotas) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentQuotas) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentQuotas(val *EnvironmentQuotas) *NullableEnvironmentQuotas {
	return &NullableEnvironmentQuotas{value: val, isSet: true}
}

func (v NullableEnvironmentQuotas) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentQuotas) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


