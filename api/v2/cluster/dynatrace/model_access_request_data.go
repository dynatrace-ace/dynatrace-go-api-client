/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AccessRequestData Access Request data
type AccessRequestData struct {
	// Request id
	RequestId *string `json:"requestId,omitempty"`
	// User id
	UserId *string `json:"userId,omitempty"`
	// Request reason description
	Reason *string `json:"reason,omitempty"`
	// For how many days access is requested
	RequestedDays *int32 `json:"requestedDays,omitempty"`
	// Requested role
	Role *string `json:"role,omitempty"`
	// Access request created at (timestamp)
	CreatedTimestamp *int64 `json:"createdTimestamp,omitempty"`
	// Access expires at (timestamp)
	ExpirationTimestamp *int64 `json:"expirationTimestamp,omitempty"`
	// Access request state
	State *string `json:"state,omitempty"`
	// Access request state was modified by user
	StateModifiedByUser *string `json:"stateModifiedByUser,omitempty"`
}

// NewAccessRequestData instantiates a new AccessRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessRequestData() *AccessRequestData {
	this := AccessRequestData{}
	return &this
}

// NewAccessRequestDataWithDefaults instantiates a new AccessRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessRequestDataWithDefaults() *AccessRequestData {
	this := AccessRequestData{}
	return &this
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *AccessRequestData) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessRequestData) GetRequestIdOk() (*string, bool) {
	if o == nil || o.RequestId == nil {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *AccessRequestData) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *AccessRequestData) SetRequestId(v string) {
	o.RequestId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AccessRequestData) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessRequestData) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AccessRequestData) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *AccessRequestData) SetUserId(v string) {
	o.UserId = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *AccessRequestData) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessRequestData) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *AccessRequestData) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *AccessRequestData) SetReason(v string) {
	o.Reason = &v
}

// GetRequestedDays returns the RequestedDays field value if set, zero value otherwise.
func (o *AccessRequestData) GetRequestedDays() int32 {
	if o == nil || o.RequestedDays == nil {
		var ret int32
		return ret
	}
	return *o.RequestedDays
}

// GetRequestedDaysOk returns a tuple with the RequestedDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessRequestData) GetRequestedDaysOk() (*int32, bool) {
	if o == nil || o.RequestedDays == nil {
		return nil, false
	}
	return o.RequestedDays, true
}

// HasRequestedDays returns a boolean if a field has been set.
func (o *AccessRequestData) HasRequestedDays() bool {
	if o != nil && o.RequestedDays != nil {
		return true
	}

	return false
}

// SetRequestedDays gets a reference to the given int32 and assigns it to the RequestedDays field.
func (o *AccessRequestData) SetRequestedDays(v int32) {
	o.RequestedDays = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *AccessRequestData) GetRole() string {
	if o == nil || o.Role == nil {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessRequestData) GetRoleOk() (*string, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *AccessRequestData) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *AccessRequestData) SetRole(v string) {
	o.Role = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *AccessRequestData) GetCreatedTimestamp() int64 {
	if o == nil || o.CreatedTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessRequestData) GetCreatedTimestampOk() (*int64, bool) {
	if o == nil || o.CreatedTimestamp == nil {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *AccessRequestData) HasCreatedTimestamp() bool {
	if o != nil && o.CreatedTimestamp != nil {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int64 and assigns it to the CreatedTimestamp field.
func (o *AccessRequestData) SetCreatedTimestamp(v int64) {
	o.CreatedTimestamp = &v
}

// GetExpirationTimestamp returns the ExpirationTimestamp field value if set, zero value otherwise.
func (o *AccessRequestData) GetExpirationTimestamp() int64 {
	if o == nil || o.ExpirationTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.ExpirationTimestamp
}

// GetExpirationTimestampOk returns a tuple with the ExpirationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessRequestData) GetExpirationTimestampOk() (*int64, bool) {
	if o == nil || o.ExpirationTimestamp == nil {
		return nil, false
	}
	return o.ExpirationTimestamp, true
}

// HasExpirationTimestamp returns a boolean if a field has been set.
func (o *AccessRequestData) HasExpirationTimestamp() bool {
	if o != nil && o.ExpirationTimestamp != nil {
		return true
	}

	return false
}

// SetExpirationTimestamp gets a reference to the given int64 and assigns it to the ExpirationTimestamp field.
func (o *AccessRequestData) SetExpirationTimestamp(v int64) {
	o.ExpirationTimestamp = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *AccessRequestData) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessRequestData) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *AccessRequestData) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *AccessRequestData) SetState(v string) {
	o.State = &v
}

// GetStateModifiedByUser returns the StateModifiedByUser field value if set, zero value otherwise.
func (o *AccessRequestData) GetStateModifiedByUser() string {
	if o == nil || o.StateModifiedByUser == nil {
		var ret string
		return ret
	}
	return *o.StateModifiedByUser
}

// GetStateModifiedByUserOk returns a tuple with the StateModifiedByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessRequestData) GetStateModifiedByUserOk() (*string, bool) {
	if o == nil || o.StateModifiedByUser == nil {
		return nil, false
	}
	return o.StateModifiedByUser, true
}

// HasStateModifiedByUser returns a boolean if a field has been set.
func (o *AccessRequestData) HasStateModifiedByUser() bool {
	if o != nil && o.StateModifiedByUser != nil {
		return true
	}

	return false
}

// SetStateModifiedByUser gets a reference to the given string and assigns it to the StateModifiedByUser field.
func (o *AccessRequestData) SetStateModifiedByUser(v string) {
	o.StateModifiedByUser = &v
}

func (o AccessRequestData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RequestId != nil {
		toSerialize["requestId"] = o.RequestId
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.RequestedDays != nil {
		toSerialize["requestedDays"] = o.RequestedDays
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.CreatedTimestamp != nil {
		toSerialize["createdTimestamp"] = o.CreatedTimestamp
	}
	if o.ExpirationTimestamp != nil {
		toSerialize["expirationTimestamp"] = o.ExpirationTimestamp
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.StateModifiedByUser != nil {
		toSerialize["stateModifiedByUser"] = o.StateModifiedByUser
	}
	return json.Marshal(toSerialize)
}

type NullableAccessRequestData struct {
	value *AccessRequestData
	isSet bool
}

func (v NullableAccessRequestData) Get() *AccessRequestData {
	return v.value
}

func (v *NullableAccessRequestData) Set(val *AccessRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessRequestData(val *AccessRequestData) *NullableAccessRequestData {
	return &NullableAccessRequestData{value: val, isSet: true}
}

func (v NullableAccessRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


