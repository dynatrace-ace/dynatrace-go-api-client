/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SyntheticBillingUsageDto struct for SyntheticBillingUsageDto
type SyntheticBillingUsageDto struct {
	MonitorTypeId *int32 `json:"monitorTypeId,omitempty"`
	TestId *int64 `json:"testId,omitempty"`
	PublicExecutions *int64 `json:"publicExecutions,omitempty"`
	PrivateExecutions *int64 `json:"privateExecutions,omitempty"`
}

// NewSyntheticBillingUsageDto instantiates a new SyntheticBillingUsageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticBillingUsageDto() *SyntheticBillingUsageDto {
	this := SyntheticBillingUsageDto{}
	return &this
}

// NewSyntheticBillingUsageDtoWithDefaults instantiates a new SyntheticBillingUsageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticBillingUsageDtoWithDefaults() *SyntheticBillingUsageDto {
	this := SyntheticBillingUsageDto{}
	return &this
}

// GetMonitorTypeId returns the MonitorTypeId field value if set, zero value otherwise.
func (o *SyntheticBillingUsageDto) GetMonitorTypeId() int32 {
	if o == nil || o.MonitorTypeId == nil {
		var ret int32
		return ret
	}
	return *o.MonitorTypeId
}

// GetMonitorTypeIdOk returns a tuple with the MonitorTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticBillingUsageDto) GetMonitorTypeIdOk() (*int32, bool) {
	if o == nil || o.MonitorTypeId == nil {
		return nil, false
	}
	return o.MonitorTypeId, true
}

// HasMonitorTypeId returns a boolean if a field has been set.
func (o *SyntheticBillingUsageDto) HasMonitorTypeId() bool {
	if o != nil && o.MonitorTypeId != nil {
		return true
	}

	return false
}

// SetMonitorTypeId gets a reference to the given int32 and assigns it to the MonitorTypeId field.
func (o *SyntheticBillingUsageDto) SetMonitorTypeId(v int32) {
	o.MonitorTypeId = &v
}

// GetTestId returns the TestId field value if set, zero value otherwise.
func (o *SyntheticBillingUsageDto) GetTestId() int64 {
	if o == nil || o.TestId == nil {
		var ret int64
		return ret
	}
	return *o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticBillingUsageDto) GetTestIdOk() (*int64, bool) {
	if o == nil || o.TestId == nil {
		return nil, false
	}
	return o.TestId, true
}

// HasTestId returns a boolean if a field has been set.
func (o *SyntheticBillingUsageDto) HasTestId() bool {
	if o != nil && o.TestId != nil {
		return true
	}

	return false
}

// SetTestId gets a reference to the given int64 and assigns it to the TestId field.
func (o *SyntheticBillingUsageDto) SetTestId(v int64) {
	o.TestId = &v
}

// GetPublicExecutions returns the PublicExecutions field value if set, zero value otherwise.
func (o *SyntheticBillingUsageDto) GetPublicExecutions() int64 {
	if o == nil || o.PublicExecutions == nil {
		var ret int64
		return ret
	}
	return *o.PublicExecutions
}

// GetPublicExecutionsOk returns a tuple with the PublicExecutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticBillingUsageDto) GetPublicExecutionsOk() (*int64, bool) {
	if o == nil || o.PublicExecutions == nil {
		return nil, false
	}
	return o.PublicExecutions, true
}

// HasPublicExecutions returns a boolean if a field has been set.
func (o *SyntheticBillingUsageDto) HasPublicExecutions() bool {
	if o != nil && o.PublicExecutions != nil {
		return true
	}

	return false
}

// SetPublicExecutions gets a reference to the given int64 and assigns it to the PublicExecutions field.
func (o *SyntheticBillingUsageDto) SetPublicExecutions(v int64) {
	o.PublicExecutions = &v
}

// GetPrivateExecutions returns the PrivateExecutions field value if set, zero value otherwise.
func (o *SyntheticBillingUsageDto) GetPrivateExecutions() int64 {
	if o == nil || o.PrivateExecutions == nil {
		var ret int64
		return ret
	}
	return *o.PrivateExecutions
}

// GetPrivateExecutionsOk returns a tuple with the PrivateExecutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticBillingUsageDto) GetPrivateExecutionsOk() (*int64, bool) {
	if o == nil || o.PrivateExecutions == nil {
		return nil, false
	}
	return o.PrivateExecutions, true
}

// HasPrivateExecutions returns a boolean if a field has been set.
func (o *SyntheticBillingUsageDto) HasPrivateExecutions() bool {
	if o != nil && o.PrivateExecutions != nil {
		return true
	}

	return false
}

// SetPrivateExecutions gets a reference to the given int64 and assigns it to the PrivateExecutions field.
func (o *SyntheticBillingUsageDto) SetPrivateExecutions(v int64) {
	o.PrivateExecutions = &v
}

func (o SyntheticBillingUsageDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MonitorTypeId != nil {
		toSerialize["monitorTypeId"] = o.MonitorTypeId
	}
	if o.TestId != nil {
		toSerialize["testId"] = o.TestId
	}
	if o.PublicExecutions != nil {
		toSerialize["publicExecutions"] = o.PublicExecutions
	}
	if o.PrivateExecutions != nil {
		toSerialize["privateExecutions"] = o.PrivateExecutions
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticBillingUsageDto struct {
	value *SyntheticBillingUsageDto
	isSet bool
}

func (v NullableSyntheticBillingUsageDto) Get() *SyntheticBillingUsageDto {
	return v.value
}

func (v *NullableSyntheticBillingUsageDto) Set(val *SyntheticBillingUsageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticBillingUsageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticBillingUsageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticBillingUsageDto(val *SyntheticBillingUsageDto) *NullableSyntheticBillingUsageDto {
	return &NullableSyntheticBillingUsageDto{value: val, isSet: true}
}

func (v NullableSyntheticBillingUsageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticBillingUsageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


