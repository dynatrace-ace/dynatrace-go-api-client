/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// NetworkZoneList A list of network zones.
type NetworkZoneList struct {
	// A list of network zones.
	NetworkZones []NetworkZone `json:"networkZones"`
}

// NewNetworkZoneList instantiates a new NetworkZoneList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkZoneList(networkZones []NetworkZone) *NetworkZoneList {
	this := NetworkZoneList{}
	this.NetworkZones = networkZones
	return &this
}

// NewNetworkZoneListWithDefaults instantiates a new NetworkZoneList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkZoneListWithDefaults() *NetworkZoneList {
	this := NetworkZoneList{}
	return &this
}

// GetNetworkZones returns the NetworkZones field value
func (o *NetworkZoneList) GetNetworkZones() []NetworkZone {
	if o == nil {
		var ret []NetworkZone
		return ret
	}

	return o.NetworkZones
}

// GetNetworkZonesOk returns a tuple with the NetworkZones field value
// and a boolean to check if the value has been set.
func (o *NetworkZoneList) GetNetworkZonesOk() (*[]NetworkZone, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NetworkZones, true
}

// SetNetworkZones sets field value
func (o *NetworkZoneList) SetNetworkZones(v []NetworkZone) {
	o.NetworkZones = v
}

func (o NetworkZoneList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["networkZones"] = o.NetworkZones
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkZoneList struct {
	value *NetworkZoneList
	isSet bool
}

func (v NullableNetworkZoneList) Get() *NetworkZoneList {
	return v.value
}

func (v *NullableNetworkZoneList) Set(val *NetworkZoneList) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkZoneList) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkZoneList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkZoneList(val *NetworkZoneList) *NullableNetworkZoneList {
	return &NullableNetworkZoneList{value: val, isSet: true}
}

func (v NullableNetworkZoneList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkZoneList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


