/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// DavisDataUnitsUsageDto struct for DavisDataUnitsUsageDto
type DavisDataUnitsUsageDto struct {
	Pool *string `json:"pool,omitempty"`
	Total *float32 `json:"total,omitempty"`
}

// NewDavisDataUnitsUsageDto instantiates a new DavisDataUnitsUsageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDavisDataUnitsUsageDto() *DavisDataUnitsUsageDto {
	this := DavisDataUnitsUsageDto{}
	return &this
}

// NewDavisDataUnitsUsageDtoWithDefaults instantiates a new DavisDataUnitsUsageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDavisDataUnitsUsageDtoWithDefaults() *DavisDataUnitsUsageDto {
	this := DavisDataUnitsUsageDto{}
	return &this
}

// GetPool returns the Pool field value if set, zero value otherwise.
func (o *DavisDataUnitsUsageDto) GetPool() string {
	if o == nil || o.Pool == nil {
		var ret string
		return ret
	}
	return *o.Pool
}

// GetPoolOk returns a tuple with the Pool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisDataUnitsUsageDto) GetPoolOk() (*string, bool) {
	if o == nil || o.Pool == nil {
		return nil, false
	}
	return o.Pool, true
}

// HasPool returns a boolean if a field has been set.
func (o *DavisDataUnitsUsageDto) HasPool() bool {
	if o != nil && o.Pool != nil {
		return true
	}

	return false
}

// SetPool gets a reference to the given string and assigns it to the Pool field.
func (o *DavisDataUnitsUsageDto) SetPool(v string) {
	o.Pool = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *DavisDataUnitsUsageDto) GetTotal() float32 {
	if o == nil || o.Total == nil {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DavisDataUnitsUsageDto) GetTotalOk() (*float32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *DavisDataUnitsUsageDto) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *DavisDataUnitsUsageDto) SetTotal(v float32) {
	o.Total = &v
}

func (o DavisDataUnitsUsageDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pool != nil {
		toSerialize["pool"] = o.Pool
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableDavisDataUnitsUsageDto struct {
	value *DavisDataUnitsUsageDto
	isSet bool
}

func (v NullableDavisDataUnitsUsageDto) Get() *DavisDataUnitsUsageDto {
	return v.value
}

func (v *NullableDavisDataUnitsUsageDto) Set(val *DavisDataUnitsUsageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDavisDataUnitsUsageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDavisDataUnitsUsageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDavisDataUnitsUsageDto(val *DavisDataUnitsUsageDto) *NullableDavisDataUnitsUsageDto {
	return &NullableDavisDataUnitsUsageDto{value: val, isSet: true}
}

func (v NullableDavisDataUnitsUsageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDavisDataUnitsUsageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


