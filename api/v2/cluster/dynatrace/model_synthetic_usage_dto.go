/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SyntheticUsageDto struct for SyntheticUsageDto
type SyntheticUsageDto struct {
	MonitorDefinitionId *string `json:"monitorDefinitionId,omitempty"`
	MonitorDescription *string `json:"monitorDescription,omitempty"`
	MonitorTypeId *int32 `json:"monitorTypeId,omitempty"`
	SuccessCount *int32 `json:"successCount,omitempty"`
	FailureCount *int32 `json:"failureCount,omitempty"`
	SyntheticActionCount *int32 `json:"syntheticActionCount,omitempty"`
	PerformedSyntheticActions *int32 `json:"performedSyntheticActions,omitempty"`
}

// NewSyntheticUsageDto instantiates a new SyntheticUsageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticUsageDto() *SyntheticUsageDto {
	this := SyntheticUsageDto{}
	return &this
}

// NewSyntheticUsageDtoWithDefaults instantiates a new SyntheticUsageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticUsageDtoWithDefaults() *SyntheticUsageDto {
	this := SyntheticUsageDto{}
	return &this
}

// GetMonitorDefinitionId returns the MonitorDefinitionId field value if set, zero value otherwise.
func (o *SyntheticUsageDto) GetMonitorDefinitionId() string {
	if o == nil || o.MonitorDefinitionId == nil {
		var ret string
		return ret
	}
	return *o.MonitorDefinitionId
}

// GetMonitorDefinitionIdOk returns a tuple with the MonitorDefinitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticUsageDto) GetMonitorDefinitionIdOk() (*string, bool) {
	if o == nil || o.MonitorDefinitionId == nil {
		return nil, false
	}
	return o.MonitorDefinitionId, true
}

// HasMonitorDefinitionId returns a boolean if a field has been set.
func (o *SyntheticUsageDto) HasMonitorDefinitionId() bool {
	if o != nil && o.MonitorDefinitionId != nil {
		return true
	}

	return false
}

// SetMonitorDefinitionId gets a reference to the given string and assigns it to the MonitorDefinitionId field.
func (o *SyntheticUsageDto) SetMonitorDefinitionId(v string) {
	o.MonitorDefinitionId = &v
}

// GetMonitorDescription returns the MonitorDescription field value if set, zero value otherwise.
func (o *SyntheticUsageDto) GetMonitorDescription() string {
	if o == nil || o.MonitorDescription == nil {
		var ret string
		return ret
	}
	return *o.MonitorDescription
}

// GetMonitorDescriptionOk returns a tuple with the MonitorDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticUsageDto) GetMonitorDescriptionOk() (*string, bool) {
	if o == nil || o.MonitorDescription == nil {
		return nil, false
	}
	return o.MonitorDescription, true
}

// HasMonitorDescription returns a boolean if a field has been set.
func (o *SyntheticUsageDto) HasMonitorDescription() bool {
	if o != nil && o.MonitorDescription != nil {
		return true
	}

	return false
}

// SetMonitorDescription gets a reference to the given string and assigns it to the MonitorDescription field.
func (o *SyntheticUsageDto) SetMonitorDescription(v string) {
	o.MonitorDescription = &v
}

// GetMonitorTypeId returns the MonitorTypeId field value if set, zero value otherwise.
func (o *SyntheticUsageDto) GetMonitorTypeId() int32 {
	if o == nil || o.MonitorTypeId == nil {
		var ret int32
		return ret
	}
	return *o.MonitorTypeId
}

// GetMonitorTypeIdOk returns a tuple with the MonitorTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticUsageDto) GetMonitorTypeIdOk() (*int32, bool) {
	if o == nil || o.MonitorTypeId == nil {
		return nil, false
	}
	return o.MonitorTypeId, true
}

// HasMonitorTypeId returns a boolean if a field has been set.
func (o *SyntheticUsageDto) HasMonitorTypeId() bool {
	if o != nil && o.MonitorTypeId != nil {
		return true
	}

	return false
}

// SetMonitorTypeId gets a reference to the given int32 and assigns it to the MonitorTypeId field.
func (o *SyntheticUsageDto) SetMonitorTypeId(v int32) {
	o.MonitorTypeId = &v
}

// GetSuccessCount returns the SuccessCount field value if set, zero value otherwise.
func (o *SyntheticUsageDto) GetSuccessCount() int32 {
	if o == nil || o.SuccessCount == nil {
		var ret int32
		return ret
	}
	return *o.SuccessCount
}

// GetSuccessCountOk returns a tuple with the SuccessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticUsageDto) GetSuccessCountOk() (*int32, bool) {
	if o == nil || o.SuccessCount == nil {
		return nil, false
	}
	return o.SuccessCount, true
}

// HasSuccessCount returns a boolean if a field has been set.
func (o *SyntheticUsageDto) HasSuccessCount() bool {
	if o != nil && o.SuccessCount != nil {
		return true
	}

	return false
}

// SetSuccessCount gets a reference to the given int32 and assigns it to the SuccessCount field.
func (o *SyntheticUsageDto) SetSuccessCount(v int32) {
	o.SuccessCount = &v
}

// GetFailureCount returns the FailureCount field value if set, zero value otherwise.
func (o *SyntheticUsageDto) GetFailureCount() int32 {
	if o == nil || o.FailureCount == nil {
		var ret int32
		return ret
	}
	return *o.FailureCount
}

// GetFailureCountOk returns a tuple with the FailureCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticUsageDto) GetFailureCountOk() (*int32, bool) {
	if o == nil || o.FailureCount == nil {
		return nil, false
	}
	return o.FailureCount, true
}

// HasFailureCount returns a boolean if a field has been set.
func (o *SyntheticUsageDto) HasFailureCount() bool {
	if o != nil && o.FailureCount != nil {
		return true
	}

	return false
}

// SetFailureCount gets a reference to the given int32 and assigns it to the FailureCount field.
func (o *SyntheticUsageDto) SetFailureCount(v int32) {
	o.FailureCount = &v
}

// GetSyntheticActionCount returns the SyntheticActionCount field value if set, zero value otherwise.
func (o *SyntheticUsageDto) GetSyntheticActionCount() int32 {
	if o == nil || o.SyntheticActionCount == nil {
		var ret int32
		return ret
	}
	return *o.SyntheticActionCount
}

// GetSyntheticActionCountOk returns a tuple with the SyntheticActionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticUsageDto) GetSyntheticActionCountOk() (*int32, bool) {
	if o == nil || o.SyntheticActionCount == nil {
		return nil, false
	}
	return o.SyntheticActionCount, true
}

// HasSyntheticActionCount returns a boolean if a field has been set.
func (o *SyntheticUsageDto) HasSyntheticActionCount() bool {
	if o != nil && o.SyntheticActionCount != nil {
		return true
	}

	return false
}

// SetSyntheticActionCount gets a reference to the given int32 and assigns it to the SyntheticActionCount field.
func (o *SyntheticUsageDto) SetSyntheticActionCount(v int32) {
	o.SyntheticActionCount = &v
}

// GetPerformedSyntheticActions returns the PerformedSyntheticActions field value if set, zero value otherwise.
func (o *SyntheticUsageDto) GetPerformedSyntheticActions() int32 {
	if o == nil || o.PerformedSyntheticActions == nil {
		var ret int32
		return ret
	}
	return *o.PerformedSyntheticActions
}

// GetPerformedSyntheticActionsOk returns a tuple with the PerformedSyntheticActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyntheticUsageDto) GetPerformedSyntheticActionsOk() (*int32, bool) {
	if o == nil || o.PerformedSyntheticActions == nil {
		return nil, false
	}
	return o.PerformedSyntheticActions, true
}

// HasPerformedSyntheticActions returns a boolean if a field has been set.
func (o *SyntheticUsageDto) HasPerformedSyntheticActions() bool {
	if o != nil && o.PerformedSyntheticActions != nil {
		return true
	}

	return false
}

// SetPerformedSyntheticActions gets a reference to the given int32 and assigns it to the PerformedSyntheticActions field.
func (o *SyntheticUsageDto) SetPerformedSyntheticActions(v int32) {
	o.PerformedSyntheticActions = &v
}

func (o SyntheticUsageDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MonitorDefinitionId != nil {
		toSerialize["monitorDefinitionId"] = o.MonitorDefinitionId
	}
	if o.MonitorDescription != nil {
		toSerialize["monitorDescription"] = o.MonitorDescription
	}
	if o.MonitorTypeId != nil {
		toSerialize["monitorTypeId"] = o.MonitorTypeId
	}
	if o.SuccessCount != nil {
		toSerialize["successCount"] = o.SuccessCount
	}
	if o.FailureCount != nil {
		toSerialize["failureCount"] = o.FailureCount
	}
	if o.SyntheticActionCount != nil {
		toSerialize["syntheticActionCount"] = o.SyntheticActionCount
	}
	if o.PerformedSyntheticActions != nil {
		toSerialize["performedSyntheticActions"] = o.PerformedSyntheticActions
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticUsageDto struct {
	value *SyntheticUsageDto
	isSet bool
}

func (v NullableSyntheticUsageDto) Get() *SyntheticUsageDto {
	return v.value
}

func (v *NullableSyntheticUsageDto) Set(val *SyntheticUsageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticUsageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticUsageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticUsageDto(val *SyntheticUsageDto) *NullableSyntheticUsageDto {
	return &NullableSyntheticUsageDto{value: val, isSet: true}
}

func (v NullableSyntheticUsageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticUsageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


