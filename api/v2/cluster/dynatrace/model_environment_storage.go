/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EnvironmentStorage Environment level storage usage and limit information. Not returned if includeStorageInfo param is not true. If skipped when editing via PUT method then already set limits will remain.
type EnvironmentStorage struct {
	TransactionStorage *TransactionStorage `json:"transactionStorage,omitempty"`
	SessionReplayStorage *SessionReplayStorage `json:"sessionReplayStorage,omitempty"`
	SymbolFilesFromMobileApps *SymbolFilesFromMobileApps `json:"symbolFilesFromMobileApps,omitempty"`
	LogMonitoringStorage *LogMonitoringStorage `json:"logMonitoringStorage,omitempty"`
	ServiceRequestLevelRetention *ServiceRequestLevelRetention `json:"serviceRequestLevelRetention,omitempty"`
	ServiceCodeLevelRetention *ServiceCodeLevelRetention `json:"serviceCodeLevelRetention,omitempty"`
	RealUserMonitoringRetention *RealUserMonitoringRetention `json:"realUserMonitoringRetention,omitempty"`
	SyntheticMonitoringRetention *SyntheticMonitoringRetention `json:"syntheticMonitoringRetention,omitempty"`
	SessionReplayRetention *SessionReplayRetention `json:"sessionReplayRetention,omitempty"`
	LogMonitoringRetention *LogMonitoringRetention `json:"logMonitoringRetention,omitempty"`
	UserActionsPerMinute *UserActionsPerMinute `json:"userActionsPerMinute,omitempty"`
	TransactionTrafficQuota *TransactionTrafficQuota `json:"transactionTrafficQuota,omitempty"`
}

// NewEnvironmentStorage instantiates a new EnvironmentStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentStorage() *EnvironmentStorage {
	this := EnvironmentStorage{}
	return &this
}

// NewEnvironmentStorageWithDefaults instantiates a new EnvironmentStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentStorageWithDefaults() *EnvironmentStorage {
	this := EnvironmentStorage{}
	return &this
}

// GetTransactionStorage returns the TransactionStorage field value if set, zero value otherwise.
func (o *EnvironmentStorage) GetTransactionStorage() TransactionStorage {
	if o == nil || o.TransactionStorage == nil {
		var ret TransactionStorage
		return ret
	}
	return *o.TransactionStorage
}

// GetTransactionStorageOk returns a tuple with the TransactionStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStorage) GetTransactionStorageOk() (*TransactionStorage, bool) {
	if o == nil || o.TransactionStorage == nil {
		return nil, false
	}
	return o.TransactionStorage, true
}

// HasTransactionStorage returns a boolean if a field has been set.
func (o *EnvironmentStorage) HasTransactionStorage() bool {
	if o != nil && o.TransactionStorage != nil {
		return true
	}

	return false
}

// SetTransactionStorage gets a reference to the given TransactionStorage and assigns it to the TransactionStorage field.
func (o *EnvironmentStorage) SetTransactionStorage(v TransactionStorage) {
	o.TransactionStorage = &v
}

// GetSessionReplayStorage returns the SessionReplayStorage field value if set, zero value otherwise.
func (o *EnvironmentStorage) GetSessionReplayStorage() SessionReplayStorage {
	if o == nil || o.SessionReplayStorage == nil {
		var ret SessionReplayStorage
		return ret
	}
	return *o.SessionReplayStorage
}

// GetSessionReplayStorageOk returns a tuple with the SessionReplayStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStorage) GetSessionReplayStorageOk() (*SessionReplayStorage, bool) {
	if o == nil || o.SessionReplayStorage == nil {
		return nil, false
	}
	return o.SessionReplayStorage, true
}

// HasSessionReplayStorage returns a boolean if a field has been set.
func (o *EnvironmentStorage) HasSessionReplayStorage() bool {
	if o != nil && o.SessionReplayStorage != nil {
		return true
	}

	return false
}

// SetSessionReplayStorage gets a reference to the given SessionReplayStorage and assigns it to the SessionReplayStorage field.
func (o *EnvironmentStorage) SetSessionReplayStorage(v SessionReplayStorage) {
	o.SessionReplayStorage = &v
}

// GetSymbolFilesFromMobileApps returns the SymbolFilesFromMobileApps field value if set, zero value otherwise.
func (o *EnvironmentStorage) GetSymbolFilesFromMobileApps() SymbolFilesFromMobileApps {
	if o == nil || o.SymbolFilesFromMobileApps == nil {
		var ret SymbolFilesFromMobileApps
		return ret
	}
	return *o.SymbolFilesFromMobileApps
}

// GetSymbolFilesFromMobileAppsOk returns a tuple with the SymbolFilesFromMobileApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStorage) GetSymbolFilesFromMobileAppsOk() (*SymbolFilesFromMobileApps, bool) {
	if o == nil || o.SymbolFilesFromMobileApps == nil {
		return nil, false
	}
	return o.SymbolFilesFromMobileApps, true
}

// HasSymbolFilesFromMobileApps returns a boolean if a field has been set.
func (o *EnvironmentStorage) HasSymbolFilesFromMobileApps() bool {
	if o != nil && o.SymbolFilesFromMobileApps != nil {
		return true
	}

	return false
}

// SetSymbolFilesFromMobileApps gets a reference to the given SymbolFilesFromMobileApps and assigns it to the SymbolFilesFromMobileApps field.
func (o *EnvironmentStorage) SetSymbolFilesFromMobileApps(v SymbolFilesFromMobileApps) {
	o.SymbolFilesFromMobileApps = &v
}

// GetLogMonitoringStorage returns the LogMonitoringStorage field value if set, zero value otherwise.
func (o *EnvironmentStorage) GetLogMonitoringStorage() LogMonitoringStorage {
	if o == nil || o.LogMonitoringStorage == nil {
		var ret LogMonitoringStorage
		return ret
	}
	return *o.LogMonitoringStorage
}

// GetLogMonitoringStorageOk returns a tuple with the LogMonitoringStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStorage) GetLogMonitoringStorageOk() (*LogMonitoringStorage, bool) {
	if o == nil || o.LogMonitoringStorage == nil {
		return nil, false
	}
	return o.LogMonitoringStorage, true
}

// HasLogMonitoringStorage returns a boolean if a field has been set.
func (o *EnvironmentStorage) HasLogMonitoringStorage() bool {
	if o != nil && o.LogMonitoringStorage != nil {
		return true
	}

	return false
}

// SetLogMonitoringStorage gets a reference to the given LogMonitoringStorage and assigns it to the LogMonitoringStorage field.
func (o *EnvironmentStorage) SetLogMonitoringStorage(v LogMonitoringStorage) {
	o.LogMonitoringStorage = &v
}

// GetServiceRequestLevelRetention returns the ServiceRequestLevelRetention field value if set, zero value otherwise.
func (o *EnvironmentStorage) GetServiceRequestLevelRetention() ServiceRequestLevelRetention {
	if o == nil || o.ServiceRequestLevelRetention == nil {
		var ret ServiceRequestLevelRetention
		return ret
	}
	return *o.ServiceRequestLevelRetention
}

// GetServiceRequestLevelRetentionOk returns a tuple with the ServiceRequestLevelRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStorage) GetServiceRequestLevelRetentionOk() (*ServiceRequestLevelRetention, bool) {
	if o == nil || o.ServiceRequestLevelRetention == nil {
		return nil, false
	}
	return o.ServiceRequestLevelRetention, true
}

// HasServiceRequestLevelRetention returns a boolean if a field has been set.
func (o *EnvironmentStorage) HasServiceRequestLevelRetention() bool {
	if o != nil && o.ServiceRequestLevelRetention != nil {
		return true
	}

	return false
}

// SetServiceRequestLevelRetention gets a reference to the given ServiceRequestLevelRetention and assigns it to the ServiceRequestLevelRetention field.
func (o *EnvironmentStorage) SetServiceRequestLevelRetention(v ServiceRequestLevelRetention) {
	o.ServiceRequestLevelRetention = &v
}

// GetServiceCodeLevelRetention returns the ServiceCodeLevelRetention field value if set, zero value otherwise.
func (o *EnvironmentStorage) GetServiceCodeLevelRetention() ServiceCodeLevelRetention {
	if o == nil || o.ServiceCodeLevelRetention == nil {
		var ret ServiceCodeLevelRetention
		return ret
	}
	return *o.ServiceCodeLevelRetention
}

// GetServiceCodeLevelRetentionOk returns a tuple with the ServiceCodeLevelRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStorage) GetServiceCodeLevelRetentionOk() (*ServiceCodeLevelRetention, bool) {
	if o == nil || o.ServiceCodeLevelRetention == nil {
		return nil, false
	}
	return o.ServiceCodeLevelRetention, true
}

// HasServiceCodeLevelRetention returns a boolean if a field has been set.
func (o *EnvironmentStorage) HasServiceCodeLevelRetention() bool {
	if o != nil && o.ServiceCodeLevelRetention != nil {
		return true
	}

	return false
}

// SetServiceCodeLevelRetention gets a reference to the given ServiceCodeLevelRetention and assigns it to the ServiceCodeLevelRetention field.
func (o *EnvironmentStorage) SetServiceCodeLevelRetention(v ServiceCodeLevelRetention) {
	o.ServiceCodeLevelRetention = &v
}

// GetRealUserMonitoringRetention returns the RealUserMonitoringRetention field value if set, zero value otherwise.
func (o *EnvironmentStorage) GetRealUserMonitoringRetention() RealUserMonitoringRetention {
	if o == nil || o.RealUserMonitoringRetention == nil {
		var ret RealUserMonitoringRetention
		return ret
	}
	return *o.RealUserMonitoringRetention
}

// GetRealUserMonitoringRetentionOk returns a tuple with the RealUserMonitoringRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStorage) GetRealUserMonitoringRetentionOk() (*RealUserMonitoringRetention, bool) {
	if o == nil || o.RealUserMonitoringRetention == nil {
		return nil, false
	}
	return o.RealUserMonitoringRetention, true
}

// HasRealUserMonitoringRetention returns a boolean if a field has been set.
func (o *EnvironmentStorage) HasRealUserMonitoringRetention() bool {
	if o != nil && o.RealUserMonitoringRetention != nil {
		return true
	}

	return false
}

// SetRealUserMonitoringRetention gets a reference to the given RealUserMonitoringRetention and assigns it to the RealUserMonitoringRetention field.
func (o *EnvironmentStorage) SetRealUserMonitoringRetention(v RealUserMonitoringRetention) {
	o.RealUserMonitoringRetention = &v
}

// GetSyntheticMonitoringRetention returns the SyntheticMonitoringRetention field value if set, zero value otherwise.
func (o *EnvironmentStorage) GetSyntheticMonitoringRetention() SyntheticMonitoringRetention {
	if o == nil || o.SyntheticMonitoringRetention == nil {
		var ret SyntheticMonitoringRetention
		return ret
	}
	return *o.SyntheticMonitoringRetention
}

// GetSyntheticMonitoringRetentionOk returns a tuple with the SyntheticMonitoringRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStorage) GetSyntheticMonitoringRetentionOk() (*SyntheticMonitoringRetention, bool) {
	if o == nil || o.SyntheticMonitoringRetention == nil {
		return nil, false
	}
	return o.SyntheticMonitoringRetention, true
}

// HasSyntheticMonitoringRetention returns a boolean if a field has been set.
func (o *EnvironmentStorage) HasSyntheticMonitoringRetention() bool {
	if o != nil && o.SyntheticMonitoringRetention != nil {
		return true
	}

	return false
}

// SetSyntheticMonitoringRetention gets a reference to the given SyntheticMonitoringRetention and assigns it to the SyntheticMonitoringRetention field.
func (o *EnvironmentStorage) SetSyntheticMonitoringRetention(v SyntheticMonitoringRetention) {
	o.SyntheticMonitoringRetention = &v
}

// GetSessionReplayRetention returns the SessionReplayRetention field value if set, zero value otherwise.
func (o *EnvironmentStorage) GetSessionReplayRetention() SessionReplayRetention {
	if o == nil || o.SessionReplayRetention == nil {
		var ret SessionReplayRetention
		return ret
	}
	return *o.SessionReplayRetention
}

// GetSessionReplayRetentionOk returns a tuple with the SessionReplayRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStorage) GetSessionReplayRetentionOk() (*SessionReplayRetention, bool) {
	if o == nil || o.SessionReplayRetention == nil {
		return nil, false
	}
	return o.SessionReplayRetention, true
}

// HasSessionReplayRetention returns a boolean if a field has been set.
func (o *EnvironmentStorage) HasSessionReplayRetention() bool {
	if o != nil && o.SessionReplayRetention != nil {
		return true
	}

	return false
}

// SetSessionReplayRetention gets a reference to the given SessionReplayRetention and assigns it to the SessionReplayRetention field.
func (o *EnvironmentStorage) SetSessionReplayRetention(v SessionReplayRetention) {
	o.SessionReplayRetention = &v
}

// GetLogMonitoringRetention returns the LogMonitoringRetention field value if set, zero value otherwise.
func (o *EnvironmentStorage) GetLogMonitoringRetention() LogMonitoringRetention {
	if o == nil || o.LogMonitoringRetention == nil {
		var ret LogMonitoringRetention
		return ret
	}
	return *o.LogMonitoringRetention
}

// GetLogMonitoringRetentionOk returns a tuple with the LogMonitoringRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStorage) GetLogMonitoringRetentionOk() (*LogMonitoringRetention, bool) {
	if o == nil || o.LogMonitoringRetention == nil {
		return nil, false
	}
	return o.LogMonitoringRetention, true
}

// HasLogMonitoringRetention returns a boolean if a field has been set.
func (o *EnvironmentStorage) HasLogMonitoringRetention() bool {
	if o != nil && o.LogMonitoringRetention != nil {
		return true
	}

	return false
}

// SetLogMonitoringRetention gets a reference to the given LogMonitoringRetention and assigns it to the LogMonitoringRetention field.
func (o *EnvironmentStorage) SetLogMonitoringRetention(v LogMonitoringRetention) {
	o.LogMonitoringRetention = &v
}

// GetUserActionsPerMinute returns the UserActionsPerMinute field value if set, zero value otherwise.
func (o *EnvironmentStorage) GetUserActionsPerMinute() UserActionsPerMinute {
	if o == nil || o.UserActionsPerMinute == nil {
		var ret UserActionsPerMinute
		return ret
	}
	return *o.UserActionsPerMinute
}

// GetUserActionsPerMinuteOk returns a tuple with the UserActionsPerMinute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStorage) GetUserActionsPerMinuteOk() (*UserActionsPerMinute, bool) {
	if o == nil || o.UserActionsPerMinute == nil {
		return nil, false
	}
	return o.UserActionsPerMinute, true
}

// HasUserActionsPerMinute returns a boolean if a field has been set.
func (o *EnvironmentStorage) HasUserActionsPerMinute() bool {
	if o != nil && o.UserActionsPerMinute != nil {
		return true
	}

	return false
}

// SetUserActionsPerMinute gets a reference to the given UserActionsPerMinute and assigns it to the UserActionsPerMinute field.
func (o *EnvironmentStorage) SetUserActionsPerMinute(v UserActionsPerMinute) {
	o.UserActionsPerMinute = &v
}

// GetTransactionTrafficQuota returns the TransactionTrafficQuota field value if set, zero value otherwise.
func (o *EnvironmentStorage) GetTransactionTrafficQuota() TransactionTrafficQuota {
	if o == nil || o.TransactionTrafficQuota == nil {
		var ret TransactionTrafficQuota
		return ret
	}
	return *o.TransactionTrafficQuota
}

// GetTransactionTrafficQuotaOk returns a tuple with the TransactionTrafficQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentStorage) GetTransactionTrafficQuotaOk() (*TransactionTrafficQuota, bool) {
	if o == nil || o.TransactionTrafficQuota == nil {
		return nil, false
	}
	return o.TransactionTrafficQuota, true
}

// HasTransactionTrafficQuota returns a boolean if a field has been set.
func (o *EnvironmentStorage) HasTransactionTrafficQuota() bool {
	if o != nil && o.TransactionTrafficQuota != nil {
		return true
	}

	return false
}

// SetTransactionTrafficQuota gets a reference to the given TransactionTrafficQuota and assigns it to the TransactionTrafficQuota field.
func (o *EnvironmentStorage) SetTransactionTrafficQuota(v TransactionTrafficQuota) {
	o.TransactionTrafficQuota = &v
}

func (o EnvironmentStorage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TransactionStorage != nil {
		toSerialize["transactionStorage"] = o.TransactionStorage
	}
	if o.SessionReplayStorage != nil {
		toSerialize["sessionReplayStorage"] = o.SessionReplayStorage
	}
	if o.SymbolFilesFromMobileApps != nil {
		toSerialize["symbolFilesFromMobileApps"] = o.SymbolFilesFromMobileApps
	}
	if o.LogMonitoringStorage != nil {
		toSerialize["logMonitoringStorage"] = o.LogMonitoringStorage
	}
	if o.ServiceRequestLevelRetention != nil {
		toSerialize["serviceRequestLevelRetention"] = o.ServiceRequestLevelRetention
	}
	if o.ServiceCodeLevelRetention != nil {
		toSerialize["serviceCodeLevelRetention"] = o.ServiceCodeLevelRetention
	}
	if o.RealUserMonitoringRetention != nil {
		toSerialize["realUserMonitoringRetention"] = o.RealUserMonitoringRetention
	}
	if o.SyntheticMonitoringRetention != nil {
		toSerialize["syntheticMonitoringRetention"] = o.SyntheticMonitoringRetention
	}
	if o.SessionReplayRetention != nil {
		toSerialize["sessionReplayRetention"] = o.SessionReplayRetention
	}
	if o.LogMonitoringRetention != nil {
		toSerialize["logMonitoringRetention"] = o.LogMonitoringRetention
	}
	if o.UserActionsPerMinute != nil {
		toSerialize["userActionsPerMinute"] = o.UserActionsPerMinute
	}
	if o.TransactionTrafficQuota != nil {
		toSerialize["transactionTrafficQuota"] = o.TransactionTrafficQuota
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentStorage struct {
	value *EnvironmentStorage
	isSet bool
}

func (v NullableEnvironmentStorage) Get() *EnvironmentStorage {
	return v.value
}

func (v *NullableEnvironmentStorage) Set(val *EnvironmentStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentStorage(val *EnvironmentStorage) *NullableEnvironmentStorage {
	return &NullableEnvironmentStorage{value: val, isSet: true}
}

func (v NullableEnvironmentStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


