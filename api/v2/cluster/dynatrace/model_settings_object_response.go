/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SettingsObjectResponse The response to a successful creation or update request.
type SettingsObjectResponse struct {
	// The ID of the settings object.
	ObjectId *string `json:"objectId,omitempty"`
	// The HTTP status code for the object.
	Code *int32 `json:"code,omitempty"`
}

// NewSettingsObjectResponse instantiates a new SettingsObjectResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsObjectResponse() *SettingsObjectResponse {
	this := SettingsObjectResponse{}
	return &this
}

// NewSettingsObjectResponseWithDefaults instantiates a new SettingsObjectResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsObjectResponseWithDefaults() *SettingsObjectResponse {
	this := SettingsObjectResponse{}
	return &this
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *SettingsObjectResponse) GetObjectId() string {
	if o == nil || o.ObjectId == nil {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObjectResponse) GetObjectIdOk() (*string, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *SettingsObjectResponse) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *SettingsObjectResponse) SetObjectId(v string) {
	o.ObjectId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SettingsObjectResponse) GetCode() int32 {
	if o == nil || o.Code == nil {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObjectResponse) GetCodeOk() (*int32, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SettingsObjectResponse) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *SettingsObjectResponse) SetCode(v int32) {
	o.Code = &v
}

func (o SettingsObjectResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectId != nil {
		toSerialize["objectId"] = o.ObjectId
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	return json.Marshal(toSerialize)
}

type NullableSettingsObjectResponse struct {
	value *SettingsObjectResponse
	isSet bool
}

func (v NullableSettingsObjectResponse) Get() *SettingsObjectResponse {
	return v.value
}

func (v *NullableSettingsObjectResponse) Set(val *SettingsObjectResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsObjectResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsObjectResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsObjectResponse(val *SettingsObjectResponse) *NullableSettingsObjectResponse {
	return &NullableSettingsObjectResponse{value: val, isSet: true}
}

func (v NullableSettingsObjectResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsObjectResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


