/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// RealUserMonitoringRetention Real user monitoring retention settings on environment level. Can be set to any value from 1 to 35 days. If skipped when editing via PUT method then already set limit will remain.
type RealUserMonitoringRetention struct {
	// Maximum retention limit [days]
	MaxLimitInDays *int64 `json:"maxLimitInDays,omitempty"`
	// Current data age [milliseconds]
	CurrentlyUsedInMillis *int64 `json:"currentlyUsedInMillis,omitempty"`
	// Current data age [days]
	CurrentlyUsedInDays *int64 `json:"currentlyUsedInDays,omitempty"`
}

// NewRealUserMonitoringRetention instantiates a new RealUserMonitoringRetention object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealUserMonitoringRetention() *RealUserMonitoringRetention {
	this := RealUserMonitoringRetention{}
	return &this
}

// NewRealUserMonitoringRetentionWithDefaults instantiates a new RealUserMonitoringRetention object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealUserMonitoringRetentionWithDefaults() *RealUserMonitoringRetention {
	this := RealUserMonitoringRetention{}
	return &this
}

// GetMaxLimitInDays returns the MaxLimitInDays field value if set, zero value otherwise.
func (o *RealUserMonitoringRetention) GetMaxLimitInDays() int64 {
	if o == nil || o.MaxLimitInDays == nil {
		var ret int64
		return ret
	}
	return *o.MaxLimitInDays
}

// GetMaxLimitInDaysOk returns a tuple with the MaxLimitInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserMonitoringRetention) GetMaxLimitInDaysOk() (*int64, bool) {
	if o == nil || o.MaxLimitInDays == nil {
		return nil, false
	}
	return o.MaxLimitInDays, true
}

// HasMaxLimitInDays returns a boolean if a field has been set.
func (o *RealUserMonitoringRetention) HasMaxLimitInDays() bool {
	if o != nil && o.MaxLimitInDays != nil {
		return true
	}

	return false
}

// SetMaxLimitInDays gets a reference to the given int64 and assigns it to the MaxLimitInDays field.
func (o *RealUserMonitoringRetention) SetMaxLimitInDays(v int64) {
	o.MaxLimitInDays = &v
}

// GetCurrentlyUsedInMillis returns the CurrentlyUsedInMillis field value if set, zero value otherwise.
func (o *RealUserMonitoringRetention) GetCurrentlyUsedInMillis() int64 {
	if o == nil || o.CurrentlyUsedInMillis == nil {
		var ret int64
		return ret
	}
	return *o.CurrentlyUsedInMillis
}

// GetCurrentlyUsedInMillisOk returns a tuple with the CurrentlyUsedInMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserMonitoringRetention) GetCurrentlyUsedInMillisOk() (*int64, bool) {
	if o == nil || o.CurrentlyUsedInMillis == nil {
		return nil, false
	}
	return o.CurrentlyUsedInMillis, true
}

// HasCurrentlyUsedInMillis returns a boolean if a field has been set.
func (o *RealUserMonitoringRetention) HasCurrentlyUsedInMillis() bool {
	if o != nil && o.CurrentlyUsedInMillis != nil {
		return true
	}

	return false
}

// SetCurrentlyUsedInMillis gets a reference to the given int64 and assigns it to the CurrentlyUsedInMillis field.
func (o *RealUserMonitoringRetention) SetCurrentlyUsedInMillis(v int64) {
	o.CurrentlyUsedInMillis = &v
}

// GetCurrentlyUsedInDays returns the CurrentlyUsedInDays field value if set, zero value otherwise.
func (o *RealUserMonitoringRetention) GetCurrentlyUsedInDays() int64 {
	if o == nil || o.CurrentlyUsedInDays == nil {
		var ret int64
		return ret
	}
	return *o.CurrentlyUsedInDays
}

// GetCurrentlyUsedInDaysOk returns a tuple with the CurrentlyUsedInDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealUserMonitoringRetention) GetCurrentlyUsedInDaysOk() (*int64, bool) {
	if o == nil || o.CurrentlyUsedInDays == nil {
		return nil, false
	}
	return o.CurrentlyUsedInDays, true
}

// HasCurrentlyUsedInDays returns a boolean if a field has been set.
func (o *RealUserMonitoringRetention) HasCurrentlyUsedInDays() bool {
	if o != nil && o.CurrentlyUsedInDays != nil {
		return true
	}

	return false
}

// SetCurrentlyUsedInDays gets a reference to the given int64 and assigns it to the CurrentlyUsedInDays field.
func (o *RealUserMonitoringRetention) SetCurrentlyUsedInDays(v int64) {
	o.CurrentlyUsedInDays = &v
}

func (o RealUserMonitoringRetention) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxLimitInDays != nil {
		toSerialize["maxLimitInDays"] = o.MaxLimitInDays
	}
	if o.CurrentlyUsedInMillis != nil {
		toSerialize["currentlyUsedInMillis"] = o.CurrentlyUsedInMillis
	}
	if o.CurrentlyUsedInDays != nil {
		toSerialize["currentlyUsedInDays"] = o.CurrentlyUsedInDays
	}
	return json.Marshal(toSerialize)
}

type NullableRealUserMonitoringRetention struct {
	value *RealUserMonitoringRetention
	isSet bool
}

func (v NullableRealUserMonitoringRetention) Get() *RealUserMonitoringRetention {
	return v.value
}

func (v *NullableRealUserMonitoringRetention) Set(val *RealUserMonitoringRetention) {
	v.value = val
	v.isSet = true
}

func (v NullableRealUserMonitoringRetention) IsSet() bool {
	return v.isSet
}

func (v *NullableRealUserMonitoringRetention) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealUserMonitoringRetention(val *RealUserMonitoringRetention) *NullableRealUserMonitoringRetention {
	return &NullableRealUserMonitoringRetention{value: val, isSet: true}
}

func (v NullableRealUserMonitoringRetention) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealUserMonitoringRetention) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


