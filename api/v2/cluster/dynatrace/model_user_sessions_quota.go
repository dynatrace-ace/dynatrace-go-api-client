/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UserSessionsQuota User sessions consumption and quota information on environment level. If skipped when editing via PUT method then already set quotas will remain.
type UserSessionsQuota struct {
	// Monthly Mobile user sessions environment consumption. Resets each calendar month.
	ConsumedMobileSessionsThisMonth *float64 `json:"consumedMobileSessionsThisMonth,omitempty"`
	// Yearly total User sessions environment consumption. Resets each year on license creation date anniversary.
	TotalConsumedThisYear *float64 `json:"totalConsumedThisYear,omitempty"`
	// Yearly Web user sessions with replay environment consumption. Resets each year on license creation date anniversary.
	ConsumedUserSessionsWithWebSessionReplayThisYear *float64 `json:"consumedUserSessionsWithWebSessionReplayThisYear,omitempty"`
	// Monthly total User sessions environment quota. Not set if unlimited. When updating via PUT method, skipping this field will set quota unlimited.
	TotalMonthlyLimit *int64 `json:"totalMonthlyLimit,omitempty"`
	// Annual total User sessions environment quota. Not set if unlimited. When updating via PUT method, skipping this field will set quota unlimited.
	TotalAnnualLimit *int64 `json:"totalAnnualLimit,omitempty"`
	// Monthly total User sessions environment consumption. Resets each calendar month.
	TotalConsumedThisMonth *float64 `json:"totalConsumedThisMonth,omitempty"`
	// Monthly Web user sessions with replay environment consumption. Resets each calendar month.
	ConsumedUserSessionsWithWebSessionReplayThisMonth *float64 `json:"consumedUserSessionsWithWebSessionReplayThisMonth,omitempty"`
	// Yearly Mobile user sessions environment consumption. Resets each year on license creation date anniversary.
	ConsumedMobileSessionsThisYear *float64 `json:"consumedMobileSessionsThisYear,omitempty"`
	// Monthly Mobile user sessions with replay environment consumption. Resets each calendar month.
	ConsumedUserSessionsWithMobileSessionReplayThisMonth *float64 `json:"consumedUserSessionsWithMobileSessionReplayThisMonth,omitempty"`
	// Yearly Mobile user sessions with replay environment consumption. Resets each year on license creation date anniversary.
	ConsumedUserSessionsWithMobileSessionReplayThisYear *float64 `json:"consumedUserSessionsWithMobileSessionReplayThisYear,omitempty"`
}

// NewUserSessionsQuota instantiates a new UserSessionsQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSessionsQuota() *UserSessionsQuota {
	this := UserSessionsQuota{}
	return &this
}

// NewUserSessionsQuotaWithDefaults instantiates a new UserSessionsQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSessionsQuotaWithDefaults() *UserSessionsQuota {
	this := UserSessionsQuota{}
	return &this
}

// GetConsumedMobileSessionsThisMonth returns the ConsumedMobileSessionsThisMonth field value if set, zero value otherwise.
func (o *UserSessionsQuota) GetConsumedMobileSessionsThisMonth() float64 {
	if o == nil || o.ConsumedMobileSessionsThisMonth == nil {
		var ret float64
		return ret
	}
	return *o.ConsumedMobileSessionsThisMonth
}

// GetConsumedMobileSessionsThisMonthOk returns a tuple with the ConsumedMobileSessionsThisMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionsQuota) GetConsumedMobileSessionsThisMonthOk() (*float64, bool) {
	if o == nil || o.ConsumedMobileSessionsThisMonth == nil {
		return nil, false
	}
	return o.ConsumedMobileSessionsThisMonth, true
}

// HasConsumedMobileSessionsThisMonth returns a boolean if a field has been set.
func (o *UserSessionsQuota) HasConsumedMobileSessionsThisMonth() bool {
	if o != nil && o.ConsumedMobileSessionsThisMonth != nil {
		return true
	}

	return false
}

// SetConsumedMobileSessionsThisMonth gets a reference to the given float64 and assigns it to the ConsumedMobileSessionsThisMonth field.
func (o *UserSessionsQuota) SetConsumedMobileSessionsThisMonth(v float64) {
	o.ConsumedMobileSessionsThisMonth = &v
}

// GetTotalConsumedThisYear returns the TotalConsumedThisYear field value if set, zero value otherwise.
func (o *UserSessionsQuota) GetTotalConsumedThisYear() float64 {
	if o == nil || o.TotalConsumedThisYear == nil {
		var ret float64
		return ret
	}
	return *o.TotalConsumedThisYear
}

// GetTotalConsumedThisYearOk returns a tuple with the TotalConsumedThisYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionsQuota) GetTotalConsumedThisYearOk() (*float64, bool) {
	if o == nil || o.TotalConsumedThisYear == nil {
		return nil, false
	}
	return o.TotalConsumedThisYear, true
}

// HasTotalConsumedThisYear returns a boolean if a field has been set.
func (o *UserSessionsQuota) HasTotalConsumedThisYear() bool {
	if o != nil && o.TotalConsumedThisYear != nil {
		return true
	}

	return false
}

// SetTotalConsumedThisYear gets a reference to the given float64 and assigns it to the TotalConsumedThisYear field.
func (o *UserSessionsQuota) SetTotalConsumedThisYear(v float64) {
	o.TotalConsumedThisYear = &v
}

// GetConsumedUserSessionsWithWebSessionReplayThisYear returns the ConsumedUserSessionsWithWebSessionReplayThisYear field value if set, zero value otherwise.
func (o *UserSessionsQuota) GetConsumedUserSessionsWithWebSessionReplayThisYear() float64 {
	if o == nil || o.ConsumedUserSessionsWithWebSessionReplayThisYear == nil {
		var ret float64
		return ret
	}
	return *o.ConsumedUserSessionsWithWebSessionReplayThisYear
}

// GetConsumedUserSessionsWithWebSessionReplayThisYearOk returns a tuple with the ConsumedUserSessionsWithWebSessionReplayThisYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionsQuota) GetConsumedUserSessionsWithWebSessionReplayThisYearOk() (*float64, bool) {
	if o == nil || o.ConsumedUserSessionsWithWebSessionReplayThisYear == nil {
		return nil, false
	}
	return o.ConsumedUserSessionsWithWebSessionReplayThisYear, true
}

// HasConsumedUserSessionsWithWebSessionReplayThisYear returns a boolean if a field has been set.
func (o *UserSessionsQuota) HasConsumedUserSessionsWithWebSessionReplayThisYear() bool {
	if o != nil && o.ConsumedUserSessionsWithWebSessionReplayThisYear != nil {
		return true
	}

	return false
}

// SetConsumedUserSessionsWithWebSessionReplayThisYear gets a reference to the given float64 and assigns it to the ConsumedUserSessionsWithWebSessionReplayThisYear field.
func (o *UserSessionsQuota) SetConsumedUserSessionsWithWebSessionReplayThisYear(v float64) {
	o.ConsumedUserSessionsWithWebSessionReplayThisYear = &v
}

// GetTotalMonthlyLimit returns the TotalMonthlyLimit field value if set, zero value otherwise.
func (o *UserSessionsQuota) GetTotalMonthlyLimit() int64 {
	if o == nil || o.TotalMonthlyLimit == nil {
		var ret int64
		return ret
	}
	return *o.TotalMonthlyLimit
}

// GetTotalMonthlyLimitOk returns a tuple with the TotalMonthlyLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionsQuota) GetTotalMonthlyLimitOk() (*int64, bool) {
	if o == nil || o.TotalMonthlyLimit == nil {
		return nil, false
	}
	return o.TotalMonthlyLimit, true
}

// HasTotalMonthlyLimit returns a boolean if a field has been set.
func (o *UserSessionsQuota) HasTotalMonthlyLimit() bool {
	if o != nil && o.TotalMonthlyLimit != nil {
		return true
	}

	return false
}

// SetTotalMonthlyLimit gets a reference to the given int64 and assigns it to the TotalMonthlyLimit field.
func (o *UserSessionsQuota) SetTotalMonthlyLimit(v int64) {
	o.TotalMonthlyLimit = &v
}

// GetTotalAnnualLimit returns the TotalAnnualLimit field value if set, zero value otherwise.
func (o *UserSessionsQuota) GetTotalAnnualLimit() int64 {
	if o == nil || o.TotalAnnualLimit == nil {
		var ret int64
		return ret
	}
	return *o.TotalAnnualLimit
}

// GetTotalAnnualLimitOk returns a tuple with the TotalAnnualLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionsQuota) GetTotalAnnualLimitOk() (*int64, bool) {
	if o == nil || o.TotalAnnualLimit == nil {
		return nil, false
	}
	return o.TotalAnnualLimit, true
}

// HasTotalAnnualLimit returns a boolean if a field has been set.
func (o *UserSessionsQuota) HasTotalAnnualLimit() bool {
	if o != nil && o.TotalAnnualLimit != nil {
		return true
	}

	return false
}

// SetTotalAnnualLimit gets a reference to the given int64 and assigns it to the TotalAnnualLimit field.
func (o *UserSessionsQuota) SetTotalAnnualLimit(v int64) {
	o.TotalAnnualLimit = &v
}

// GetTotalConsumedThisMonth returns the TotalConsumedThisMonth field value if set, zero value otherwise.
func (o *UserSessionsQuota) GetTotalConsumedThisMonth() float64 {
	if o == nil || o.TotalConsumedThisMonth == nil {
		var ret float64
		return ret
	}
	return *o.TotalConsumedThisMonth
}

// GetTotalConsumedThisMonthOk returns a tuple with the TotalConsumedThisMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionsQuota) GetTotalConsumedThisMonthOk() (*float64, bool) {
	if o == nil || o.TotalConsumedThisMonth == nil {
		return nil, false
	}
	return o.TotalConsumedThisMonth, true
}

// HasTotalConsumedThisMonth returns a boolean if a field has been set.
func (o *UserSessionsQuota) HasTotalConsumedThisMonth() bool {
	if o != nil && o.TotalConsumedThisMonth != nil {
		return true
	}

	return false
}

// SetTotalConsumedThisMonth gets a reference to the given float64 and assigns it to the TotalConsumedThisMonth field.
func (o *UserSessionsQuota) SetTotalConsumedThisMonth(v float64) {
	o.TotalConsumedThisMonth = &v
}

// GetConsumedUserSessionsWithWebSessionReplayThisMonth returns the ConsumedUserSessionsWithWebSessionReplayThisMonth field value if set, zero value otherwise.
func (o *UserSessionsQuota) GetConsumedUserSessionsWithWebSessionReplayThisMonth() float64 {
	if o == nil || o.ConsumedUserSessionsWithWebSessionReplayThisMonth == nil {
		var ret float64
		return ret
	}
	return *o.ConsumedUserSessionsWithWebSessionReplayThisMonth
}

// GetConsumedUserSessionsWithWebSessionReplayThisMonthOk returns a tuple with the ConsumedUserSessionsWithWebSessionReplayThisMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionsQuota) GetConsumedUserSessionsWithWebSessionReplayThisMonthOk() (*float64, bool) {
	if o == nil || o.ConsumedUserSessionsWithWebSessionReplayThisMonth == nil {
		return nil, false
	}
	return o.ConsumedUserSessionsWithWebSessionReplayThisMonth, true
}

// HasConsumedUserSessionsWithWebSessionReplayThisMonth returns a boolean if a field has been set.
func (o *UserSessionsQuota) HasConsumedUserSessionsWithWebSessionReplayThisMonth() bool {
	if o != nil && o.ConsumedUserSessionsWithWebSessionReplayThisMonth != nil {
		return true
	}

	return false
}

// SetConsumedUserSessionsWithWebSessionReplayThisMonth gets a reference to the given float64 and assigns it to the ConsumedUserSessionsWithWebSessionReplayThisMonth field.
func (o *UserSessionsQuota) SetConsumedUserSessionsWithWebSessionReplayThisMonth(v float64) {
	o.ConsumedUserSessionsWithWebSessionReplayThisMonth = &v
}

// GetConsumedMobileSessionsThisYear returns the ConsumedMobileSessionsThisYear field value if set, zero value otherwise.
func (o *UserSessionsQuota) GetConsumedMobileSessionsThisYear() float64 {
	if o == nil || o.ConsumedMobileSessionsThisYear == nil {
		var ret float64
		return ret
	}
	return *o.ConsumedMobileSessionsThisYear
}

// GetConsumedMobileSessionsThisYearOk returns a tuple with the ConsumedMobileSessionsThisYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionsQuota) GetConsumedMobileSessionsThisYearOk() (*float64, bool) {
	if o == nil || o.ConsumedMobileSessionsThisYear == nil {
		return nil, false
	}
	return o.ConsumedMobileSessionsThisYear, true
}

// HasConsumedMobileSessionsThisYear returns a boolean if a field has been set.
func (o *UserSessionsQuota) HasConsumedMobileSessionsThisYear() bool {
	if o != nil && o.ConsumedMobileSessionsThisYear != nil {
		return true
	}

	return false
}

// SetConsumedMobileSessionsThisYear gets a reference to the given float64 and assigns it to the ConsumedMobileSessionsThisYear field.
func (o *UserSessionsQuota) SetConsumedMobileSessionsThisYear(v float64) {
	o.ConsumedMobileSessionsThisYear = &v
}

// GetConsumedUserSessionsWithMobileSessionReplayThisMonth returns the ConsumedUserSessionsWithMobileSessionReplayThisMonth field value if set, zero value otherwise.
func (o *UserSessionsQuota) GetConsumedUserSessionsWithMobileSessionReplayThisMonth() float64 {
	if o == nil || o.ConsumedUserSessionsWithMobileSessionReplayThisMonth == nil {
		var ret float64
		return ret
	}
	return *o.ConsumedUserSessionsWithMobileSessionReplayThisMonth
}

// GetConsumedUserSessionsWithMobileSessionReplayThisMonthOk returns a tuple with the ConsumedUserSessionsWithMobileSessionReplayThisMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionsQuota) GetConsumedUserSessionsWithMobileSessionReplayThisMonthOk() (*float64, bool) {
	if o == nil || o.ConsumedUserSessionsWithMobileSessionReplayThisMonth == nil {
		return nil, false
	}
	return o.ConsumedUserSessionsWithMobileSessionReplayThisMonth, true
}

// HasConsumedUserSessionsWithMobileSessionReplayThisMonth returns a boolean if a field has been set.
func (o *UserSessionsQuota) HasConsumedUserSessionsWithMobileSessionReplayThisMonth() bool {
	if o != nil && o.ConsumedUserSessionsWithMobileSessionReplayThisMonth != nil {
		return true
	}

	return false
}

// SetConsumedUserSessionsWithMobileSessionReplayThisMonth gets a reference to the given float64 and assigns it to the ConsumedUserSessionsWithMobileSessionReplayThisMonth field.
func (o *UserSessionsQuota) SetConsumedUserSessionsWithMobileSessionReplayThisMonth(v float64) {
	o.ConsumedUserSessionsWithMobileSessionReplayThisMonth = &v
}

// GetConsumedUserSessionsWithMobileSessionReplayThisYear returns the ConsumedUserSessionsWithMobileSessionReplayThisYear field value if set, zero value otherwise.
func (o *UserSessionsQuota) GetConsumedUserSessionsWithMobileSessionReplayThisYear() float64 {
	if o == nil || o.ConsumedUserSessionsWithMobileSessionReplayThisYear == nil {
		var ret float64
		return ret
	}
	return *o.ConsumedUserSessionsWithMobileSessionReplayThisYear
}

// GetConsumedUserSessionsWithMobileSessionReplayThisYearOk returns a tuple with the ConsumedUserSessionsWithMobileSessionReplayThisYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionsQuota) GetConsumedUserSessionsWithMobileSessionReplayThisYearOk() (*float64, bool) {
	if o == nil || o.ConsumedUserSessionsWithMobileSessionReplayThisYear == nil {
		return nil, false
	}
	return o.ConsumedUserSessionsWithMobileSessionReplayThisYear, true
}

// HasConsumedUserSessionsWithMobileSessionReplayThisYear returns a boolean if a field has been set.
func (o *UserSessionsQuota) HasConsumedUserSessionsWithMobileSessionReplayThisYear() bool {
	if o != nil && o.ConsumedUserSessionsWithMobileSessionReplayThisYear != nil {
		return true
	}

	return false
}

// SetConsumedUserSessionsWithMobileSessionReplayThisYear gets a reference to the given float64 and assigns it to the ConsumedUserSessionsWithMobileSessionReplayThisYear field.
func (o *UserSessionsQuota) SetConsumedUserSessionsWithMobileSessionReplayThisYear(v float64) {
	o.ConsumedUserSessionsWithMobileSessionReplayThisYear = &v
}

func (o UserSessionsQuota) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConsumedMobileSessionsThisMonth != nil {
		toSerialize["consumedMobileSessionsThisMonth"] = o.ConsumedMobileSessionsThisMonth
	}
	if o.TotalConsumedThisYear != nil {
		toSerialize["totalConsumedThisYear"] = o.TotalConsumedThisYear
	}
	if o.ConsumedUserSessionsWithWebSessionReplayThisYear != nil {
		toSerialize["consumedUserSessionsWithWebSessionReplayThisYear"] = o.ConsumedUserSessionsWithWebSessionReplayThisYear
	}
	if o.TotalMonthlyLimit != nil {
		toSerialize["totalMonthlyLimit"] = o.TotalMonthlyLimit
	}
	if o.TotalAnnualLimit != nil {
		toSerialize["totalAnnualLimit"] = o.TotalAnnualLimit
	}
	if o.TotalConsumedThisMonth != nil {
		toSerialize["totalConsumedThisMonth"] = o.TotalConsumedThisMonth
	}
	if o.ConsumedUserSessionsWithWebSessionReplayThisMonth != nil {
		toSerialize["consumedUserSessionsWithWebSessionReplayThisMonth"] = o.ConsumedUserSessionsWithWebSessionReplayThisMonth
	}
	if o.ConsumedMobileSessionsThisYear != nil {
		toSerialize["consumedMobileSessionsThisYear"] = o.ConsumedMobileSessionsThisYear
	}
	if o.ConsumedUserSessionsWithMobileSessionReplayThisMonth != nil {
		toSerialize["consumedUserSessionsWithMobileSessionReplayThisMonth"] = o.ConsumedUserSessionsWithMobileSessionReplayThisMonth
	}
	if o.ConsumedUserSessionsWithMobileSessionReplayThisYear != nil {
		toSerialize["consumedUserSessionsWithMobileSessionReplayThisYear"] = o.ConsumedUserSessionsWithMobileSessionReplayThisYear
	}
	return json.Marshal(toSerialize)
}

type NullableUserSessionsQuota struct {
	value *UserSessionsQuota
	isSet bool
}

func (v NullableUserSessionsQuota) Get() *UserSessionsQuota {
	return v.value
}

func (v *NullableUserSessionsQuota) Set(val *UserSessionsQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSessionsQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSessionsQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSessionsQuota(val *UserSessionsQuota) *NullableUserSessionsQuota {
	return &NullableUserSessionsQuota{value: val, isSet: true}
}

func (v NullableUserSessionsQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSessionsQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


