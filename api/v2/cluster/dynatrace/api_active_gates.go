/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// ActiveGatesApiService ActiveGatesApi service
type ActiveGatesApiService service

type ApiGetAllActiveGatesRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesApiService
	hostname *string
	osType *string
	networkAddress *string
	loadBalancerAddress *string
	type_ *string
	networkZone *string
	updateStatus *string
	versionCompareType *string
	version *string
	autoUpdate *string
	group *string
	online *bool
	enabledModule *[]string
	disabledModule *[]string
	containerized *bool
}

func (r ApiGetAllActiveGatesRequest) Hostname(hostname string) ApiGetAllActiveGatesRequest {
	r.hostname = &hostname
	return r
}
func (r ApiGetAllActiveGatesRequest) OsType(osType string) ApiGetAllActiveGatesRequest {
	r.osType = &osType
	return r
}
func (r ApiGetAllActiveGatesRequest) NetworkAddress(networkAddress string) ApiGetAllActiveGatesRequest {
	r.networkAddress = &networkAddress
	return r
}
func (r ApiGetAllActiveGatesRequest) LoadBalancerAddress(loadBalancerAddress string) ApiGetAllActiveGatesRequest {
	r.loadBalancerAddress = &loadBalancerAddress
	return r
}
func (r ApiGetAllActiveGatesRequest) Type_(type_ string) ApiGetAllActiveGatesRequest {
	r.type_ = &type_
	return r
}
func (r ApiGetAllActiveGatesRequest) NetworkZone(networkZone string) ApiGetAllActiveGatesRequest {
	r.networkZone = &networkZone
	return r
}
func (r ApiGetAllActiveGatesRequest) UpdateStatus(updateStatus string) ApiGetAllActiveGatesRequest {
	r.updateStatus = &updateStatus
	return r
}
func (r ApiGetAllActiveGatesRequest) VersionCompareType(versionCompareType string) ApiGetAllActiveGatesRequest {
	r.versionCompareType = &versionCompareType
	return r
}
func (r ApiGetAllActiveGatesRequest) Version(version string) ApiGetAllActiveGatesRequest {
	r.version = &version
	return r
}
func (r ApiGetAllActiveGatesRequest) AutoUpdate(autoUpdate string) ApiGetAllActiveGatesRequest {
	r.autoUpdate = &autoUpdate
	return r
}
func (r ApiGetAllActiveGatesRequest) Group(group string) ApiGetAllActiveGatesRequest {
	r.group = &group
	return r
}
func (r ApiGetAllActiveGatesRequest) Online(online bool) ApiGetAllActiveGatesRequest {
	r.online = &online
	return r
}
func (r ApiGetAllActiveGatesRequest) EnabledModule(enabledModule []string) ApiGetAllActiveGatesRequest {
	r.enabledModule = &enabledModule
	return r
}
func (r ApiGetAllActiveGatesRequest) DisabledModule(disabledModule []string) ApiGetAllActiveGatesRequest {
	r.disabledModule = &disabledModule
	return r
}
func (r ApiGetAllActiveGatesRequest) Containerized(containerized bool) ApiGetAllActiveGatesRequest {
	r.containerized = &containerized
	return r
}

func (r ApiGetAllActiveGatesRequest) Execute() (ActiveGateList, *_nethttp.Response, error) {
	return r.ApiService.GetAllActiveGatesExecute(r)
}

/*
 * GetAllActiveGates Lists all available ActiveGates
 * The response includes all ActiveGates that are currently connected to the environment or have been connected during last 2 hours.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetAllActiveGatesRequest
 */
func (a *ActiveGatesApiService) GetAllActiveGates(ctx _context.Context) ApiGetAllActiveGatesRequest {
	return ApiGetAllActiveGatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ActiveGateList
 */
func (a *ActiveGatesApiService) GetAllActiveGatesExecute(r ApiGetAllActiveGatesRequest) (ActiveGateList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ActiveGateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesApiService.GetAllActiveGates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.hostname != nil {
		localVarQueryParams.Add("hostname", parameterToString(*r.hostname, ""))
	}
	if r.osType != nil {
		localVarQueryParams.Add("osType", parameterToString(*r.osType, ""))
	}
	if r.networkAddress != nil {
		localVarQueryParams.Add("networkAddress", parameterToString(*r.networkAddress, ""))
	}
	if r.loadBalancerAddress != nil {
		localVarQueryParams.Add("loadBalancerAddress", parameterToString(*r.loadBalancerAddress, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.networkZone != nil {
		localVarQueryParams.Add("networkZone", parameterToString(*r.networkZone, ""))
	}
	if r.updateStatus != nil {
		localVarQueryParams.Add("updateStatus", parameterToString(*r.updateStatus, ""))
	}
	if r.versionCompareType != nil {
		localVarQueryParams.Add("versionCompareType", parameterToString(*r.versionCompareType, ""))
	}
	if r.version != nil {
		localVarQueryParams.Add("version", parameterToString(*r.version, ""))
	}
	if r.autoUpdate != nil {
		localVarQueryParams.Add("autoUpdate", parameterToString(*r.autoUpdate, ""))
	}
	if r.group != nil {
		localVarQueryParams.Add("group", parameterToString(*r.group, ""))
	}
	if r.online != nil {
		localVarQueryParams.Add("online", parameterToString(*r.online, ""))
	}
	if r.enabledModule != nil {
		t := *r.enabledModule
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("enabledModule", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("enabledModule", parameterToString(t, "multi"))
		}
	}
	if r.disabledModule != nil {
		t := *r.disabledModule
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("disabledModule", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("disabledModule", parameterToString(t, "multi"))
		}
	}
	if r.containerized != nil {
		localVarQueryParams.Add("containerized", parameterToString(*r.containerized, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOneActiveGateByIdRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesApiService
	agId string
}


func (r ApiGetOneActiveGateByIdRequest) Execute() (ActiveGate, *_nethttp.Response, error) {
	return r.ApiService.GetOneActiveGateByIdExecute(r)
}

/*
 * GetOneActiveGateById Gets the details of the specified ActiveGate
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agId The ID of the required ActiveGate.
 * @return ApiGetOneActiveGateByIdRequest
 */
func (a *ActiveGatesApiService) GetOneActiveGateById(ctx _context.Context, agId string) ApiGetOneActiveGateByIdRequest {
	return ApiGetOneActiveGateByIdRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

/*
 * Execute executes the request
 * @return ActiveGate
 */
func (a *ActiveGatesApiService) GetOneActiveGateByIdExecute(r ApiGetOneActiveGateByIdRequest) (ActiveGate, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ActiveGate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesApiService.GetOneActiveGateById")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", _neturl.PathEscape(parameterToString(r.agId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
