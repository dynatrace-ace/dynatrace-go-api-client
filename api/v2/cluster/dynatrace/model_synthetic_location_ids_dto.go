/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SyntheticLocationIdsDto A DTO for synthetic Location IDs.
type SyntheticLocationIdsDto struct {
	// Entity ID to be transferred
	EntityId string `json:"entityId"`
	// GeoLocation ID to be transferred
	GeoLocationId string `json:"geoLocationId"`
}

// NewSyntheticLocationIdsDto instantiates a new SyntheticLocationIdsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticLocationIdsDto(entityId string, geoLocationId string) *SyntheticLocationIdsDto {
	this := SyntheticLocationIdsDto{}
	this.EntityId = entityId
	this.GeoLocationId = geoLocationId
	return &this
}

// NewSyntheticLocationIdsDtoWithDefaults instantiates a new SyntheticLocationIdsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticLocationIdsDtoWithDefaults() *SyntheticLocationIdsDto {
	this := SyntheticLocationIdsDto{}
	return &this
}

// GetEntityId returns the EntityId field value
func (o *SyntheticLocationIdsDto) GetEntityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *SyntheticLocationIdsDto) GetEntityIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *SyntheticLocationIdsDto) SetEntityId(v string) {
	o.EntityId = v
}

// GetGeoLocationId returns the GeoLocationId field value
func (o *SyntheticLocationIdsDto) GetGeoLocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GeoLocationId
}

// GetGeoLocationIdOk returns a tuple with the GeoLocationId field value
// and a boolean to check if the value has been set.
func (o *SyntheticLocationIdsDto) GetGeoLocationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GeoLocationId, true
}

// SetGeoLocationId sets field value
func (o *SyntheticLocationIdsDto) SetGeoLocationId(v string) {
	o.GeoLocationId = v
}

func (o SyntheticLocationIdsDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entityId"] = o.EntityId
	}
	if true {
		toSerialize["geoLocationId"] = o.GeoLocationId
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticLocationIdsDto struct {
	value *SyntheticLocationIdsDto
	isSet bool
}

func (v NullableSyntheticLocationIdsDto) Get() *SyntheticLocationIdsDto {
	return v.value
}

func (v *NullableSyntheticLocationIdsDto) Set(val *SyntheticLocationIdsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticLocationIdsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticLocationIdsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticLocationIdsDto(val *SyntheticLocationIdsDto) *NullableSyntheticLocationIdsDto {
	return &NullableSyntheticLocationIdsDto{value: val, isSet: true}
}

func (v NullableSyntheticLocationIdsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticLocationIdsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


