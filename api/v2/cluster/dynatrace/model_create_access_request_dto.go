/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CreateAccessRequestDto Access request data - format used to create a request
type CreateAccessRequestDto struct {
	// User id
	UserId *string `json:"userId,omitempty"`
	// Request reason description
	Reason *string `json:"reason,omitempty"`
	// For how many days access is requested
	RequestedDays *int32 `json:"requestedDays,omitempty"`
	// Requested role
	Role *string `json:"role,omitempty"`
}

// NewCreateAccessRequestDto instantiates a new CreateAccessRequestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAccessRequestDto() *CreateAccessRequestDto {
	this := CreateAccessRequestDto{}
	return &this
}

// NewCreateAccessRequestDtoWithDefaults instantiates a new CreateAccessRequestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAccessRequestDtoWithDefaults() *CreateAccessRequestDto {
	this := CreateAccessRequestDto{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *CreateAccessRequestDto) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAccessRequestDto) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *CreateAccessRequestDto) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *CreateAccessRequestDto) SetUserId(v string) {
	o.UserId = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *CreateAccessRequestDto) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAccessRequestDto) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *CreateAccessRequestDto) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *CreateAccessRequestDto) SetReason(v string) {
	o.Reason = &v
}

// GetRequestedDays returns the RequestedDays field value if set, zero value otherwise.
func (o *CreateAccessRequestDto) GetRequestedDays() int32 {
	if o == nil || o.RequestedDays == nil {
		var ret int32
		return ret
	}
	return *o.RequestedDays
}

// GetRequestedDaysOk returns a tuple with the RequestedDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAccessRequestDto) GetRequestedDaysOk() (*int32, bool) {
	if o == nil || o.RequestedDays == nil {
		return nil, false
	}
	return o.RequestedDays, true
}

// HasRequestedDays returns a boolean if a field has been set.
func (o *CreateAccessRequestDto) HasRequestedDays() bool {
	if o != nil && o.RequestedDays != nil {
		return true
	}

	return false
}

// SetRequestedDays gets a reference to the given int32 and assigns it to the RequestedDays field.
func (o *CreateAccessRequestDto) SetRequestedDays(v int32) {
	o.RequestedDays = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *CreateAccessRequestDto) GetRole() string {
	if o == nil || o.Role == nil {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAccessRequestDto) GetRoleOk() (*string, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *CreateAccessRequestDto) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *CreateAccessRequestDto) SetRole(v string) {
	o.Role = &v
}

func (o CreateAccessRequestDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.RequestedDays != nil {
		toSerialize["requestedDays"] = o.RequestedDays
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	return json.Marshal(toSerialize)
}

type NullableCreateAccessRequestDto struct {
	value *CreateAccessRequestDto
	isSet bool
}

func (v NullableCreateAccessRequestDto) Get() *CreateAccessRequestDto {
	return v.value
}

func (v *NullableCreateAccessRequestDto) Set(val *CreateAccessRequestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAccessRequestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAccessRequestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAccessRequestDto(val *CreateAccessRequestDto) *NullableCreateAccessRequestDto {
	return &NullableCreateAccessRequestDto{value: val, isSet: true}
}

func (v NullableCreateAccessRequestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAccessRequestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


