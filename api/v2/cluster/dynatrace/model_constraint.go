/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Constraint A constraint on the values accepted for a settings property.
type Constraint struct {
	// The maximum allowed length of string values.
	MaxLength *int32 `json:"maxLength,omitempty"`
	// The minimum required length of string values.
	MinLength *int32 `json:"minLength,omitempty"`
	// The ID of a custom validator.
	CustomValidatorId *string `json:"customValidatorId,omitempty"`
	// A custom message for invalid values.
	CustomMessage *string `json:"customMessage,omitempty"`
	// A list of properties for which the combination of values must be unique.
	UniqueProperties *[]string `json:"uniqueProperties,omitempty"`
	// The maximum allowed value.
	Maximum *float32 `json:"maximum,omitempty"`
	// The minimum allowed value.
	Minimum *float32 `json:"minimum,omitempty"`
	// The regular expression pattern for valid string values.
	Pattern *string `json:"pattern,omitempty"`
	// The type of the constraint.
	Type *string `json:"type,omitempty"`
}

// NewConstraint instantiates a new Constraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstraint() *Constraint {
	this := Constraint{}
	return &this
}

// NewConstraintWithDefaults instantiates a new Constraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstraintWithDefaults() *Constraint {
	this := Constraint{}
	return &this
}

// GetMaxLength returns the MaxLength field value if set, zero value otherwise.
func (o *Constraint) GetMaxLength() int32 {
	if o == nil || o.MaxLength == nil {
		var ret int32
		return ret
	}
	return *o.MaxLength
}

// GetMaxLengthOk returns a tuple with the MaxLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraint) GetMaxLengthOk() (*int32, bool) {
	if o == nil || o.MaxLength == nil {
		return nil, false
	}
	return o.MaxLength, true
}

// HasMaxLength returns a boolean if a field has been set.
func (o *Constraint) HasMaxLength() bool {
	if o != nil && o.MaxLength != nil {
		return true
	}

	return false
}

// SetMaxLength gets a reference to the given int32 and assigns it to the MaxLength field.
func (o *Constraint) SetMaxLength(v int32) {
	o.MaxLength = &v
}

// GetMinLength returns the MinLength field value if set, zero value otherwise.
func (o *Constraint) GetMinLength() int32 {
	if o == nil || o.MinLength == nil {
		var ret int32
		return ret
	}
	return *o.MinLength
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraint) GetMinLengthOk() (*int32, bool) {
	if o == nil || o.MinLength == nil {
		return nil, false
	}
	return o.MinLength, true
}

// HasMinLength returns a boolean if a field has been set.
func (o *Constraint) HasMinLength() bool {
	if o != nil && o.MinLength != nil {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given int32 and assigns it to the MinLength field.
func (o *Constraint) SetMinLength(v int32) {
	o.MinLength = &v
}

// GetCustomValidatorId returns the CustomValidatorId field value if set, zero value otherwise.
func (o *Constraint) GetCustomValidatorId() string {
	if o == nil || o.CustomValidatorId == nil {
		var ret string
		return ret
	}
	return *o.CustomValidatorId
}

// GetCustomValidatorIdOk returns a tuple with the CustomValidatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraint) GetCustomValidatorIdOk() (*string, bool) {
	if o == nil || o.CustomValidatorId == nil {
		return nil, false
	}
	return o.CustomValidatorId, true
}

// HasCustomValidatorId returns a boolean if a field has been set.
func (o *Constraint) HasCustomValidatorId() bool {
	if o != nil && o.CustomValidatorId != nil {
		return true
	}

	return false
}

// SetCustomValidatorId gets a reference to the given string and assigns it to the CustomValidatorId field.
func (o *Constraint) SetCustomValidatorId(v string) {
	o.CustomValidatorId = &v
}

// GetCustomMessage returns the CustomMessage field value if set, zero value otherwise.
func (o *Constraint) GetCustomMessage() string {
	if o == nil || o.CustomMessage == nil {
		var ret string
		return ret
	}
	return *o.CustomMessage
}

// GetCustomMessageOk returns a tuple with the CustomMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraint) GetCustomMessageOk() (*string, bool) {
	if o == nil || o.CustomMessage == nil {
		return nil, false
	}
	return o.CustomMessage, true
}

// HasCustomMessage returns a boolean if a field has been set.
func (o *Constraint) HasCustomMessage() bool {
	if o != nil && o.CustomMessage != nil {
		return true
	}

	return false
}

// SetCustomMessage gets a reference to the given string and assigns it to the CustomMessage field.
func (o *Constraint) SetCustomMessage(v string) {
	o.CustomMessage = &v
}

// GetUniqueProperties returns the UniqueProperties field value if set, zero value otherwise.
func (o *Constraint) GetUniqueProperties() []string {
	if o == nil || o.UniqueProperties == nil {
		var ret []string
		return ret
	}
	return *o.UniqueProperties
}

// GetUniquePropertiesOk returns a tuple with the UniqueProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraint) GetUniquePropertiesOk() (*[]string, bool) {
	if o == nil || o.UniqueProperties == nil {
		return nil, false
	}
	return o.UniqueProperties, true
}

// HasUniqueProperties returns a boolean if a field has been set.
func (o *Constraint) HasUniqueProperties() bool {
	if o != nil && o.UniqueProperties != nil {
		return true
	}

	return false
}

// SetUniqueProperties gets a reference to the given []string and assigns it to the UniqueProperties field.
func (o *Constraint) SetUniqueProperties(v []string) {
	o.UniqueProperties = &v
}

// GetMaximum returns the Maximum field value if set, zero value otherwise.
func (o *Constraint) GetMaximum() float32 {
	if o == nil || o.Maximum == nil {
		var ret float32
		return ret
	}
	return *o.Maximum
}

// GetMaximumOk returns a tuple with the Maximum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraint) GetMaximumOk() (*float32, bool) {
	if o == nil || o.Maximum == nil {
		return nil, false
	}
	return o.Maximum, true
}

// HasMaximum returns a boolean if a field has been set.
func (o *Constraint) HasMaximum() bool {
	if o != nil && o.Maximum != nil {
		return true
	}

	return false
}

// SetMaximum gets a reference to the given float32 and assigns it to the Maximum field.
func (o *Constraint) SetMaximum(v float32) {
	o.Maximum = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *Constraint) GetMinimum() float32 {
	if o == nil || o.Minimum == nil {
		var ret float32
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraint) GetMinimumOk() (*float32, bool) {
	if o == nil || o.Minimum == nil {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *Constraint) HasMinimum() bool {
	if o != nil && o.Minimum != nil {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given float32 and assigns it to the Minimum field.
func (o *Constraint) SetMinimum(v float32) {
	o.Minimum = &v
}

// GetPattern returns the Pattern field value if set, zero value otherwise.
func (o *Constraint) GetPattern() string {
	if o == nil || o.Pattern == nil {
		var ret string
		return ret
	}
	return *o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraint) GetPatternOk() (*string, bool) {
	if o == nil || o.Pattern == nil {
		return nil, false
	}
	return o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *Constraint) HasPattern() bool {
	if o != nil && o.Pattern != nil {
		return true
	}

	return false
}

// SetPattern gets a reference to the given string and assigns it to the Pattern field.
func (o *Constraint) SetPattern(v string) {
	o.Pattern = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Constraint) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraint) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Constraint) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Constraint) SetType(v string) {
	o.Type = &v
}

func (o Constraint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxLength != nil {
		toSerialize["maxLength"] = o.MaxLength
	}
	if o.MinLength != nil {
		toSerialize["minLength"] = o.MinLength
	}
	if o.CustomValidatorId != nil {
		toSerialize["customValidatorId"] = o.CustomValidatorId
	}
	if o.CustomMessage != nil {
		toSerialize["customMessage"] = o.CustomMessage
	}
	if o.UniqueProperties != nil {
		toSerialize["uniqueProperties"] = o.UniqueProperties
	}
	if o.Maximum != nil {
		toSerialize["maximum"] = o.Maximum
	}
	if o.Minimum != nil {
		toSerialize["minimum"] = o.Minimum
	}
	if o.Pattern != nil {
		toSerialize["pattern"] = o.Pattern
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableConstraint struct {
	value *Constraint
	isSet bool
}

func (v NullableConstraint) Get() *Constraint {
	return v.value
}

func (v *NullableConstraint) Set(val *Constraint) {
	v.value = val
	v.isSet = true
}

func (v NullableConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstraint(val *Constraint) *NullableConstraint {
	return &NullableConstraint{value: val, isSet: true}
}

func (v NullableConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


