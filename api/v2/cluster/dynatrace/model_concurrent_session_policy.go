/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ConcurrentSessionPolicy The configuration of the concurrent sessions policy. Set '0' to disable session limitation.
type ConcurrentSessionPolicy struct {
	// Session limit for regular users (0 = no limit)
	UserLimit int32 `json:"userLimit"`
	// Session limit for admin users (0 = no limit)
	AdminLimit int32 `json:"adminLimit"`
}

// NewConcurrentSessionPolicy instantiates a new ConcurrentSessionPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConcurrentSessionPolicy(userLimit int32, adminLimit int32) *ConcurrentSessionPolicy {
	this := ConcurrentSessionPolicy{}
	this.UserLimit = userLimit
	this.AdminLimit = adminLimit
	return &this
}

// NewConcurrentSessionPolicyWithDefaults instantiates a new ConcurrentSessionPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConcurrentSessionPolicyWithDefaults() *ConcurrentSessionPolicy {
	this := ConcurrentSessionPolicy{}
	return &this
}

// GetUserLimit returns the UserLimit field value
func (o *ConcurrentSessionPolicy) GetUserLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UserLimit
}

// GetUserLimitOk returns a tuple with the UserLimit field value
// and a boolean to check if the value has been set.
func (o *ConcurrentSessionPolicy) GetUserLimitOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserLimit, true
}

// SetUserLimit sets field value
func (o *ConcurrentSessionPolicy) SetUserLimit(v int32) {
	o.UserLimit = v
}

// GetAdminLimit returns the AdminLimit field value
func (o *ConcurrentSessionPolicy) GetAdminLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AdminLimit
}

// GetAdminLimitOk returns a tuple with the AdminLimit field value
// and a boolean to check if the value has been set.
func (o *ConcurrentSessionPolicy) GetAdminLimitOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AdminLimit, true
}

// SetAdminLimit sets field value
func (o *ConcurrentSessionPolicy) SetAdminLimit(v int32) {
	o.AdminLimit = v
}

func (o ConcurrentSessionPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["userLimit"] = o.UserLimit
	}
	if true {
		toSerialize["adminLimit"] = o.AdminLimit
	}
	return json.Marshal(toSerialize)
}

type NullableConcurrentSessionPolicy struct {
	value *ConcurrentSessionPolicy
	isSet bool
}

func (v NullableConcurrentSessionPolicy) Get() *ConcurrentSessionPolicy {
	return v.value
}

func (v *NullableConcurrentSessionPolicy) Set(val *ConcurrentSessionPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableConcurrentSessionPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableConcurrentSessionPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConcurrentSessionPolicy(val *ConcurrentSessionPolicy) *NullableConcurrentSessionPolicy {
	return &NullableConcurrentSessionPolicy{value: val, isSet: true}
}

func (v NullableConcurrentSessionPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConcurrentSessionPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


