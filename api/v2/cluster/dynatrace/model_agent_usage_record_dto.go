/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
	"time"
)

// AgentUsageRecordDto struct for AgentUsageRecordDto
type AgentUsageRecordDto struct {
	StartTime *time.Time `json:"startTime,omitempty"`
	EndTime *time.Time `json:"endTime,omitempty"`
}

// NewAgentUsageRecordDto instantiates a new AgentUsageRecordDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgentUsageRecordDto() *AgentUsageRecordDto {
	this := AgentUsageRecordDto{}
	return &this
}

// NewAgentUsageRecordDtoWithDefaults instantiates a new AgentUsageRecordDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgentUsageRecordDtoWithDefaults() *AgentUsageRecordDto {
	this := AgentUsageRecordDto{}
	return &this
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *AgentUsageRecordDto) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentUsageRecordDto) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *AgentUsageRecordDto) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *AgentUsageRecordDto) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *AgentUsageRecordDto) GetEndTime() time.Time {
	if o == nil || o.EndTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AgentUsageRecordDto) GetEndTimeOk() (*time.Time, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *AgentUsageRecordDto) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given time.Time and assigns it to the EndTime field.
func (o *AgentUsageRecordDto) SetEndTime(v time.Time) {
	o.EndTime = &v
}

func (o AgentUsageRecordDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartTime != nil {
		toSerialize["startTime"] = o.StartTime
	}
	if o.EndTime != nil {
		toSerialize["endTime"] = o.EndTime
	}
	return json.Marshal(toSerialize)
}

type NullableAgentUsageRecordDto struct {
	value *AgentUsageRecordDto
	isSet bool
}

func (v NullableAgentUsageRecordDto) Get() *AgentUsageRecordDto {
	return v.value
}

func (v *NullableAgentUsageRecordDto) Set(val *AgentUsageRecordDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAgentUsageRecordDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAgentUsageRecordDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgentUsageRecordDto(val *AgentUsageRecordDto) *NullableAgentUsageRecordDto {
	return &NullableAgentUsageRecordDto{value: val, isSet: true}
}

func (v NullableAgentUsageRecordDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgentUsageRecordDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


