/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ActiveGatesAutoUpdateConfigurationApiService ActiveGatesAutoUpdateConfigurationApi service
type ActiveGatesAutoUpdateConfigurationApiService service

type ApiGetAutoUpdateConfigByIdRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationApiService
	agId string
}


func (r ApiGetAutoUpdateConfigByIdRequest) Execute() (ActiveGateAutoUpdateConfig, *_nethttp.Response, error) {
	return r.ApiService.GetAutoUpdateConfigByIdExecute(r)
}

/*
 * GetAutoUpdateConfigById Gets the configuration of auto-update for the specified ActiveGate
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agId The ID of the required ActiveGate.
 * @return ApiGetAutoUpdateConfigByIdRequest
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) GetAutoUpdateConfigById(ctx _context.Context, agId string) ApiGetAutoUpdateConfigByIdRequest {
	return ApiGetAutoUpdateConfigByIdRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

/*
 * Execute executes the request
 * @return ActiveGateAutoUpdateConfig
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) GetAutoUpdateConfigByIdExecute(r ApiGetAutoUpdateConfigByIdRequest) (ActiveGateAutoUpdateConfig, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ActiveGateAutoUpdateConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationApiService.GetAutoUpdateConfigById")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/autoUpdate"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", _neturl.PathEscape(parameterToString(r.agId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetClusterGlobalAutoUpdateConfigRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationApiService
}


func (r ApiGetClusterGlobalAutoUpdateConfigRequest) Execute() (ActiveGateGlobalAutoUpdateConfig, *_nethttp.Response, error) {
	return r.ApiService.GetClusterGlobalAutoUpdateConfigExecute(r)
}

/*
 * GetClusterGlobalAutoUpdateConfig Gets the global auto-update configuration of cluster ActiveGates.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetClusterGlobalAutoUpdateConfigRequest
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) GetClusterGlobalAutoUpdateConfig(ctx _context.Context) ApiGetClusterGlobalAutoUpdateConfigRequest {
	return ApiGetClusterGlobalAutoUpdateConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return ActiveGateGlobalAutoUpdateConfig
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) GetClusterGlobalAutoUpdateConfigExecute(r ApiGetClusterGlobalAutoUpdateConfigRequest) (ActiveGateGlobalAutoUpdateConfig, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ActiveGateGlobalAutoUpdateConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationApiService.GetClusterGlobalAutoUpdateConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/autoUpdate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetGlobalAutoUpdateConfigForTenantRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationApiService
	envId string
}


func (r ApiGetGlobalAutoUpdateConfigForTenantRequest) Execute() (ActiveGateGlobalAutoUpdateConfig, *_nethttp.Response, error) {
	return r.ApiService.GetGlobalAutoUpdateConfigForTenantExecute(r)
}

/*
 * GetGlobalAutoUpdateConfigForTenant Gets the global auto-update configuration of environment ActiveGates.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envId The ID of the environment.
 * @return ApiGetGlobalAutoUpdateConfigForTenantRequest
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) GetGlobalAutoUpdateConfigForTenant(ctx _context.Context, envId string) ApiGetGlobalAutoUpdateConfigForTenantRequest {
	return ApiGetGlobalAutoUpdateConfigForTenantRequest{
		ApiService: a,
		ctx: ctx,
		envId: envId,
	}
}

/*
 * Execute executes the request
 * @return ActiveGateGlobalAutoUpdateConfig
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) GetGlobalAutoUpdateConfigForTenantExecute(r ApiGetGlobalAutoUpdateConfigForTenantRequest) (ActiveGateGlobalAutoUpdateConfig, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ActiveGateGlobalAutoUpdateConfig
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationApiService.GetGlobalAutoUpdateConfigForTenant")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/autoUpdate/{envId}"
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutAutoUpdateConfigByIdRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationApiService
	agId string
	activeGateAutoUpdateConfig *ActiveGateAutoUpdateConfig
}

func (r ApiPutAutoUpdateConfigByIdRequest) ActiveGateAutoUpdateConfig(activeGateAutoUpdateConfig ActiveGateAutoUpdateConfig) ApiPutAutoUpdateConfigByIdRequest {
	r.activeGateAutoUpdateConfig = &activeGateAutoUpdateConfig
	return r
}

func (r ApiPutAutoUpdateConfigByIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PutAutoUpdateConfigByIdExecute(r)
}

/*
 * PutAutoUpdateConfigById Updates the configuration of auto-update for the specified ActiveGate
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agId The ID of the required ActiveGate.
 * @return ApiPutAutoUpdateConfigByIdRequest
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) PutAutoUpdateConfigById(ctx _context.Context, agId string) ApiPutAutoUpdateConfigByIdRequest {
	return ApiPutAutoUpdateConfigByIdRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

/*
 * Execute executes the request
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) PutAutoUpdateConfigByIdExecute(r ApiPutAutoUpdateConfigByIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationApiService.PutAutoUpdateConfigById")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/autoUpdate"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", _neturl.PathEscape(parameterToString(r.agId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.activeGateAutoUpdateConfig == nil {
		return nil, reportError("activeGateAutoUpdateConfig is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activeGateAutoUpdateConfig
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutClusterGlobalAutoUpdateConfigRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationApiService
	activeGateGlobalAutoUpdateConfig *ActiveGateGlobalAutoUpdateConfig
}

func (r ApiPutClusterGlobalAutoUpdateConfigRequest) ActiveGateGlobalAutoUpdateConfig(activeGateGlobalAutoUpdateConfig ActiveGateGlobalAutoUpdateConfig) ApiPutClusterGlobalAutoUpdateConfigRequest {
	r.activeGateGlobalAutoUpdateConfig = &activeGateGlobalAutoUpdateConfig
	return r
}

func (r ApiPutClusterGlobalAutoUpdateConfigRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PutClusterGlobalAutoUpdateConfigExecute(r)
}

/*
 * PutClusterGlobalAutoUpdateConfig Puts the global auto-update configuration of cluster ActiveGates.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPutClusterGlobalAutoUpdateConfigRequest
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) PutClusterGlobalAutoUpdateConfig(ctx _context.Context) ApiPutClusterGlobalAutoUpdateConfigRequest {
	return ApiPutClusterGlobalAutoUpdateConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) PutClusterGlobalAutoUpdateConfigExecute(r ApiPutClusterGlobalAutoUpdateConfigRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationApiService.PutClusterGlobalAutoUpdateConfig")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/autoUpdate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.activeGateGlobalAutoUpdateConfig == nil {
		return nil, reportError("activeGateGlobalAutoUpdateConfig is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activeGateGlobalAutoUpdateConfig
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutGlobalAutoUpdateConfigForTenantRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationApiService
	envId string
	activeGateGlobalAutoUpdateConfig *ActiveGateGlobalAutoUpdateConfig
}

func (r ApiPutGlobalAutoUpdateConfigForTenantRequest) ActiveGateGlobalAutoUpdateConfig(activeGateGlobalAutoUpdateConfig ActiveGateGlobalAutoUpdateConfig) ApiPutGlobalAutoUpdateConfigForTenantRequest {
	r.activeGateGlobalAutoUpdateConfig = &activeGateGlobalAutoUpdateConfig
	return r
}

func (r ApiPutGlobalAutoUpdateConfigForTenantRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PutGlobalAutoUpdateConfigForTenantExecute(r)
}

/*
 * PutGlobalAutoUpdateConfigForTenant Puts the global auto-update configuration of environment ActiveGates.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envId The ID of the environment.
 * @return ApiPutGlobalAutoUpdateConfigForTenantRequest
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) PutGlobalAutoUpdateConfigForTenant(ctx _context.Context, envId string) ApiPutGlobalAutoUpdateConfigForTenantRequest {
	return ApiPutGlobalAutoUpdateConfigForTenantRequest{
		ApiService: a,
		ctx: ctx,
		envId: envId,
	}
}

/*
 * Execute executes the request
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) PutGlobalAutoUpdateConfigForTenantExecute(r ApiPutGlobalAutoUpdateConfigForTenantRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationApiService.PutGlobalAutoUpdateConfigForTenant")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/autoUpdate/{envId}"
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.activeGateGlobalAutoUpdateConfig == nil {
		return nil, reportError("activeGateGlobalAutoUpdateConfig is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activeGateGlobalAutoUpdateConfig
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiValidateAutoUpdateConfigByIdRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationApiService
	agId string
	activeGateAutoUpdateConfig *ActiveGateAutoUpdateConfig
}

func (r ApiValidateAutoUpdateConfigByIdRequest) ActiveGateAutoUpdateConfig(activeGateAutoUpdateConfig ActiveGateAutoUpdateConfig) ApiValidateAutoUpdateConfigByIdRequest {
	r.activeGateAutoUpdateConfig = &activeGateAutoUpdateConfig
	return r
}

func (r ApiValidateAutoUpdateConfigByIdRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ValidateAutoUpdateConfigByIdExecute(r)
}

/*
 * ValidateAutoUpdateConfigById Validates the payload for the `POST /activeGates/{agId}/autoUpdate` request.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agId The ID of the required ActiveGate.
 * @return ApiValidateAutoUpdateConfigByIdRequest
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) ValidateAutoUpdateConfigById(ctx _context.Context, agId string) ApiValidateAutoUpdateConfigByIdRequest {
	return ApiValidateAutoUpdateConfigByIdRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

/*
 * Execute executes the request
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) ValidateAutoUpdateConfigByIdExecute(r ApiValidateAutoUpdateConfigByIdRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationApiService.ValidateAutoUpdateConfigById")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/autoUpdate/validator"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", _neturl.PathEscape(parameterToString(r.agId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.activeGateAutoUpdateConfig == nil {
		return nil, reportError("activeGateAutoUpdateConfig is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activeGateAutoUpdateConfig
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiValidateClusterGlobalAutoUpdateConfigRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationApiService
	activeGateGlobalAutoUpdateConfig *ActiveGateGlobalAutoUpdateConfig
}

func (r ApiValidateClusterGlobalAutoUpdateConfigRequest) ActiveGateGlobalAutoUpdateConfig(activeGateGlobalAutoUpdateConfig ActiveGateGlobalAutoUpdateConfig) ApiValidateClusterGlobalAutoUpdateConfigRequest {
	r.activeGateGlobalAutoUpdateConfig = &activeGateGlobalAutoUpdateConfig
	return r
}

func (r ApiValidateClusterGlobalAutoUpdateConfigRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ValidateClusterGlobalAutoUpdateConfigExecute(r)
}

/*
 * ValidateClusterGlobalAutoUpdateConfig Validates the payload for the `POST /activeGates/autoUpdate` request.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiValidateClusterGlobalAutoUpdateConfigRequest
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) ValidateClusterGlobalAutoUpdateConfig(ctx _context.Context) ApiValidateClusterGlobalAutoUpdateConfigRequest {
	return ApiValidateClusterGlobalAutoUpdateConfigRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) ValidateClusterGlobalAutoUpdateConfigExecute(r ApiValidateClusterGlobalAutoUpdateConfigRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationApiService.ValidateClusterGlobalAutoUpdateConfig")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/autoUpdate/validator"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.activeGateGlobalAutoUpdateConfig == nil {
		return nil, reportError("activeGateGlobalAutoUpdateConfig is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activeGateGlobalAutoUpdateConfig
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiValidateGlobalAutoUpdateConfigForTenantRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateConfigurationApiService
	envId string
	activeGateGlobalAutoUpdateConfig *ActiveGateGlobalAutoUpdateConfig
}

func (r ApiValidateGlobalAutoUpdateConfigForTenantRequest) ActiveGateGlobalAutoUpdateConfig(activeGateGlobalAutoUpdateConfig ActiveGateGlobalAutoUpdateConfig) ApiValidateGlobalAutoUpdateConfigForTenantRequest {
	r.activeGateGlobalAutoUpdateConfig = &activeGateGlobalAutoUpdateConfig
	return r
}

func (r ApiValidateGlobalAutoUpdateConfigForTenantRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ValidateGlobalAutoUpdateConfigForTenantExecute(r)
}

/*
 * ValidateGlobalAutoUpdateConfigForTenant Validates the payload for the `POST /activeGates/autoUpdate/{envId}` request.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envId The ID of the environment.
 * @return ApiValidateGlobalAutoUpdateConfigForTenantRequest
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) ValidateGlobalAutoUpdateConfigForTenant(ctx _context.Context, envId string) ApiValidateGlobalAutoUpdateConfigForTenantRequest {
	return ApiValidateGlobalAutoUpdateConfigForTenantRequest{
		ApiService: a,
		ctx: ctx,
		envId: envId,
	}
}

/*
 * Execute executes the request
 */
func (a *ActiveGatesAutoUpdateConfigurationApiService) ValidateGlobalAutoUpdateConfigForTenantExecute(r ApiValidateGlobalAutoUpdateConfigForTenantRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateConfigurationApiService.ValidateGlobalAutoUpdateConfigForTenant")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/autoUpdate/{envId}/validator"
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.activeGateGlobalAutoUpdateConfig == nil {
		return nil, reportError("activeGateGlobalAutoUpdateConfig is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.activeGateGlobalAutoUpdateConfig
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
