/*
 * Dynatrace Cluster API
 *
 * Dynatrace Managed exposes cluster-wide functionality via REST endpoints. This interactive documentation also acts as a REST client you can use to interact with Dynatrace Managed clusters.   To authorize, use the API Token generated in [Settings - API Tokens page](/cmc#cm/apiToken). The HTTP status code of the response shows the result of your request. The expected response code for a successful request is documented individually per REST endpoint. Additionally the following error response codes can occur in our REST interface:  * 400 - Bad Request: Some request parameters are not correct. See response body for details. * 401 - Unauthorized: A valid authorization header is required but is missing. * 403 - Forbidden: Execution of request is not allowed, e.g. api-token is invalid. * 404 - Not Found: Endpoint does not exist or some entities could not be found. * 500 - Internal Server Error: See response body for details. * 556 - Upgrade in progress: Operation couldn't be performed during the upgrade.  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SyntheticLocations A list of synthetic locations.
type SyntheticLocations struct {
	// A list of synthetic locations.
	Locations []LocationCollectionElement `json:"locations"`
}

// NewSyntheticLocations instantiates a new SyntheticLocations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyntheticLocations(locations []LocationCollectionElement) *SyntheticLocations {
	this := SyntheticLocations{}
	this.Locations = locations
	return &this
}

// NewSyntheticLocationsWithDefaults instantiates a new SyntheticLocations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyntheticLocationsWithDefaults() *SyntheticLocations {
	this := SyntheticLocations{}
	return &this
}

// GetLocations returns the Locations field value
func (o *SyntheticLocations) GetLocations() []LocationCollectionElement {
	if o == nil {
		var ret []LocationCollectionElement
		return ret
	}

	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value
// and a boolean to check if the value has been set.
func (o *SyntheticLocations) GetLocationsOk() (*[]LocationCollectionElement, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Locations, true
}

// SetLocations sets field value
func (o *SyntheticLocations) SetLocations(v []LocationCollectionElement) {
	o.Locations = v
}

func (o SyntheticLocations) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["locations"] = o.Locations
	}
	return json.Marshal(toSerialize)
}

type NullableSyntheticLocations struct {
	value *SyntheticLocations
	isSet bool
}

func (v NullableSyntheticLocations) Get() *SyntheticLocations {
	return v.value
}

func (v *NullableSyntheticLocations) Set(val *SyntheticLocations) {
	v.value = val
	v.isSet = true
}

func (v NullableSyntheticLocations) IsSet() bool {
	return v.isSet
}

func (v *NullableSyntheticLocations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyntheticLocations(val *SyntheticLocations) *NullableSyntheticLocations {
	return &NullableSyntheticLocations{value: val, isSet: true}
}

func (v NullableSyntheticLocations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyntheticLocations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


