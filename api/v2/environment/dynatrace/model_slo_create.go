/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SloCreate Parameters of a new SLO.
type SloCreate struct {
	// The SLO is enabled (`true`) or disabled (`false`).
	Enabled *bool `json:"enabled,omitempty"`
	// The name of the SLO.
	Name *string `json:"name,omitempty"`
	// The custom description of the SLO (optional).
	CustomDescription *string `json:"customDescription,omitempty"`
	// The percentage-based metric expression for the calculation of the SLO. This is not usable yet as it requires some server-side enablement to work.
	MetricExpression *string `json:"metricExpression,omitempty"`
	// The evaluation type of the SLO.
	EvaluationType *string `json:"evaluationType,omitempty"`
	// The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector).
	Filter *string `json:"filter,omitempty"`
	// The target value of the SLO.
	Target *float64 `json:"target,omitempty"`
	// The warning value of the SLO.    At warning state the SLO is still fulfilled but is getting close to failure.
	Warning *float64 `json:"warning,omitempty"`
	// The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector.
	Timeframe *string `json:"timeframe,omitempty"`
	// The type of the metric to use for SLO calculation:   * `true`: An existing percentage-based metric.  * `false`: A ratio of two metrics.   For a list of available metrics, see [Built-in metric page](https://dt-url.net/be03kow) or try the [GET metrics](https://dt-url.net/8e43kxf) API call.
	UseRateMetric *bool `json:"useRateMetric,omitempty"`
	// The percentage-based metric for the calculation of the SLO.   Required when the **useRateMetric** is set to `true`.
	MetricRate *string `json:"metricRate,omitempty"`
	// The metric for the count of successes (the numerator in rate calculation).   Required when the **useRateMetric** is set to `false`.
	MetricNumerator *string `json:"metricNumerator,omitempty"`
	// The total count metric (the denominator in rate calculation).   Required when the **useRateMetric** is set to `false`.
	MetricDenominator *string `json:"metricDenominator,omitempty"`
}

// NewSloCreate instantiates a new SloCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSloCreate() *SloCreate {
	this := SloCreate{}
	return &this
}

// NewSloCreateWithDefaults instantiates a new SloCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSloCreateWithDefaults() *SloCreate {
	this := SloCreate{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SloCreate) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SloCreate) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SloCreate) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SloCreate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SloCreate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SloCreate) SetName(v string) {
	o.Name = &v
}

// GetCustomDescription returns the CustomDescription field value if set, zero value otherwise.
func (o *SloCreate) GetCustomDescription() string {
	if o == nil || o.CustomDescription == nil {
		var ret string
		return ret
	}
	return *o.CustomDescription
}

// GetCustomDescriptionOk returns a tuple with the CustomDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetCustomDescriptionOk() (*string, bool) {
	if o == nil || o.CustomDescription == nil {
		return nil, false
	}
	return o.CustomDescription, true
}

// HasCustomDescription returns a boolean if a field has been set.
func (o *SloCreate) HasCustomDescription() bool {
	if o != nil && o.CustomDescription != nil {
		return true
	}

	return false
}

// SetCustomDescription gets a reference to the given string and assigns it to the CustomDescription field.
func (o *SloCreate) SetCustomDescription(v string) {
	o.CustomDescription = &v
}

// GetMetricExpression returns the MetricExpression field value if set, zero value otherwise.
func (o *SloCreate) GetMetricExpression() string {
	if o == nil || o.MetricExpression == nil {
		var ret string
		return ret
	}
	return *o.MetricExpression
}

// GetMetricExpressionOk returns a tuple with the MetricExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetMetricExpressionOk() (*string, bool) {
	if o == nil || o.MetricExpression == nil {
		return nil, false
	}
	return o.MetricExpression, true
}

// HasMetricExpression returns a boolean if a field has been set.
func (o *SloCreate) HasMetricExpression() bool {
	if o != nil && o.MetricExpression != nil {
		return true
	}

	return false
}

// SetMetricExpression gets a reference to the given string and assigns it to the MetricExpression field.
func (o *SloCreate) SetMetricExpression(v string) {
	o.MetricExpression = &v
}

// GetEvaluationType returns the EvaluationType field value if set, zero value otherwise.
func (o *SloCreate) GetEvaluationType() string {
	if o == nil || o.EvaluationType == nil {
		var ret string
		return ret
	}
	return *o.EvaluationType
}

// GetEvaluationTypeOk returns a tuple with the EvaluationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetEvaluationTypeOk() (*string, bool) {
	if o == nil || o.EvaluationType == nil {
		return nil, false
	}
	return o.EvaluationType, true
}

// HasEvaluationType returns a boolean if a field has been set.
func (o *SloCreate) HasEvaluationType() bool {
	if o != nil && o.EvaluationType != nil {
		return true
	}

	return false
}

// SetEvaluationType gets a reference to the given string and assigns it to the EvaluationType field.
func (o *SloCreate) SetEvaluationType(v string) {
	o.EvaluationType = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *SloCreate) GetFilter() string {
	if o == nil || o.Filter == nil {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetFilterOk() (*string, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *SloCreate) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *SloCreate) SetFilter(v string) {
	o.Filter = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *SloCreate) GetTarget() float64 {
	if o == nil || o.Target == nil {
		var ret float64
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetTargetOk() (*float64, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *SloCreate) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given float64 and assigns it to the Target field.
func (o *SloCreate) SetTarget(v float64) {
	o.Target = &v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *SloCreate) GetWarning() float64 {
	if o == nil || o.Warning == nil {
		var ret float64
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetWarningOk() (*float64, bool) {
	if o == nil || o.Warning == nil {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *SloCreate) HasWarning() bool {
	if o != nil && o.Warning != nil {
		return true
	}

	return false
}

// SetWarning gets a reference to the given float64 and assigns it to the Warning field.
func (o *SloCreate) SetWarning(v float64) {
	o.Warning = &v
}

// GetTimeframe returns the Timeframe field value if set, zero value otherwise.
func (o *SloCreate) GetTimeframe() string {
	if o == nil || o.Timeframe == nil {
		var ret string
		return ret
	}
	return *o.Timeframe
}

// GetTimeframeOk returns a tuple with the Timeframe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetTimeframeOk() (*string, bool) {
	if o == nil || o.Timeframe == nil {
		return nil, false
	}
	return o.Timeframe, true
}

// HasTimeframe returns a boolean if a field has been set.
func (o *SloCreate) HasTimeframe() bool {
	if o != nil && o.Timeframe != nil {
		return true
	}

	return false
}

// SetTimeframe gets a reference to the given string and assigns it to the Timeframe field.
func (o *SloCreate) SetTimeframe(v string) {
	o.Timeframe = &v
}

// GetUseRateMetric returns the UseRateMetric field value if set, zero value otherwise.
func (o *SloCreate) GetUseRateMetric() bool {
	if o == nil || o.UseRateMetric == nil {
		var ret bool
		return ret
	}
	return *o.UseRateMetric
}

// GetUseRateMetricOk returns a tuple with the UseRateMetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetUseRateMetricOk() (*bool, bool) {
	if o == nil || o.UseRateMetric == nil {
		return nil, false
	}
	return o.UseRateMetric, true
}

// HasUseRateMetric returns a boolean if a field has been set.
func (o *SloCreate) HasUseRateMetric() bool {
	if o != nil && o.UseRateMetric != nil {
		return true
	}

	return false
}

// SetUseRateMetric gets a reference to the given bool and assigns it to the UseRateMetric field.
func (o *SloCreate) SetUseRateMetric(v bool) {
	o.UseRateMetric = &v
}

// GetMetricRate returns the MetricRate field value if set, zero value otherwise.
func (o *SloCreate) GetMetricRate() string {
	if o == nil || o.MetricRate == nil {
		var ret string
		return ret
	}
	return *o.MetricRate
}

// GetMetricRateOk returns a tuple with the MetricRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetMetricRateOk() (*string, bool) {
	if o == nil || o.MetricRate == nil {
		return nil, false
	}
	return o.MetricRate, true
}

// HasMetricRate returns a boolean if a field has been set.
func (o *SloCreate) HasMetricRate() bool {
	if o != nil && o.MetricRate != nil {
		return true
	}

	return false
}

// SetMetricRate gets a reference to the given string and assigns it to the MetricRate field.
func (o *SloCreate) SetMetricRate(v string) {
	o.MetricRate = &v
}

// GetMetricNumerator returns the MetricNumerator field value if set, zero value otherwise.
func (o *SloCreate) GetMetricNumerator() string {
	if o == nil || o.MetricNumerator == nil {
		var ret string
		return ret
	}
	return *o.MetricNumerator
}

// GetMetricNumeratorOk returns a tuple with the MetricNumerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetMetricNumeratorOk() (*string, bool) {
	if o == nil || o.MetricNumerator == nil {
		return nil, false
	}
	return o.MetricNumerator, true
}

// HasMetricNumerator returns a boolean if a field has been set.
func (o *SloCreate) HasMetricNumerator() bool {
	if o != nil && o.MetricNumerator != nil {
		return true
	}

	return false
}

// SetMetricNumerator gets a reference to the given string and assigns it to the MetricNumerator field.
func (o *SloCreate) SetMetricNumerator(v string) {
	o.MetricNumerator = &v
}

// GetMetricDenominator returns the MetricDenominator field value if set, zero value otherwise.
func (o *SloCreate) GetMetricDenominator() string {
	if o == nil || o.MetricDenominator == nil {
		var ret string
		return ret
	}
	return *o.MetricDenominator
}

// GetMetricDenominatorOk returns a tuple with the MetricDenominator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SloCreate) GetMetricDenominatorOk() (*string, bool) {
	if o == nil || o.MetricDenominator == nil {
		return nil, false
	}
	return o.MetricDenominator, true
}

// HasMetricDenominator returns a boolean if a field has been set.
func (o *SloCreate) HasMetricDenominator() bool {
	if o != nil && o.MetricDenominator != nil {
		return true
	}

	return false
}

// SetMetricDenominator gets a reference to the given string and assigns it to the MetricDenominator field.
func (o *SloCreate) SetMetricDenominator(v string) {
	o.MetricDenominator = &v
}

func (o SloCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.CustomDescription != nil {
		toSerialize["customDescription"] = o.CustomDescription
	}
	if o.MetricExpression != nil {
		toSerialize["metricExpression"] = o.MetricExpression
	}
	if o.EvaluationType != nil {
		toSerialize["evaluationType"] = o.EvaluationType
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	if o.Warning != nil {
		toSerialize["warning"] = o.Warning
	}
	if o.Timeframe != nil {
		toSerialize["timeframe"] = o.Timeframe
	}
	if o.UseRateMetric != nil {
		toSerialize["useRateMetric"] = o.UseRateMetric
	}
	if o.MetricRate != nil {
		toSerialize["metricRate"] = o.MetricRate
	}
	if o.MetricNumerator != nil {
		toSerialize["metricNumerator"] = o.MetricNumerator
	}
	if o.MetricDenominator != nil {
		toSerialize["metricDenominator"] = o.MetricDenominator
	}
	return json.Marshal(toSerialize)
}

type NullableSloCreate struct {
	value *SloCreate
	isSet bool
}

func (v NullableSloCreate) Get() *SloCreate {
	return v.value
}

func (v *NullableSloCreate) Set(val *SloCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableSloCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableSloCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSloCreate(val *SloCreate) *NullableSloCreate {
	return &NullableSloCreate{value: val, isSet: true}
}

func (v NullableSloCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSloCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


