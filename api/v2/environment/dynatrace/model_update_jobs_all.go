/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// UpdateJobsAll A list of ActiveGates with update jobs.
type UpdateJobsAll struct {
	// A list of ActiveGates with update jobs.
	AllUpdateJobs *[]UpdateJobList `json:"allUpdateJobs,omitempty"`
}

// NewUpdateJobsAll instantiates a new UpdateJobsAll object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateJobsAll() *UpdateJobsAll {
	this := UpdateJobsAll{}
	return &this
}

// NewUpdateJobsAllWithDefaults instantiates a new UpdateJobsAll object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateJobsAllWithDefaults() *UpdateJobsAll {
	this := UpdateJobsAll{}
	return &this
}

// GetAllUpdateJobs returns the AllUpdateJobs field value if set, zero value otherwise.
func (o *UpdateJobsAll) GetAllUpdateJobs() []UpdateJobList {
	if o == nil || o.AllUpdateJobs == nil {
		var ret []UpdateJobList
		return ret
	}
	return *o.AllUpdateJobs
}

// GetAllUpdateJobsOk returns a tuple with the AllUpdateJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobsAll) GetAllUpdateJobsOk() (*[]UpdateJobList, bool) {
	if o == nil || o.AllUpdateJobs == nil {
		return nil, false
	}
	return o.AllUpdateJobs, true
}

// HasAllUpdateJobs returns a boolean if a field has been set.
func (o *UpdateJobsAll) HasAllUpdateJobs() bool {
	if o != nil && o.AllUpdateJobs != nil {
		return true
	}

	return false
}

// SetAllUpdateJobs gets a reference to the given []UpdateJobList and assigns it to the AllUpdateJobs field.
func (o *UpdateJobsAll) SetAllUpdateJobs(v []UpdateJobList) {
	o.AllUpdateJobs = &v
}

func (o UpdateJobsAll) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllUpdateJobs != nil {
		toSerialize["allUpdateJobs"] = o.AllUpdateJobs
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateJobsAll struct {
	value *UpdateJobsAll
	isSet bool
}

func (v NullableUpdateJobsAll) Get() *UpdateJobsAll {
	return v.value
}

func (v *NullableUpdateJobsAll) Set(val *UpdateJobsAll) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateJobsAll) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateJobsAll) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateJobsAll(val *UpdateJobsAll) *NullableUpdateJobsAll {
	return &NullableUpdateJobsAll{value: val, isSet: true}
}

func (v NullableUpdateJobsAll) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateJobsAll) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


