/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// RiskAssessment Risk assessment of a security problem.
type RiskAssessment struct {
	// The Davis risk level.    It is calculated by Dynatrace on the basis of CVSS score.
	RiskLevel *string `json:"riskLevel,omitempty"`
	// The Davis risk score (1-10).    It is calculated by Dynatrace on the basis of CVSS score.
	RiskScore *float32 `json:"riskScore,omitempty"`
	// The attack vector calculated by DT based on the CVSS attack vector.
	RiskVector *string `json:"riskVector,omitempty"`
	// The risk level from the CVSS score.
	BaseRiskLevel *string `json:"baseRiskLevel,omitempty"`
	// The risk score (1-10) from the CVSS score.
	BaseRiskScore *float32 `json:"baseRiskScore,omitempty"`
	// The original attack vector of the CVSS assessment.
	BaseRiskVector *string `json:"baseRiskVector,omitempty"`
	// The level of exposure of affected entities.
	Exposure *string `json:"exposure,omitempty"`
	// The reachability of related data assets by affected entities.
	DataAssets *string `json:"dataAssets,omitempty"`
	// The availability status of public exploits.
	PublicExploit *string `json:"publicExploit,omitempty"`
}

// NewRiskAssessment instantiates a new RiskAssessment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskAssessment() *RiskAssessment {
	this := RiskAssessment{}
	return &this
}

// NewRiskAssessmentWithDefaults instantiates a new RiskAssessment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskAssessmentWithDefaults() *RiskAssessment {
	this := RiskAssessment{}
	return &this
}

// GetRiskLevel returns the RiskLevel field value if set, zero value otherwise.
func (o *RiskAssessment) GetRiskLevel() string {
	if o == nil || o.RiskLevel == nil {
		var ret string
		return ret
	}
	return *o.RiskLevel
}

// GetRiskLevelOk returns a tuple with the RiskLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetRiskLevelOk() (*string, bool) {
	if o == nil || o.RiskLevel == nil {
		return nil, false
	}
	return o.RiskLevel, true
}

// HasRiskLevel returns a boolean if a field has been set.
func (o *RiskAssessment) HasRiskLevel() bool {
	if o != nil && o.RiskLevel != nil {
		return true
	}

	return false
}

// SetRiskLevel gets a reference to the given string and assigns it to the RiskLevel field.
func (o *RiskAssessment) SetRiskLevel(v string) {
	o.RiskLevel = &v
}

// GetRiskScore returns the RiskScore field value if set, zero value otherwise.
func (o *RiskAssessment) GetRiskScore() float32 {
	if o == nil || o.RiskScore == nil {
		var ret float32
		return ret
	}
	return *o.RiskScore
}

// GetRiskScoreOk returns a tuple with the RiskScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetRiskScoreOk() (*float32, bool) {
	if o == nil || o.RiskScore == nil {
		return nil, false
	}
	return o.RiskScore, true
}

// HasRiskScore returns a boolean if a field has been set.
func (o *RiskAssessment) HasRiskScore() bool {
	if o != nil && o.RiskScore != nil {
		return true
	}

	return false
}

// SetRiskScore gets a reference to the given float32 and assigns it to the RiskScore field.
func (o *RiskAssessment) SetRiskScore(v float32) {
	o.RiskScore = &v
}

// GetRiskVector returns the RiskVector field value if set, zero value otherwise.
func (o *RiskAssessment) GetRiskVector() string {
	if o == nil || o.RiskVector == nil {
		var ret string
		return ret
	}
	return *o.RiskVector
}

// GetRiskVectorOk returns a tuple with the RiskVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetRiskVectorOk() (*string, bool) {
	if o == nil || o.RiskVector == nil {
		return nil, false
	}
	return o.RiskVector, true
}

// HasRiskVector returns a boolean if a field has been set.
func (o *RiskAssessment) HasRiskVector() bool {
	if o != nil && o.RiskVector != nil {
		return true
	}

	return false
}

// SetRiskVector gets a reference to the given string and assigns it to the RiskVector field.
func (o *RiskAssessment) SetRiskVector(v string) {
	o.RiskVector = &v
}

// GetBaseRiskLevel returns the BaseRiskLevel field value if set, zero value otherwise.
func (o *RiskAssessment) GetBaseRiskLevel() string {
	if o == nil || o.BaseRiskLevel == nil {
		var ret string
		return ret
	}
	return *o.BaseRiskLevel
}

// GetBaseRiskLevelOk returns a tuple with the BaseRiskLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetBaseRiskLevelOk() (*string, bool) {
	if o == nil || o.BaseRiskLevel == nil {
		return nil, false
	}
	return o.BaseRiskLevel, true
}

// HasBaseRiskLevel returns a boolean if a field has been set.
func (o *RiskAssessment) HasBaseRiskLevel() bool {
	if o != nil && o.BaseRiskLevel != nil {
		return true
	}

	return false
}

// SetBaseRiskLevel gets a reference to the given string and assigns it to the BaseRiskLevel field.
func (o *RiskAssessment) SetBaseRiskLevel(v string) {
	o.BaseRiskLevel = &v
}

// GetBaseRiskScore returns the BaseRiskScore field value if set, zero value otherwise.
func (o *RiskAssessment) GetBaseRiskScore() float32 {
	if o == nil || o.BaseRiskScore == nil {
		var ret float32
		return ret
	}
	return *o.BaseRiskScore
}

// GetBaseRiskScoreOk returns a tuple with the BaseRiskScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetBaseRiskScoreOk() (*float32, bool) {
	if o == nil || o.BaseRiskScore == nil {
		return nil, false
	}
	return o.BaseRiskScore, true
}

// HasBaseRiskScore returns a boolean if a field has been set.
func (o *RiskAssessment) HasBaseRiskScore() bool {
	if o != nil && o.BaseRiskScore != nil {
		return true
	}

	return false
}

// SetBaseRiskScore gets a reference to the given float32 and assigns it to the BaseRiskScore field.
func (o *RiskAssessment) SetBaseRiskScore(v float32) {
	o.BaseRiskScore = &v
}

// GetBaseRiskVector returns the BaseRiskVector field value if set, zero value otherwise.
func (o *RiskAssessment) GetBaseRiskVector() string {
	if o == nil || o.BaseRiskVector == nil {
		var ret string
		return ret
	}
	return *o.BaseRiskVector
}

// GetBaseRiskVectorOk returns a tuple with the BaseRiskVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetBaseRiskVectorOk() (*string, bool) {
	if o == nil || o.BaseRiskVector == nil {
		return nil, false
	}
	return o.BaseRiskVector, true
}

// HasBaseRiskVector returns a boolean if a field has been set.
func (o *RiskAssessment) HasBaseRiskVector() bool {
	if o != nil && o.BaseRiskVector != nil {
		return true
	}

	return false
}

// SetBaseRiskVector gets a reference to the given string and assigns it to the BaseRiskVector field.
func (o *RiskAssessment) SetBaseRiskVector(v string) {
	o.BaseRiskVector = &v
}

// GetExposure returns the Exposure field value if set, zero value otherwise.
func (o *RiskAssessment) GetExposure() string {
	if o == nil || o.Exposure == nil {
		var ret string
		return ret
	}
	return *o.Exposure
}

// GetExposureOk returns a tuple with the Exposure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetExposureOk() (*string, bool) {
	if o == nil || o.Exposure == nil {
		return nil, false
	}
	return o.Exposure, true
}

// HasExposure returns a boolean if a field has been set.
func (o *RiskAssessment) HasExposure() bool {
	if o != nil && o.Exposure != nil {
		return true
	}

	return false
}

// SetExposure gets a reference to the given string and assigns it to the Exposure field.
func (o *RiskAssessment) SetExposure(v string) {
	o.Exposure = &v
}

// GetDataAssets returns the DataAssets field value if set, zero value otherwise.
func (o *RiskAssessment) GetDataAssets() string {
	if o == nil || o.DataAssets == nil {
		var ret string
		return ret
	}
	return *o.DataAssets
}

// GetDataAssetsOk returns a tuple with the DataAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetDataAssetsOk() (*string, bool) {
	if o == nil || o.DataAssets == nil {
		return nil, false
	}
	return o.DataAssets, true
}

// HasDataAssets returns a boolean if a field has been set.
func (o *RiskAssessment) HasDataAssets() bool {
	if o != nil && o.DataAssets != nil {
		return true
	}

	return false
}

// SetDataAssets gets a reference to the given string and assigns it to the DataAssets field.
func (o *RiskAssessment) SetDataAssets(v string) {
	o.DataAssets = &v
}

// GetPublicExploit returns the PublicExploit field value if set, zero value otherwise.
func (o *RiskAssessment) GetPublicExploit() string {
	if o == nil || o.PublicExploit == nil {
		var ret string
		return ret
	}
	return *o.PublicExploit
}

// GetPublicExploitOk returns a tuple with the PublicExploit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskAssessment) GetPublicExploitOk() (*string, bool) {
	if o == nil || o.PublicExploit == nil {
		return nil, false
	}
	return o.PublicExploit, true
}

// HasPublicExploit returns a boolean if a field has been set.
func (o *RiskAssessment) HasPublicExploit() bool {
	if o != nil && o.PublicExploit != nil {
		return true
	}

	return false
}

// SetPublicExploit gets a reference to the given string and assigns it to the PublicExploit field.
func (o *RiskAssessment) SetPublicExploit(v string) {
	o.PublicExploit = &v
}

func (o RiskAssessment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RiskLevel != nil {
		toSerialize["riskLevel"] = o.RiskLevel
	}
	if o.RiskScore != nil {
		toSerialize["riskScore"] = o.RiskScore
	}
	if o.RiskVector != nil {
		toSerialize["riskVector"] = o.RiskVector
	}
	if o.BaseRiskLevel != nil {
		toSerialize["baseRiskLevel"] = o.BaseRiskLevel
	}
	if o.BaseRiskScore != nil {
		toSerialize["baseRiskScore"] = o.BaseRiskScore
	}
	if o.BaseRiskVector != nil {
		toSerialize["baseRiskVector"] = o.BaseRiskVector
	}
	if o.Exposure != nil {
		toSerialize["exposure"] = o.Exposure
	}
	if o.DataAssets != nil {
		toSerialize["dataAssets"] = o.DataAssets
	}
	if o.PublicExploit != nil {
		toSerialize["publicExploit"] = o.PublicExploit
	}
	return json.Marshal(toSerialize)
}

type NullableRiskAssessment struct {
	value *RiskAssessment
	isSet bool
}

func (v NullableRiskAssessment) Get() *RiskAssessment {
	return v.value
}

func (v *NullableRiskAssessment) Set(val *RiskAssessment) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskAssessment) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskAssessment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskAssessment(val *RiskAssessment) *NullableRiskAssessment {
	return &NullableRiskAssessment{value: val, isSet: true}
}

func (v NullableRiskAssessment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskAssessment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


