/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ApiTokenCreated The newly created token.
type ApiTokenCreated struct {
	// The secret of the token.
	Token *string `json:"token,omitempty"`
	// The token expiration date in ISO 8601 format (`yyyy-MM-dd'T'HH:mm:ss.SSS'Z'`).
	ExpirationDate *string `json:"expirationDate,omitempty"`
	// The ID of the token, consisting of prefix and public part of the token.
	Id *string `json:"id,omitempty"`
}

// NewApiTokenCreated instantiates a new ApiTokenCreated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiTokenCreated() *ApiTokenCreated {
	this := ApiTokenCreated{}
	return &this
}

// NewApiTokenCreatedWithDefaults instantiates a new ApiTokenCreated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiTokenCreatedWithDefaults() *ApiTokenCreated {
	this := ApiTokenCreated{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *ApiTokenCreated) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTokenCreated) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *ApiTokenCreated) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *ApiTokenCreated) SetToken(v string) {
	o.Token = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *ApiTokenCreated) GetExpirationDate() string {
	if o == nil || o.ExpirationDate == nil {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTokenCreated) GetExpirationDateOk() (*string, bool) {
	if o == nil || o.ExpirationDate == nil {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *ApiTokenCreated) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate != nil {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *ApiTokenCreated) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApiTokenCreated) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiTokenCreated) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApiTokenCreated) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApiTokenCreated) SetId(v string) {
	o.Id = &v
}

func (o ApiTokenCreated) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.ExpirationDate != nil {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableApiTokenCreated struct {
	value *ApiTokenCreated
	isSet bool
}

func (v NullableApiTokenCreated) Get() *ApiTokenCreated {
	return v.value
}

func (v *NullableApiTokenCreated) Set(val *ApiTokenCreated) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTokenCreated) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTokenCreated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTokenCreated(val *ApiTokenCreated) *NullableApiTokenCreated {
	return &NullableApiTokenCreated{value: val, isSet: true}
}

func (v NullableApiTokenCreated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTokenCreated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


