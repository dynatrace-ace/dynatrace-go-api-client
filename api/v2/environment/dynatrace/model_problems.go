/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Problems A list of problems.
type Problems struct {
	// The total number of entries in the result.
	TotalCount int64 `json:"totalCount"`
	// The number of entries per page.
	PageSize *int32 `json:"pageSize,omitempty"`
	// The cursor for the next page of results. Has the value of `null` on the last page.   Use it in the **nextPageKey** query parameter to obtain subsequent pages of the result.
	NextPageKey *string `json:"nextPageKey,omitempty"`
	// The result entries.
	Problems *[]Problem `json:"problems,omitempty"`
	// A list of warnings
	Warnings *[]string `json:"warnings,omitempty"`
}

// NewProblems instantiates a new Problems object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblems(totalCount int64) *Problems {
	this := Problems{}
	this.TotalCount = totalCount
	return &this
}

// NewProblemsWithDefaults instantiates a new Problems object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemsWithDefaults() *Problems {
	this := Problems{}
	return &this
}

// GetTotalCount returns the TotalCount field value
func (o *Problems) GetTotalCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *Problems) GetTotalCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *Problems) SetTotalCount(v int64) {
	o.TotalCount = v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *Problems) GetPageSize() int32 {
	if o == nil || o.PageSize == nil {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problems) GetPageSizeOk() (*int32, bool) {
	if o == nil || o.PageSize == nil {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *Problems) HasPageSize() bool {
	if o != nil && o.PageSize != nil {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *Problems) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetNextPageKey returns the NextPageKey field value if set, zero value otherwise.
func (o *Problems) GetNextPageKey() string {
	if o == nil || o.NextPageKey == nil {
		var ret string
		return ret
	}
	return *o.NextPageKey
}

// GetNextPageKeyOk returns a tuple with the NextPageKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problems) GetNextPageKeyOk() (*string, bool) {
	if o == nil || o.NextPageKey == nil {
		return nil, false
	}
	return o.NextPageKey, true
}

// HasNextPageKey returns a boolean if a field has been set.
func (o *Problems) HasNextPageKey() bool {
	if o != nil && o.NextPageKey != nil {
		return true
	}

	return false
}

// SetNextPageKey gets a reference to the given string and assigns it to the NextPageKey field.
func (o *Problems) SetNextPageKey(v string) {
	o.NextPageKey = &v
}

// GetProblems returns the Problems field value if set, zero value otherwise.
func (o *Problems) GetProblems() []Problem {
	if o == nil || o.Problems == nil {
		var ret []Problem
		return ret
	}
	return *o.Problems
}

// GetProblemsOk returns a tuple with the Problems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problems) GetProblemsOk() (*[]Problem, bool) {
	if o == nil || o.Problems == nil {
		return nil, false
	}
	return o.Problems, true
}

// HasProblems returns a boolean if a field has been set.
func (o *Problems) HasProblems() bool {
	if o != nil && o.Problems != nil {
		return true
	}

	return false
}

// SetProblems gets a reference to the given []Problem and assigns it to the Problems field.
func (o *Problems) SetProblems(v []Problem) {
	o.Problems = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *Problems) GetWarnings() []string {
	if o == nil || o.Warnings == nil {
		var ret []string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Problems) GetWarningsOk() (*[]string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *Problems) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *Problems) SetWarnings(v []string) {
	o.Warnings = &v
}

func (o Problems) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["totalCount"] = o.TotalCount
	}
	if o.PageSize != nil {
		toSerialize["pageSize"] = o.PageSize
	}
	if o.NextPageKey != nil {
		toSerialize["nextPageKey"] = o.NextPageKey
	}
	if o.Problems != nil {
		toSerialize["problems"] = o.Problems
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableProblems struct {
	value *Problems
	isSet bool
}

func (v NullableProblems) Get() *Problems {
	return v.value
}

func (v *NullableProblems) Set(val *Problems) {
	v.value = val
	v.isSet = true
}

func (v NullableProblems) IsSet() bool {
	return v.isSet
}

func (v *NullableProblems) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblems(val *Problems) *NullableProblems {
	return &NullableProblems{value: val, isSet: true}
}

func (v NullableProblems) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblems) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


