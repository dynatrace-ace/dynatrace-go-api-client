/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MetricEvidenceAllOf struct for MetricEvidenceAllOf
type MetricEvidenceAllOf struct {
	// The ID of the metric.
	MetricId *string `json:"metricId,omitempty"`
	// The metric's value before the problem start.
	ValueBeforeChangePoint *float32 `json:"valueBeforeChangePoint,omitempty"`
	// The metric's value after the problem start.
	ValueAfterChangePoint *float32 `json:"valueAfterChangePoint,omitempty"`
	// The end time of the evidence, in UTC milliseconds.  The value `null` indicates that the evidence is still open.
	EndTime *int64 `json:"endTime,omitempty"`
	// The unit of the metric.
	Unit *string `json:"unit,omitempty"`
}

// NewMetricEvidenceAllOf instantiates a new MetricEvidenceAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricEvidenceAllOf() *MetricEvidenceAllOf {
	this := MetricEvidenceAllOf{}
	return &this
}

// NewMetricEvidenceAllOfWithDefaults instantiates a new MetricEvidenceAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricEvidenceAllOfWithDefaults() *MetricEvidenceAllOf {
	this := MetricEvidenceAllOf{}
	return &this
}

// GetMetricId returns the MetricId field value if set, zero value otherwise.
func (o *MetricEvidenceAllOf) GetMetricId() string {
	if o == nil || o.MetricId == nil {
		var ret string
		return ret
	}
	return *o.MetricId
}

// GetMetricIdOk returns a tuple with the MetricId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricEvidenceAllOf) GetMetricIdOk() (*string, bool) {
	if o == nil || o.MetricId == nil {
		return nil, false
	}
	return o.MetricId, true
}

// HasMetricId returns a boolean if a field has been set.
func (o *MetricEvidenceAllOf) HasMetricId() bool {
	if o != nil && o.MetricId != nil {
		return true
	}

	return false
}

// SetMetricId gets a reference to the given string and assigns it to the MetricId field.
func (o *MetricEvidenceAllOf) SetMetricId(v string) {
	o.MetricId = &v
}

// GetValueBeforeChangePoint returns the ValueBeforeChangePoint field value if set, zero value otherwise.
func (o *MetricEvidenceAllOf) GetValueBeforeChangePoint() float32 {
	if o == nil || o.ValueBeforeChangePoint == nil {
		var ret float32
		return ret
	}
	return *o.ValueBeforeChangePoint
}

// GetValueBeforeChangePointOk returns a tuple with the ValueBeforeChangePoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricEvidenceAllOf) GetValueBeforeChangePointOk() (*float32, bool) {
	if o == nil || o.ValueBeforeChangePoint == nil {
		return nil, false
	}
	return o.ValueBeforeChangePoint, true
}

// HasValueBeforeChangePoint returns a boolean if a field has been set.
func (o *MetricEvidenceAllOf) HasValueBeforeChangePoint() bool {
	if o != nil && o.ValueBeforeChangePoint != nil {
		return true
	}

	return false
}

// SetValueBeforeChangePoint gets a reference to the given float32 and assigns it to the ValueBeforeChangePoint field.
func (o *MetricEvidenceAllOf) SetValueBeforeChangePoint(v float32) {
	o.ValueBeforeChangePoint = &v
}

// GetValueAfterChangePoint returns the ValueAfterChangePoint field value if set, zero value otherwise.
func (o *MetricEvidenceAllOf) GetValueAfterChangePoint() float32 {
	if o == nil || o.ValueAfterChangePoint == nil {
		var ret float32
		return ret
	}
	return *o.ValueAfterChangePoint
}

// GetValueAfterChangePointOk returns a tuple with the ValueAfterChangePoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricEvidenceAllOf) GetValueAfterChangePointOk() (*float32, bool) {
	if o == nil || o.ValueAfterChangePoint == nil {
		return nil, false
	}
	return o.ValueAfterChangePoint, true
}

// HasValueAfterChangePoint returns a boolean if a field has been set.
func (o *MetricEvidenceAllOf) HasValueAfterChangePoint() bool {
	if o != nil && o.ValueAfterChangePoint != nil {
		return true
	}

	return false
}

// SetValueAfterChangePoint gets a reference to the given float32 and assigns it to the ValueAfterChangePoint field.
func (o *MetricEvidenceAllOf) SetValueAfterChangePoint(v float32) {
	o.ValueAfterChangePoint = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *MetricEvidenceAllOf) GetEndTime() int64 {
	if o == nil || o.EndTime == nil {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricEvidenceAllOf) GetEndTimeOk() (*int64, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *MetricEvidenceAllOf) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *MetricEvidenceAllOf) SetEndTime(v int64) {
	o.EndTime = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *MetricEvidenceAllOf) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricEvidenceAllOf) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *MetricEvidenceAllOf) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *MetricEvidenceAllOf) SetUnit(v string) {
	o.Unit = &v
}

func (o MetricEvidenceAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MetricId != nil {
		toSerialize["metricId"] = o.MetricId
	}
	if o.ValueBeforeChangePoint != nil {
		toSerialize["valueBeforeChangePoint"] = o.ValueBeforeChangePoint
	}
	if o.ValueAfterChangePoint != nil {
		toSerialize["valueAfterChangePoint"] = o.ValueAfterChangePoint
	}
	if o.EndTime != nil {
		toSerialize["endTime"] = o.EndTime
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableMetricEvidenceAllOf struct {
	value *MetricEvidenceAllOf
	isSet bool
}

func (v NullableMetricEvidenceAllOf) Get() *MetricEvidenceAllOf {
	return v.value
}

func (v *NullableMetricEvidenceAllOf) Set(val *MetricEvidenceAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricEvidenceAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricEvidenceAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricEvidenceAllOf(val *MetricEvidenceAllOf) *NullableMetricEvidenceAllOf {
	return &NullableMetricEvidenceAllOf{value: val, isSet: true}
}

func (v NullableMetricEvidenceAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricEvidenceAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


