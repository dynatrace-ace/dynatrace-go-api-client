/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// ReleasesApiService ReleasesApi service
type ReleasesApiService service

type ApiGetReleasesRequest struct {
	ctx _context.Context
	ApiService *ReleasesApiService
	from *string
	to *string
	nextPageKey *string
	pageSize *int64
	demo *bool
	releasesSelector *string
	sort *string
}

func (r ApiGetReleasesRequest) From(from string) ApiGetReleasesRequest {
	r.from = &from
	return r
}
func (r ApiGetReleasesRequest) To(to string) ApiGetReleasesRequest {
	r.to = &to
	return r
}
func (r ApiGetReleasesRequest) NextPageKey(nextPageKey string) ApiGetReleasesRequest {
	r.nextPageKey = &nextPageKey
	return r
}
func (r ApiGetReleasesRequest) PageSize(pageSize int64) ApiGetReleasesRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiGetReleasesRequest) Demo(demo bool) ApiGetReleasesRequest {
	r.demo = &demo
	return r
}
func (r ApiGetReleasesRequest) ReleasesSelector(releasesSelector string) ApiGetReleasesRequest {
	r.releasesSelector = &releasesSelector
	return r
}
func (r ApiGetReleasesRequest) Sort(sort string) ApiGetReleasesRequest {
	r.sort = &sort
	return r
}

func (r ApiGetReleasesRequest) Execute() (Releases, *_nethttp.Response, error) {
	return r.ApiService.GetReleasesExecute(r)
}

/*
 * GetReleases Returns all releases | maturity=EARLY_ADOPTER
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetReleasesRequest
 */
func (a *ReleasesApiService) GetReleases(ctx _context.Context) ApiGetReleasesRequest {
	return ApiGetReleasesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return Releases
 */
func (a *ReleasesApiService) GetReleasesExecute(r ApiGetReleasesRequest) (Releases, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Releases
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReleasesApiService.GetReleases")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/releases"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.to != nil {
		localVarQueryParams.Add("to", parameterToString(*r.to, ""))
	}
	if r.nextPageKey != nil {
		localVarQueryParams.Add("nextPageKey", parameterToString(*r.nextPageKey, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.demo != nil {
		localVarQueryParams.Add("demo", parameterToString(*r.demo, ""))
	}
	if r.releasesSelector != nil {
		localVarQueryParams.Add("releasesSelector", parameterToString(*r.releasesSelector, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
