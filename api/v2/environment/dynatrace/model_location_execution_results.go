/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// LocationExecutionResults Results of the execution HTTP monitor's requests at a given location
type LocationExecutionResults struct {
	// Location id.
	LocationId *string `json:"locationId,omitempty"`
	// Execution id.
	ExecutionId *string `json:"executionId,omitempty"`
	// The list of the monitor's request results executed on this location.
	RequestResults *[]MonitorRequestExecutionResult `json:"requestResults,omitempty"`
}

// NewLocationExecutionResults instantiates a new LocationExecutionResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationExecutionResults() *LocationExecutionResults {
	this := LocationExecutionResults{}
	return &this
}

// NewLocationExecutionResultsWithDefaults instantiates a new LocationExecutionResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationExecutionResultsWithDefaults() *LocationExecutionResults {
	this := LocationExecutionResults{}
	return &this
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *LocationExecutionResults) GetLocationId() string {
	if o == nil || o.LocationId == nil {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationExecutionResults) GetLocationIdOk() (*string, bool) {
	if o == nil || o.LocationId == nil {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *LocationExecutionResults) HasLocationId() bool {
	if o != nil && o.LocationId != nil {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *LocationExecutionResults) SetLocationId(v string) {
	o.LocationId = &v
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *LocationExecutionResults) GetExecutionId() string {
	if o == nil || o.ExecutionId == nil {
		var ret string
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationExecutionResults) GetExecutionIdOk() (*string, bool) {
	if o == nil || o.ExecutionId == nil {
		return nil, false
	}
	return o.ExecutionId, true
}

// HasExecutionId returns a boolean if a field has been set.
func (o *LocationExecutionResults) HasExecutionId() bool {
	if o != nil && o.ExecutionId != nil {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given string and assigns it to the ExecutionId field.
func (o *LocationExecutionResults) SetExecutionId(v string) {
	o.ExecutionId = &v
}

// GetRequestResults returns the RequestResults field value if set, zero value otherwise.
func (o *LocationExecutionResults) GetRequestResults() []MonitorRequestExecutionResult {
	if o == nil || o.RequestResults == nil {
		var ret []MonitorRequestExecutionResult
		return ret
	}
	return *o.RequestResults
}

// GetRequestResultsOk returns a tuple with the RequestResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationExecutionResults) GetRequestResultsOk() (*[]MonitorRequestExecutionResult, bool) {
	if o == nil || o.RequestResults == nil {
		return nil, false
	}
	return o.RequestResults, true
}

// HasRequestResults returns a boolean if a field has been set.
func (o *LocationExecutionResults) HasRequestResults() bool {
	if o != nil && o.RequestResults != nil {
		return true
	}

	return false
}

// SetRequestResults gets a reference to the given []MonitorRequestExecutionResult and assigns it to the RequestResults field.
func (o *LocationExecutionResults) SetRequestResults(v []MonitorRequestExecutionResult) {
	o.RequestResults = &v
}

func (o LocationExecutionResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LocationId != nil {
		toSerialize["locationId"] = o.LocationId
	}
	if o.ExecutionId != nil {
		toSerialize["executionId"] = o.ExecutionId
	}
	if o.RequestResults != nil {
		toSerialize["requestResults"] = o.RequestResults
	}
	return json.Marshal(toSerialize)
}

type NullableLocationExecutionResults struct {
	value *LocationExecutionResults
	isSet bool
}

func (v NullableLocationExecutionResults) Get() *LocationExecutionResults {
	return v.value
}

func (v *NullableLocationExecutionResults) Set(val *LocationExecutionResults) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationExecutionResults) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationExecutionResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationExecutionResults(val *LocationExecutionResults) *NullableLocationExecutionResults {
	return &NullableLocationExecutionResults{value: val, isSet: true}
}

func (v NullableLocationExecutionResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationExecutionResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


