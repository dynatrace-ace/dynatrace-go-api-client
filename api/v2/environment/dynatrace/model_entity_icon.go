/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EntityIcon The icon of a monitored entity.
type EntityIcon struct {
	// The primary icon of the entity.   Specified by the [barista](https://dt-url.net/u403suy) ID of the icon.
	PrimaryIconType *string `json:"primaryIconType,omitempty"`
	// The secondary icon of the entity.   Specified by the [barista](https://dt-url.net/u403suy) ID of the icon.
	SecondaryIconType *string `json:"secondaryIconType,omitempty"`
	// The user-defined icon of the entity.   Specify the [barista](https://dt-url.net/u403suy) ID of the icon or a URL of your own icon.
	CustomIconPath *string `json:"customIconPath,omitempty"`
}

// NewEntityIcon instantiates a new EntityIcon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityIcon() *EntityIcon {
	this := EntityIcon{}
	return &this
}

// NewEntityIconWithDefaults instantiates a new EntityIcon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityIconWithDefaults() *EntityIcon {
	this := EntityIcon{}
	return &this
}

// GetPrimaryIconType returns the PrimaryIconType field value if set, zero value otherwise.
func (o *EntityIcon) GetPrimaryIconType() string {
	if o == nil || o.PrimaryIconType == nil {
		var ret string
		return ret
	}
	return *o.PrimaryIconType
}

// GetPrimaryIconTypeOk returns a tuple with the PrimaryIconType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityIcon) GetPrimaryIconTypeOk() (*string, bool) {
	if o == nil || o.PrimaryIconType == nil {
		return nil, false
	}
	return o.PrimaryIconType, true
}

// HasPrimaryIconType returns a boolean if a field has been set.
func (o *EntityIcon) HasPrimaryIconType() bool {
	if o != nil && o.PrimaryIconType != nil {
		return true
	}

	return false
}

// SetPrimaryIconType gets a reference to the given string and assigns it to the PrimaryIconType field.
func (o *EntityIcon) SetPrimaryIconType(v string) {
	o.PrimaryIconType = &v
}

// GetSecondaryIconType returns the SecondaryIconType field value if set, zero value otherwise.
func (o *EntityIcon) GetSecondaryIconType() string {
	if o == nil || o.SecondaryIconType == nil {
		var ret string
		return ret
	}
	return *o.SecondaryIconType
}

// GetSecondaryIconTypeOk returns a tuple with the SecondaryIconType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityIcon) GetSecondaryIconTypeOk() (*string, bool) {
	if o == nil || o.SecondaryIconType == nil {
		return nil, false
	}
	return o.SecondaryIconType, true
}

// HasSecondaryIconType returns a boolean if a field has been set.
func (o *EntityIcon) HasSecondaryIconType() bool {
	if o != nil && o.SecondaryIconType != nil {
		return true
	}

	return false
}

// SetSecondaryIconType gets a reference to the given string and assigns it to the SecondaryIconType field.
func (o *EntityIcon) SetSecondaryIconType(v string) {
	o.SecondaryIconType = &v
}

// GetCustomIconPath returns the CustomIconPath field value if set, zero value otherwise.
func (o *EntityIcon) GetCustomIconPath() string {
	if o == nil || o.CustomIconPath == nil {
		var ret string
		return ret
	}
	return *o.CustomIconPath
}

// GetCustomIconPathOk returns a tuple with the CustomIconPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityIcon) GetCustomIconPathOk() (*string, bool) {
	if o == nil || o.CustomIconPath == nil {
		return nil, false
	}
	return o.CustomIconPath, true
}

// HasCustomIconPath returns a boolean if a field has been set.
func (o *EntityIcon) HasCustomIconPath() bool {
	if o != nil && o.CustomIconPath != nil {
		return true
	}

	return false
}

// SetCustomIconPath gets a reference to the given string and assigns it to the CustomIconPath field.
func (o *EntityIcon) SetCustomIconPath(v string) {
	o.CustomIconPath = &v
}

func (o EntityIcon) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PrimaryIconType != nil {
		toSerialize["primaryIconType"] = o.PrimaryIconType
	}
	if o.SecondaryIconType != nil {
		toSerialize["secondaryIconType"] = o.SecondaryIconType
	}
	if o.CustomIconPath != nil {
		toSerialize["customIconPath"] = o.CustomIconPath
	}
	return json.Marshal(toSerialize)
}

type NullableEntityIcon struct {
	value *EntityIcon
	isSet bool
}

func (v NullableEntityIcon) Get() *EntityIcon {
	return v.value
}

func (v *NullableEntityIcon) Set(val *EntityIcon) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityIcon) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityIcon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityIcon(val *EntityIcon) *NullableEntityIcon {
	return &NullableEntityIcon{value: val, isSet: true}
}

func (v NullableEntityIcon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityIcon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


