/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SecurityProblemDetails Parameters of a security problem
type SecurityProblemDetails struct {
	// The ID of the security problem.
	SecurityProblemId *string `json:"securityProblemId,omitempty"`
	// The displayId of the security problem.
	DisplayId *string `json:"displayId,omitempty"`
	// The status of the security problem.
	Status *string `json:"status,omitempty"`
	// Indicates if a security problem is muted.
	Muted *bool `json:"muted,omitempty"`
	// The external vulnerability ID of the security problem.
	ExternalVulnerabilityId *string `json:"externalVulnerabilityId,omitempty"`
	// The type of the vulnerability.
	VulnerabilityType *string `json:"vulnerabilityType,omitempty"`
	// The title of the security problem.
	Title *string `json:"title,omitempty"`
	// The package name of the security problem.
	PackageName *string `json:"packageName,omitempty"`
	// The URL to the security problem details page.
	Url *string `json:"url,omitempty"`
	// The description of the security problem.
	Description *string `json:"description,omitempty"`
	// The technology of the security problem.
	Technology *string `json:"technology,omitempty"`
	// The timestamp of the first occurrence of the security problem.
	FirstSeenTimestamp *int64 `json:"firstSeenTimestamp,omitempty"`
	// The timestamp of the most recent security problem change.
	LastUpdatedTimestamp *int64 `json:"lastUpdatedTimestamp,omitempty"`
	RiskAssessment *RiskAssessment `json:"riskAssessment,omitempty"`
	// Management zones to which the affected entities belong.
	ManagementZones *[]ManagementZone `json:"managementZones,omitempty"`
	// CVE IDs of the security problem.
	CveIds *[]string `json:"cveIds,omitempty"`
	// An ordered (newest first) list of events of the security problem.
	Events *[]SecurityProblemEvent `json:"events,omitempty"`
	// A list of vulnerable components of the security problem.   A vulnerable component is what causes the security problem.
	VulnerableComponents *[]VulnerableComponent `json:"vulnerableComponents,omitempty"`
	// A list of affected entities of the security problem.   An affected entity is an entity where a vulnerable component runs.
	AffectedEntities *[]string `json:"affectedEntities,omitempty"`
	// A list of exposed entities of the security problem.   An exposed entity is an affected entity that is exposed to the internet.
	ExposedEntities *[]string `json:"exposedEntities,omitempty"`
	// A list of data assets reachable by affected entities of the security problem.   A data asset is a service that has database access.
	ReachableDataAssets *[]string `json:"reachableDataAssets,omitempty"`
	RelatedEntities *RelatedEntitiesList `json:"relatedEntities,omitempty"`
	// A list of related container images of the security problem.   A related container image is a container image that contains at least one *affected entity*.
	RelatedContainerImages *[]SecurityProblemDetailsRelatedContainerImages `json:"relatedContainerImages,omitempty"`
}

// NewSecurityProblemDetails instantiates a new SecurityProblemDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityProblemDetails() *SecurityProblemDetails {
	this := SecurityProblemDetails{}
	return &this
}

// NewSecurityProblemDetailsWithDefaults instantiates a new SecurityProblemDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityProblemDetailsWithDefaults() *SecurityProblemDetails {
	this := SecurityProblemDetails{}
	return &this
}

// GetSecurityProblemId returns the SecurityProblemId field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetSecurityProblemId() string {
	if o == nil || o.SecurityProblemId == nil {
		var ret string
		return ret
	}
	return *o.SecurityProblemId
}

// GetSecurityProblemIdOk returns a tuple with the SecurityProblemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetSecurityProblemIdOk() (*string, bool) {
	if o == nil || o.SecurityProblemId == nil {
		return nil, false
	}
	return o.SecurityProblemId, true
}

// HasSecurityProblemId returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasSecurityProblemId() bool {
	if o != nil && o.SecurityProblemId != nil {
		return true
	}

	return false
}

// SetSecurityProblemId gets a reference to the given string and assigns it to the SecurityProblemId field.
func (o *SecurityProblemDetails) SetSecurityProblemId(v string) {
	o.SecurityProblemId = &v
}

// GetDisplayId returns the DisplayId field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetDisplayId() string {
	if o == nil || o.DisplayId == nil {
		var ret string
		return ret
	}
	return *o.DisplayId
}

// GetDisplayIdOk returns a tuple with the DisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetDisplayIdOk() (*string, bool) {
	if o == nil || o.DisplayId == nil {
		return nil, false
	}
	return o.DisplayId, true
}

// HasDisplayId returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasDisplayId() bool {
	if o != nil && o.DisplayId != nil {
		return true
	}

	return false
}

// SetDisplayId gets a reference to the given string and assigns it to the DisplayId field.
func (o *SecurityProblemDetails) SetDisplayId(v string) {
	o.DisplayId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SecurityProblemDetails) SetStatus(v string) {
	o.Status = &v
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetMuted() bool {
	if o == nil || o.Muted == nil {
		var ret bool
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetMutedOk() (*bool, bool) {
	if o == nil || o.Muted == nil {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasMuted() bool {
	if o != nil && o.Muted != nil {
		return true
	}

	return false
}

// SetMuted gets a reference to the given bool and assigns it to the Muted field.
func (o *SecurityProblemDetails) SetMuted(v bool) {
	o.Muted = &v
}

// GetExternalVulnerabilityId returns the ExternalVulnerabilityId field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetExternalVulnerabilityId() string {
	if o == nil || o.ExternalVulnerabilityId == nil {
		var ret string
		return ret
	}
	return *o.ExternalVulnerabilityId
}

// GetExternalVulnerabilityIdOk returns a tuple with the ExternalVulnerabilityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetExternalVulnerabilityIdOk() (*string, bool) {
	if o == nil || o.ExternalVulnerabilityId == nil {
		return nil, false
	}
	return o.ExternalVulnerabilityId, true
}

// HasExternalVulnerabilityId returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasExternalVulnerabilityId() bool {
	if o != nil && o.ExternalVulnerabilityId != nil {
		return true
	}

	return false
}

// SetExternalVulnerabilityId gets a reference to the given string and assigns it to the ExternalVulnerabilityId field.
func (o *SecurityProblemDetails) SetExternalVulnerabilityId(v string) {
	o.ExternalVulnerabilityId = &v
}

// GetVulnerabilityType returns the VulnerabilityType field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetVulnerabilityType() string {
	if o == nil || o.VulnerabilityType == nil {
		var ret string
		return ret
	}
	return *o.VulnerabilityType
}

// GetVulnerabilityTypeOk returns a tuple with the VulnerabilityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetVulnerabilityTypeOk() (*string, bool) {
	if o == nil || o.VulnerabilityType == nil {
		return nil, false
	}
	return o.VulnerabilityType, true
}

// HasVulnerabilityType returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasVulnerabilityType() bool {
	if o != nil && o.VulnerabilityType != nil {
		return true
	}

	return false
}

// SetVulnerabilityType gets a reference to the given string and assigns it to the VulnerabilityType field.
func (o *SecurityProblemDetails) SetVulnerabilityType(v string) {
	o.VulnerabilityType = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SecurityProblemDetails) SetTitle(v string) {
	o.Title = &v
}

// GetPackageName returns the PackageName field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetPackageName() string {
	if o == nil || o.PackageName == nil {
		var ret string
		return ret
	}
	return *o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetPackageNameOk() (*string, bool) {
	if o == nil || o.PackageName == nil {
		return nil, false
	}
	return o.PackageName, true
}

// HasPackageName returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasPackageName() bool {
	if o != nil && o.PackageName != nil {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given string and assigns it to the PackageName field.
func (o *SecurityProblemDetails) SetPackageName(v string) {
	o.PackageName = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SecurityProblemDetails) SetUrl(v string) {
	o.Url = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SecurityProblemDetails) SetDescription(v string) {
	o.Description = &v
}

// GetTechnology returns the Technology field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetTechnology() string {
	if o == nil || o.Technology == nil {
		var ret string
		return ret
	}
	return *o.Technology
}

// GetTechnologyOk returns a tuple with the Technology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetTechnologyOk() (*string, bool) {
	if o == nil || o.Technology == nil {
		return nil, false
	}
	return o.Technology, true
}

// HasTechnology returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasTechnology() bool {
	if o != nil && o.Technology != nil {
		return true
	}

	return false
}

// SetTechnology gets a reference to the given string and assigns it to the Technology field.
func (o *SecurityProblemDetails) SetTechnology(v string) {
	o.Technology = &v
}

// GetFirstSeenTimestamp returns the FirstSeenTimestamp field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetFirstSeenTimestamp() int64 {
	if o == nil || o.FirstSeenTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.FirstSeenTimestamp
}

// GetFirstSeenTimestampOk returns a tuple with the FirstSeenTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetFirstSeenTimestampOk() (*int64, bool) {
	if o == nil || o.FirstSeenTimestamp == nil {
		return nil, false
	}
	return o.FirstSeenTimestamp, true
}

// HasFirstSeenTimestamp returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasFirstSeenTimestamp() bool {
	if o != nil && o.FirstSeenTimestamp != nil {
		return true
	}

	return false
}

// SetFirstSeenTimestamp gets a reference to the given int64 and assigns it to the FirstSeenTimestamp field.
func (o *SecurityProblemDetails) SetFirstSeenTimestamp(v int64) {
	o.FirstSeenTimestamp = &v
}

// GetLastUpdatedTimestamp returns the LastUpdatedTimestamp field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetLastUpdatedTimestamp() int64 {
	if o == nil || o.LastUpdatedTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimestamp
}

// GetLastUpdatedTimestampOk returns a tuple with the LastUpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetLastUpdatedTimestampOk() (*int64, bool) {
	if o == nil || o.LastUpdatedTimestamp == nil {
		return nil, false
	}
	return o.LastUpdatedTimestamp, true
}

// HasLastUpdatedTimestamp returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasLastUpdatedTimestamp() bool {
	if o != nil && o.LastUpdatedTimestamp != nil {
		return true
	}

	return false
}

// SetLastUpdatedTimestamp gets a reference to the given int64 and assigns it to the LastUpdatedTimestamp field.
func (o *SecurityProblemDetails) SetLastUpdatedTimestamp(v int64) {
	o.LastUpdatedTimestamp = &v
}

// GetRiskAssessment returns the RiskAssessment field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetRiskAssessment() RiskAssessment {
	if o == nil || o.RiskAssessment == nil {
		var ret RiskAssessment
		return ret
	}
	return *o.RiskAssessment
}

// GetRiskAssessmentOk returns a tuple with the RiskAssessment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetRiskAssessmentOk() (*RiskAssessment, bool) {
	if o == nil || o.RiskAssessment == nil {
		return nil, false
	}
	return o.RiskAssessment, true
}

// HasRiskAssessment returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasRiskAssessment() bool {
	if o != nil && o.RiskAssessment != nil {
		return true
	}

	return false
}

// SetRiskAssessment gets a reference to the given RiskAssessment and assigns it to the RiskAssessment field.
func (o *SecurityProblemDetails) SetRiskAssessment(v RiskAssessment) {
	o.RiskAssessment = &v
}

// GetManagementZones returns the ManagementZones field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetManagementZones() []ManagementZone {
	if o == nil || o.ManagementZones == nil {
		var ret []ManagementZone
		return ret
	}
	return *o.ManagementZones
}

// GetManagementZonesOk returns a tuple with the ManagementZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetManagementZonesOk() (*[]ManagementZone, bool) {
	if o == nil || o.ManagementZones == nil {
		return nil, false
	}
	return o.ManagementZones, true
}

// HasManagementZones returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasManagementZones() bool {
	if o != nil && o.ManagementZones != nil {
		return true
	}

	return false
}

// SetManagementZones gets a reference to the given []ManagementZone and assigns it to the ManagementZones field.
func (o *SecurityProblemDetails) SetManagementZones(v []ManagementZone) {
	o.ManagementZones = &v
}

// GetCveIds returns the CveIds field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetCveIds() []string {
	if o == nil || o.CveIds == nil {
		var ret []string
		return ret
	}
	return *o.CveIds
}

// GetCveIdsOk returns a tuple with the CveIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetCveIdsOk() (*[]string, bool) {
	if o == nil || o.CveIds == nil {
		return nil, false
	}
	return o.CveIds, true
}

// HasCveIds returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasCveIds() bool {
	if o != nil && o.CveIds != nil {
		return true
	}

	return false
}

// SetCveIds gets a reference to the given []string and assigns it to the CveIds field.
func (o *SecurityProblemDetails) SetCveIds(v []string) {
	o.CveIds = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetEvents() []SecurityProblemEvent {
	if o == nil || o.Events == nil {
		var ret []SecurityProblemEvent
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetEventsOk() (*[]SecurityProblemEvent, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []SecurityProblemEvent and assigns it to the Events field.
func (o *SecurityProblemDetails) SetEvents(v []SecurityProblemEvent) {
	o.Events = &v
}

// GetVulnerableComponents returns the VulnerableComponents field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetVulnerableComponents() []VulnerableComponent {
	if o == nil || o.VulnerableComponents == nil {
		var ret []VulnerableComponent
		return ret
	}
	return *o.VulnerableComponents
}

// GetVulnerableComponentsOk returns a tuple with the VulnerableComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetVulnerableComponentsOk() (*[]VulnerableComponent, bool) {
	if o == nil || o.VulnerableComponents == nil {
		return nil, false
	}
	return o.VulnerableComponents, true
}

// HasVulnerableComponents returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasVulnerableComponents() bool {
	if o != nil && o.VulnerableComponents != nil {
		return true
	}

	return false
}

// SetVulnerableComponents gets a reference to the given []VulnerableComponent and assigns it to the VulnerableComponents field.
func (o *SecurityProblemDetails) SetVulnerableComponents(v []VulnerableComponent) {
	o.VulnerableComponents = &v
}

// GetAffectedEntities returns the AffectedEntities field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetAffectedEntities() []string {
	if o == nil || o.AffectedEntities == nil {
		var ret []string
		return ret
	}
	return *o.AffectedEntities
}

// GetAffectedEntitiesOk returns a tuple with the AffectedEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetAffectedEntitiesOk() (*[]string, bool) {
	if o == nil || o.AffectedEntities == nil {
		return nil, false
	}
	return o.AffectedEntities, true
}

// HasAffectedEntities returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasAffectedEntities() bool {
	if o != nil && o.AffectedEntities != nil {
		return true
	}

	return false
}

// SetAffectedEntities gets a reference to the given []string and assigns it to the AffectedEntities field.
func (o *SecurityProblemDetails) SetAffectedEntities(v []string) {
	o.AffectedEntities = &v
}

// GetExposedEntities returns the ExposedEntities field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetExposedEntities() []string {
	if o == nil || o.ExposedEntities == nil {
		var ret []string
		return ret
	}
	return *o.ExposedEntities
}

// GetExposedEntitiesOk returns a tuple with the ExposedEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetExposedEntitiesOk() (*[]string, bool) {
	if o == nil || o.ExposedEntities == nil {
		return nil, false
	}
	return o.ExposedEntities, true
}

// HasExposedEntities returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasExposedEntities() bool {
	if o != nil && o.ExposedEntities != nil {
		return true
	}

	return false
}

// SetExposedEntities gets a reference to the given []string and assigns it to the ExposedEntities field.
func (o *SecurityProblemDetails) SetExposedEntities(v []string) {
	o.ExposedEntities = &v
}

// GetReachableDataAssets returns the ReachableDataAssets field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetReachableDataAssets() []string {
	if o == nil || o.ReachableDataAssets == nil {
		var ret []string
		return ret
	}
	return *o.ReachableDataAssets
}

// GetReachableDataAssetsOk returns a tuple with the ReachableDataAssets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetReachableDataAssetsOk() (*[]string, bool) {
	if o == nil || o.ReachableDataAssets == nil {
		return nil, false
	}
	return o.ReachableDataAssets, true
}

// HasReachableDataAssets returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasReachableDataAssets() bool {
	if o != nil && o.ReachableDataAssets != nil {
		return true
	}

	return false
}

// SetReachableDataAssets gets a reference to the given []string and assigns it to the ReachableDataAssets field.
func (o *SecurityProblemDetails) SetReachableDataAssets(v []string) {
	o.ReachableDataAssets = &v
}

// GetRelatedEntities returns the RelatedEntities field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetRelatedEntities() RelatedEntitiesList {
	if o == nil || o.RelatedEntities == nil {
		var ret RelatedEntitiesList
		return ret
	}
	return *o.RelatedEntities
}

// GetRelatedEntitiesOk returns a tuple with the RelatedEntities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetRelatedEntitiesOk() (*RelatedEntitiesList, bool) {
	if o == nil || o.RelatedEntities == nil {
		return nil, false
	}
	return o.RelatedEntities, true
}

// HasRelatedEntities returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasRelatedEntities() bool {
	if o != nil && o.RelatedEntities != nil {
		return true
	}

	return false
}

// SetRelatedEntities gets a reference to the given RelatedEntitiesList and assigns it to the RelatedEntities field.
func (o *SecurityProblemDetails) SetRelatedEntities(v RelatedEntitiesList) {
	o.RelatedEntities = &v
}

// GetRelatedContainerImages returns the RelatedContainerImages field value if set, zero value otherwise.
func (o *SecurityProblemDetails) GetRelatedContainerImages() []SecurityProblemDetailsRelatedContainerImages {
	if o == nil || o.RelatedContainerImages == nil {
		var ret []SecurityProblemDetailsRelatedContainerImages
		return ret
	}
	return *o.RelatedContainerImages
}

// GetRelatedContainerImagesOk returns a tuple with the RelatedContainerImages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblemDetails) GetRelatedContainerImagesOk() (*[]SecurityProblemDetailsRelatedContainerImages, bool) {
	if o == nil || o.RelatedContainerImages == nil {
		return nil, false
	}
	return o.RelatedContainerImages, true
}

// HasRelatedContainerImages returns a boolean if a field has been set.
func (o *SecurityProblemDetails) HasRelatedContainerImages() bool {
	if o != nil && o.RelatedContainerImages != nil {
		return true
	}

	return false
}

// SetRelatedContainerImages gets a reference to the given []SecurityProblemDetailsRelatedContainerImages and assigns it to the RelatedContainerImages field.
func (o *SecurityProblemDetails) SetRelatedContainerImages(v []SecurityProblemDetailsRelatedContainerImages) {
	o.RelatedContainerImages = &v
}

func (o SecurityProblemDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SecurityProblemId != nil {
		toSerialize["securityProblemId"] = o.SecurityProblemId
	}
	if o.DisplayId != nil {
		toSerialize["displayId"] = o.DisplayId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Muted != nil {
		toSerialize["muted"] = o.Muted
	}
	if o.ExternalVulnerabilityId != nil {
		toSerialize["externalVulnerabilityId"] = o.ExternalVulnerabilityId
	}
	if o.VulnerabilityType != nil {
		toSerialize["vulnerabilityType"] = o.VulnerabilityType
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.PackageName != nil {
		toSerialize["packageName"] = o.PackageName
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Technology != nil {
		toSerialize["technology"] = o.Technology
	}
	if o.FirstSeenTimestamp != nil {
		toSerialize["firstSeenTimestamp"] = o.FirstSeenTimestamp
	}
	if o.LastUpdatedTimestamp != nil {
		toSerialize["lastUpdatedTimestamp"] = o.LastUpdatedTimestamp
	}
	if o.RiskAssessment != nil {
		toSerialize["riskAssessment"] = o.RiskAssessment
	}
	if o.ManagementZones != nil {
		toSerialize["managementZones"] = o.ManagementZones
	}
	if o.CveIds != nil {
		toSerialize["cveIds"] = o.CveIds
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.VulnerableComponents != nil {
		toSerialize["vulnerableComponents"] = o.VulnerableComponents
	}
	if o.AffectedEntities != nil {
		toSerialize["affectedEntities"] = o.AffectedEntities
	}
	if o.ExposedEntities != nil {
		toSerialize["exposedEntities"] = o.ExposedEntities
	}
	if o.ReachableDataAssets != nil {
		toSerialize["reachableDataAssets"] = o.ReachableDataAssets
	}
	if o.RelatedEntities != nil {
		toSerialize["relatedEntities"] = o.RelatedEntities
	}
	if o.RelatedContainerImages != nil {
		toSerialize["relatedContainerImages"] = o.RelatedContainerImages
	}
	return json.Marshal(toSerialize)
}

type NullableSecurityProblemDetails struct {
	value *SecurityProblemDetails
	isSet bool
}

func (v NullableSecurityProblemDetails) Get() *SecurityProblemDetails {
	return v.value
}

func (v *NullableSecurityProblemDetails) Set(val *SecurityProblemDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityProblemDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityProblemDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityProblemDetails(val *SecurityProblemDetails) *NullableSecurityProblemDetails {
	return &NullableSecurityProblemDetails{value: val, isSet: true}
}

func (v NullableSecurityProblemDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityProblemDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


