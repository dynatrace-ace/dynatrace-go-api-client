/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TransactionalEvidenceAllOf struct for TransactionalEvidenceAllOf
type TransactionalEvidenceAllOf struct {
	// The metric's value before the problem start.
	ValueBeforeChangePoint *float32 `json:"valueBeforeChangePoint,omitempty"`
	// The metric's value after the problem start.
	ValueAfterChangePoint *float32 `json:"valueAfterChangePoint,omitempty"`
	// The end time of the evidence, in UTC milliseconds
	EndTime *int64 `json:"endTime,omitempty"`
	// The unit of the metric.
	Unit *string `json:"unit,omitempty"`
}

// NewTransactionalEvidenceAllOf instantiates a new TransactionalEvidenceAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionalEvidenceAllOf() *TransactionalEvidenceAllOf {
	this := TransactionalEvidenceAllOf{}
	return &this
}

// NewTransactionalEvidenceAllOfWithDefaults instantiates a new TransactionalEvidenceAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionalEvidenceAllOfWithDefaults() *TransactionalEvidenceAllOf {
	this := TransactionalEvidenceAllOf{}
	return &this
}

// GetValueBeforeChangePoint returns the ValueBeforeChangePoint field value if set, zero value otherwise.
func (o *TransactionalEvidenceAllOf) GetValueBeforeChangePoint() float32 {
	if o == nil || o.ValueBeforeChangePoint == nil {
		var ret float32
		return ret
	}
	return *o.ValueBeforeChangePoint
}

// GetValueBeforeChangePointOk returns a tuple with the ValueBeforeChangePoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionalEvidenceAllOf) GetValueBeforeChangePointOk() (*float32, bool) {
	if o == nil || o.ValueBeforeChangePoint == nil {
		return nil, false
	}
	return o.ValueBeforeChangePoint, true
}

// HasValueBeforeChangePoint returns a boolean if a field has been set.
func (o *TransactionalEvidenceAllOf) HasValueBeforeChangePoint() bool {
	if o != nil && o.ValueBeforeChangePoint != nil {
		return true
	}

	return false
}

// SetValueBeforeChangePoint gets a reference to the given float32 and assigns it to the ValueBeforeChangePoint field.
func (o *TransactionalEvidenceAllOf) SetValueBeforeChangePoint(v float32) {
	o.ValueBeforeChangePoint = &v
}

// GetValueAfterChangePoint returns the ValueAfterChangePoint field value if set, zero value otherwise.
func (o *TransactionalEvidenceAllOf) GetValueAfterChangePoint() float32 {
	if o == nil || o.ValueAfterChangePoint == nil {
		var ret float32
		return ret
	}
	return *o.ValueAfterChangePoint
}

// GetValueAfterChangePointOk returns a tuple with the ValueAfterChangePoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionalEvidenceAllOf) GetValueAfterChangePointOk() (*float32, bool) {
	if o == nil || o.ValueAfterChangePoint == nil {
		return nil, false
	}
	return o.ValueAfterChangePoint, true
}

// HasValueAfterChangePoint returns a boolean if a field has been set.
func (o *TransactionalEvidenceAllOf) HasValueAfterChangePoint() bool {
	if o != nil && o.ValueAfterChangePoint != nil {
		return true
	}

	return false
}

// SetValueAfterChangePoint gets a reference to the given float32 and assigns it to the ValueAfterChangePoint field.
func (o *TransactionalEvidenceAllOf) SetValueAfterChangePoint(v float32) {
	o.ValueAfterChangePoint = &v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *TransactionalEvidenceAllOf) GetEndTime() int64 {
	if o == nil || o.EndTime == nil {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionalEvidenceAllOf) GetEndTimeOk() (*int64, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *TransactionalEvidenceAllOf) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *TransactionalEvidenceAllOf) SetEndTime(v int64) {
	o.EndTime = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *TransactionalEvidenceAllOf) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionalEvidenceAllOf) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *TransactionalEvidenceAllOf) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *TransactionalEvidenceAllOf) SetUnit(v string) {
	o.Unit = &v
}

func (o TransactionalEvidenceAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ValueBeforeChangePoint != nil {
		toSerialize["valueBeforeChangePoint"] = o.ValueBeforeChangePoint
	}
	if o.ValueAfterChangePoint != nil {
		toSerialize["valueAfterChangePoint"] = o.ValueAfterChangePoint
	}
	if o.EndTime != nil {
		toSerialize["endTime"] = o.EndTime
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionalEvidenceAllOf struct {
	value *TransactionalEvidenceAllOf
	isSet bool
}

func (v NullableTransactionalEvidenceAllOf) Get() *TransactionalEvidenceAllOf {
	return v.value
}

func (v *NullableTransactionalEvidenceAllOf) Set(val *TransactionalEvidenceAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionalEvidenceAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionalEvidenceAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionalEvidenceAllOf(val *TransactionalEvidenceAllOf) *NullableTransactionalEvidenceAllOf {
	return &NullableTransactionalEvidenceAllOf{value: val, isSet: true}
}

func (v NullableTransactionalEvidenceAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionalEvidenceAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


