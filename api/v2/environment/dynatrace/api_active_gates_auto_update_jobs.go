/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ActiveGatesAutoUpdateJobsApiService ActiveGatesAutoUpdateJobsApi service
type ActiveGatesAutoUpdateJobsApiService service

type ApiCreateUpdateJobForAgRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateJobsApiService
	agId string
	updateJob *UpdateJob
}

func (r ApiCreateUpdateJobForAgRequest) UpdateJob(updateJob UpdateJob) ApiCreateUpdateJobForAgRequest {
	r.updateJob = &updateJob
	return r
}

func (r ApiCreateUpdateJobForAgRequest) Execute() (UpdateJob, *_nethttp.Response, error) {
	return r.ApiService.CreateUpdateJobForAgExecute(r)
}

/*
 * CreateUpdateJobForAg Creates a new update job for the specified ActiveGate
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agId The ID of the required ActiveGate.
 * @return ApiCreateUpdateJobForAgRequest
 */
func (a *ActiveGatesAutoUpdateJobsApiService) CreateUpdateJobForAg(ctx _context.Context, agId string) ApiCreateUpdateJobForAgRequest {
	return ApiCreateUpdateJobForAgRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

/*
 * Execute executes the request
 * @return UpdateJob
 */
func (a *ActiveGatesAutoUpdateJobsApiService) CreateUpdateJobForAgExecute(r ApiCreateUpdateJobForAgRequest) (UpdateJob, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpdateJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateJobsApiService.CreateUpdateJobForAg")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/updateJobs"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", _neturl.PathEscape(parameterToString(r.agId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.updateJob == nil {
		return localVarReturnValue, nil, reportError("updateJob is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateJob
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteUpdateJobByJobIdForAgRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateJobsApiService
	agId string
	jobId string
}


func (r ApiDeleteUpdateJobByJobIdForAgRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteUpdateJobByJobIdForAgExecute(r)
}

/*
 * DeleteUpdateJobByJobIdForAg Deletes the specified update job
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agId The ID of the required ActiveGate.
 * @param jobId A unique identifier for a update-job of ActiveGate.
 * @return ApiDeleteUpdateJobByJobIdForAgRequest
 */
func (a *ActiveGatesAutoUpdateJobsApiService) DeleteUpdateJobByJobIdForAg(ctx _context.Context, agId string, jobId string) ApiDeleteUpdateJobByJobIdForAgRequest {
	return ApiDeleteUpdateJobByJobIdForAgRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
		jobId: jobId,
	}
}

/*
 * Execute executes the request
 */
func (a *ActiveGatesAutoUpdateJobsApiService) DeleteUpdateJobByJobIdForAgExecute(r ApiDeleteUpdateJobByJobIdForAgRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateJobsApiService.DeleteUpdateJobByJobIdForAg")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/updateJobs/{jobId}"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", _neturl.PathEscape(parameterToString(r.agId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", _neturl.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllUpdateJobListRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateJobsApiService
	from *string
	to *string
	startVersionCompareType *string
	startVersion *string
	updateType *string
	targetVersionCompareType *string
	targetVersion *string
	lastUpdates *bool
}

func (r ApiGetAllUpdateJobListRequest) From(from string) ApiGetAllUpdateJobListRequest {
	r.from = &from
	return r
}
func (r ApiGetAllUpdateJobListRequest) To(to string) ApiGetAllUpdateJobListRequest {
	r.to = &to
	return r
}
func (r ApiGetAllUpdateJobListRequest) StartVersionCompareType(startVersionCompareType string) ApiGetAllUpdateJobListRequest {
	r.startVersionCompareType = &startVersionCompareType
	return r
}
func (r ApiGetAllUpdateJobListRequest) StartVersion(startVersion string) ApiGetAllUpdateJobListRequest {
	r.startVersion = &startVersion
	return r
}
func (r ApiGetAllUpdateJobListRequest) UpdateType(updateType string) ApiGetAllUpdateJobListRequest {
	r.updateType = &updateType
	return r
}
func (r ApiGetAllUpdateJobListRequest) TargetVersionCompareType(targetVersionCompareType string) ApiGetAllUpdateJobListRequest {
	r.targetVersionCompareType = &targetVersionCompareType
	return r
}
func (r ApiGetAllUpdateJobListRequest) TargetVersion(targetVersion string) ApiGetAllUpdateJobListRequest {
	r.targetVersion = &targetVersion
	return r
}
func (r ApiGetAllUpdateJobListRequest) LastUpdates(lastUpdates bool) ApiGetAllUpdateJobListRequest {
	r.lastUpdates = &lastUpdates
	return r
}

func (r ApiGetAllUpdateJobListRequest) Execute() (UpdateJobsAll, *_nethttp.Response, error) {
	return r.ApiService.GetAllUpdateJobListExecute(r)
}

/*
 * GetAllUpdateJobList List ActiveGates with update jobs
 * The response includes ActiveGates that have both completed (successful and failed) jobs and jobs in progress.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetAllUpdateJobListRequest
 */
func (a *ActiveGatesAutoUpdateJobsApiService) GetAllUpdateJobList(ctx _context.Context) ApiGetAllUpdateJobListRequest {
	return ApiGetAllUpdateJobListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return UpdateJobsAll
 */
func (a *ActiveGatesAutoUpdateJobsApiService) GetAllUpdateJobListExecute(r ApiGetAllUpdateJobListRequest) (UpdateJobsAll, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpdateJobsAll
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateJobsApiService.GetAllUpdateJobList")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/updateJobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.to != nil {
		localVarQueryParams.Add("to", parameterToString(*r.to, ""))
	}
	if r.startVersionCompareType != nil {
		localVarQueryParams.Add("startVersionCompareType", parameterToString(*r.startVersionCompareType, ""))
	}
	if r.startVersion != nil {
		localVarQueryParams.Add("startVersion", parameterToString(*r.startVersion, ""))
	}
	if r.updateType != nil {
		localVarQueryParams.Add("updateType", parameterToString(*r.updateType, ""))
	}
	if r.targetVersionCompareType != nil {
		localVarQueryParams.Add("targetVersionCompareType", parameterToString(*r.targetVersionCompareType, ""))
	}
	if r.targetVersion != nil {
		localVarQueryParams.Add("targetVersion", parameterToString(*r.targetVersion, ""))
	}
	if r.lastUpdates != nil {
		localVarQueryParams.Add("lastUpdates", parameterToString(*r.lastUpdates, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUpdateJobByJobIdForAgRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateJobsApiService
	agId string
	jobId string
}


func (r ApiGetUpdateJobByJobIdForAgRequest) Execute() (UpdateJob, *_nethttp.Response, error) {
	return r.ApiService.GetUpdateJobByJobIdForAgExecute(r)
}

/*
 * GetUpdateJobByJobIdForAg Gets the parameters of the specified update job
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agId The ID of the required ActiveGate.
 * @param jobId A unique identifier for a update-job of ActiveGate.
 * @return ApiGetUpdateJobByJobIdForAgRequest
 */
func (a *ActiveGatesAutoUpdateJobsApiService) GetUpdateJobByJobIdForAg(ctx _context.Context, agId string, jobId string) ApiGetUpdateJobByJobIdForAgRequest {
	return ApiGetUpdateJobByJobIdForAgRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
		jobId: jobId,
	}
}

/*
 * Execute executes the request
 * @return UpdateJob
 */
func (a *ActiveGatesAutoUpdateJobsApiService) GetUpdateJobByJobIdForAgExecute(r ApiGetUpdateJobByJobIdForAgRequest) (UpdateJob, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpdateJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateJobsApiService.GetUpdateJobByJobIdForAg")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/updateJobs/{jobId}"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", _neturl.PathEscape(parameterToString(r.agId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"jobId"+"}", _neturl.PathEscape(parameterToString(r.jobId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetUpdateJobListByAgIdRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateJobsApiService
	agId string
	from *string
	to *string
	startVersionCompareType *string
	startVersion *string
	updateType *string
	targetVersionCompareType *string
	targetVersion *string
	lastUpdates *bool
}

func (r ApiGetUpdateJobListByAgIdRequest) From(from string) ApiGetUpdateJobListByAgIdRequest {
	r.from = &from
	return r
}
func (r ApiGetUpdateJobListByAgIdRequest) To(to string) ApiGetUpdateJobListByAgIdRequest {
	r.to = &to
	return r
}
func (r ApiGetUpdateJobListByAgIdRequest) StartVersionCompareType(startVersionCompareType string) ApiGetUpdateJobListByAgIdRequest {
	r.startVersionCompareType = &startVersionCompareType
	return r
}
func (r ApiGetUpdateJobListByAgIdRequest) StartVersion(startVersion string) ApiGetUpdateJobListByAgIdRequest {
	r.startVersion = &startVersion
	return r
}
func (r ApiGetUpdateJobListByAgIdRequest) UpdateType(updateType string) ApiGetUpdateJobListByAgIdRequest {
	r.updateType = &updateType
	return r
}
func (r ApiGetUpdateJobListByAgIdRequest) TargetVersionCompareType(targetVersionCompareType string) ApiGetUpdateJobListByAgIdRequest {
	r.targetVersionCompareType = &targetVersionCompareType
	return r
}
func (r ApiGetUpdateJobListByAgIdRequest) TargetVersion(targetVersion string) ApiGetUpdateJobListByAgIdRequest {
	r.targetVersion = &targetVersion
	return r
}
func (r ApiGetUpdateJobListByAgIdRequest) LastUpdates(lastUpdates bool) ApiGetUpdateJobListByAgIdRequest {
	r.lastUpdates = &lastUpdates
	return r
}

func (r ApiGetUpdateJobListByAgIdRequest) Execute() (UpdateJobList, *_nethttp.Response, error) {
	return r.ApiService.GetUpdateJobListByAgIdExecute(r)
}

/*
 * GetUpdateJobListByAgId Lists update jobs for the specified ActiveGate
 * The job can update the ActiveGate to the specified version or the latest available one.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agId The ID of the required ActiveGate.
 * @return ApiGetUpdateJobListByAgIdRequest
 */
func (a *ActiveGatesAutoUpdateJobsApiService) GetUpdateJobListByAgId(ctx _context.Context, agId string) ApiGetUpdateJobListByAgIdRequest {
	return ApiGetUpdateJobListByAgIdRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

/*
 * Execute executes the request
 * @return UpdateJobList
 */
func (a *ActiveGatesAutoUpdateJobsApiService) GetUpdateJobListByAgIdExecute(r ApiGetUpdateJobListByAgIdRequest) (UpdateJobList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpdateJobList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateJobsApiService.GetUpdateJobListByAgId")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/updateJobs"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", _neturl.PathEscape(parameterToString(r.agId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.from != nil {
		localVarQueryParams.Add("from", parameterToString(*r.from, ""))
	}
	if r.to != nil {
		localVarQueryParams.Add("to", parameterToString(*r.to, ""))
	}
	if r.startVersionCompareType != nil {
		localVarQueryParams.Add("startVersionCompareType", parameterToString(*r.startVersionCompareType, ""))
	}
	if r.startVersion != nil {
		localVarQueryParams.Add("startVersion", parameterToString(*r.startVersion, ""))
	}
	if r.updateType != nil {
		localVarQueryParams.Add("updateType", parameterToString(*r.updateType, ""))
	}
	if r.targetVersionCompareType != nil {
		localVarQueryParams.Add("targetVersionCompareType", parameterToString(*r.targetVersionCompareType, ""))
	}
	if r.targetVersion != nil {
		localVarQueryParams.Add("targetVersion", parameterToString(*r.targetVersion, ""))
	}
	if r.lastUpdates != nil {
		localVarQueryParams.Add("lastUpdates", parameterToString(*r.lastUpdates, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiValidateUpdateJobForAgRequest struct {
	ctx _context.Context
	ApiService *ActiveGatesAutoUpdateJobsApiService
	agId string
	updateJob *UpdateJob
}

func (r ApiValidateUpdateJobForAgRequest) UpdateJob(updateJob UpdateJob) ApiValidateUpdateJobForAgRequest {
	r.updateJob = &updateJob
	return r
}

func (r ApiValidateUpdateJobForAgRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ValidateUpdateJobForAgExecute(r)
}

/*
 * ValidateUpdateJobForAg Validates the payload for the `POST /activeGates/{agId}/updateJobs` request.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param agId The ID of the required ActiveGate.
 * @return ApiValidateUpdateJobForAgRequest
 */
func (a *ActiveGatesAutoUpdateJobsApiService) ValidateUpdateJobForAg(ctx _context.Context, agId string) ApiValidateUpdateJobForAgRequest {
	return ApiValidateUpdateJobForAgRequest{
		ApiService: a,
		ctx: ctx,
		agId: agId,
	}
}

/*
 * Execute executes the request
 */
func (a *ActiveGatesAutoUpdateJobsApiService) ValidateUpdateJobForAgExecute(r ApiValidateUpdateJobForAgRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActiveGatesAutoUpdateJobsApiService.ValidateUpdateJobForAg")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/activeGates/{agId}/updateJobs/validator"
	localVarPath = strings.Replace(localVarPath, "{"+"agId"+"}", _neturl.PathEscape(parameterToString(r.agId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.updateJob == nil {
		return nil, reportError("updateJob is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json; charset=utf-8"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateJob
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Api-Token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
