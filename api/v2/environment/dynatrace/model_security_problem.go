/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SecurityProblem Parameters of a security problem
type SecurityProblem struct {
	// The ID of the security problem.
	SecurityProblemId *string `json:"securityProblemId,omitempty"`
	// The displayId of the security problem.
	DisplayId *string `json:"displayId,omitempty"`
	// The status of the security problem.
	Status *string `json:"status,omitempty"`
	// Indicates if a security problem is muted.
	Muted *bool `json:"muted,omitempty"`
	// The external vulnerability ID of the security problem.
	ExternalVulnerabilityId *string `json:"externalVulnerabilityId,omitempty"`
	// The type of the vulnerability.
	VulnerabilityType *string `json:"vulnerabilityType,omitempty"`
	// The title of the security problem.
	Title *string `json:"title,omitempty"`
	// The package name of the security problem.
	PackageName *string `json:"packageName,omitempty"`
	// The URL to the security problem details page.
	Url *string `json:"url,omitempty"`
	// The technology of the security problem.
	Technology *string `json:"technology,omitempty"`
	// The timestamp of the first occurrence of the security problem.
	FirstSeenTimestamp *int64 `json:"firstSeenTimestamp,omitempty"`
	// The timestamp of the most recent security problem change.
	LastUpdatedTimestamp *int64 `json:"lastUpdatedTimestamp,omitempty"`
	RiskAssessment *RiskAssessment `json:"riskAssessment,omitempty"`
	// Management zones to which the affected entities belong.
	ManagementZones *[]ManagementZone `json:"managementZones,omitempty"`
	// CVE IDs of the security problem.
	CveIds *[]string `json:"cveIds,omitempty"`
}

// NewSecurityProblem instantiates a new SecurityProblem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityProblem() *SecurityProblem {
	this := SecurityProblem{}
	return &this
}

// NewSecurityProblemWithDefaults instantiates a new SecurityProblem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityProblemWithDefaults() *SecurityProblem {
	this := SecurityProblem{}
	return &this
}

// GetSecurityProblemId returns the SecurityProblemId field value if set, zero value otherwise.
func (o *SecurityProblem) GetSecurityProblemId() string {
	if o == nil || o.SecurityProblemId == nil {
		var ret string
		return ret
	}
	return *o.SecurityProblemId
}

// GetSecurityProblemIdOk returns a tuple with the SecurityProblemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetSecurityProblemIdOk() (*string, bool) {
	if o == nil || o.SecurityProblemId == nil {
		return nil, false
	}
	return o.SecurityProblemId, true
}

// HasSecurityProblemId returns a boolean if a field has been set.
func (o *SecurityProblem) HasSecurityProblemId() bool {
	if o != nil && o.SecurityProblemId != nil {
		return true
	}

	return false
}

// SetSecurityProblemId gets a reference to the given string and assigns it to the SecurityProblemId field.
func (o *SecurityProblem) SetSecurityProblemId(v string) {
	o.SecurityProblemId = &v
}

// GetDisplayId returns the DisplayId field value if set, zero value otherwise.
func (o *SecurityProblem) GetDisplayId() string {
	if o == nil || o.DisplayId == nil {
		var ret string
		return ret
	}
	return *o.DisplayId
}

// GetDisplayIdOk returns a tuple with the DisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetDisplayIdOk() (*string, bool) {
	if o == nil || o.DisplayId == nil {
		return nil, false
	}
	return o.DisplayId, true
}

// HasDisplayId returns a boolean if a field has been set.
func (o *SecurityProblem) HasDisplayId() bool {
	if o != nil && o.DisplayId != nil {
		return true
	}

	return false
}

// SetDisplayId gets a reference to the given string and assigns it to the DisplayId field.
func (o *SecurityProblem) SetDisplayId(v string) {
	o.DisplayId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SecurityProblem) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SecurityProblem) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SecurityProblem) SetStatus(v string) {
	o.Status = &v
}

// GetMuted returns the Muted field value if set, zero value otherwise.
func (o *SecurityProblem) GetMuted() bool {
	if o == nil || o.Muted == nil {
		var ret bool
		return ret
	}
	return *o.Muted
}

// GetMutedOk returns a tuple with the Muted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetMutedOk() (*bool, bool) {
	if o == nil || o.Muted == nil {
		return nil, false
	}
	return o.Muted, true
}

// HasMuted returns a boolean if a field has been set.
func (o *SecurityProblem) HasMuted() bool {
	if o != nil && o.Muted != nil {
		return true
	}

	return false
}

// SetMuted gets a reference to the given bool and assigns it to the Muted field.
func (o *SecurityProblem) SetMuted(v bool) {
	o.Muted = &v
}

// GetExternalVulnerabilityId returns the ExternalVulnerabilityId field value if set, zero value otherwise.
func (o *SecurityProblem) GetExternalVulnerabilityId() string {
	if o == nil || o.ExternalVulnerabilityId == nil {
		var ret string
		return ret
	}
	return *o.ExternalVulnerabilityId
}

// GetExternalVulnerabilityIdOk returns a tuple with the ExternalVulnerabilityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetExternalVulnerabilityIdOk() (*string, bool) {
	if o == nil || o.ExternalVulnerabilityId == nil {
		return nil, false
	}
	return o.ExternalVulnerabilityId, true
}

// HasExternalVulnerabilityId returns a boolean if a field has been set.
func (o *SecurityProblem) HasExternalVulnerabilityId() bool {
	if o != nil && o.ExternalVulnerabilityId != nil {
		return true
	}

	return false
}

// SetExternalVulnerabilityId gets a reference to the given string and assigns it to the ExternalVulnerabilityId field.
func (o *SecurityProblem) SetExternalVulnerabilityId(v string) {
	o.ExternalVulnerabilityId = &v
}

// GetVulnerabilityType returns the VulnerabilityType field value if set, zero value otherwise.
func (o *SecurityProblem) GetVulnerabilityType() string {
	if o == nil || o.VulnerabilityType == nil {
		var ret string
		return ret
	}
	return *o.VulnerabilityType
}

// GetVulnerabilityTypeOk returns a tuple with the VulnerabilityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetVulnerabilityTypeOk() (*string, bool) {
	if o == nil || o.VulnerabilityType == nil {
		return nil, false
	}
	return o.VulnerabilityType, true
}

// HasVulnerabilityType returns a boolean if a field has been set.
func (o *SecurityProblem) HasVulnerabilityType() bool {
	if o != nil && o.VulnerabilityType != nil {
		return true
	}

	return false
}

// SetVulnerabilityType gets a reference to the given string and assigns it to the VulnerabilityType field.
func (o *SecurityProblem) SetVulnerabilityType(v string) {
	o.VulnerabilityType = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SecurityProblem) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SecurityProblem) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SecurityProblem) SetTitle(v string) {
	o.Title = &v
}

// GetPackageName returns the PackageName field value if set, zero value otherwise.
func (o *SecurityProblem) GetPackageName() string {
	if o == nil || o.PackageName == nil {
		var ret string
		return ret
	}
	return *o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetPackageNameOk() (*string, bool) {
	if o == nil || o.PackageName == nil {
		return nil, false
	}
	return o.PackageName, true
}

// HasPackageName returns a boolean if a field has been set.
func (o *SecurityProblem) HasPackageName() bool {
	if o != nil && o.PackageName != nil {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given string and assigns it to the PackageName field.
func (o *SecurityProblem) SetPackageName(v string) {
	o.PackageName = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SecurityProblem) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SecurityProblem) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SecurityProblem) SetUrl(v string) {
	o.Url = &v
}

// GetTechnology returns the Technology field value if set, zero value otherwise.
func (o *SecurityProblem) GetTechnology() string {
	if o == nil || o.Technology == nil {
		var ret string
		return ret
	}
	return *o.Technology
}

// GetTechnologyOk returns a tuple with the Technology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetTechnologyOk() (*string, bool) {
	if o == nil || o.Technology == nil {
		return nil, false
	}
	return o.Technology, true
}

// HasTechnology returns a boolean if a field has been set.
func (o *SecurityProblem) HasTechnology() bool {
	if o != nil && o.Technology != nil {
		return true
	}

	return false
}

// SetTechnology gets a reference to the given string and assigns it to the Technology field.
func (o *SecurityProblem) SetTechnology(v string) {
	o.Technology = &v
}

// GetFirstSeenTimestamp returns the FirstSeenTimestamp field value if set, zero value otherwise.
func (o *SecurityProblem) GetFirstSeenTimestamp() int64 {
	if o == nil || o.FirstSeenTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.FirstSeenTimestamp
}

// GetFirstSeenTimestampOk returns a tuple with the FirstSeenTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetFirstSeenTimestampOk() (*int64, bool) {
	if o == nil || o.FirstSeenTimestamp == nil {
		return nil, false
	}
	return o.FirstSeenTimestamp, true
}

// HasFirstSeenTimestamp returns a boolean if a field has been set.
func (o *SecurityProblem) HasFirstSeenTimestamp() bool {
	if o != nil && o.FirstSeenTimestamp != nil {
		return true
	}

	return false
}

// SetFirstSeenTimestamp gets a reference to the given int64 and assigns it to the FirstSeenTimestamp field.
func (o *SecurityProblem) SetFirstSeenTimestamp(v int64) {
	o.FirstSeenTimestamp = &v
}

// GetLastUpdatedTimestamp returns the LastUpdatedTimestamp field value if set, zero value otherwise.
func (o *SecurityProblem) GetLastUpdatedTimestamp() int64 {
	if o == nil || o.LastUpdatedTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimestamp
}

// GetLastUpdatedTimestampOk returns a tuple with the LastUpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetLastUpdatedTimestampOk() (*int64, bool) {
	if o == nil || o.LastUpdatedTimestamp == nil {
		return nil, false
	}
	return o.LastUpdatedTimestamp, true
}

// HasLastUpdatedTimestamp returns a boolean if a field has been set.
func (o *SecurityProblem) HasLastUpdatedTimestamp() bool {
	if o != nil && o.LastUpdatedTimestamp != nil {
		return true
	}

	return false
}

// SetLastUpdatedTimestamp gets a reference to the given int64 and assigns it to the LastUpdatedTimestamp field.
func (o *SecurityProblem) SetLastUpdatedTimestamp(v int64) {
	o.LastUpdatedTimestamp = &v
}

// GetRiskAssessment returns the RiskAssessment field value if set, zero value otherwise.
func (o *SecurityProblem) GetRiskAssessment() RiskAssessment {
	if o == nil || o.RiskAssessment == nil {
		var ret RiskAssessment
		return ret
	}
	return *o.RiskAssessment
}

// GetRiskAssessmentOk returns a tuple with the RiskAssessment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetRiskAssessmentOk() (*RiskAssessment, bool) {
	if o == nil || o.RiskAssessment == nil {
		return nil, false
	}
	return o.RiskAssessment, true
}

// HasRiskAssessment returns a boolean if a field has been set.
func (o *SecurityProblem) HasRiskAssessment() bool {
	if o != nil && o.RiskAssessment != nil {
		return true
	}

	return false
}

// SetRiskAssessment gets a reference to the given RiskAssessment and assigns it to the RiskAssessment field.
func (o *SecurityProblem) SetRiskAssessment(v RiskAssessment) {
	o.RiskAssessment = &v
}

// GetManagementZones returns the ManagementZones field value if set, zero value otherwise.
func (o *SecurityProblem) GetManagementZones() []ManagementZone {
	if o == nil || o.ManagementZones == nil {
		var ret []ManagementZone
		return ret
	}
	return *o.ManagementZones
}

// GetManagementZonesOk returns a tuple with the ManagementZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetManagementZonesOk() (*[]ManagementZone, bool) {
	if o == nil || o.ManagementZones == nil {
		return nil, false
	}
	return o.ManagementZones, true
}

// HasManagementZones returns a boolean if a field has been set.
func (o *SecurityProblem) HasManagementZones() bool {
	if o != nil && o.ManagementZones != nil {
		return true
	}

	return false
}

// SetManagementZones gets a reference to the given []ManagementZone and assigns it to the ManagementZones field.
func (o *SecurityProblem) SetManagementZones(v []ManagementZone) {
	o.ManagementZones = &v
}

// GetCveIds returns the CveIds field value if set, zero value otherwise.
func (o *SecurityProblem) GetCveIds() []string {
	if o == nil || o.CveIds == nil {
		var ret []string
		return ret
	}
	return *o.CveIds
}

// GetCveIdsOk returns a tuple with the CveIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityProblem) GetCveIdsOk() (*[]string, bool) {
	if o == nil || o.CveIds == nil {
		return nil, false
	}
	return o.CveIds, true
}

// HasCveIds returns a boolean if a field has been set.
func (o *SecurityProblem) HasCveIds() bool {
	if o != nil && o.CveIds != nil {
		return true
	}

	return false
}

// SetCveIds gets a reference to the given []string and assigns it to the CveIds field.
func (o *SecurityProblem) SetCveIds(v []string) {
	o.CveIds = &v
}

func (o SecurityProblem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SecurityProblemId != nil {
		toSerialize["securityProblemId"] = o.SecurityProblemId
	}
	if o.DisplayId != nil {
		toSerialize["displayId"] = o.DisplayId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Muted != nil {
		toSerialize["muted"] = o.Muted
	}
	if o.ExternalVulnerabilityId != nil {
		toSerialize["externalVulnerabilityId"] = o.ExternalVulnerabilityId
	}
	if o.VulnerabilityType != nil {
		toSerialize["vulnerabilityType"] = o.VulnerabilityType
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.PackageName != nil {
		toSerialize["packageName"] = o.PackageName
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Technology != nil {
		toSerialize["technology"] = o.Technology
	}
	if o.FirstSeenTimestamp != nil {
		toSerialize["firstSeenTimestamp"] = o.FirstSeenTimestamp
	}
	if o.LastUpdatedTimestamp != nil {
		toSerialize["lastUpdatedTimestamp"] = o.LastUpdatedTimestamp
	}
	if o.RiskAssessment != nil {
		toSerialize["riskAssessment"] = o.RiskAssessment
	}
	if o.ManagementZones != nil {
		toSerialize["managementZones"] = o.ManagementZones
	}
	if o.CveIds != nil {
		toSerialize["cveIds"] = o.CveIds
	}
	return json.Marshal(toSerialize)
}

type NullableSecurityProblem struct {
	value *SecurityProblem
	isSet bool
}

func (v NullableSecurityProblem) Get() *SecurityProblem {
	return v.value
}

func (v *NullableSecurityProblem) Set(val *SecurityProblem) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityProblem(val *SecurityProblem) *NullableSecurityProblem {
	return &NullableSecurityProblem{value: val, isSet: true}
}

func (v NullableSecurityProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


