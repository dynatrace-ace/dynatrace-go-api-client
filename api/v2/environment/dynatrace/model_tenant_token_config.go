/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TenantTokenConfig Configuration of a [tenant token](https://dt-url.net/b403ss9).
type TenantTokenConfig struct {
	Active *TenantToken `json:"active,omitempty"`
	Old *TenantToken `json:"old,omitempty"`
}

// NewTenantTokenConfig instantiates a new TenantTokenConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantTokenConfig() *TenantTokenConfig {
	this := TenantTokenConfig{}
	return &this
}

// NewTenantTokenConfigWithDefaults instantiates a new TenantTokenConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantTokenConfigWithDefaults() *TenantTokenConfig {
	this := TenantTokenConfig{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *TenantTokenConfig) GetActive() TenantToken {
	if o == nil || o.Active == nil {
		var ret TenantToken
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantTokenConfig) GetActiveOk() (*TenantToken, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *TenantTokenConfig) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given TenantToken and assigns it to the Active field.
func (o *TenantTokenConfig) SetActive(v TenantToken) {
	o.Active = &v
}

// GetOld returns the Old field value if set, zero value otherwise.
func (o *TenantTokenConfig) GetOld() TenantToken {
	if o == nil || o.Old == nil {
		var ret TenantToken
		return ret
	}
	return *o.Old
}

// GetOldOk returns a tuple with the Old field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantTokenConfig) GetOldOk() (*TenantToken, bool) {
	if o == nil || o.Old == nil {
		return nil, false
	}
	return o.Old, true
}

// HasOld returns a boolean if a field has been set.
func (o *TenantTokenConfig) HasOld() bool {
	if o != nil && o.Old != nil {
		return true
	}

	return false
}

// SetOld gets a reference to the given TenantToken and assigns it to the Old field.
func (o *TenantTokenConfig) SetOld(v TenantToken) {
	o.Old = &v
}

func (o TenantTokenConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Old != nil {
		toSerialize["old"] = o.Old
	}
	return json.Marshal(toSerialize)
}

type NullableTenantTokenConfig struct {
	value *TenantTokenConfig
	isSet bool
}

func (v NullableTenantTokenConfig) Get() *TenantTokenConfig {
	return v.value
}

func (v *NullableTenantTokenConfig) Set(val *TenantTokenConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantTokenConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantTokenConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantTokenConfig(val *TenantTokenConfig) *NullableTenantTokenConfig {
	return &NullableTenantTokenConfig{value: val, isSet: true}
}

func (v NullableTenantTokenConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantTokenConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


