/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MetricValueType The value type for the metric.
type MetricValueType struct {
	// The metric value type
	Type string `json:"type"`
}

// NewMetricValueType instantiates a new MetricValueType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricValueType(type_ string) *MetricValueType {
	this := MetricValueType{}
	this.Type = type_
	return &this
}

// NewMetricValueTypeWithDefaults instantiates a new MetricValueType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricValueTypeWithDefaults() *MetricValueType {
	this := MetricValueType{}
	return &this
}

// GetType returns the Type field value
func (o *MetricValueType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MetricValueType) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MetricValueType) SetType(v string) {
	o.Type = v
}

func (o MetricValueType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableMetricValueType struct {
	value *MetricValueType
	isSet bool
}

func (v NullableMetricValueType) Get() *MetricValueType {
	return v.value
}

func (v *NullableMetricValueType) Set(val *MetricValueType) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricValueType) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricValueType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricValueType(val *MetricValueType) *NullableMetricValueType {
	return &NullableMetricValueType{value: val, isSet: true}
}

func (v NullableMetricValueType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricValueType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


