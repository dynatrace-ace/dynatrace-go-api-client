/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// NetworkZoneSettings Global network zone configuration.
type NetworkZoneSettings struct {
	// Network zones feature is enabled (`true`) or disabled (`false`).
	NetworkZonesEnabled *bool `json:"networkZonesEnabled,omitempty"`
}

// NewNetworkZoneSettings instantiates a new NetworkZoneSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkZoneSettings() *NetworkZoneSettings {
	this := NetworkZoneSettings{}
	return &this
}

// NewNetworkZoneSettingsWithDefaults instantiates a new NetworkZoneSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkZoneSettingsWithDefaults() *NetworkZoneSettings {
	this := NetworkZoneSettings{}
	return &this
}

// GetNetworkZonesEnabled returns the NetworkZonesEnabled field value if set, zero value otherwise.
func (o *NetworkZoneSettings) GetNetworkZonesEnabled() bool {
	if o == nil || o.NetworkZonesEnabled == nil {
		var ret bool
		return ret
	}
	return *o.NetworkZonesEnabled
}

// GetNetworkZonesEnabledOk returns a tuple with the NetworkZonesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkZoneSettings) GetNetworkZonesEnabledOk() (*bool, bool) {
	if o == nil || o.NetworkZonesEnabled == nil {
		return nil, false
	}
	return o.NetworkZonesEnabled, true
}

// HasNetworkZonesEnabled returns a boolean if a field has been set.
func (o *NetworkZoneSettings) HasNetworkZonesEnabled() bool {
	if o != nil && o.NetworkZonesEnabled != nil {
		return true
	}

	return false
}

// SetNetworkZonesEnabled gets a reference to the given bool and assigns it to the NetworkZonesEnabled field.
func (o *NetworkZoneSettings) SetNetworkZonesEnabled(v bool) {
	o.NetworkZonesEnabled = &v
}

func (o NetworkZoneSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NetworkZonesEnabled != nil {
		toSerialize["networkZonesEnabled"] = o.NetworkZonesEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkZoneSettings struct {
	value *NetworkZoneSettings
	isSet bool
}

func (v NullableNetworkZoneSettings) Get() *NetworkZoneSettings {
	return v.value
}

func (v *NullableNetworkZoneSettings) Set(val *NetworkZoneSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkZoneSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkZoneSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkZoneSettings(val *NetworkZoneSettings) *NullableNetworkZoneSettings {
	return &NullableNetworkZoneSettings{value: val, isSet: true}
}

func (v NullableNetworkZoneSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkZoneSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


