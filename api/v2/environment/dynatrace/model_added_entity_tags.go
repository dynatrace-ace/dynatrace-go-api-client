/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AddedEntityTags A list of custom tags added to monitored entities.
type AddedEntityTags struct {
	// A list of added custom tags.
	AppliedTags *[]METag `json:"appliedTags,omitempty"`
	// The number of monitored entities where the tags have been added.
	MatchedEntitiesCount *int64 `json:"matchedEntitiesCount,omitempty"`
}

// NewAddedEntityTags instantiates a new AddedEntityTags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddedEntityTags() *AddedEntityTags {
	this := AddedEntityTags{}
	return &this
}

// NewAddedEntityTagsWithDefaults instantiates a new AddedEntityTags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddedEntityTagsWithDefaults() *AddedEntityTags {
	this := AddedEntityTags{}
	return &this
}

// GetAppliedTags returns the AppliedTags field value if set, zero value otherwise.
func (o *AddedEntityTags) GetAppliedTags() []METag {
	if o == nil || o.AppliedTags == nil {
		var ret []METag
		return ret
	}
	return *o.AppliedTags
}

// GetAppliedTagsOk returns a tuple with the AppliedTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddedEntityTags) GetAppliedTagsOk() (*[]METag, bool) {
	if o == nil || o.AppliedTags == nil {
		return nil, false
	}
	return o.AppliedTags, true
}

// HasAppliedTags returns a boolean if a field has been set.
func (o *AddedEntityTags) HasAppliedTags() bool {
	if o != nil && o.AppliedTags != nil {
		return true
	}

	return false
}

// SetAppliedTags gets a reference to the given []METag and assigns it to the AppliedTags field.
func (o *AddedEntityTags) SetAppliedTags(v []METag) {
	o.AppliedTags = &v
}

// GetMatchedEntitiesCount returns the MatchedEntitiesCount field value if set, zero value otherwise.
func (o *AddedEntityTags) GetMatchedEntitiesCount() int64 {
	if o == nil || o.MatchedEntitiesCount == nil {
		var ret int64
		return ret
	}
	return *o.MatchedEntitiesCount
}

// GetMatchedEntitiesCountOk returns a tuple with the MatchedEntitiesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddedEntityTags) GetMatchedEntitiesCountOk() (*int64, bool) {
	if o == nil || o.MatchedEntitiesCount == nil {
		return nil, false
	}
	return o.MatchedEntitiesCount, true
}

// HasMatchedEntitiesCount returns a boolean if a field has been set.
func (o *AddedEntityTags) HasMatchedEntitiesCount() bool {
	if o != nil && o.MatchedEntitiesCount != nil {
		return true
	}

	return false
}

// SetMatchedEntitiesCount gets a reference to the given int64 and assigns it to the MatchedEntitiesCount field.
func (o *AddedEntityTags) SetMatchedEntitiesCount(v int64) {
	o.MatchedEntitiesCount = &v
}

func (o AddedEntityTags) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppliedTags != nil {
		toSerialize["appliedTags"] = o.AppliedTags
	}
	if o.MatchedEntitiesCount != nil {
		toSerialize["matchedEntitiesCount"] = o.MatchedEntitiesCount
	}
	return json.Marshal(toSerialize)
}

type NullableAddedEntityTags struct {
	value *AddedEntityTags
	isSet bool
}

func (v NullableAddedEntityTags) Get() *AddedEntityTags {
	return v.value
}

func (v *NullableAddedEntityTags) Set(val *AddedEntityTags) {
	v.value = val
	v.isSet = true
}

func (v NullableAddedEntityTags) IsSet() bool {
	return v.isSet
}

func (v *NullableAddedEntityTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddedEntityTags(val *AddedEntityTags) *NullableAddedEntityTags {
	return &NullableAddedEntityTags{value: val, isSet: true}
}

func (v NullableAddedEntityTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddedEntityTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


