/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EntityTypePropertyDto The property of a monitored entity.
type EntityTypePropertyDto struct {
	// The ID of the property.
	Id *string `json:"id,omitempty"`
	// The type of the property.
	Type *string `json:"type,omitempty"`
	// The display-name of the property.
	DisplayName *string `json:"displayName,omitempty"`
}

// NewEntityTypePropertyDto instantiates a new EntityTypePropertyDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityTypePropertyDto() *EntityTypePropertyDto {
	this := EntityTypePropertyDto{}
	return &this
}

// NewEntityTypePropertyDtoWithDefaults instantiates a new EntityTypePropertyDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityTypePropertyDtoWithDefaults() *EntityTypePropertyDto {
	this := EntityTypePropertyDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EntityTypePropertyDto) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTypePropertyDto) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EntityTypePropertyDto) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EntityTypePropertyDto) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntityTypePropertyDto) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTypePropertyDto) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntityTypePropertyDto) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntityTypePropertyDto) SetType(v string) {
	o.Type = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *EntityTypePropertyDto) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityTypePropertyDto) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *EntityTypePropertyDto) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *EntityTypePropertyDto) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o EntityTypePropertyDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	return json.Marshal(toSerialize)
}

type NullableEntityTypePropertyDto struct {
	value *EntityTypePropertyDto
	isSet bool
}

func (v NullableEntityTypePropertyDto) Get() *EntityTypePropertyDto {
	return v.value
}

func (v *NullableEntityTypePropertyDto) Set(val *EntityTypePropertyDto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityTypePropertyDto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityTypePropertyDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityTypePropertyDto(val *EntityTypePropertyDto) *NullableEntityTypePropertyDto {
	return &NullableEntityTypePropertyDto{value: val, isSet: true}
}

func (v NullableEntityTypePropertyDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityTypePropertyDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


