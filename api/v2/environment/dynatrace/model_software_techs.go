/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SoftwareTechs Contains information about the used software technology.
type SoftwareTechs struct {
	// The type of the technology.
	Technology *string `json:"technology,omitempty"`
	// The verbatim type of the technology.
	VerbatimType *string `json:"verbatimType,omitempty"`
	// The edition of the technology.
	Edition *string `json:"edition,omitempty"`
	// The version of the technology.
	Version *string `json:"version,omitempty"`
}

// NewSoftwareTechs instantiates a new SoftwareTechs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwareTechs() *SoftwareTechs {
	this := SoftwareTechs{}
	return &this
}

// NewSoftwareTechsWithDefaults instantiates a new SoftwareTechs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwareTechsWithDefaults() *SoftwareTechs {
	this := SoftwareTechs{}
	return &this
}

// GetTechnology returns the Technology field value if set, zero value otherwise.
func (o *SoftwareTechs) GetTechnology() string {
	if o == nil || o.Technology == nil {
		var ret string
		return ret
	}
	return *o.Technology
}

// GetTechnologyOk returns a tuple with the Technology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareTechs) GetTechnologyOk() (*string, bool) {
	if o == nil || o.Technology == nil {
		return nil, false
	}
	return o.Technology, true
}

// HasTechnology returns a boolean if a field has been set.
func (o *SoftwareTechs) HasTechnology() bool {
	if o != nil && o.Technology != nil {
		return true
	}

	return false
}

// SetTechnology gets a reference to the given string and assigns it to the Technology field.
func (o *SoftwareTechs) SetTechnology(v string) {
	o.Technology = &v
}

// GetVerbatimType returns the VerbatimType field value if set, zero value otherwise.
func (o *SoftwareTechs) GetVerbatimType() string {
	if o == nil || o.VerbatimType == nil {
		var ret string
		return ret
	}
	return *o.VerbatimType
}

// GetVerbatimTypeOk returns a tuple with the VerbatimType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareTechs) GetVerbatimTypeOk() (*string, bool) {
	if o == nil || o.VerbatimType == nil {
		return nil, false
	}
	return o.VerbatimType, true
}

// HasVerbatimType returns a boolean if a field has been set.
func (o *SoftwareTechs) HasVerbatimType() bool {
	if o != nil && o.VerbatimType != nil {
		return true
	}

	return false
}

// SetVerbatimType gets a reference to the given string and assigns it to the VerbatimType field.
func (o *SoftwareTechs) SetVerbatimType(v string) {
	o.VerbatimType = &v
}

// GetEdition returns the Edition field value if set, zero value otherwise.
func (o *SoftwareTechs) GetEdition() string {
	if o == nil || o.Edition == nil {
		var ret string
		return ret
	}
	return *o.Edition
}

// GetEditionOk returns a tuple with the Edition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareTechs) GetEditionOk() (*string, bool) {
	if o == nil || o.Edition == nil {
		return nil, false
	}
	return o.Edition, true
}

// HasEdition returns a boolean if a field has been set.
func (o *SoftwareTechs) HasEdition() bool {
	if o != nil && o.Edition != nil {
		return true
	}

	return false
}

// SetEdition gets a reference to the given string and assigns it to the Edition field.
func (o *SoftwareTechs) SetEdition(v string) {
	o.Edition = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SoftwareTechs) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareTechs) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SoftwareTechs) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *SoftwareTechs) SetVersion(v string) {
	o.Version = &v
}

func (o SoftwareTechs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Technology != nil {
		toSerialize["technology"] = o.Technology
	}
	if o.VerbatimType != nil {
		toSerialize["verbatimType"] = o.VerbatimType
	}
	if o.Edition != nil {
		toSerialize["edition"] = o.Edition
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableSoftwareTechs struct {
	value *SoftwareTechs
	isSet bool
}

func (v NullableSoftwareTechs) Get() *SoftwareTechs {
	return v.value
}

func (v *NullableSoftwareTechs) Set(val *SoftwareTechs) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwareTechs) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwareTechs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwareTechs(val *SoftwareTechs) *NullableSoftwareTechs {
	return &NullableSoftwareTechs{value: val, isSet: true}
}

func (v NullableSoftwareTechs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwareTechs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


