/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ExtensionMonitoringConfiguration struct for ExtensionMonitoringConfiguration
type ExtensionMonitoringConfiguration struct {
	// Configuration id
	ObjectId *string `json:"objectId,omitempty"`
	// Configuration scope
	Scope *string `json:"scope,omitempty"`
	// Configuration
	Value *string `json:"value,omitempty"`
}

// NewExtensionMonitoringConfiguration instantiates a new ExtensionMonitoringConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionMonitoringConfiguration() *ExtensionMonitoringConfiguration {
	this := ExtensionMonitoringConfiguration{}
	return &this
}

// NewExtensionMonitoringConfigurationWithDefaults instantiates a new ExtensionMonitoringConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionMonitoringConfigurationWithDefaults() *ExtensionMonitoringConfiguration {
	this := ExtensionMonitoringConfiguration{}
	return &this
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *ExtensionMonitoringConfiguration) GetObjectId() string {
	if o == nil || o.ObjectId == nil {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionMonitoringConfiguration) GetObjectIdOk() (*string, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *ExtensionMonitoringConfiguration) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *ExtensionMonitoringConfiguration) SetObjectId(v string) {
	o.ObjectId = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *ExtensionMonitoringConfiguration) GetScope() string {
	if o == nil || o.Scope == nil {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionMonitoringConfiguration) GetScopeOk() (*string, bool) {
	if o == nil || o.Scope == nil {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *ExtensionMonitoringConfiguration) HasScope() bool {
	if o != nil && o.Scope != nil {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *ExtensionMonitoringConfiguration) SetScope(v string) {
	o.Scope = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ExtensionMonitoringConfiguration) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionMonitoringConfiguration) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ExtensionMonitoringConfiguration) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ExtensionMonitoringConfiguration) SetValue(v string) {
	o.Value = &v
}

func (o ExtensionMonitoringConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectId != nil {
		toSerialize["objectId"] = o.ObjectId
	}
	if o.Scope != nil {
		toSerialize["scope"] = o.Scope
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableExtensionMonitoringConfiguration struct {
	value *ExtensionMonitoringConfiguration
	isSet bool
}

func (v NullableExtensionMonitoringConfiguration) Get() *ExtensionMonitoringConfiguration {
	return v.value
}

func (v *NullableExtensionMonitoringConfiguration) Set(val *ExtensionMonitoringConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionMonitoringConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionMonitoringConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionMonitoringConfiguration(val *ExtensionMonitoringConfiguration) *NullableExtensionMonitoringConfiguration {
	return &NullableExtensionMonitoringConfiguration{value: val, isSet: true}
}

func (v NullableExtensionMonitoringConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionMonitoringConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


