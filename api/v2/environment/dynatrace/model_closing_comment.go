/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ClosingComment The closing comment on a problem.
type ClosingComment struct {
	// The text of the closing comment.
	Message *string `json:"message,omitempty"`
}

// NewClosingComment instantiates a new ClosingComment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClosingComment() *ClosingComment {
	this := ClosingComment{}
	return &this
}

// NewClosingCommentWithDefaults instantiates a new ClosingComment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClosingCommentWithDefaults() *ClosingComment {
	this := ClosingComment{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ClosingComment) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClosingComment) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ClosingComment) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ClosingComment) SetMessage(v string) {
	o.Message = &v
}

func (o ClosingComment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableClosingComment struct {
	value *ClosingComment
	isSet bool
}

func (v NullableClosingComment) Get() *ClosingComment {
	return v.value
}

func (v *NullableClosingComment) Set(val *ClosingComment) {
	v.value = val
	v.isSet = true
}

func (v NullableClosingComment) IsSet() bool {
	return v.isSet
}

func (v *NullableClosingComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClosingComment(val *ClosingComment) *NullableClosingComment {
	return &NullableClosingComment{value: val, isSet: true}
}

func (v NullableClosingComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClosingComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


