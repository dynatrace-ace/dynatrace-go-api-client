/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MetricSeriesCollection Data points of a metric.
type MetricSeriesCollection struct {
	// The key of the metric.   If any transformation is applied, it is included here.
	MetricId string `json:"metricId"`
	// Data points of the metric.
	Data *[]MetricSeries `json:"data,omitempty"`
	// A list of potential warnings that affect this ID. For example deprecated feature usage etc.
	Warnings *[]string `json:"warnings,omitempty"`
}

// NewMetricSeriesCollection instantiates a new MetricSeriesCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricSeriesCollection(metricId string) *MetricSeriesCollection {
	this := MetricSeriesCollection{}
	this.MetricId = metricId
	return &this
}

// NewMetricSeriesCollectionWithDefaults instantiates a new MetricSeriesCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricSeriesCollectionWithDefaults() *MetricSeriesCollection {
	this := MetricSeriesCollection{}
	return &this
}

// GetMetricId returns the MetricId field value
func (o *MetricSeriesCollection) GetMetricId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetricId
}

// GetMetricIdOk returns a tuple with the MetricId field value
// and a boolean to check if the value has been set.
func (o *MetricSeriesCollection) GetMetricIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MetricId, true
}

// SetMetricId sets field value
func (o *MetricSeriesCollection) SetMetricId(v string) {
	o.MetricId = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *MetricSeriesCollection) GetData() []MetricSeries {
	if o == nil || o.Data == nil {
		var ret []MetricSeries
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSeriesCollection) GetDataOk() (*[]MetricSeries, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *MetricSeriesCollection) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []MetricSeries and assigns it to the Data field.
func (o *MetricSeriesCollection) SetData(v []MetricSeries) {
	o.Data = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *MetricSeriesCollection) GetWarnings() []string {
	if o == nil || o.Warnings == nil {
		var ret []string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSeriesCollection) GetWarningsOk() (*[]string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *MetricSeriesCollection) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *MetricSeriesCollection) SetWarnings(v []string) {
	o.Warnings = &v
}

func (o MetricSeriesCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["metricId"] = o.MetricId
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableMetricSeriesCollection struct {
	value *MetricSeriesCollection
	isSet bool
}

func (v NullableMetricSeriesCollection) Get() *MetricSeriesCollection {
	return v.value
}

func (v *NullableMetricSeriesCollection) Set(val *MetricSeriesCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricSeriesCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricSeriesCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricSeriesCollection(val *MetricSeriesCollection) *NullableMetricSeriesCollection {
	return &NullableMetricSeriesCollection{value: val, isSet: true}
}

func (v NullableMetricSeriesCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricSeriesCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


