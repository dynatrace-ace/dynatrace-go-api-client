/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MonitoringConfigurationDto struct for MonitoringConfigurationDto
type MonitoringConfigurationDto struct {
	// The scope this monitoring configuration will be defined for
	Scope string `json:"scope"`
	// The monitoring configuration
	Value *map[string]interface{} `json:"value,omitempty"`
}

// NewMonitoringConfigurationDto instantiates a new MonitoringConfigurationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringConfigurationDto(scope string) *MonitoringConfigurationDto {
	this := MonitoringConfigurationDto{}
	this.Scope = scope
	return &this
}

// NewMonitoringConfigurationDtoWithDefaults instantiates a new MonitoringConfigurationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringConfigurationDtoWithDefaults() *MonitoringConfigurationDto {
	this := MonitoringConfigurationDto{}
	return &this
}

// GetScope returns the Scope field value
func (o *MonitoringConfigurationDto) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *MonitoringConfigurationDto) GetScopeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *MonitoringConfigurationDto) SetScope(v string) {
	o.Scope = v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MonitoringConfigurationDto) GetValue() map[string]interface{} {
	if o == nil || o.Value == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringConfigurationDto) GetValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MonitoringConfigurationDto) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *MonitoringConfigurationDto) SetValue(v map[string]interface{}) {
	o.Value = &v
}

func (o MonitoringConfigurationDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["scope"] = o.Scope
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringConfigurationDto struct {
	value *MonitoringConfigurationDto
	isSet bool
}

func (v NullableMonitoringConfigurationDto) Get() *MonitoringConfigurationDto {
	return v.value
}

func (v *NullableMonitoringConfigurationDto) Set(val *MonitoringConfigurationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringConfigurationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringConfigurationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringConfigurationDto(val *MonitoringConfigurationDto) *NullableMonitoringConfigurationDto {
	return &NullableMonitoringConfigurationDto{value: val, isSet: true}
}

func (v NullableMonitoringConfigurationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringConfigurationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


