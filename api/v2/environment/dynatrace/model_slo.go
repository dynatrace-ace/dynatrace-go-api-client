/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SLO Parameters of a service-level objective (SLO).
type SLO struct {
	// Number of OPEN problems related to the SLO.   Has the value of `-1` if there's an error with fetching SLO related problems.
	RelatedOpenProblems *int32 `json:"relatedOpenProblems,omitempty"`
	// The denominator value used to evaluate the SLO when **useRateMetric** is set to `false`.
	DenominatorValue *float64 `json:"denominatorValue,omitempty"`
	// The calculated value of the SLO.   Has the value of `-1` if there's an error with SLO calculation; in that case check the value of the **error** parameter.
	EvaluatedPercentage *float64 `json:"evaluatedPercentage,omitempty"`
	// The numerator value used to evaluate the SLO when **useRateMetric** is set to `false`.
	NumeratorValue *float64 `json:"numeratorValue,omitempty"`
	// The type of the metric to use for SLO calculation:   * `true`: An existing percentage-based metric.  * `false`: A ratio of two metrics.   For a list of available metrics, see [Built-in metric page](https://dt-url.net/be03kow) or try the [GET metrics](https://dt-url.net/8e43kxf) API call.
	UseRateMetric *bool `json:"useRateMetric,omitempty"`
	// The percentage-based metric for the calculation of the SLO.   Required when the **useRateMetric** is set to `true`.
	MetricRate *string `json:"metricRate,omitempty"`
	// The metric for the count of successes (the numerator in rate calculation).   Required when the **useRateMetric** is set to `false`.
	MetricNumerator *string `json:"metricNumerator,omitempty"`
	// The total count metric (the denominator in rate calculation).   Required when the **useRateMetric** is set to `false`.
	MetricDenominator *string `json:"metricDenominator,omitempty"`
	// The evaluation type of the SLO.
	EvaluationType *string `json:"evaluationType,omitempty"`
	// The timeframe for the SLO evaluation. Use the syntax of the global timeframe selector.
	Timeframe *string `json:"timeframe,omitempty"`
	// The error budget of the calculated SLO.   The error budget is the difference between the calculated and target values. A positive number means all is good; a negative number means trouble.
	ErrorBudget *float64 `json:"errorBudget,omitempty"`
	// The entity filter for the SLO evaluation. Use the [syntax of entity selector](https://dt-url.net/entityselector).
	Filter *string `json:"filter,omitempty"`
	// The name of the SLO.
	Name *string `json:"name,omitempty"`
	// The ID of the SLO
	Id *string `json:"id,omitempty"`
	// The target value of the SLO.
	Target *float64 `json:"target,omitempty"`
	// A short description of the SLO.
	Description *string `json:"description,omitempty"`
	// The SLO is enabled (`true`) or disabled (`false`).
	Enabled *bool `json:"enabled,omitempty"`
	// The status of the calculated SLO.
	Status *string `json:"status,omitempty"`
	// The warning value of the SLO.    At warning state the SLO is still fulfilled but is getting close to failure.
	Warning *float64 `json:"warning,omitempty"`
	// The error of the SLO calculation.   If the value differs from `NONE` there's something wrong with the SLO calculation.
	Error *string `json:"error,omitempty"`
}

// NewSLO instantiates a new SLO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSLO() *SLO {
	this := SLO{}
	return &this
}

// NewSLOWithDefaults instantiates a new SLO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSLOWithDefaults() *SLO {
	this := SLO{}
	return &this
}

// GetRelatedOpenProblems returns the RelatedOpenProblems field value if set, zero value otherwise.
func (o *SLO) GetRelatedOpenProblems() int32 {
	if o == nil || o.RelatedOpenProblems == nil {
		var ret int32
		return ret
	}
	return *o.RelatedOpenProblems
}

// GetRelatedOpenProblemsOk returns a tuple with the RelatedOpenProblems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetRelatedOpenProblemsOk() (*int32, bool) {
	if o == nil || o.RelatedOpenProblems == nil {
		return nil, false
	}
	return o.RelatedOpenProblems, true
}

// HasRelatedOpenProblems returns a boolean if a field has been set.
func (o *SLO) HasRelatedOpenProblems() bool {
	if o != nil && o.RelatedOpenProblems != nil {
		return true
	}

	return false
}

// SetRelatedOpenProblems gets a reference to the given int32 and assigns it to the RelatedOpenProblems field.
func (o *SLO) SetRelatedOpenProblems(v int32) {
	o.RelatedOpenProblems = &v
}

// GetDenominatorValue returns the DenominatorValue field value if set, zero value otherwise.
func (o *SLO) GetDenominatorValue() float64 {
	if o == nil || o.DenominatorValue == nil {
		var ret float64
		return ret
	}
	return *o.DenominatorValue
}

// GetDenominatorValueOk returns a tuple with the DenominatorValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetDenominatorValueOk() (*float64, bool) {
	if o == nil || o.DenominatorValue == nil {
		return nil, false
	}
	return o.DenominatorValue, true
}

// HasDenominatorValue returns a boolean if a field has been set.
func (o *SLO) HasDenominatorValue() bool {
	if o != nil && o.DenominatorValue != nil {
		return true
	}

	return false
}

// SetDenominatorValue gets a reference to the given float64 and assigns it to the DenominatorValue field.
func (o *SLO) SetDenominatorValue(v float64) {
	o.DenominatorValue = &v
}

// GetEvaluatedPercentage returns the EvaluatedPercentage field value if set, zero value otherwise.
func (o *SLO) GetEvaluatedPercentage() float64 {
	if o == nil || o.EvaluatedPercentage == nil {
		var ret float64
		return ret
	}
	return *o.EvaluatedPercentage
}

// GetEvaluatedPercentageOk returns a tuple with the EvaluatedPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetEvaluatedPercentageOk() (*float64, bool) {
	if o == nil || o.EvaluatedPercentage == nil {
		return nil, false
	}
	return o.EvaluatedPercentage, true
}

// HasEvaluatedPercentage returns a boolean if a field has been set.
func (o *SLO) HasEvaluatedPercentage() bool {
	if o != nil && o.EvaluatedPercentage != nil {
		return true
	}

	return false
}

// SetEvaluatedPercentage gets a reference to the given float64 and assigns it to the EvaluatedPercentage field.
func (o *SLO) SetEvaluatedPercentage(v float64) {
	o.EvaluatedPercentage = &v
}

// GetNumeratorValue returns the NumeratorValue field value if set, zero value otherwise.
func (o *SLO) GetNumeratorValue() float64 {
	if o == nil || o.NumeratorValue == nil {
		var ret float64
		return ret
	}
	return *o.NumeratorValue
}

// GetNumeratorValueOk returns a tuple with the NumeratorValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetNumeratorValueOk() (*float64, bool) {
	if o == nil || o.NumeratorValue == nil {
		return nil, false
	}
	return o.NumeratorValue, true
}

// HasNumeratorValue returns a boolean if a field has been set.
func (o *SLO) HasNumeratorValue() bool {
	if o != nil && o.NumeratorValue != nil {
		return true
	}

	return false
}

// SetNumeratorValue gets a reference to the given float64 and assigns it to the NumeratorValue field.
func (o *SLO) SetNumeratorValue(v float64) {
	o.NumeratorValue = &v
}

// GetUseRateMetric returns the UseRateMetric field value if set, zero value otherwise.
func (o *SLO) GetUseRateMetric() bool {
	if o == nil || o.UseRateMetric == nil {
		var ret bool
		return ret
	}
	return *o.UseRateMetric
}

// GetUseRateMetricOk returns a tuple with the UseRateMetric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetUseRateMetricOk() (*bool, bool) {
	if o == nil || o.UseRateMetric == nil {
		return nil, false
	}
	return o.UseRateMetric, true
}

// HasUseRateMetric returns a boolean if a field has been set.
func (o *SLO) HasUseRateMetric() bool {
	if o != nil && o.UseRateMetric != nil {
		return true
	}

	return false
}

// SetUseRateMetric gets a reference to the given bool and assigns it to the UseRateMetric field.
func (o *SLO) SetUseRateMetric(v bool) {
	o.UseRateMetric = &v
}

// GetMetricRate returns the MetricRate field value if set, zero value otherwise.
func (o *SLO) GetMetricRate() string {
	if o == nil || o.MetricRate == nil {
		var ret string
		return ret
	}
	return *o.MetricRate
}

// GetMetricRateOk returns a tuple with the MetricRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetMetricRateOk() (*string, bool) {
	if o == nil || o.MetricRate == nil {
		return nil, false
	}
	return o.MetricRate, true
}

// HasMetricRate returns a boolean if a field has been set.
func (o *SLO) HasMetricRate() bool {
	if o != nil && o.MetricRate != nil {
		return true
	}

	return false
}

// SetMetricRate gets a reference to the given string and assigns it to the MetricRate field.
func (o *SLO) SetMetricRate(v string) {
	o.MetricRate = &v
}

// GetMetricNumerator returns the MetricNumerator field value if set, zero value otherwise.
func (o *SLO) GetMetricNumerator() string {
	if o == nil || o.MetricNumerator == nil {
		var ret string
		return ret
	}
	return *o.MetricNumerator
}

// GetMetricNumeratorOk returns a tuple with the MetricNumerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetMetricNumeratorOk() (*string, bool) {
	if o == nil || o.MetricNumerator == nil {
		return nil, false
	}
	return o.MetricNumerator, true
}

// HasMetricNumerator returns a boolean if a field has been set.
func (o *SLO) HasMetricNumerator() bool {
	if o != nil && o.MetricNumerator != nil {
		return true
	}

	return false
}

// SetMetricNumerator gets a reference to the given string and assigns it to the MetricNumerator field.
func (o *SLO) SetMetricNumerator(v string) {
	o.MetricNumerator = &v
}

// GetMetricDenominator returns the MetricDenominator field value if set, zero value otherwise.
func (o *SLO) GetMetricDenominator() string {
	if o == nil || o.MetricDenominator == nil {
		var ret string
		return ret
	}
	return *o.MetricDenominator
}

// GetMetricDenominatorOk returns a tuple with the MetricDenominator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetMetricDenominatorOk() (*string, bool) {
	if o == nil || o.MetricDenominator == nil {
		return nil, false
	}
	return o.MetricDenominator, true
}

// HasMetricDenominator returns a boolean if a field has been set.
func (o *SLO) HasMetricDenominator() bool {
	if o != nil && o.MetricDenominator != nil {
		return true
	}

	return false
}

// SetMetricDenominator gets a reference to the given string and assigns it to the MetricDenominator field.
func (o *SLO) SetMetricDenominator(v string) {
	o.MetricDenominator = &v
}

// GetEvaluationType returns the EvaluationType field value if set, zero value otherwise.
func (o *SLO) GetEvaluationType() string {
	if o == nil || o.EvaluationType == nil {
		var ret string
		return ret
	}
	return *o.EvaluationType
}

// GetEvaluationTypeOk returns a tuple with the EvaluationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetEvaluationTypeOk() (*string, bool) {
	if o == nil || o.EvaluationType == nil {
		return nil, false
	}
	return o.EvaluationType, true
}

// HasEvaluationType returns a boolean if a field has been set.
func (o *SLO) HasEvaluationType() bool {
	if o != nil && o.EvaluationType != nil {
		return true
	}

	return false
}

// SetEvaluationType gets a reference to the given string and assigns it to the EvaluationType field.
func (o *SLO) SetEvaluationType(v string) {
	o.EvaluationType = &v
}

// GetTimeframe returns the Timeframe field value if set, zero value otherwise.
func (o *SLO) GetTimeframe() string {
	if o == nil || o.Timeframe == nil {
		var ret string
		return ret
	}
	return *o.Timeframe
}

// GetTimeframeOk returns a tuple with the Timeframe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetTimeframeOk() (*string, bool) {
	if o == nil || o.Timeframe == nil {
		return nil, false
	}
	return o.Timeframe, true
}

// HasTimeframe returns a boolean if a field has been set.
func (o *SLO) HasTimeframe() bool {
	if o != nil && o.Timeframe != nil {
		return true
	}

	return false
}

// SetTimeframe gets a reference to the given string and assigns it to the Timeframe field.
func (o *SLO) SetTimeframe(v string) {
	o.Timeframe = &v
}

// GetErrorBudget returns the ErrorBudget field value if set, zero value otherwise.
func (o *SLO) GetErrorBudget() float64 {
	if o == nil || o.ErrorBudget == nil {
		var ret float64
		return ret
	}
	return *o.ErrorBudget
}

// GetErrorBudgetOk returns a tuple with the ErrorBudget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetErrorBudgetOk() (*float64, bool) {
	if o == nil || o.ErrorBudget == nil {
		return nil, false
	}
	return o.ErrorBudget, true
}

// HasErrorBudget returns a boolean if a field has been set.
func (o *SLO) HasErrorBudget() bool {
	if o != nil && o.ErrorBudget != nil {
		return true
	}

	return false
}

// SetErrorBudget gets a reference to the given float64 and assigns it to the ErrorBudget field.
func (o *SLO) SetErrorBudget(v float64) {
	o.ErrorBudget = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *SLO) GetFilter() string {
	if o == nil || o.Filter == nil {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetFilterOk() (*string, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *SLO) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *SLO) SetFilter(v string) {
	o.Filter = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SLO) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SLO) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SLO) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SLO) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SLO) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SLO) SetId(v string) {
	o.Id = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *SLO) GetTarget() float64 {
	if o == nil || o.Target == nil {
		var ret float64
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetTargetOk() (*float64, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *SLO) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given float64 and assigns it to the Target field.
func (o *SLO) SetTarget(v float64) {
	o.Target = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SLO) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SLO) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SLO) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SLO) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SLO) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SLO) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SLO) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SLO) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SLO) SetStatus(v string) {
	o.Status = &v
}

// GetWarning returns the Warning field value if set, zero value otherwise.
func (o *SLO) GetWarning() float64 {
	if o == nil || o.Warning == nil {
		var ret float64
		return ret
	}
	return *o.Warning
}

// GetWarningOk returns a tuple with the Warning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetWarningOk() (*float64, bool) {
	if o == nil || o.Warning == nil {
		return nil, false
	}
	return o.Warning, true
}

// HasWarning returns a boolean if a field has been set.
func (o *SLO) HasWarning() bool {
	if o != nil && o.Warning != nil {
		return true
	}

	return false
}

// SetWarning gets a reference to the given float64 and assigns it to the Warning field.
func (o *SLO) SetWarning(v float64) {
	o.Warning = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SLO) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SLO) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SLO) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *SLO) SetError(v string) {
	o.Error = &v
}

func (o SLO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RelatedOpenProblems != nil {
		toSerialize["relatedOpenProblems"] = o.RelatedOpenProblems
	}
	if o.DenominatorValue != nil {
		toSerialize["denominatorValue"] = o.DenominatorValue
	}
	if o.EvaluatedPercentage != nil {
		toSerialize["evaluatedPercentage"] = o.EvaluatedPercentage
	}
	if o.NumeratorValue != nil {
		toSerialize["numeratorValue"] = o.NumeratorValue
	}
	if o.UseRateMetric != nil {
		toSerialize["useRateMetric"] = o.UseRateMetric
	}
	if o.MetricRate != nil {
		toSerialize["metricRate"] = o.MetricRate
	}
	if o.MetricNumerator != nil {
		toSerialize["metricNumerator"] = o.MetricNumerator
	}
	if o.MetricDenominator != nil {
		toSerialize["metricDenominator"] = o.MetricDenominator
	}
	if o.EvaluationType != nil {
		toSerialize["evaluationType"] = o.EvaluationType
	}
	if o.Timeframe != nil {
		toSerialize["timeframe"] = o.Timeframe
	}
	if o.ErrorBudget != nil {
		toSerialize["errorBudget"] = o.ErrorBudget
	}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Warning != nil {
		toSerialize["warning"] = o.Warning
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableSLO struct {
	value *SLO
	isSet bool
}

func (v NullableSLO) Get() *SLO {
	return v.value
}

func (v *NullableSLO) Set(val *SLO) {
	v.value = val
	v.isSet = true
}

func (v NullableSLO) IsSet() bool {
	return v.isSet
}

func (v *NullableSLO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSLO(val *SLO) *NullableSLO {
	return &NullableSLO{value: val, isSet: true}
}

func (v NullableSLO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSLO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


