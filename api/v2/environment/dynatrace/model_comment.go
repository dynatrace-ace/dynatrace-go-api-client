/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Comment The comment to a problem.
type Comment struct {
	// The user who wrote the comment.
	AuthorName *string `json:"authorName,omitempty"`
	// The timestamp of comment creation, in UTC milliseconds.
	CreatedAtTimestamp int64 `json:"createdAtTimestamp"`
	// The context of the comment.
	Context *string `json:"context,omitempty"`
	// The ID of the comment.
	Id *string `json:"id,omitempty"`
	// The text of the comment.
	Content *string `json:"content,omitempty"`
}

// NewComment instantiates a new Comment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComment(createdAtTimestamp int64) *Comment {
	this := Comment{}
	this.CreatedAtTimestamp = createdAtTimestamp
	return &this
}

// NewCommentWithDefaults instantiates a new Comment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommentWithDefaults() *Comment {
	this := Comment{}
	return &this
}

// GetAuthorName returns the AuthorName field value if set, zero value otherwise.
func (o *Comment) GetAuthorName() string {
	if o == nil || o.AuthorName == nil {
		var ret string
		return ret
	}
	return *o.AuthorName
}

// GetAuthorNameOk returns a tuple with the AuthorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetAuthorNameOk() (*string, bool) {
	if o == nil || o.AuthorName == nil {
		return nil, false
	}
	return o.AuthorName, true
}

// HasAuthorName returns a boolean if a field has been set.
func (o *Comment) HasAuthorName() bool {
	if o != nil && o.AuthorName != nil {
		return true
	}

	return false
}

// SetAuthorName gets a reference to the given string and assigns it to the AuthorName field.
func (o *Comment) SetAuthorName(v string) {
	o.AuthorName = &v
}

// GetCreatedAtTimestamp returns the CreatedAtTimestamp field value
func (o *Comment) GetCreatedAtTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreatedAtTimestamp
}

// GetCreatedAtTimestampOk returns a tuple with the CreatedAtTimestamp field value
// and a boolean to check if the value has been set.
func (o *Comment) GetCreatedAtTimestampOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAtTimestamp, true
}

// SetCreatedAtTimestamp sets field value
func (o *Comment) SetCreatedAtTimestamp(v int64) {
	o.CreatedAtTimestamp = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Comment) GetContext() string {
	if o == nil || o.Context == nil {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetContextOk() (*string, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Comment) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *Comment) SetContext(v string) {
	o.Context = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Comment) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Comment) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Comment) SetId(v string) {
	o.Id = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *Comment) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Comment) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *Comment) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *Comment) SetContent(v string) {
	o.Content = &v
}

func (o Comment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthorName != nil {
		toSerialize["authorName"] = o.AuthorName
	}
	if true {
		toSerialize["createdAtTimestamp"] = o.CreatedAtTimestamp
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableComment struct {
	value *Comment
	isSet bool
}

func (v NullableComment) Get() *Comment {
	return v.value
}

func (v *NullableComment) Set(val *Comment) {
	v.value = val
	v.isSet = true
}

func (v NullableComment) IsSet() bool {
	return v.isSet
}

func (v *NullableComment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComment(val *Comment) *NullableComment {
	return &NullableComment{value: val, isSet: true}
}

func (v NullableComment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


