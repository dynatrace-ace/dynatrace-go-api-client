/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// CustomEntityTags A list of custom tags.
type CustomEntityTags struct {
	// The total number of tags in the response.
	TotalCount *int64 `json:"totalCount,omitempty"`
	// A list of custom tags.
	Tags []METag `json:"tags"`
}

// NewCustomEntityTags instantiates a new CustomEntityTags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomEntityTags(tags []METag) *CustomEntityTags {
	this := CustomEntityTags{}
	this.Tags = tags
	return &this
}

// NewCustomEntityTagsWithDefaults instantiates a new CustomEntityTags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomEntityTagsWithDefaults() *CustomEntityTags {
	this := CustomEntityTags{}
	return &this
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *CustomEntityTags) GetTotalCount() int64 {
	if o == nil || o.TotalCount == nil {
		var ret int64
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomEntityTags) GetTotalCountOk() (*int64, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *CustomEntityTags) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given int64 and assigns it to the TotalCount field.
func (o *CustomEntityTags) SetTotalCount(v int64) {
	o.TotalCount = &v
}

// GetTags returns the Tags field value
func (o *CustomEntityTags) GetTags() []METag {
	if o == nil {
		var ret []METag
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *CustomEntityTags) GetTagsOk() (*[]METag, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Tags, true
}

// SetTags sets field value
func (o *CustomEntityTags) SetTags(v []METag) {
	o.Tags = v
}

func (o CustomEntityTags) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TotalCount != nil {
		toSerialize["totalCount"] = o.TotalCount
	}
	if true {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableCustomEntityTags struct {
	value *CustomEntityTags
	isSet bool
}

func (v NullableCustomEntityTags) Get() *CustomEntityTags {
	return v.value
}

func (v *NullableCustomEntityTags) Set(val *CustomEntityTags) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomEntityTags) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomEntityTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomEntityTags(val *CustomEntityTags) *NullableCustomEntityTags {
	return &NullableCustomEntityTags{value: val, isSet: true}
}

func (v NullableCustomEntityTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomEntityTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


