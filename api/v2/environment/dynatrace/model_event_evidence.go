/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// EventEvidence The event evidence of the problem.   An event that occurred during the problem lifespan that might be related to the root cause.
type EventEvidence struct {
	Evidence
	// The type of the event.
	EventType string `json:"eventType"`
	// The ID of the event.
	EventId string `json:"eventId"`
}

// NewEventEvidence instantiates a new EventEvidence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventEvidence(eventType string, eventId string, evidenceType string, displayName string, entity EntityStub, rootCauseRelevant bool, startTime int64) *EventEvidence {
	this := EventEvidence{}
	this.EvidenceType = evidenceType
	this.DisplayName = displayName
	this.Entity = entity
	this.RootCauseRelevant = rootCauseRelevant
	this.StartTime = startTime
	this.EventType = eventType
	this.EventId = eventId
	return &this
}

// NewEventEvidenceWithDefaults instantiates a new EventEvidence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventEvidenceWithDefaults() *EventEvidence {
	this := EventEvidence{}
	return &this
}

// GetEventType returns the EventType field value
func (o *EventEvidence) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *EventEvidence) GetEventTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *EventEvidence) SetEventType(v string) {
	o.EventType = v
}

// GetEventId returns the EventId field value
func (o *EventEvidence) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *EventEvidence) GetEventIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *EventEvidence) SetEventId(v string) {
	o.EventId = v
}

func (o EventEvidence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedEvidence, errEvidence := json.Marshal(o.Evidence)
	if errEvidence != nil {
		return []byte{}, errEvidence
	}
	errEvidence = json.Unmarshal([]byte(serializedEvidence), &toSerialize)
	if errEvidence != nil {
		return []byte{}, errEvidence
	}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["eventId"] = o.EventId
	}
	return json.Marshal(toSerialize)
}

type NullableEventEvidence struct {
	value *EventEvidence
	isSet bool
}

func (v NullableEventEvidence) Get() *EventEvidence {
	return v.value
}

func (v *NullableEventEvidence) Set(val *EventEvidence) {
	v.value = val
	v.isSet = true
}

func (v NullableEventEvidence) IsSet() bool {
	return v.isSet
}

func (v *NullableEventEvidence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventEvidence(val *EventEvidence) *NullableEventEvidence {
	return &NullableEventEvidence{value: val, isSet: true}
}

func (v NullableEventEvidence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventEvidence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


