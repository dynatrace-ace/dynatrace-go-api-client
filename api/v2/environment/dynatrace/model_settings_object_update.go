/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SettingsObjectUpdate An update of a settings object.
type SettingsObjectUpdate struct {
	// The version of the schema on which the object is based.
	SchemaVersion *string `json:"schemaVersion,omitempty"`
	// The update token of the object. You can use it to detect simultaneous modifications by different users.   It is generated upon retrieval (GET requests). If set on update (PUT request) or deletion, the update/deletion will be allowed only if there wasn't any change between the retrieval and the update.   If omitted on update/deletion, the operation overrides the current value or deletes it without any checks.
	UpdateToken *string `json:"updateToken,omitempty"`
	// The value of the setting.    It defines the actual values of settings' parameters.   The actual content depends on the object's schema.
	Value map[string]interface{} `json:"value"`
}

// NewSettingsObjectUpdate instantiates a new SettingsObjectUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsObjectUpdate(value map[string]interface{}) *SettingsObjectUpdate {
	this := SettingsObjectUpdate{}
	this.Value = value
	return &this
}

// NewSettingsObjectUpdateWithDefaults instantiates a new SettingsObjectUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsObjectUpdateWithDefaults() *SettingsObjectUpdate {
	this := SettingsObjectUpdate{}
	return &this
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *SettingsObjectUpdate) GetSchemaVersion() string {
	if o == nil || o.SchemaVersion == nil {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObjectUpdate) GetSchemaVersionOk() (*string, bool) {
	if o == nil || o.SchemaVersion == nil {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *SettingsObjectUpdate) HasSchemaVersion() bool {
	if o != nil && o.SchemaVersion != nil {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *SettingsObjectUpdate) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

// GetUpdateToken returns the UpdateToken field value if set, zero value otherwise.
func (o *SettingsObjectUpdate) GetUpdateToken() string {
	if o == nil || o.UpdateToken == nil {
		var ret string
		return ret
	}
	return *o.UpdateToken
}

// GetUpdateTokenOk returns a tuple with the UpdateToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObjectUpdate) GetUpdateTokenOk() (*string, bool) {
	if o == nil || o.UpdateToken == nil {
		return nil, false
	}
	return o.UpdateToken, true
}

// HasUpdateToken returns a boolean if a field has been set.
func (o *SettingsObjectUpdate) HasUpdateToken() bool {
	if o != nil && o.UpdateToken != nil {
		return true
	}

	return false
}

// SetUpdateToken gets a reference to the given string and assigns it to the UpdateToken field.
func (o *SettingsObjectUpdate) SetUpdateToken(v string) {
	o.UpdateToken = &v
}

// GetValue returns the Value field value
func (o *SettingsObjectUpdate) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SettingsObjectUpdate) GetValueOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SettingsObjectUpdate) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o SettingsObjectUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SchemaVersion != nil {
		toSerialize["schemaVersion"] = o.SchemaVersion
	}
	if o.UpdateToken != nil {
		toSerialize["updateToken"] = o.UpdateToken
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableSettingsObjectUpdate struct {
	value *SettingsObjectUpdate
	isSet bool
}

func (v NullableSettingsObjectUpdate) Get() *SettingsObjectUpdate {
	return v.value
}

func (v *NullableSettingsObjectUpdate) Set(val *SettingsObjectUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsObjectUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsObjectUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsObjectUpdate(val *SettingsObjectUpdate) *NullableSettingsObjectUpdate {
	return &NullableSettingsObjectUpdate{value: val, isSet: true}
}

func (v NullableSettingsObjectUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsObjectUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


