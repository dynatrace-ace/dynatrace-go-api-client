/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AvailabilityEvidenceAllOf struct for AvailabilityEvidenceAllOf
type AvailabilityEvidenceAllOf struct {
	// The end time of the evidence, in UTC milliseconds.
	EndTime *int64 `json:"endTime,omitempty"`
}

// NewAvailabilityEvidenceAllOf instantiates a new AvailabilityEvidenceAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailabilityEvidenceAllOf() *AvailabilityEvidenceAllOf {
	this := AvailabilityEvidenceAllOf{}
	return &this
}

// NewAvailabilityEvidenceAllOfWithDefaults instantiates a new AvailabilityEvidenceAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailabilityEvidenceAllOfWithDefaults() *AvailabilityEvidenceAllOf {
	this := AvailabilityEvidenceAllOf{}
	return &this
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *AvailabilityEvidenceAllOf) GetEndTime() int64 {
	if o == nil || o.EndTime == nil {
		var ret int64
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailabilityEvidenceAllOf) GetEndTimeOk() (*int64, bool) {
	if o == nil || o.EndTime == nil {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *AvailabilityEvidenceAllOf) HasEndTime() bool {
	if o != nil && o.EndTime != nil {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given int64 and assigns it to the EndTime field.
func (o *AvailabilityEvidenceAllOf) SetEndTime(v int64) {
	o.EndTime = &v
}

func (o AvailabilityEvidenceAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndTime != nil {
		toSerialize["endTime"] = o.EndTime
	}
	return json.Marshal(toSerialize)
}

type NullableAvailabilityEvidenceAllOf struct {
	value *AvailabilityEvidenceAllOf
	isSet bool
}

func (v NullableAvailabilityEvidenceAllOf) Get() *AvailabilityEvidenceAllOf {
	return v.value
}

func (v *NullableAvailabilityEvidenceAllOf) Set(val *AvailabilityEvidenceAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailabilityEvidenceAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailabilityEvidenceAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailabilityEvidenceAllOf(val *AvailabilityEvidenceAllOf) *NullableAvailabilityEvidenceAllOf {
	return &NullableAvailabilityEvidenceAllOf{value: val, isSet: true}
}

func (v NullableAvailabilityEvidenceAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailabilityEvidenceAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


