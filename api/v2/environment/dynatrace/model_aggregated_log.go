/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// AggregatedLog Aggregated log records.
type AggregatedLog struct {
	// Aggregated log records.
	AggregationResult *map[string]map[string]map[string]int64 `json:"aggregationResult,omitempty"`
}

// NewAggregatedLog instantiates a new AggregatedLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregatedLog() *AggregatedLog {
	this := AggregatedLog{}
	return &this
}

// NewAggregatedLogWithDefaults instantiates a new AggregatedLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregatedLogWithDefaults() *AggregatedLog {
	this := AggregatedLog{}
	return &this
}

// GetAggregationResult returns the AggregationResult field value if set, zero value otherwise.
func (o *AggregatedLog) GetAggregationResult() map[string]map[string]map[string]int64 {
	if o == nil || o.AggregationResult == nil {
		var ret map[string]map[string]map[string]int64
		return ret
	}
	return *o.AggregationResult
}

// GetAggregationResultOk returns a tuple with the AggregationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregatedLog) GetAggregationResultOk() (*map[string]map[string]map[string]int64, bool) {
	if o == nil || o.AggregationResult == nil {
		return nil, false
	}
	return o.AggregationResult, true
}

// HasAggregationResult returns a boolean if a field has been set.
func (o *AggregatedLog) HasAggregationResult() bool {
	if o != nil && o.AggregationResult != nil {
		return true
	}

	return false
}

// SetAggregationResult gets a reference to the given map[string]map[string]map[string]int64 and assigns it to the AggregationResult field.
func (o *AggregatedLog) SetAggregationResult(v map[string]map[string]map[string]int64) {
	o.AggregationResult = &v
}

func (o AggregatedLog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AggregationResult != nil {
		toSerialize["aggregationResult"] = o.AggregationResult
	}
	return json.Marshal(toSerialize)
}

type NullableAggregatedLog struct {
	value *AggregatedLog
	isSet bool
}

func (v NullableAggregatedLog) Get() *AggregatedLog {
	return v.value
}

func (v *NullableAggregatedLog) Set(val *AggregatedLog) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregatedLog) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregatedLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregatedLog(val *AggregatedLog) *NullableAggregatedLog {
	return &NullableAggregatedLog{value: val, isSet: true}
}

func (v NullableAggregatedLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregatedLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


