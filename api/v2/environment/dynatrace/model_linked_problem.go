/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// LinkedProblem The properties of the linked problem.
type LinkedProblem struct {
	// The display ID of the problem.
	DisplayId string `json:"displayId"`
	// The ID of the problem.
	ProblemId string `json:"problemId"`
}

// NewLinkedProblem instantiates a new LinkedProblem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkedProblem(displayId string, problemId string) *LinkedProblem {
	this := LinkedProblem{}
	this.DisplayId = displayId
	this.ProblemId = problemId
	return &this
}

// NewLinkedProblemWithDefaults instantiates a new LinkedProblem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkedProblemWithDefaults() *LinkedProblem {
	this := LinkedProblem{}
	return &this
}

// GetDisplayId returns the DisplayId field value
func (o *LinkedProblem) GetDisplayId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayId
}

// GetDisplayIdOk returns a tuple with the DisplayId field value
// and a boolean to check if the value has been set.
func (o *LinkedProblem) GetDisplayIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DisplayId, true
}

// SetDisplayId sets field value
func (o *LinkedProblem) SetDisplayId(v string) {
	o.DisplayId = v
}

// GetProblemId returns the ProblemId field value
func (o *LinkedProblem) GetProblemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProblemId
}

// GetProblemIdOk returns a tuple with the ProblemId field value
// and a boolean to check if the value has been set.
func (o *LinkedProblem) GetProblemIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ProblemId, true
}

// SetProblemId sets field value
func (o *LinkedProblem) SetProblemId(v string) {
	o.ProblemId = v
}

func (o LinkedProblem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["displayId"] = o.DisplayId
	}
	if true {
		toSerialize["problemId"] = o.ProblemId
	}
	return json.Marshal(toSerialize)
}

type NullableLinkedProblem struct {
	value *LinkedProblem
	isSet bool
}

func (v NullableLinkedProblem) Get() *LinkedProblem {
	return v.value
}

func (v *NullableLinkedProblem) Set(val *LinkedProblem) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkedProblem) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkedProblem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkedProblem(val *LinkedProblem) *NullableLinkedProblem {
	return &NullableLinkedProblem{value: val, isSet: true}
}

func (v NullableLinkedProblem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkedProblem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


