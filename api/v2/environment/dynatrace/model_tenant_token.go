/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// TenantToken Tenant token
type TenantToken struct {
	// The secret of the tenant token.
	Value *string `json:"value,omitempty"`
}

// NewTenantToken instantiates a new TenantToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantToken() *TenantToken {
	this := TenantToken{}
	return &this
}

// NewTenantTokenWithDefaults instantiates a new TenantToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantTokenWithDefaults() *TenantToken {
	this := TenantToken{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TenantToken) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantToken) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TenantToken) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TenantToken) SetValue(v string) {
	o.Value = &v
}

func (o TenantToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableTenantToken struct {
	value *TenantToken
	isSet bool
}

func (v NullableTenantToken) Get() *TenantToken {
	return v.value
}

func (v *NullableTenantToken) Set(val *TenantToken) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantToken) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantToken(val *TenantToken) *NullableTenantToken {
	return &NullableTenantToken{value: val, isSet: true}
}

func (v NullableTenantToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


