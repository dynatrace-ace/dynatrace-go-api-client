/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ExtensionStatusDto struct for ExtensionStatusDto
type ExtensionStatusDto struct {
	// Timestamp of the latest status of given configuration.
	Timestamp *int64 `json:"timestamp,omitempty"`
	// Latest status of given configuration.
	Status *string `json:"status,omitempty"`
}

// NewExtensionStatusDto instantiates a new ExtensionStatusDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionStatusDto() *ExtensionStatusDto {
	this := ExtensionStatusDto{}
	return &this
}

// NewExtensionStatusDtoWithDefaults instantiates a new ExtensionStatusDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionStatusDtoWithDefaults() *ExtensionStatusDto {
	this := ExtensionStatusDto{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ExtensionStatusDto) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionStatusDto) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ExtensionStatusDto) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *ExtensionStatusDto) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExtensionStatusDto) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionStatusDto) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExtensionStatusDto) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ExtensionStatusDto) SetStatus(v string) {
	o.Status = &v
}

func (o ExtensionStatusDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableExtensionStatusDto struct {
	value *ExtensionStatusDto
	isSet bool
}

func (v NullableExtensionStatusDto) Get() *ExtensionStatusDto {
	return v.value
}

func (v *NullableExtensionStatusDto) Set(val *ExtensionStatusDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionStatusDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionStatusDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionStatusDto(val *ExtensionStatusDto) *NullableExtensionStatusDto {
	return &NullableExtensionStatusDto{value: val, isSet: true}
}

func (v NullableExtensionStatusDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionStatusDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


