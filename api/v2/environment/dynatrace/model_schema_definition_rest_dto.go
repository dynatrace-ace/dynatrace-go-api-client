/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SchemaDefinitionRestDto struct for SchemaDefinitionRestDto
type SchemaDefinitionRestDto struct {
	// The version of the data format.
	Dynatrace *string `json:"dynatrace,omitempty"`
	// The ID of the schema.
	SchemaId *string `json:"schemaId,omitempty"`
	// The display name of the schema.
	DisplayName *string `json:"displayName,omitempty"`
	// A short description of the schema.
	Description *string `json:"description,omitempty"`
	// An extended description of the schema and/or links to documentation.
	Documentation *string `json:"documentation,omitempty"`
	// The version of the schema.
	Version *string `json:"version,omitempty"`
	// Multiple (`true`) objects per scope are permitted or a single (`false`) object per scope is permitted.
	MultiObject *bool `json:"multiObject,omitempty"`
	// If `true` the order of objects has semantic significance.   Only applicable when **multiObject** is set to `true`.
	Ordered *bool `json:"ordered,omitempty"`
	// The maximum amount of objects per scope.   Only applicable when **multiObject** is set to `true`.
	MaxObjects *int32 `json:"maxObjects,omitempty"`
	// A list of scopes where the schema can be used.
	AllowedScopes *[]string `json:"allowedScopes,omitempty"`
	// A list of definitions of enum properties.
	Enums *map[string]EnumType `json:"enums,omitempty"`
	// A list of definitions of types.    A type is a complex property that contains its own set of subproperties.
	Types *map[string]SchemaType `json:"types,omitempty"`
	// A list of schema's properties.
	Properties *map[string]PropertyDefinition `json:"properties,omitempty"`
	// A list of constrains limiting the values to be accepted by the schema.
	Constraints *[]ComplexConstraint `json:"constraints,omitempty"`
	// Metadata of the setting.
	Metadata *map[string]string `json:"metadata,omitempty"`
}

// NewSchemaDefinitionRestDto instantiates a new SchemaDefinitionRestDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaDefinitionRestDto() *SchemaDefinitionRestDto {
	this := SchemaDefinitionRestDto{}
	return &this
}

// NewSchemaDefinitionRestDtoWithDefaults instantiates a new SchemaDefinitionRestDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaDefinitionRestDtoWithDefaults() *SchemaDefinitionRestDto {
	this := SchemaDefinitionRestDto{}
	return &this
}

// GetDynatrace returns the Dynatrace field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetDynatrace() string {
	if o == nil || o.Dynatrace == nil {
		var ret string
		return ret
	}
	return *o.Dynatrace
}

// GetDynatraceOk returns a tuple with the Dynatrace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetDynatraceOk() (*string, bool) {
	if o == nil || o.Dynatrace == nil {
		return nil, false
	}
	return o.Dynatrace, true
}

// HasDynatrace returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasDynatrace() bool {
	if o != nil && o.Dynatrace != nil {
		return true
	}

	return false
}

// SetDynatrace gets a reference to the given string and assigns it to the Dynatrace field.
func (o *SchemaDefinitionRestDto) SetDynatrace(v string) {
	o.Dynatrace = &v
}

// GetSchemaId returns the SchemaId field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetSchemaId() string {
	if o == nil || o.SchemaId == nil {
		var ret string
		return ret
	}
	return *o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetSchemaIdOk() (*string, bool) {
	if o == nil || o.SchemaId == nil {
		return nil, false
	}
	return o.SchemaId, true
}

// HasSchemaId returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasSchemaId() bool {
	if o != nil && o.SchemaId != nil {
		return true
	}

	return false
}

// SetSchemaId gets a reference to the given string and assigns it to the SchemaId field.
func (o *SchemaDefinitionRestDto) SetSchemaId(v string) {
	o.SchemaId = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SchemaDefinitionRestDto) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaDefinitionRestDto) SetDescription(v string) {
	o.Description = &v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetDocumentation() string {
	if o == nil || o.Documentation == nil {
		var ret string
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetDocumentationOk() (*string, bool) {
	if o == nil || o.Documentation == nil {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasDocumentation() bool {
	if o != nil && o.Documentation != nil {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given string and assigns it to the Documentation field.
func (o *SchemaDefinitionRestDto) SetDocumentation(v string) {
	o.Documentation = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *SchemaDefinitionRestDto) SetVersion(v string) {
	o.Version = &v
}

// GetMultiObject returns the MultiObject field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetMultiObject() bool {
	if o == nil || o.MultiObject == nil {
		var ret bool
		return ret
	}
	return *o.MultiObject
}

// GetMultiObjectOk returns a tuple with the MultiObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetMultiObjectOk() (*bool, bool) {
	if o == nil || o.MultiObject == nil {
		return nil, false
	}
	return o.MultiObject, true
}

// HasMultiObject returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasMultiObject() bool {
	if o != nil && o.MultiObject != nil {
		return true
	}

	return false
}

// SetMultiObject gets a reference to the given bool and assigns it to the MultiObject field.
func (o *SchemaDefinitionRestDto) SetMultiObject(v bool) {
	o.MultiObject = &v
}

// GetOrdered returns the Ordered field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetOrdered() bool {
	if o == nil || o.Ordered == nil {
		var ret bool
		return ret
	}
	return *o.Ordered
}

// GetOrderedOk returns a tuple with the Ordered field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetOrderedOk() (*bool, bool) {
	if o == nil || o.Ordered == nil {
		return nil, false
	}
	return o.Ordered, true
}

// HasOrdered returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasOrdered() bool {
	if o != nil && o.Ordered != nil {
		return true
	}

	return false
}

// SetOrdered gets a reference to the given bool and assigns it to the Ordered field.
func (o *SchemaDefinitionRestDto) SetOrdered(v bool) {
	o.Ordered = &v
}

// GetMaxObjects returns the MaxObjects field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetMaxObjects() int32 {
	if o == nil || o.MaxObjects == nil {
		var ret int32
		return ret
	}
	return *o.MaxObjects
}

// GetMaxObjectsOk returns a tuple with the MaxObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetMaxObjectsOk() (*int32, bool) {
	if o == nil || o.MaxObjects == nil {
		return nil, false
	}
	return o.MaxObjects, true
}

// HasMaxObjects returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasMaxObjects() bool {
	if o != nil && o.MaxObjects != nil {
		return true
	}

	return false
}

// SetMaxObjects gets a reference to the given int32 and assigns it to the MaxObjects field.
func (o *SchemaDefinitionRestDto) SetMaxObjects(v int32) {
	o.MaxObjects = &v
}

// GetAllowedScopes returns the AllowedScopes field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetAllowedScopes() []string {
	if o == nil || o.AllowedScopes == nil {
		var ret []string
		return ret
	}
	return *o.AllowedScopes
}

// GetAllowedScopesOk returns a tuple with the AllowedScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetAllowedScopesOk() (*[]string, bool) {
	if o == nil || o.AllowedScopes == nil {
		return nil, false
	}
	return o.AllowedScopes, true
}

// HasAllowedScopes returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasAllowedScopes() bool {
	if o != nil && o.AllowedScopes != nil {
		return true
	}

	return false
}

// SetAllowedScopes gets a reference to the given []string and assigns it to the AllowedScopes field.
func (o *SchemaDefinitionRestDto) SetAllowedScopes(v []string) {
	o.AllowedScopes = &v
}

// GetEnums returns the Enums field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetEnums() map[string]EnumType {
	if o == nil || o.Enums == nil {
		var ret map[string]EnumType
		return ret
	}
	return *o.Enums
}

// GetEnumsOk returns a tuple with the Enums field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetEnumsOk() (*map[string]EnumType, bool) {
	if o == nil || o.Enums == nil {
		return nil, false
	}
	return o.Enums, true
}

// HasEnums returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasEnums() bool {
	if o != nil && o.Enums != nil {
		return true
	}

	return false
}

// SetEnums gets a reference to the given map[string]EnumType and assigns it to the Enums field.
func (o *SchemaDefinitionRestDto) SetEnums(v map[string]EnumType) {
	o.Enums = &v
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetTypes() map[string]SchemaType {
	if o == nil || o.Types == nil {
		var ret map[string]SchemaType
		return ret
	}
	return *o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetTypesOk() (*map[string]SchemaType, bool) {
	if o == nil || o.Types == nil {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasTypes() bool {
	if o != nil && o.Types != nil {
		return true
	}

	return false
}

// SetTypes gets a reference to the given map[string]SchemaType and assigns it to the Types field.
func (o *SchemaDefinitionRestDto) SetTypes(v map[string]SchemaType) {
	o.Types = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetProperties() map[string]PropertyDefinition {
	if o == nil || o.Properties == nil {
		var ret map[string]PropertyDefinition
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetPropertiesOk() (*map[string]PropertyDefinition, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]PropertyDefinition and assigns it to the Properties field.
func (o *SchemaDefinitionRestDto) SetProperties(v map[string]PropertyDefinition) {
	o.Properties = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetConstraints() []ComplexConstraint {
	if o == nil || o.Constraints == nil {
		var ret []ComplexConstraint
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetConstraintsOk() (*[]ComplexConstraint, bool) {
	if o == nil || o.Constraints == nil {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasConstraints() bool {
	if o != nil && o.Constraints != nil {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given []ComplexConstraint and assigns it to the Constraints field.
func (o *SchemaDefinitionRestDto) SetConstraints(v []ComplexConstraint) {
	o.Constraints = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *SchemaDefinitionRestDto) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaDefinitionRestDto) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *SchemaDefinitionRestDto) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *SchemaDefinitionRestDto) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

func (o SchemaDefinitionRestDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Dynatrace != nil {
		toSerialize["dynatrace"] = o.Dynatrace
	}
	if o.SchemaId != nil {
		toSerialize["schemaId"] = o.SchemaId
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Documentation != nil {
		toSerialize["documentation"] = o.Documentation
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.MultiObject != nil {
		toSerialize["multiObject"] = o.MultiObject
	}
	if o.Ordered != nil {
		toSerialize["ordered"] = o.Ordered
	}
	if o.MaxObjects != nil {
		toSerialize["maxObjects"] = o.MaxObjects
	}
	if o.AllowedScopes != nil {
		toSerialize["allowedScopes"] = o.AllowedScopes
	}
	if o.Enums != nil {
		toSerialize["enums"] = o.Enums
	}
	if o.Types != nil {
		toSerialize["types"] = o.Types
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Constraints != nil {
		toSerialize["constraints"] = o.Constraints
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaDefinitionRestDto struct {
	value *SchemaDefinitionRestDto
	isSet bool
}

func (v NullableSchemaDefinitionRestDto) Get() *SchemaDefinitionRestDto {
	return v.value
}

func (v *NullableSchemaDefinitionRestDto) Set(val *SchemaDefinitionRestDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaDefinitionRestDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaDefinitionRestDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaDefinitionRestDto(val *SchemaDefinitionRestDto) *NullableSchemaDefinitionRestDto {
	return &NullableSchemaDefinitionRestDto{value: val, isSet: true}
}

func (v NullableSchemaDefinitionRestDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaDefinitionRestDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


