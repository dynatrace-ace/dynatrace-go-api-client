/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// Unmute Information on un-muting a security problem.
type Unmute struct {
	// The reason for un-muting a security problem.
	Reason string `json:"reason"`
	// A comment about the un-muting reason.
	Comment string `json:"comment"`
}

// NewUnmute instantiates a new Unmute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnmute(reason string, comment string) *Unmute {
	this := Unmute{}
	this.Reason = reason
	this.Comment = comment
	return &this
}

// NewUnmuteWithDefaults instantiates a new Unmute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnmuteWithDefaults() *Unmute {
	this := Unmute{}
	return &this
}

// GetReason returns the Reason field value
func (o *Unmute) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *Unmute) GetReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *Unmute) SetReason(v string) {
	o.Reason = v
}

// GetComment returns the Comment field value
func (o *Unmute) GetComment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Comment
}

// GetCommentOk returns a tuple with the Comment field value
// and a boolean to check if the value has been set.
func (o *Unmute) GetCommentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Comment, true
}

// SetComment sets field value
func (o *Unmute) SetComment(v string) {
	o.Comment = v
}

func (o Unmute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["comment"] = o.Comment
	}
	return json.Marshal(toSerialize)
}

type NullableUnmute struct {
	value *Unmute
	isSet bool
}

func (v NullableUnmute) Get() *Unmute {
	return v.value
}

func (v *NullableUnmute) Set(val *Unmute) {
	v.value = val
	v.isSet = true
}

func (v NullableUnmute) IsSet() bool {
	return v.isSet
}

func (v *NullableUnmute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnmute(val *Unmute) *NullableUnmute {
	return &NullableUnmute{value: val, isSet: true}
}

func (v NullableUnmute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnmute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


