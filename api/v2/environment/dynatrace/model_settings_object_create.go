/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// SettingsObjectCreate Configuration of a new settings object.
type SettingsObjectCreate struct {
	// The version of the schema on which the object is based.
	SchemaVersion *string `json:"schemaVersion,omitempty"`
	// The position of the new object. The new object will be added after the specified one.   If `null`, the new object will be placed in the last position.   If set to empty string, the new object will be placed in the first position.   Only applicable for objects based on schemas with ordered objects (schema's **ordered** parameter is set to `true`).
	InsertAfter *string `json:"insertAfter,omitempty"`
	// The scope that the object targets.
	Scope string `json:"scope"`
	// The schema on which the object is based.
	SchemaId string `json:"schemaId"`
	// The value of the setting.    It defines the actual values of settings' parameters.   The actual content depends on the object's schema.
	Value map[string]interface{} `json:"value"`
}

// NewSettingsObjectCreate instantiates a new SettingsObjectCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingsObjectCreate(scope string, schemaId string, value map[string]interface{}) *SettingsObjectCreate {
	this := SettingsObjectCreate{}
	this.Scope = scope
	this.SchemaId = schemaId
	this.Value = value
	return &this
}

// NewSettingsObjectCreateWithDefaults instantiates a new SettingsObjectCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingsObjectCreateWithDefaults() *SettingsObjectCreate {
	this := SettingsObjectCreate{}
	return &this
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *SettingsObjectCreate) GetSchemaVersion() string {
	if o == nil || o.SchemaVersion == nil {
		var ret string
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObjectCreate) GetSchemaVersionOk() (*string, bool) {
	if o == nil || o.SchemaVersion == nil {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *SettingsObjectCreate) HasSchemaVersion() bool {
	if o != nil && o.SchemaVersion != nil {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given string and assigns it to the SchemaVersion field.
func (o *SettingsObjectCreate) SetSchemaVersion(v string) {
	o.SchemaVersion = &v
}

// GetInsertAfter returns the InsertAfter field value if set, zero value otherwise.
func (o *SettingsObjectCreate) GetInsertAfter() string {
	if o == nil || o.InsertAfter == nil {
		var ret string
		return ret
	}
	return *o.InsertAfter
}

// GetInsertAfterOk returns a tuple with the InsertAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingsObjectCreate) GetInsertAfterOk() (*string, bool) {
	if o == nil || o.InsertAfter == nil {
		return nil, false
	}
	return o.InsertAfter, true
}

// HasInsertAfter returns a boolean if a field has been set.
func (o *SettingsObjectCreate) HasInsertAfter() bool {
	if o != nil && o.InsertAfter != nil {
		return true
	}

	return false
}

// SetInsertAfter gets a reference to the given string and assigns it to the InsertAfter field.
func (o *SettingsObjectCreate) SetInsertAfter(v string) {
	o.InsertAfter = &v
}

// GetScope returns the Scope field value
func (o *SettingsObjectCreate) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *SettingsObjectCreate) GetScopeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *SettingsObjectCreate) SetScope(v string) {
	o.Scope = v
}

// GetSchemaId returns the SchemaId field value
func (o *SettingsObjectCreate) GetSchemaId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value
// and a boolean to check if the value has been set.
func (o *SettingsObjectCreate) GetSchemaIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SchemaId, true
}

// SetSchemaId sets field value
func (o *SettingsObjectCreate) SetSchemaId(v string) {
	o.SchemaId = v
}

// GetValue returns the Value field value
func (o *SettingsObjectCreate) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SettingsObjectCreate) GetValueOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SettingsObjectCreate) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o SettingsObjectCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SchemaVersion != nil {
		toSerialize["schemaVersion"] = o.SchemaVersion
	}
	if o.InsertAfter != nil {
		toSerialize["insertAfter"] = o.InsertAfter
	}
	if true {
		toSerialize["scope"] = o.Scope
	}
	if true {
		toSerialize["schemaId"] = o.SchemaId
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableSettingsObjectCreate struct {
	value *SettingsObjectCreate
	isSet bool
}

func (v NullableSettingsObjectCreate) Get() *SettingsObjectCreate {
	return v.value
}

func (v *NullableSettingsObjectCreate) Set(val *SettingsObjectCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingsObjectCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingsObjectCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingsObjectCreate(val *SettingsObjectCreate) *NullableSettingsObjectCreate {
	return &NullableSettingsObjectCreate{value: val, isSet: true}
}

func (v NullableSettingsObjectCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingsObjectCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


