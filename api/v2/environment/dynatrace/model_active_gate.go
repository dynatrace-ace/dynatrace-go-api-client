/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ActiveGate Parameters of the ActiveGate.
type ActiveGate struct {
	// The ID of the ActiveGate.
	Id *string `json:"id,omitempty"`
	// A list of network addresses of the ActiveGate.
	NetworkAddresses *[]string `json:"networkAddresses,omitempty"`
	// A list of Load Balancer addresses of the ActiveGate.
	LoadBalancerAddresses *[]string `json:"loadBalancerAddresses,omitempty"`
	// The OS type that the ActiveGate is running on.
	OsType *string `json:"osType,omitempty"`
	// The current status of auto-updates of the ActiveGate.
	AutoUpdateStatus *string `json:"autoUpdateStatus,omitempty"`
	// The timestamp since when the ActiveGate is offline.    The `null` value means the ActiveGate is online.
	OfflineSince *int64 `json:"offlineSince,omitempty"`
	// The current version of the ActiveGate in the `<major>.<minor>.<revision>.<timestamp>` format.
	Version *string `json:"version,omitempty"`
	// The type of the ActiveGate.
	Type *string `json:"type,omitempty"`
	// The name of the host the ActiveGate is running on.
	Hostname *string `json:"hostname,omitempty"`
	// The ID of the main environment for a multi-environment ActiveGate.
	MainEnvironment *string `json:"mainEnvironment,omitempty"`
	// A list of environments (specified by IDs) the ActiveGate can connect to.
	Environments *[]string `json:"environments,omitempty"`
	AutoUpdateSettings *ActiveGateAutoUpdateConfig `json:"autoUpdateSettings,omitempty"`
	// The network zone of the ActiveGate.
	NetworkZone *string `json:"networkZone,omitempty"`
	// The group of the ActiveGate.
	Group *string `json:"group,omitempty"`
	// A list of modules of the ActiveGate.
	Modules *[]ActiveGateModule `json:"modules,omitempty"`
	// ActiveGate is deployed in container (`true`) or not (`false`).
	Containerized *bool `json:"containerized,omitempty"`
}

// NewActiveGate instantiates a new ActiveGate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveGate() *ActiveGate {
	this := ActiveGate{}
	return &this
}

// NewActiveGateWithDefaults instantiates a new ActiveGate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveGateWithDefaults() *ActiveGate {
	this := ActiveGate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ActiveGate) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ActiveGate) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ActiveGate) SetId(v string) {
	o.Id = &v
}

// GetNetworkAddresses returns the NetworkAddresses field value if set, zero value otherwise.
func (o *ActiveGate) GetNetworkAddresses() []string {
	if o == nil || o.NetworkAddresses == nil {
		var ret []string
		return ret
	}
	return *o.NetworkAddresses
}

// GetNetworkAddressesOk returns a tuple with the NetworkAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetNetworkAddressesOk() (*[]string, bool) {
	if o == nil || o.NetworkAddresses == nil {
		return nil, false
	}
	return o.NetworkAddresses, true
}

// HasNetworkAddresses returns a boolean if a field has been set.
func (o *ActiveGate) HasNetworkAddresses() bool {
	if o != nil && o.NetworkAddresses != nil {
		return true
	}

	return false
}

// SetNetworkAddresses gets a reference to the given []string and assigns it to the NetworkAddresses field.
func (o *ActiveGate) SetNetworkAddresses(v []string) {
	o.NetworkAddresses = &v
}

// GetLoadBalancerAddresses returns the LoadBalancerAddresses field value if set, zero value otherwise.
func (o *ActiveGate) GetLoadBalancerAddresses() []string {
	if o == nil || o.LoadBalancerAddresses == nil {
		var ret []string
		return ret
	}
	return *o.LoadBalancerAddresses
}

// GetLoadBalancerAddressesOk returns a tuple with the LoadBalancerAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetLoadBalancerAddressesOk() (*[]string, bool) {
	if o == nil || o.LoadBalancerAddresses == nil {
		return nil, false
	}
	return o.LoadBalancerAddresses, true
}

// HasLoadBalancerAddresses returns a boolean if a field has been set.
func (o *ActiveGate) HasLoadBalancerAddresses() bool {
	if o != nil && o.LoadBalancerAddresses != nil {
		return true
	}

	return false
}

// SetLoadBalancerAddresses gets a reference to the given []string and assigns it to the LoadBalancerAddresses field.
func (o *ActiveGate) SetLoadBalancerAddresses(v []string) {
	o.LoadBalancerAddresses = &v
}

// GetOsType returns the OsType field value if set, zero value otherwise.
func (o *ActiveGate) GetOsType() string {
	if o == nil || o.OsType == nil {
		var ret string
		return ret
	}
	return *o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetOsTypeOk() (*string, bool) {
	if o == nil || o.OsType == nil {
		return nil, false
	}
	return o.OsType, true
}

// HasOsType returns a boolean if a field has been set.
func (o *ActiveGate) HasOsType() bool {
	if o != nil && o.OsType != nil {
		return true
	}

	return false
}

// SetOsType gets a reference to the given string and assigns it to the OsType field.
func (o *ActiveGate) SetOsType(v string) {
	o.OsType = &v
}

// GetAutoUpdateStatus returns the AutoUpdateStatus field value if set, zero value otherwise.
func (o *ActiveGate) GetAutoUpdateStatus() string {
	if o == nil || o.AutoUpdateStatus == nil {
		var ret string
		return ret
	}
	return *o.AutoUpdateStatus
}

// GetAutoUpdateStatusOk returns a tuple with the AutoUpdateStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetAutoUpdateStatusOk() (*string, bool) {
	if o == nil || o.AutoUpdateStatus == nil {
		return nil, false
	}
	return o.AutoUpdateStatus, true
}

// HasAutoUpdateStatus returns a boolean if a field has been set.
func (o *ActiveGate) HasAutoUpdateStatus() bool {
	if o != nil && o.AutoUpdateStatus != nil {
		return true
	}

	return false
}

// SetAutoUpdateStatus gets a reference to the given string and assigns it to the AutoUpdateStatus field.
func (o *ActiveGate) SetAutoUpdateStatus(v string) {
	o.AutoUpdateStatus = &v
}

// GetOfflineSince returns the OfflineSince field value if set, zero value otherwise.
func (o *ActiveGate) GetOfflineSince() int64 {
	if o == nil || o.OfflineSince == nil {
		var ret int64
		return ret
	}
	return *o.OfflineSince
}

// GetOfflineSinceOk returns a tuple with the OfflineSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetOfflineSinceOk() (*int64, bool) {
	if o == nil || o.OfflineSince == nil {
		return nil, false
	}
	return o.OfflineSince, true
}

// HasOfflineSince returns a boolean if a field has been set.
func (o *ActiveGate) HasOfflineSince() bool {
	if o != nil && o.OfflineSince != nil {
		return true
	}

	return false
}

// SetOfflineSince gets a reference to the given int64 and assigns it to the OfflineSince field.
func (o *ActiveGate) SetOfflineSince(v int64) {
	o.OfflineSince = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ActiveGate) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ActiveGate) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ActiveGate) SetVersion(v string) {
	o.Version = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ActiveGate) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ActiveGate) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ActiveGate) SetType(v string) {
	o.Type = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *ActiveGate) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *ActiveGate) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *ActiveGate) SetHostname(v string) {
	o.Hostname = &v
}

// GetMainEnvironment returns the MainEnvironment field value if set, zero value otherwise.
func (o *ActiveGate) GetMainEnvironment() string {
	if o == nil || o.MainEnvironment == nil {
		var ret string
		return ret
	}
	return *o.MainEnvironment
}

// GetMainEnvironmentOk returns a tuple with the MainEnvironment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetMainEnvironmentOk() (*string, bool) {
	if o == nil || o.MainEnvironment == nil {
		return nil, false
	}
	return o.MainEnvironment, true
}

// HasMainEnvironment returns a boolean if a field has been set.
func (o *ActiveGate) HasMainEnvironment() bool {
	if o != nil && o.MainEnvironment != nil {
		return true
	}

	return false
}

// SetMainEnvironment gets a reference to the given string and assigns it to the MainEnvironment field.
func (o *ActiveGate) SetMainEnvironment(v string) {
	o.MainEnvironment = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *ActiveGate) GetEnvironments() []string {
	if o == nil || o.Environments == nil {
		var ret []string
		return ret
	}
	return *o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetEnvironmentsOk() (*[]string, bool) {
	if o == nil || o.Environments == nil {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *ActiveGate) HasEnvironments() bool {
	if o != nil && o.Environments != nil {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *ActiveGate) SetEnvironments(v []string) {
	o.Environments = &v
}

// GetAutoUpdateSettings returns the AutoUpdateSettings field value if set, zero value otherwise.
func (o *ActiveGate) GetAutoUpdateSettings() ActiveGateAutoUpdateConfig {
	if o == nil || o.AutoUpdateSettings == nil {
		var ret ActiveGateAutoUpdateConfig
		return ret
	}
	return *o.AutoUpdateSettings
}

// GetAutoUpdateSettingsOk returns a tuple with the AutoUpdateSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetAutoUpdateSettingsOk() (*ActiveGateAutoUpdateConfig, bool) {
	if o == nil || o.AutoUpdateSettings == nil {
		return nil, false
	}
	return o.AutoUpdateSettings, true
}

// HasAutoUpdateSettings returns a boolean if a field has been set.
func (o *ActiveGate) HasAutoUpdateSettings() bool {
	if o != nil && o.AutoUpdateSettings != nil {
		return true
	}

	return false
}

// SetAutoUpdateSettings gets a reference to the given ActiveGateAutoUpdateConfig and assigns it to the AutoUpdateSettings field.
func (o *ActiveGate) SetAutoUpdateSettings(v ActiveGateAutoUpdateConfig) {
	o.AutoUpdateSettings = &v
}

// GetNetworkZone returns the NetworkZone field value if set, zero value otherwise.
func (o *ActiveGate) GetNetworkZone() string {
	if o == nil || o.NetworkZone == nil {
		var ret string
		return ret
	}
	return *o.NetworkZone
}

// GetNetworkZoneOk returns a tuple with the NetworkZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetNetworkZoneOk() (*string, bool) {
	if o == nil || o.NetworkZone == nil {
		return nil, false
	}
	return o.NetworkZone, true
}

// HasNetworkZone returns a boolean if a field has been set.
func (o *ActiveGate) HasNetworkZone() bool {
	if o != nil && o.NetworkZone != nil {
		return true
	}

	return false
}

// SetNetworkZone gets a reference to the given string and assigns it to the NetworkZone field.
func (o *ActiveGate) SetNetworkZone(v string) {
	o.NetworkZone = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *ActiveGate) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *ActiveGate) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *ActiveGate) SetGroup(v string) {
	o.Group = &v
}

// GetModules returns the Modules field value if set, zero value otherwise.
func (o *ActiveGate) GetModules() []ActiveGateModule {
	if o == nil || o.Modules == nil {
		var ret []ActiveGateModule
		return ret
	}
	return *o.Modules
}

// GetModulesOk returns a tuple with the Modules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetModulesOk() (*[]ActiveGateModule, bool) {
	if o == nil || o.Modules == nil {
		return nil, false
	}
	return o.Modules, true
}

// HasModules returns a boolean if a field has been set.
func (o *ActiveGate) HasModules() bool {
	if o != nil && o.Modules != nil {
		return true
	}

	return false
}

// SetModules gets a reference to the given []ActiveGateModule and assigns it to the Modules field.
func (o *ActiveGate) SetModules(v []ActiveGateModule) {
	o.Modules = &v
}

// GetContainerized returns the Containerized field value if set, zero value otherwise.
func (o *ActiveGate) GetContainerized() bool {
	if o == nil || o.Containerized == nil {
		var ret bool
		return ret
	}
	return *o.Containerized
}

// GetContainerizedOk returns a tuple with the Containerized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveGate) GetContainerizedOk() (*bool, bool) {
	if o == nil || o.Containerized == nil {
		return nil, false
	}
	return o.Containerized, true
}

// HasContainerized returns a boolean if a field has been set.
func (o *ActiveGate) HasContainerized() bool {
	if o != nil && o.Containerized != nil {
		return true
	}

	return false
}

// SetContainerized gets a reference to the given bool and assigns it to the Containerized field.
func (o *ActiveGate) SetContainerized(v bool) {
	o.Containerized = &v
}

func (o ActiveGate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.NetworkAddresses != nil {
		toSerialize["networkAddresses"] = o.NetworkAddresses
	}
	if o.LoadBalancerAddresses != nil {
		toSerialize["loadBalancerAddresses"] = o.LoadBalancerAddresses
	}
	if o.OsType != nil {
		toSerialize["osType"] = o.OsType
	}
	if o.AutoUpdateStatus != nil {
		toSerialize["autoUpdateStatus"] = o.AutoUpdateStatus
	}
	if o.OfflineSince != nil {
		toSerialize["offlineSince"] = o.OfflineSince
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.MainEnvironment != nil {
		toSerialize["mainEnvironment"] = o.MainEnvironment
	}
	if o.Environments != nil {
		toSerialize["environments"] = o.Environments
	}
	if o.AutoUpdateSettings != nil {
		toSerialize["autoUpdateSettings"] = o.AutoUpdateSettings
	}
	if o.NetworkZone != nil {
		toSerialize["networkZone"] = o.NetworkZone
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.Modules != nil {
		toSerialize["modules"] = o.Modules
	}
	if o.Containerized != nil {
		toSerialize["containerized"] = o.Containerized
	}
	return json.Marshal(toSerialize)
}

type NullableActiveGate struct {
	value *ActiveGate
	isSet bool
}

func (v NullableActiveGate) Get() *ActiveGate {
	return v.value
}

func (v *NullableActiveGate) Set(val *ActiveGate) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveGate) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveGate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveGate(val *ActiveGate) *NullableActiveGate {
	return &NullableActiveGate{value: val, isSet: true}
}

func (v NullableActiveGate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveGate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


