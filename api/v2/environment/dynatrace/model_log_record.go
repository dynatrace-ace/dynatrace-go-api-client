/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
	"time"
)

// LogRecord A single log record.
type LogRecord struct {
	// Type of event
	EventType *string `json:"eventType,omitempty"`
	// Additional columns of the log record.
	AdditionalColumns *map[string]string `json:"additionalColumns,omitempty"`
	// The timestamp of the log record.
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// The content of the log record.
	Content *string `json:"content,omitempty"`
	// The log status (based on the log level).
	Status *string `json:"status,omitempty"`
}

// NewLogRecord instantiates a new LogRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogRecord() *LogRecord {
	this := LogRecord{}
	return &this
}

// NewLogRecordWithDefaults instantiates a new LogRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogRecordWithDefaults() *LogRecord {
	this := LogRecord{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *LogRecord) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecord) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *LogRecord) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *LogRecord) SetEventType(v string) {
	o.EventType = &v
}

// GetAdditionalColumns returns the AdditionalColumns field value if set, zero value otherwise.
func (o *LogRecord) GetAdditionalColumns() map[string]string {
	if o == nil || o.AdditionalColumns == nil {
		var ret map[string]string
		return ret
	}
	return *o.AdditionalColumns
}

// GetAdditionalColumnsOk returns a tuple with the AdditionalColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecord) GetAdditionalColumnsOk() (*map[string]string, bool) {
	if o == nil || o.AdditionalColumns == nil {
		return nil, false
	}
	return o.AdditionalColumns, true
}

// HasAdditionalColumns returns a boolean if a field has been set.
func (o *LogRecord) HasAdditionalColumns() bool {
	if o != nil && o.AdditionalColumns != nil {
		return true
	}

	return false
}

// SetAdditionalColumns gets a reference to the given map[string]string and assigns it to the AdditionalColumns field.
func (o *LogRecord) SetAdditionalColumns(v map[string]string) {
	o.AdditionalColumns = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *LogRecord) GetTimestamp() time.Time {
	if o == nil || o.Timestamp == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecord) GetTimestampOk() (*time.Time, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *LogRecord) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *LogRecord) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *LogRecord) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecord) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *LogRecord) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *LogRecord) SetContent(v string) {
	o.Content = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *LogRecord) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecord) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *LogRecord) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *LogRecord) SetStatus(v string) {
	o.Status = &v
}

func (o LogRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	if o.AdditionalColumns != nil {
		toSerialize["additionalColumns"] = o.AdditionalColumns
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableLogRecord struct {
	value *LogRecord
	isSet bool
}

func (v NullableLogRecord) Get() *LogRecord {
	return v.value
}

func (v *NullableLogRecord) Set(val *LogRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableLogRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableLogRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogRecord(val *LogRecord) *NullableLogRecord {
	return &NullableLogRecord{value: val, isSet: true}
}

func (v NullableLogRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


