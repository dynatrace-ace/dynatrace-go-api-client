/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ManagementZone A short representation of a management zone.
type ManagementZone struct {
	// The name of the management zone.
	Name *string `json:"name,omitempty"`
	// The ID of the management zone.
	Id *string `json:"id,omitempty"`
}

// NewManagementZone instantiates a new ManagementZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagementZone() *ManagementZone {
	this := ManagementZone{}
	return &this
}

// NewManagementZoneWithDefaults instantiates a new ManagementZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagementZoneWithDefaults() *ManagementZone {
	this := ManagementZone{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ManagementZone) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementZone) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ManagementZone) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ManagementZone) SetName(v string) {
	o.Name = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ManagementZone) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagementZone) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ManagementZone) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ManagementZone) SetId(v string) {
	o.Id = &v
}

func (o ManagementZone) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableManagementZone struct {
	value *ManagementZone
	isSet bool
}

func (v NullableManagementZone) Get() *ManagementZone {
	return v.value
}

func (v *NullableManagementZone) Set(val *ManagementZone) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementZone) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementZone(val *ManagementZone) *NullableManagementZone {
	return &NullableManagementZone{value: val, isSet: true}
}

func (v NullableManagementZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


