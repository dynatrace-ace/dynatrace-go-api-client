/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// LogRecordsList A list of retrieved log records.
type LogRecordsList struct {
	// A list of retrieved log records.
	Results *[]LogRecord `json:"results,omitempty"`
	// The total number of records in a slice.
	SliceSize *int64 `json:"sliceSize,omitempty"`
	// The cursor for the next slice of log records.
	NextSliceKey *string `json:"nextSliceKey,omitempty"`
}

// NewLogRecordsList instantiates a new LogRecordsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogRecordsList() *LogRecordsList {
	this := LogRecordsList{}
	return &this
}

// NewLogRecordsListWithDefaults instantiates a new LogRecordsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogRecordsListWithDefaults() *LogRecordsList {
	this := LogRecordsList{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *LogRecordsList) GetResults() []LogRecord {
	if o == nil || o.Results == nil {
		var ret []LogRecord
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecordsList) GetResultsOk() (*[]LogRecord, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *LogRecordsList) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []LogRecord and assigns it to the Results field.
func (o *LogRecordsList) SetResults(v []LogRecord) {
	o.Results = &v
}

// GetSliceSize returns the SliceSize field value if set, zero value otherwise.
func (o *LogRecordsList) GetSliceSize() int64 {
	if o == nil || o.SliceSize == nil {
		var ret int64
		return ret
	}
	return *o.SliceSize
}

// GetSliceSizeOk returns a tuple with the SliceSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecordsList) GetSliceSizeOk() (*int64, bool) {
	if o == nil || o.SliceSize == nil {
		return nil, false
	}
	return o.SliceSize, true
}

// HasSliceSize returns a boolean if a field has been set.
func (o *LogRecordsList) HasSliceSize() bool {
	if o != nil && o.SliceSize != nil {
		return true
	}

	return false
}

// SetSliceSize gets a reference to the given int64 and assigns it to the SliceSize field.
func (o *LogRecordsList) SetSliceSize(v int64) {
	o.SliceSize = &v
}

// GetNextSliceKey returns the NextSliceKey field value if set, zero value otherwise.
func (o *LogRecordsList) GetNextSliceKey() string {
	if o == nil || o.NextSliceKey == nil {
		var ret string
		return ret
	}
	return *o.NextSliceKey
}

// GetNextSliceKeyOk returns a tuple with the NextSliceKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogRecordsList) GetNextSliceKeyOk() (*string, bool) {
	if o == nil || o.NextSliceKey == nil {
		return nil, false
	}
	return o.NextSliceKey, true
}

// HasNextSliceKey returns a boolean if a field has been set.
func (o *LogRecordsList) HasNextSliceKey() bool {
	if o != nil && o.NextSliceKey != nil {
		return true
	}

	return false
}

// SetNextSliceKey gets a reference to the given string and assigns it to the NextSliceKey field.
func (o *LogRecordsList) SetNextSliceKey(v string) {
	o.NextSliceKey = &v
}

func (o LogRecordsList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	if o.SliceSize != nil {
		toSerialize["sliceSize"] = o.SliceSize
	}
	if o.NextSliceKey != nil {
		toSerialize["nextSliceKey"] = o.NextSliceKey
	}
	return json.Marshal(toSerialize)
}

type NullableLogRecordsList struct {
	value *LogRecordsList
	isSet bool
}

func (v NullableLogRecordsList) Get() *LogRecordsList {
	return v.value
}

func (v *NullableLogRecordsList) Set(val *LogRecordsList) {
	v.value = val
	v.isSet = true
}

func (v NullableLogRecordsList) IsSet() bool {
	return v.isSet
}

func (v *NullableLogRecordsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogRecordsList(val *LogRecordsList) *NullableLogRecordsList {
	return &NullableLogRecordsList{value: val, isSet: true}
}

func (v NullableLogRecordsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogRecordsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


