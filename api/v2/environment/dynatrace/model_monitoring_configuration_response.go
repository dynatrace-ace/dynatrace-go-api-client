/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MonitoringConfigurationResponse struct for MonitoringConfigurationResponse
type MonitoringConfigurationResponse struct {
	// The identifier of the new configuration
	ObjectId *string `json:"objectId,omitempty"`
	// The HTTP Status code
	Code *int32 `json:"code,omitempty"`
}

// NewMonitoringConfigurationResponse instantiates a new MonitoringConfigurationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringConfigurationResponse() *MonitoringConfigurationResponse {
	this := MonitoringConfigurationResponse{}
	return &this
}

// NewMonitoringConfigurationResponseWithDefaults instantiates a new MonitoringConfigurationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringConfigurationResponseWithDefaults() *MonitoringConfigurationResponse {
	this := MonitoringConfigurationResponse{}
	return &this
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *MonitoringConfigurationResponse) GetObjectId() string {
	if o == nil || o.ObjectId == nil {
		var ret string
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringConfigurationResponse) GetObjectIdOk() (*string, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *MonitoringConfigurationResponse) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given string and assigns it to the ObjectId field.
func (o *MonitoringConfigurationResponse) SetObjectId(v string) {
	o.ObjectId = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *MonitoringConfigurationResponse) GetCode() int32 {
	if o == nil || o.Code == nil {
		var ret int32
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringConfigurationResponse) GetCodeOk() (*int32, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *MonitoringConfigurationResponse) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given int32 and assigns it to the Code field.
func (o *MonitoringConfigurationResponse) SetCode(v int32) {
	o.Code = &v
}

func (o MonitoringConfigurationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectId != nil {
		toSerialize["objectId"] = o.ObjectId
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	return json.Marshal(toSerialize)
}

type NullableMonitoringConfigurationResponse struct {
	value *MonitoringConfigurationResponse
	isSet bool
}

func (v NullableMonitoringConfigurationResponse) Get() *MonitoringConfigurationResponse {
	return v.value
}

func (v *NullableMonitoringConfigurationResponse) Set(val *MonitoringConfigurationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringConfigurationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringConfigurationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringConfigurationResponse(val *MonitoringConfigurationResponse) *NullableMonitoringConfigurationResponse {
	return &NullableMonitoringConfigurationResponse{value: val, isSet: true}
}

func (v NullableMonitoringConfigurationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringConfigurationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


