/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ExtensionEventDto A list of extension events.
type ExtensionEventDto struct {
	// Timestamp of the latest event
	Timestamp *string `json:"timestamp,omitempty"`
	// Severity of the latest event
	Severity *string `json:"severity,omitempty"`
	// Content
	Content *string `json:"content,omitempty"`
}

// NewExtensionEventDto instantiates a new ExtensionEventDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionEventDto() *ExtensionEventDto {
	this := ExtensionEventDto{}
	return &this
}

// NewExtensionEventDtoWithDefaults instantiates a new ExtensionEventDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionEventDtoWithDefaults() *ExtensionEventDto {
	this := ExtensionEventDto{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ExtensionEventDto) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionEventDto) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ExtensionEventDto) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *ExtensionEventDto) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *ExtensionEventDto) GetSeverity() string {
	if o == nil || o.Severity == nil {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionEventDto) GetSeverityOk() (*string, bool) {
	if o == nil || o.Severity == nil {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *ExtensionEventDto) HasSeverity() bool {
	if o != nil && o.Severity != nil {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *ExtensionEventDto) SetSeverity(v string) {
	o.Severity = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ExtensionEventDto) GetContent() string {
	if o == nil || o.Content == nil {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionEventDto) GetContentOk() (*string, bool) {
	if o == nil || o.Content == nil {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ExtensionEventDto) HasContent() bool {
	if o != nil && o.Content != nil {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ExtensionEventDto) SetContent(v string) {
	o.Content = &v
}

func (o ExtensionEventDto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	if o.Content != nil {
		toSerialize["content"] = o.Content
	}
	return json.Marshal(toSerialize)
}

type NullableExtensionEventDto struct {
	value *ExtensionEventDto
	isSet bool
}

func (v NullableExtensionEventDto) Get() *ExtensionEventDto {
	return v.value
}

func (v *NullableExtensionEventDto) Set(val *ExtensionEventDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionEventDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionEventDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionEventDto(val *ExtensionEventDto) *NullableExtensionEventDto {
	return &NullableExtensionEventDto{value: val, isSet: true}
}

func (v NullableExtensionEventDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionEventDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


