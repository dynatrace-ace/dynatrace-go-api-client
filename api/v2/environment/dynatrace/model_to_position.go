/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// ToPosition The TO position of a relationship.
type ToPosition struct {
	// A list of monitored entity types that can occupy the TO position.
	ToTypes *[]string `json:"toTypes,omitempty"`
	// The ID of the relationship.
	Id *string `json:"id,omitempty"`
}

// NewToPosition instantiates a new ToPosition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToPosition() *ToPosition {
	this := ToPosition{}
	return &this
}

// NewToPositionWithDefaults instantiates a new ToPosition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToPositionWithDefaults() *ToPosition {
	this := ToPosition{}
	return &this
}

// GetToTypes returns the ToTypes field value if set, zero value otherwise.
func (o *ToPosition) GetToTypes() []string {
	if o == nil || o.ToTypes == nil {
		var ret []string
		return ret
	}
	return *o.ToTypes
}

// GetToTypesOk returns a tuple with the ToTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToPosition) GetToTypesOk() (*[]string, bool) {
	if o == nil || o.ToTypes == nil {
		return nil, false
	}
	return o.ToTypes, true
}

// HasToTypes returns a boolean if a field has been set.
func (o *ToPosition) HasToTypes() bool {
	if o != nil && o.ToTypes != nil {
		return true
	}

	return false
}

// SetToTypes gets a reference to the given []string and assigns it to the ToTypes field.
func (o *ToPosition) SetToTypes(v []string) {
	o.ToTypes = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ToPosition) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToPosition) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ToPosition) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ToPosition) SetId(v string) {
	o.Id = &v
}

func (o ToPosition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ToTypes != nil {
		toSerialize["toTypes"] = o.ToTypes
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableToPosition struct {
	value *ToPosition
	isSet bool
}

func (v NullableToPosition) Get() *ToPosition {
	return v.value
}

func (v *NullableToPosition) Set(val *ToPosition) {
	v.value = val
	v.isSet = true
}

func (v NullableToPosition) IsSet() bool {
	return v.isSet
}

func (v *NullableToPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToPosition(val *ToPosition) *NullableToPosition {
	return &NullableToPosition{value: val, isSet: true}
}

func (v NullableToPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


