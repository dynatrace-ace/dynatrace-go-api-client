/*
 * Dynatrace Environment API
 *
 *  Documentation of the Dynatrace Environment API v2. Resources here generally supersede those in v1. Migration of resources from v1 is in progress.   If you miss a resource, consider using the Dynatrace Environment API v1. To read about use cases and examples, see [Dynatrace Documentation](https://dt-url.net/2u23k1k) .  Notes about compatibility: * Operations marked as early adopter or preview may be changed in non-compatible ways, although we try to avoid this. * We may add new enum constants without incrementing the API version; thus, clients need to handle unknown enum constants gracefully.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynatrace

import (
	"encoding/json"
)

// MetricSeries Data points per dimension of a metric.   The data is represented by two arrays of the same length: **timestamps** and **values**. Entries of the same index from both arrays form a timestamped data point.
type MetricSeries struct {
	DimensionMap map[string]string `json:"dimensionMap"`
	// A list of timestamps of data points.   The value of data point for each time from this array is located in **values** array at the same index.
	Timestamps *[]int64 `json:"timestamps,omitempty"`
	// The ordered list of dimensions to which the data point list belongs.    Each metric can have a certain number of dimensions. Dimensions exceeding this number are aggregated into one, which is shown as `null` here.
	Dimensions *[]string `json:"dimensions,omitempty"`
	// A list of values of data points.   The timestamp of data point for each value from this array is located in **timestamps** array at the same index.
	Values *[]float64 `json:"values,omitempty"`
}

// NewMetricSeries instantiates a new MetricSeries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricSeries(dimensionMap map[string]string) *MetricSeries {
	this := MetricSeries{}
	this.DimensionMap = dimensionMap
	return &this
}

// NewMetricSeriesWithDefaults instantiates a new MetricSeries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricSeriesWithDefaults() *MetricSeries {
	this := MetricSeries{}
	return &this
}

// GetDimensionMap returns the DimensionMap field value
func (o *MetricSeries) GetDimensionMap() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.DimensionMap
}

// GetDimensionMapOk returns a tuple with the DimensionMap field value
// and a boolean to check if the value has been set.
func (o *MetricSeries) GetDimensionMapOk() (*map[string]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DimensionMap, true
}

// SetDimensionMap sets field value
func (o *MetricSeries) SetDimensionMap(v map[string]string) {
	o.DimensionMap = v
}

// GetTimestamps returns the Timestamps field value if set, zero value otherwise.
func (o *MetricSeries) GetTimestamps() []int64 {
	if o == nil || o.Timestamps == nil {
		var ret []int64
		return ret
	}
	return *o.Timestamps
}

// GetTimestampsOk returns a tuple with the Timestamps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSeries) GetTimestampsOk() (*[]int64, bool) {
	if o == nil || o.Timestamps == nil {
		return nil, false
	}
	return o.Timestamps, true
}

// HasTimestamps returns a boolean if a field has been set.
func (o *MetricSeries) HasTimestamps() bool {
	if o != nil && o.Timestamps != nil {
		return true
	}

	return false
}

// SetTimestamps gets a reference to the given []int64 and assigns it to the Timestamps field.
func (o *MetricSeries) SetTimestamps(v []int64) {
	o.Timestamps = &v
}

// GetDimensions returns the Dimensions field value if set, zero value otherwise.
func (o *MetricSeries) GetDimensions() []string {
	if o == nil || o.Dimensions == nil {
		var ret []string
		return ret
	}
	return *o.Dimensions
}

// GetDimensionsOk returns a tuple with the Dimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSeries) GetDimensionsOk() (*[]string, bool) {
	if o == nil || o.Dimensions == nil {
		return nil, false
	}
	return o.Dimensions, true
}

// HasDimensions returns a boolean if a field has been set.
func (o *MetricSeries) HasDimensions() bool {
	if o != nil && o.Dimensions != nil {
		return true
	}

	return false
}

// SetDimensions gets a reference to the given []string and assigns it to the Dimensions field.
func (o *MetricSeries) SetDimensions(v []string) {
	o.Dimensions = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *MetricSeries) GetValues() []float64 {
	if o == nil || o.Values == nil {
		var ret []float64
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetricSeries) GetValuesOk() (*[]float64, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *MetricSeries) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []float64 and assigns it to the Values field.
func (o *MetricSeries) SetValues(v []float64) {
	o.Values = &v
}

func (o MetricSeries) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dimensionMap"] = o.DimensionMap
	}
	if o.Timestamps != nil {
		toSerialize["timestamps"] = o.Timestamps
	}
	if o.Dimensions != nil {
		toSerialize["dimensions"] = o.Dimensions
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableMetricSeries struct {
	value *MetricSeries
	isSet bool
}

func (v NullableMetricSeries) Get() *MetricSeries {
	return v.value
}

func (v *NullableMetricSeries) Set(val *MetricSeries) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricSeries) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricSeries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricSeries(val *MetricSeries) *NullableMetricSeries {
	return &NullableMetricSeries{value: val, isSet: true}
}

func (v NullableMetricSeries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricSeries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


